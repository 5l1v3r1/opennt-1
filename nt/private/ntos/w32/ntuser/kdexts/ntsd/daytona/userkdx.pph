





























































































#pragma once















#pragma pack(push,8)
























































typedef enum _EXCEPTION_DISPOSITION {
    ExceptionContinueExecution,
    ExceptionContinueSearch,
    ExceptionNestedException,
    ExceptionCollidedUnwind
} EXCEPTION_DISPOSITION;











struct _EXCEPTION_RECORD;
struct _CONTEXT;

EXCEPTION_DISPOSITION __cdecl _except_handler (
    struct _EXCEPTION_RECORD *ExceptionRecord,
    void * EstablisherFrame,
    struct _CONTEXT *ContextRecord,
    void * DispatcherContext
    );









































unsigned long __cdecl _exception_code(void);
void *        __cdecl _exception_info(void);
int           __cdecl _abnormal_termination(void);



















#pragma pack(pop)




















#pragma once















#pragma pack(push,8)















typedef char *	va_list;















































































































#pragma pack(pop)











































#pragma once





























































typedef unsigned short wchar_t;





typedef wchar_t wint_t;
typedef wchar_t wctype_t;



































































				












__declspec(dllimport) int __cdecl _isctype(int, int);

__declspec(dllimport) int __cdecl isalpha(int);
__declspec(dllimport) int __cdecl isupper(int);
__declspec(dllimport) int __cdecl islower(int);
__declspec(dllimport) int __cdecl isdigit(int);
__declspec(dllimport) int __cdecl isxdigit(int);
__declspec(dllimport) int __cdecl isspace(int);
__declspec(dllimport) int __cdecl ispunct(int);
__declspec(dllimport) int __cdecl isalnum(int);
__declspec(dllimport) int __cdecl isprint(int);
__declspec(dllimport) int __cdecl isgraph(int);
__declspec(dllimport) int __cdecl iscntrl(int);
__declspec(dllimport) int __cdecl toupper(int);
__declspec(dllimport) int __cdecl tolower(int);
__declspec(dllimport) int __cdecl _tolower(int);
__declspec(dllimport) int __cdecl _toupper(int);
__declspec(dllimport) int __cdecl __isascii(int);
__declspec(dllimport) int __cdecl __toascii(int);
__declspec(dllimport) int __cdecl __iscsymf(int);
__declspec(dllimport) int __cdecl __iscsym(int);










__declspec(dllimport) int __cdecl iswalpha(wint_t);
__declspec(dllimport) int __cdecl iswupper(wint_t);
__declspec(dllimport) int __cdecl iswlower(wint_t);
__declspec(dllimport) int __cdecl iswdigit(wint_t);
__declspec(dllimport) int __cdecl iswxdigit(wint_t);
__declspec(dllimport) int __cdecl iswspace(wint_t);
__declspec(dllimport) int __cdecl iswpunct(wint_t);
__declspec(dllimport) int __cdecl iswalnum(wint_t);
__declspec(dllimport) int __cdecl iswprint(wint_t);
__declspec(dllimport) int __cdecl iswgraph(wint_t);
__declspec(dllimport) int __cdecl iswcntrl(wint_t);
__declspec(dllimport) int __cdecl iswascii(wint_t);
__declspec(dllimport) int __cdecl isleadbyte(int);

__declspec(dllimport) wchar_t __cdecl towupper(wchar_t);
__declspec(dllimport) wchar_t __cdecl towlower(wchar_t);

__declspec(dllimport) int __cdecl iswctype(wint_t, wctype_t);


__declspec(dllimport) int __cdecl is_wctype(wint_t, wctype_t);



































































































































































































typedef void *PVOID;    
































typedef char CHAR;
typedef short SHORT;
typedef long LONG;






typedef wchar_t WCHAR;    

typedef WCHAR *PWCHAR;
typedef WCHAR *LPWCH, *PWCH;
typedef const WCHAR *LPCWCH, *PCWCH;
typedef WCHAR *NWPSTR;
typedef WCHAR *LPWSTR, *PWSTR;

typedef const WCHAR *LPCWSTR, *PCWSTR;




typedef CHAR *PCHAR;
typedef CHAR *LPCH, *PCH;

typedef const CHAR *LPCCH, *PCCH;
typedef CHAR *NPSTR;
typedef CHAR *LPSTR, *PSTR;
typedef const CHAR *LPCSTR, *PCSTR;





















typedef char TCHAR, *PTCHAR;
typedef unsigned char TUCHAR, *PTUCHAR;



typedef LPSTR LPTCH, PTCH;
typedef LPSTR PTSTR, LPTSTR;
typedef LPCSTR LPCTSTR;








typedef double DOUBLE;

typedef struct _QUAD {              
    double  DoNotUseThisField;      
} QUAD;                             
                                    
                                    





typedef SHORT *PSHORT;  
typedef LONG *PLONG;    
typedef QUAD *PQUAD;








typedef unsigned char UCHAR;
typedef unsigned short USHORT;
typedef unsigned long ULONG;
typedef QUAD UQUAD;





typedef UCHAR *PUCHAR;
typedef USHORT *PUSHORT;
typedef ULONG *PULONG;
typedef UQUAD *PUQUAD;





typedef signed char SCHAR;
typedef SCHAR *PSCHAR;














typedef void *HANDLE;





typedef HANDLE *PHANDLE;





typedef UCHAR  FCHAR;
typedef USHORT FSHORT;
typedef ULONG  FLONG;















typedef char CCHAR;          
typedef short CSHORT;
typedef ULONG CLONG;

typedef CCHAR *PCCHAR;
typedef CSHORT *PCSHORT;
typedef CLONG *PCLONG;







typedef ULONG LCID;         
typedef PULONG PLCID;       
typedef USHORT LANGID;      





typedef ULONG LOGICAL;
typedef ULONG *PLOGICAL;






typedef LONG NTSTATUS;
  
typedef NTSTATUS *PNTSTATUS;
  
















































































typedef __int64 LONGLONG;
typedef unsigned __int64 ULONGLONG;







typedef LONGLONG *PLONGLONG;
typedef ULONGLONG *PULONGLONG;



typedef LONGLONG USN;




typedef union _LARGE_INTEGER {
    struct {
        ULONG LowPart;
        LONG HighPart;
    };
    struct {
        ULONG LowPart;
        LONG HighPart;
    } u;

    LONGLONG QuadPart;
} LARGE_INTEGER;

typedef LARGE_INTEGER *PLARGE_INTEGER;





typedef union _ULARGE_INTEGER {
    struct {
        ULONG LowPart;
        ULONG HighPart;
    };
    struct {
        ULONG LowPart;
        ULONG HighPart;
    } u;

    ULONGLONG QuadPart;
} ULARGE_INTEGER;

typedef ULARGE_INTEGER *PULARGE_INTEGER;







typedef struct _LUID {
    ULONG LowPart;
    LONG HighPart;
} LUID, *PLUID;








typedef LARGE_INTEGER PHYSICAL_ADDRESS, *PPHYSICAL_ADDRESS; 





































































































ULONGLONG
__stdcall
Int64ShllMod32 (
    ULONGLONG Value,
    ULONG ShiftCount
    );

LONGLONG
__stdcall
Int64ShraMod32 (
    LONGLONG Value,
    ULONG ShiftCount
    );

ULONGLONG
__stdcall
Int64ShrlMod32 (
    ULONGLONG Value,
    ULONG ShiftCount
    );

#pragma warning(disable:4035)               

__inline ULONGLONG
__stdcall
Int64ShllMod32 (
    ULONGLONG Value,
    ULONG ShiftCount
    )
{
    __asm    {
        mov     ecx, ShiftCount
        mov     eax, dword ptr [Value]
        mov     edx, dword ptr [Value+4]
        shld    edx, eax, cl
        shl     eax, cl
    }
}

__inline LONGLONG
__stdcall
Int64ShraMod32 (
    LONGLONG Value,
    ULONG ShiftCount
    )
{
    __asm {
        mov     ecx, ShiftCount
        mov     eax, dword ptr [Value]
        mov     edx, dword ptr [Value+4]
        shrd    eax, edx, cl
        sar     edx, cl
    }
}

__inline ULONGLONG
__stdcall
Int64ShrlMod32 (
    ULONGLONG Value,
    ULONG ShiftCount
    )
{
    __asm    {
        mov     ecx, ShiftCount
        mov     eax, dword ptr [Value]
        mov     edx, dword ptr [Value+4]
        shrd    eax, edx, cl
        shr     edx, cl
    }
}

#pragma warning(default:4035)







































typedef enum _EVENT_TYPE {
    NotificationEvent,
    SynchronizationEvent
    } EVENT_TYPE;





typedef enum _TIMER_TYPE {
    NotificationTimer,
    SynchronizationTimer
    } TIMER_TYPE;





typedef enum _WAIT_TYPE {
    WaitAll,
    WaitAny
    } WAIT_TYPE;





typedef CHAR *PSZ;
typedef const char *PCSZ;






typedef struct _STRING {
    USHORT Length;
    USHORT MaximumLength;



    PCHAR Buffer;
} STRING;
typedef STRING *PSTRING;

typedef STRING ANSI_STRING;
typedef PSTRING PANSI_STRING;

typedef STRING OEM_STRING;
typedef PSTRING POEM_STRING;





typedef struct _CSTRING {
    USHORT Length;
    USHORT MaximumLength;
    const char *Buffer;
} CSTRING;
typedef CSTRING *PCSTRING;

typedef STRING CANSI_STRING;
typedef PSTRING PCANSI_STRING;






typedef struct _UNICODE_STRING {
    USHORT Length;
    USHORT MaximumLength;



    PWSTR  Buffer;

} UNICODE_STRING;
typedef UNICODE_STRING *PUNICODE_STRING;








typedef UCHAR BOOLEAN;           
typedef BOOLEAN *PBOOLEAN;       









typedef struct _LIST_ENTRY {
   struct _LIST_ENTRY * volatile Flink;
   struct _LIST_ENTRY * volatile Blink;
} LIST_ENTRY, *PLIST_ENTRY, * PRLIST_ENTRY;






typedef struct _SINGLE_LIST_ENTRY {
    struct _SINGLE_LIST_ENTRY *Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY;



















typedef struct _OBJECT_ATTRIBUTES {
    ULONG Length;
    HANDLE RootDirectory;
    PUNICODE_STRING ObjectName;
    ULONG Attributes;
    PVOID SecurityDescriptor;        
    PVOID SecurityQualityOfService;  
} OBJECT_ATTRIBUTES;
typedef OBJECT_ATTRIBUTES *POBJECT_ATTRIBUTES;



















































typedef struct _GUID {          
    ULONG Data1;
    USHORT Data2;
    USHORT Data3;
    UCHAR Data4[8];
} GUID;






typedef struct  _OBJECTID {     
    GUID Lineage;
    ULONG Uniquifier;
} OBJECTID;


















































struct _CONTEXT;
struct _EXCEPTION_RECORD;

typedef
EXCEPTION_DISPOSITION
(*PEXCEPTION_ROUTINE) (
     struct _EXCEPTION_RECORD *ExceptionRecord,
     PVOID EstablisherFrame,
      struct _CONTEXT *ContextRecord,
      PVOID DispatcherContext
    );







typedef UCHAR KIRQL;

typedef KIRQL *PKIRQL;







typedef enum _NT_PRODUCT_TYPE {
    NtProductWinNt = 1,
    NtProductLanManNt,
    NtProductServer
} NT_PRODUCT_TYPE, *PNT_PRODUCT_TYPE;













































































































































































































































































































































  




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































  


















































typedef ULONG KAFFINITY;
typedef KAFFINITY *PKAFFINITY;





typedef LONG KPRIORITY;





typedef ULONG KSPIN_LOCK;  

typedef KSPIN_LOCK *PKSPIN_LOCK;





typedef
void
(*PKINTERRUPT_ROUTINE) (
    void
    );




typedef enum _KPROFILE_SOURCE {
    ProfileTime,
    ProfileAlignmentFixup,
    ProfileTotalIssues,
    ProfilePipelineDry,
    ProfileLoadInstructions,
    ProfilePipelineFrozen,
    ProfileBranchInstructions,
    ProfileTotalNonissues,
    ProfileDcacheMisses,
    ProfileIcacheMisses,
    ProfileCacheMisses,
    ProfileBranchMispredictions,
    ProfileStoreInstructions,
    ProfileFpInstructions,
    ProfileIntegerInstructions,
    Profile2Issue,
    Profile3Issue,
    Profile4Issue,
    ProfileSpecialInstructions,
    ProfileTotalCycles,
    ProfileIcacheIssues,
    ProfileDcacheAccesses,
    ProfileMemoryBarrierCycles,
    ProfileLoadLinkedIssues,
    ProfileMaximum
} KPROFILE_SOURCE;







__declspec(dllimport)
NTSTATUS
__stdcall
NtCallbackReturn (
     PVOID OutputBuffer ,
     ULONG OutputLength,
     NTSTATUS Status
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtW32Call (
     ULONG ApiNumber,
     PVOID InputBuffer,
     ULONG InputLength,
     PVOID *OutputBuffer,
     PULONG OutputLength
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtYieldExecution (
    void
    );









































typedef struct _KSYSTEM_TIME {
    ULONG LowPart;
    LONG High1Time;
    LONG High2Time;
} KSYSTEM_TIME, *PKSYSTEM_TIME;




















typedef struct _DBGKD_CONTROL_REPORT {
    ULONG   Dr6;
    ULONG   Dr7;
    USHORT  InstructionCount;
    USHORT  ReportFlags;
    UCHAR   InstructionStream[16];
    USHORT  SegCs;
    USHORT  SegDs;
    USHORT  SegEs;
    USHORT  SegFs;
    ULONG   EFlags;
} DBGKD_CONTROL_REPORT, *PDBGKD_CONTROL_REPORT;










typedef struct _DBGKD_CONTROL_SET {
    ULONG   TraceFlag;                  
                                        
                                        
    ULONG   Dr7;
    ULONG   CurrentSymbolStart;         
    ULONG   CurrentSymbolEnd;
} DBGKD_CONTROL_SET, *PDBGKD_CONTROL_SET;


















#pragma warning(disable:4164)   
                                

#pragma function(_enable)
#pragma function(_disable)


#pragma warning(default:4164)   
































#pragma warning (disable:4035)        

static _inline struct _TEB * NtCurrentTeb( void ) { __asm mov eax, fs:[0x18] }
#pragma warning (default:4035)        





































typedef struct _EXCEPTION_REGISTRATION_RECORD {
    struct _EXCEPTION_REGISTRATION_RECORD *Next;
    PEXCEPTION_ROUTINE Handler;
} EXCEPTION_REGISTRATION_RECORD;

typedef EXCEPTION_REGISTRATION_RECORD *PEXCEPTION_REGISTRATION_RECORD;
















#pragma warning (disable:4035)        
_inline PVOID GetFiberData( void ) { __asm {
                                        mov eax, fs:[0x10]
                                        mov eax,[eax]
                                        }
                                     }
_inline PVOID GetCurrentFiber( void ) { __asm mov eax, fs:[0x10] }

#pragma warning (default:4035)        


































typedef struct _FLOATING_SAVE_AREA {
    ULONG   ControlWord;
    ULONG   StatusWord;
    ULONG   TagWord;
    ULONG   ErrorOffset;
    ULONG   ErrorSelector;
    ULONG   DataOffset;
    ULONG   DataSelector;
    UCHAR   RegisterArea[80];
    ULONG   Cr0NpxState;
} FLOATING_SAVE_AREA;

typedef FLOATING_SAVE_AREA *PFLOATING_SAVE_AREA;











typedef struct _CONTEXT {

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    ULONG ContextFlags;

    
    
    
    
    

    ULONG   Dr0;
    ULONG   Dr1;
    ULONG   Dr2;
    ULONG   Dr3;
    ULONG   Dr6;
    ULONG   Dr7;

    
    
    
    

    FLOATING_SAVE_AREA FloatSave;

    
    
    
    

    ULONG   SegGs;
    ULONG   SegFs;
    ULONG   SegEs;
    ULONG   SegDs;

    
    
    
    

    ULONG   Edi;
    ULONG   Esi;
    ULONG   Ebx;
    ULONG   Edx;
    ULONG   Ecx;
    ULONG   Eax;

    
    
    
    

    ULONG   Ebp;
    ULONG   Eip;
    ULONG   SegCs;              
    ULONG   EFlags;             
    ULONG   Esp;
    ULONG   SegSs;

} CONTEXT;



typedef CONTEXT *PCONTEXT;























































typedef struct _LDT_ENTRY {
    USHORT  LimitLow;
    USHORT  BaseLow;
    union {
        struct {
            UCHAR   BaseMid;
            UCHAR   Flags1;     
            UCHAR   Flags2;     
            UCHAR   BaseHi;
        } Bytes;
        struct {
            ULONG   BaseMid : 8;
            ULONG   Type : 5;
            ULONG   Dpl : 2;
            ULONG   Pres : 1;
            ULONG   LimitHi : 4;
            ULONG   Sys : 1;
            ULONG   Reserved_0 : 1;
            ULONG   Default_Big : 1;
            ULONG   Granularity : 1;
            ULONG   BaseHi : 8;
        } Bits;
    } HighWord;
} LDT_ENTRY, *PLDT_ENTRY;








typedef struct _LDT_INFORMATION {
    ULONG Start;
    ULONG Length;
    LDT_ENTRY LdtEntries[1];
} PROCESS_LDT_INFORMATION, *PPROCESS_LDT_INFORMATION;






typedef struct _LDT_SIZE {
    ULONG Length;
} PROCESS_LDT_SIZE, *PPROCESS_LDT_SIZE;








typedef struct _DESCRIPTOR_TABLE_ENTRY {
    ULONG Selector;
    LDT_ENTRY Descriptor;
} DESCRIPTOR_TABLE_ENTRY, *PDESCRIPTOR_TABLE_ENTRY;











void
RtlCaptureContext (
     PCONTEXT ContextRecord
    );












































































typedef PVOID PACCESS_TOKEN;            





typedef PVOID PSECURITY_DESCRIPTOR;     





typedef PVOID PSID;     













































typedef ULONG ACCESS_MASK;
typedef ACCESS_MASK *PACCESS_MASK;





























































typedef struct _GENERIC_MAPPING {
    ACCESS_MASK GenericRead;
    ACCESS_MASK GenericWrite;
    ACCESS_MASK GenericExecute;
    ACCESS_MASK GenericAll;
} GENERIC_MAPPING;
typedef GENERIC_MAPPING *PGENERIC_MAPPING;







































#pragma warning(disable:4103)

#pragma pack(push)

#pragma pack(4)






typedef struct _LUID_AND_ATTRIBUTES {
    LUID Luid;
    ULONG Attributes;
    } LUID_AND_ATTRIBUTES, * PLUID_AND_ATTRIBUTES;
typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];
typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY;




























#pragma warning(disable:4103)

#pragma pack(pop)













































typedef struct _SID_IDENTIFIER_AUTHORITY {
    UCHAR Value[6];
} SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY;





typedef struct _SID {
   UCHAR Revision;
   UCHAR SubAuthorityCount;
   SID_IDENTIFIER_AUTHORITY IdentifierAuthority;



   ULONG SubAuthority[1];

} SID, *PISID;





                                                

typedef enum _SID_NAME_USE {
    SidTypeUser = 1,
    SidTypeGroup,
    SidTypeDomain,
    SidTypeAlias,
    SidTypeWellKnownGroup,
    SidTypeDeletedAccount,
    SidTypeInvalid,
    SidTypeUnknown
} SID_NAME_USE, *PSID_NAME_USE;

typedef struct _SID_AND_ATTRIBUTES {
    PSID Sid;
    ULONG Attributes;
    } SID_AND_ATTRIBUTES, * PSID_AND_ATTRIBUTES;

typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];
typedef SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY;






































































































































































































































typedef struct _ACL {
    UCHAR AclRevision;
    UCHAR Sbz1;
    USHORT AclSize;
    USHORT AceCount;
    USHORT Sbz2;
} ACL;
typedef ACL *PACL;





















typedef struct _ACE_HEADER {
    UCHAR AceType;
    UCHAR AceFlags;
    USHORT AceSize;
} ACE_HEADER;
typedef ACE_HEADER *PACE_HEADER;

















































































typedef struct _ACCESS_ALLOWED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    ULONG SidStart;
} ACCESS_ALLOWED_ACE;

typedef ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;

typedef struct _ACCESS_DENIED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    ULONG SidStart;
} ACCESS_DENIED_ACE;
typedef ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;

typedef struct _SYSTEM_AUDIT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    ULONG SidStart;
} SYSTEM_AUDIT_ACE;
typedef SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;

typedef struct _SYSTEM_ALARM_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    ULONG SidStart;
} SYSTEM_ALARM_ACE;
typedef SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE;




























typedef struct _COMPOUND_ACCESS_ALLOWED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    USHORT CompoundAceType;
    USHORT Reserved;
    ULONG SidStart;
} COMPOUND_ACCESS_ALLOWED_ACE;

typedef COMPOUND_ACCESS_ALLOWED_ACE *PCOMPOUND_ACCESS_ALLOWED_ACE;
















typedef enum _ACL_INFORMATION_CLASS {
    AclRevisionInformation = 1,
    AclSizeInformation
} ACL_INFORMATION_CLASS;






typedef struct _ACL_REVISION_INFORMATION {
    ULONG AclRevision;
} ACL_REVISION_INFORMATION;
typedef ACL_REVISION_INFORMATION *PACL_REVISION_INFORMATION;





typedef struct _ACL_SIZE_INFORMATION {
    ULONG AceCount;
    ULONG AclBytesInUse;
    ULONG AclBytesFree;
} ACL_SIZE_INFORMATION;
typedef ACL_SIZE_INFORMATION *PACL_SIZE_INFORMATION;




































typedef USHORT SECURITY_DESCRIPTOR_CONTROL, *PSECURITY_DESCRIPTOR_CONTROL;





































































































typedef struct _SECURITY_DESCRIPTOR {
   UCHAR Revision;
   UCHAR Sbz1;
   SECURITY_DESCRIPTOR_CONTROL Control;
   PSID Owner;
   PSID Group;
   PACL Sacl;
   PACL Dacl;
   } SECURITY_DESCRIPTOR, *PISECURITY_DESCRIPTOR;














































































typedef struct _PRIVILEGE_SET {
    ULONG PrivilegeCount;
    ULONG Control;
    LUID_AND_ATTRIBUTES Privilege[1];
    } PRIVILEGE_SET, * PPRIVILEGE_SET;

















































































































typedef enum _SECURITY_IMPERSONATION_LEVEL {
    SecurityAnonymous,
    SecurityIdentification,
    SecurityImpersonation,
    SecurityDelegation
    } SECURITY_IMPERSONATION_LEVEL, * PSECURITY_IMPERSONATION_LEVEL;



























































typedef enum _TOKEN_TYPE {
    TokenPrimary = 1,
    TokenImpersonation
    } TOKEN_TYPE;
typedef TOKEN_TYPE *PTOKEN_TYPE;







typedef enum _TOKEN_INFORMATION_CLASS {
    TokenUser = 1,
    TokenGroups,
    TokenPrivileges,
    TokenOwner,
    TokenPrimaryGroup,
    TokenDefaultDacl,
    TokenSource,
    TokenType,
    TokenImpersonationLevel,
    TokenStatistics
} TOKEN_INFORMATION_CLASS, *PTOKEN_INFORMATION_CLASS;







typedef struct _TOKEN_USER {
    SID_AND_ATTRIBUTES User;
} TOKEN_USER, *PTOKEN_USER;



typedef struct _TOKEN_GROUPS {
    ULONG GroupCount;
    SID_AND_ATTRIBUTES Groups[1];
} TOKEN_GROUPS, *PTOKEN_GROUPS;


typedef struct _TOKEN_PRIVILEGES {
    ULONG PrivilegeCount;
    LUID_AND_ATTRIBUTES Privileges[1];
} TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES;



typedef struct _TOKEN_OWNER {
    PSID Owner;
} TOKEN_OWNER, *PTOKEN_OWNER;


typedef struct _TOKEN_PRIMARY_GROUP {
    PSID PrimaryGroup;
} TOKEN_PRIMARY_GROUP, *PTOKEN_PRIMARY_GROUP;


typedef struct _TOKEN_DEFAULT_DACL {
    PACL DefaultDacl;
} TOKEN_DEFAULT_DACL, *PTOKEN_DEFAULT_DACL;







typedef enum _PROXY_CLASS {
        ProxyFull,
        ProxyService,
        ProxyTree,
        ProxyDirectory
} PROXY_CLASS, * PPROXY_CLASS;


typedef struct _SECURITY_TOKEN_PROXY_DATA {
    ULONG Length;
    PROXY_CLASS ProxyClass;
    UNICODE_STRING PathInfo;
    ACCESS_MASK ContainerMask;
    ACCESS_MASK ObjectMask;
} SECURITY_TOKEN_PROXY_DATA, *PSECURITY_TOKEN_PROXY_DATA;

typedef struct _SECURITY_TOKEN_AUDIT_DATA {
    ULONG Length;
    ACCESS_MASK GrantMask;
    ACCESS_MASK DenyMask;
} SECURITY_TOKEN_AUDIT_DATA, *PSECURITY_TOKEN_AUDIT_DATA;








typedef struct _TOKEN_SOURCE {
    CHAR SourceName[8];
    LUID SourceIdentifier;
} TOKEN_SOURCE, *PTOKEN_SOURCE;



typedef struct _TOKEN_STATISTICS {
    LUID TokenId;
    LUID AuthenticationId;
    LARGE_INTEGER ExpirationTime;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    ULONG DynamicCharged;
    ULONG DynamicAvailable;
    ULONG GroupCount;
    ULONG PrivilegeCount;
    LUID ModifiedId;
} TOKEN_STATISTICS, *PTOKEN_STATISTICS;




typedef struct _TOKEN_CONTROL {
    LUID TokenId;
    LUID AuthenticationId;
    LUID ModifiedId;
    TOKEN_SOURCE TokenSource;
    } TOKEN_CONTROL, *PTOKEN_CONTROL;













typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE,
                    * PSECURITY_CONTEXT_TRACKING_MODE;







typedef struct _SECURITY_QUALITY_OF_SERVICE {
    ULONG Length;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
    BOOLEAN EffectiveOnly;
    } SECURITY_QUALITY_OF_SERVICE, * PSECURITY_QUALITY_OF_SERVICE;







typedef struct _SECURITY_ADVANCED_QUALITY_OF_SERVICE {
    ULONG Length;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
    BOOLEAN EffectiveOnly;
    PSECURITY_TOKEN_PROXY_DATA ProxyData;
    PSECURITY_TOKEN_AUDIT_DATA AuditData;
} SECURITY_ADVANCED_QUALITY_OF_SERVICE, *PSECURITY_ADVANCED_QUALITY_OF_SERVICE;








typedef struct _SE_IMPERSONATION_STATE {
    PACCESS_TOKEN Token;
    BOOLEAN CopyOnOpen;
    BOOLEAN EffectiveOnly;
    SECURITY_IMPERSONATION_LEVEL Level;
} SE_IMPERSONATION_STATE, *PSE_IMPERSONATION_STATE;



















typedef ULONG SECURITY_INFORMATION, *PSECURITY_INFORMATION;













typedef struct _SECURITY_SEED_AND_LENGTH {
    UCHAR Length;
    UCHAR Seed;
} SECURITY_SEED_AND_LENGTH, *PSECURITY_SEED_AND_LENGTH;












__declspec(dllimport)
NTSTATUS
__stdcall
NtAccessCheck (
     PSECURITY_DESCRIPTOR SecurityDescriptor,
     HANDLE ClientToken,
     ACCESS_MASK DesiredAccess,
     PGENERIC_MAPPING GenericMapping,
     PPRIVILEGE_SET PrivilegeSet,
      PULONG PrivilegeSetLength,
     PACCESS_MASK GrantedAccess,
     PNTSTATUS AccessStatus
    );










__declspec(dllimport)
NTSTATUS
__stdcall
NtCreateToken(
     PHANDLE TokenHandle,
     ACCESS_MASK DesiredAccess,
     POBJECT_ATTRIBUTES ObjectAttributes ,
     TOKEN_TYPE TokenType,
     PLUID AuthenticationId,
     PLARGE_INTEGER ExpirationTime,
     PTOKEN_USER User,
     PTOKEN_GROUPS Groups,
     PTOKEN_PRIVILEGES Privileges,
     PTOKEN_OWNER Owner ,
     PTOKEN_PRIMARY_GROUP PrimaryGroup,
     PTOKEN_DEFAULT_DACL DefaultDacl ,
     PTOKEN_SOURCE TokenSource
    );


__declspec(dllimport)
NTSTATUS
__stdcall
NtOpenThreadToken(
     HANDLE ThreadHandle,
     ACCESS_MASK DesiredAccess,
     BOOLEAN OpenAsSelf,
     PHANDLE TokenHandle
    );



__declspec(dllimport)
NTSTATUS
__stdcall
NtOpenProcessToken(
     HANDLE ProcessHandle,
     ACCESS_MASK DesiredAccess,
     PHANDLE TokenHandle
    );



__declspec(dllimport)
NTSTATUS
__stdcall
NtDuplicateToken(
     HANDLE ExistingTokenHandle,
     ACCESS_MASK DesiredAccess,
     POBJECT_ATTRIBUTES ObjectAttributes,
     BOOLEAN EffectiveOnly,
     TOKEN_TYPE TokenType,
     PHANDLE NewTokenHandle
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtQueryInformationToken (
     HANDLE TokenHandle,
     TOKEN_INFORMATION_CLASS TokenInformationClass,
     PVOID TokenInformation,
     ULONG TokenInformationLength,
     PULONG ReturnLength
    );



__declspec(dllimport)
NTSTATUS
__stdcall
NtSetInformationToken (
     HANDLE TokenHandle,
     TOKEN_INFORMATION_CLASS TokenInformationClass,
     PVOID TokenInformation,
     ULONG TokenInformationLength
    );



__declspec(dllimport)
NTSTATUS
__stdcall
NtAdjustPrivilegesToken (
     HANDLE TokenHandle,
     BOOLEAN DisableAllPrivileges,
     PTOKEN_PRIVILEGES NewState ,
     ULONG BufferLength ,
     PTOKEN_PRIVILEGES PreviousState ,
     PULONG ReturnLength
    );



__declspec(dllimport)
NTSTATUS
__stdcall
NtAdjustGroupsToken (
     HANDLE TokenHandle,
     BOOLEAN ResetToDefault,
     PTOKEN_GROUPS NewState ,
     ULONG BufferLength ,
     PTOKEN_GROUPS PreviousState ,
     PULONG ReturnLength
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtPrivilegeCheck (
     HANDLE ClientToken,
      PPRIVILEGE_SET RequiredPrivileges,
     PBOOLEAN Result
    );


__declspec(dllimport)
NTSTATUS
__stdcall
NtAccessCheckAndAuditAlarm (
     PUNICODE_STRING SubsystemName,
     PVOID HandleId,
     PUNICODE_STRING ObjectTypeName,
     PUNICODE_STRING ObjectName,
     PSECURITY_DESCRIPTOR SecurityDescriptor,
     ACCESS_MASK DesiredAccess,
     PGENERIC_MAPPING GenericMapping,
     BOOLEAN ObjectCreation,
     PACCESS_MASK GrantedAccess,
     PNTSTATUS AccessStatus,
     PBOOLEAN GenerateOnClose
    );


__declspec(dllimport)
NTSTATUS
__stdcall
NtOpenObjectAuditAlarm (
     PUNICODE_STRING SubsystemName,
     PVOID HandleId ,
     PUNICODE_STRING ObjectTypeName,
     PUNICODE_STRING ObjectName,
     PSECURITY_DESCRIPTOR SecurityDescriptor ,
     HANDLE ClientToken,
     ACCESS_MASK DesiredAccess,
     ACCESS_MASK GrantedAccess,
     PPRIVILEGE_SET Privileges ,
     BOOLEAN ObjectCreation,
     BOOLEAN AccessGranted,
     PBOOLEAN GenerateOnClose
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtPrivilegeObjectAuditAlarm (
     PUNICODE_STRING SubsystemName,
     PVOID HandleId,
     HANDLE ClientToken,
     ACCESS_MASK DesiredAccess,
     PPRIVILEGE_SET Privileges,
     BOOLEAN AccessGranted
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtCloseObjectAuditAlarm (
     PUNICODE_STRING SubsystemName,
     PVOID HandleId,
     BOOLEAN GenerateOnClose
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtDeleteObjectAuditAlarm (
     PUNICODE_STRING SubsystemName,
     PVOID HandleId,
     BOOLEAN GenerateOnClose
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtPrivilegedServiceAuditAlarm (
     PUNICODE_STRING SubsystemName,
     PUNICODE_STRING ServiceName,
     HANDLE ClientToken,
     PPRIVILEGE_SET Privileges,
     BOOLEAN AccessGranted
    );






































































typedef enum _OBJECT_INFORMATION_CLASS {
    ObjectBasicInformation,
    ObjectNameInformation,
    ObjectTypeInformation,
    ObjectTypesInformation,
    ObjectHandleFlagInformation
} OBJECT_INFORMATION_CLASS;

typedef struct _OBJECT_BASIC_INFORMATION {
    ULONG Attributes;
    ACCESS_MASK GrantedAccess;
    ULONG HandleCount;
    ULONG PointerCount;
    ULONG PagedPoolCharge;
    ULONG NonPagedPoolCharge;
    ULONG Reserved[ 3 ];
    ULONG NameInfoSize;
    ULONG TypeInfoSize;
    ULONG SecurityDescriptorSize;
    LARGE_INTEGER CreationTime;
} OBJECT_BASIC_INFORMATION, *POBJECT_BASIC_INFORMATION;

typedef struct _OBJECT_NAME_INFORMATION {               
    UNICODE_STRING Name;                                
} OBJECT_NAME_INFORMATION, *POBJECT_NAME_INFORMATION;   

typedef struct _OBJECT_TYPE_INFORMATION {
    UNICODE_STRING TypeName;
    ULONG TotalNumberOfObjects;
    ULONG TotalNumberOfHandles;
    ULONG TotalPagedPoolUsage;
    ULONG TotalNonPagedPoolUsage;
    ULONG TotalNamePoolUsage;
    ULONG TotalHandleTableUsage;
    ULONG HighWaterNumberOfObjects;
    ULONG HighWaterNumberOfHandles;
    ULONG HighWaterPagedPoolUsage;
    ULONG HighWaterNonPagedPoolUsage;
    ULONG HighWaterNamePoolUsage;
    ULONG HighWaterHandleTableUsage;
    ULONG InvalidAttributes;
    GENERIC_MAPPING GenericMapping;
    ULONG ValidAccessMask;
    BOOLEAN SecurityRequired;
    BOOLEAN MaintainHandleCount;
    ULONG PoolType;
    ULONG DefaultPagedPoolCharge;
    ULONG DefaultNonPagedPoolCharge;
} OBJECT_TYPE_INFORMATION, *POBJECT_TYPE_INFORMATION;

typedef struct _OBJECT_TYPES_INFORMATION {
    ULONG NumberOfTypes;
    
} OBJECT_TYPES_INFORMATION, *POBJECT_TYPES_INFORMATION;

typedef struct _OBJECT_HANDLE_FLAG_INFORMATION {
    BOOLEAN Inherit;
    BOOLEAN ProtectFromClose;
} OBJECT_HANDLE_FLAG_INFORMATION, *POBJECT_HANDLE_FLAG_INFORMATION;

__declspec(dllimport)
NTSTATUS
__stdcall
NtQueryObject(
     HANDLE Handle,
     OBJECT_INFORMATION_CLASS ObjectInformationClass,
     PVOID ObjectInformation,
     ULONG Length,
     PULONG ReturnLength 
    );


__declspec(dllimport)
NTSTATUS
__stdcall
NtSetInformationObject(
     HANDLE Handle,
     OBJECT_INFORMATION_CLASS ObjectInformationClass,
     PVOID ObjectInformation,
     ULONG ObjectInformationLength
    );


__declspec(dllimport)
NTSTATUS
__stdcall
NtDuplicateObject(
     HANDLE SourceProcessHandle,
     HANDLE SourceHandle,
     HANDLE TargetProcessHandle ,
     PHANDLE TargetHandle ,
     ACCESS_MASK DesiredAccess,
     ULONG HandleAttributes,
     ULONG Options
    );








__declspec(dllimport)
NTSTATUS
__stdcall
NtMakeTemporaryObject(
     HANDLE Handle
    );


__declspec(dllimport)
NTSTATUS
__stdcall
NtSignalAndWaitForSingleObject(
     HANDLE SignalHandle,
     HANDLE WaitHandle,
     BOOLEAN Alertable,
     PLARGE_INTEGER Timeout 
    );


__declspec(dllimport)
NTSTATUS
__stdcall
NtWaitForSingleObject(
     HANDLE Handle,
     BOOLEAN Alertable,
     PLARGE_INTEGER Timeout 
    );


__declspec(dllimport)
NTSTATUS
__stdcall
NtWaitForMultipleObjects(
     ULONG Count,
     HANDLE Handles[],
     WAIT_TYPE WaitType,
     BOOLEAN Alertable,
     PLARGE_INTEGER Timeout 
    );



__declspec(dllimport)
NTSTATUS
__stdcall
NtSetSecurityObject(
     HANDLE Handle,
     SECURITY_INFORMATION SecurityInformation,
     PSECURITY_DESCRIPTOR SecurityDescriptor
    );


__declspec(dllimport)
NTSTATUS
__stdcall
NtQuerySecurityObject(
     HANDLE Handle,
     SECURITY_INFORMATION SecurityInformation,
     PSECURITY_DESCRIPTOR SecurityDescriptor,
     ULONG Length,
     PULONG LengthNeeded
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtClose(
     HANDLE Handle
    );




__declspec(dllimport)
NTSTATUS
__stdcall
NtCreateDirectoryObject(
     PHANDLE DirectoryHandle,
     ACCESS_MASK DesiredAccess,
     POBJECT_ATTRIBUTES ObjectAttributes
    );


__declspec(dllimport)
NTSTATUS
__stdcall
NtOpenDirectoryObject(
     PHANDLE DirectoryHandle,
     ACCESS_MASK DesiredAccess,
     POBJECT_ATTRIBUTES ObjectAttributes
    );

typedef struct _OBJECT_DIRECTORY_INFORMATION {
    UNICODE_STRING Name;
    UNICODE_STRING TypeName;
} OBJECT_DIRECTORY_INFORMATION, *POBJECT_DIRECTORY_INFORMATION;

__declspec(dllimport)
NTSTATUS
__stdcall
NtQueryDirectoryObject(
     HANDLE DirectoryHandle,
     PVOID Buffer,
     ULONG Length,
     BOOLEAN ReturnSingleEntry,
     BOOLEAN RestartScan,
      PULONG Context,
     PULONG ReturnLength 
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtCreateSymbolicLinkObject(
     PHANDLE LinkHandle,
     ACCESS_MASK DesiredAccess,
     POBJECT_ATTRIBUTES ObjectAttributes,
     PUNICODE_STRING LinkTarget
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtOpenSymbolicLinkObject(
     PHANDLE LinkHandle,
     ACCESS_MASK DesiredAccess,
     POBJECT_ATTRIBUTES ObjectAttributes
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtQuerySymbolicLinkObject(
     HANDLE LinkHandle,
      PUNICODE_STRING LinkTarget,
     PULONG ReturnedLength 
    );


































































#pragma warning(disable:4103)

#pragma pack(push)

#pragma pack(4)




































#pragma warning(disable:4103)

#pragma pack(push)

#pragma pack(2)






typedef struct _IMAGE_DOS_HEADER {      
    USHORT e_magic;                     
    USHORT e_cblp;                      
    USHORT e_cp;                        
    USHORT e_crlc;                      
    USHORT e_cparhdr;                   
    USHORT e_minalloc;                  
    USHORT e_maxalloc;                  
    USHORT e_ss;                        
    USHORT e_sp;                        
    USHORT e_csum;                      
    USHORT e_ip;                        
    USHORT e_cs;                        
    USHORT e_lfarlc;                    
    USHORT e_ovno;                      
    USHORT e_res[4];                    
    USHORT e_oemid;                     
    USHORT e_oeminfo;                   
    USHORT e_res2[10];                  
    LONG   e_lfanew;                    
  } IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;

typedef struct _IMAGE_OS2_HEADER {      
    USHORT ne_magic;                    
    CHAR   ne_ver;                      
    CHAR   ne_rev;                      
    USHORT ne_enttab;                   
    USHORT ne_cbenttab;                 
    LONG   ne_crc;                      
    USHORT ne_flags;                    
    USHORT ne_autodata;                 
    USHORT ne_heap;                     
    USHORT ne_stack;                    
    LONG   ne_csip;                     
    LONG   ne_sssp;                     
    USHORT ne_cseg;                     
    USHORT ne_cmod;                     
    USHORT ne_cbnrestab;                
    USHORT ne_segtab;                   
    USHORT ne_rsrctab;                  
    USHORT ne_restab;                   
    USHORT ne_modtab;                   
    USHORT ne_imptab;                   
    LONG   ne_nrestab;                  
    USHORT ne_cmovent;                  
    USHORT ne_align;                    
    USHORT ne_cres;                     
    UCHAR  ne_exetyp;                   
    UCHAR  ne_flagsothers;              
    USHORT ne_pretthunks;               
    USHORT ne_psegrefbytes;             
    USHORT ne_swaparea;                 
    USHORT ne_expver;                   
  } IMAGE_OS2_HEADER, *PIMAGE_OS2_HEADER;

typedef struct _IMAGE_VXD_HEADER {      
    USHORT e32_magic;                   
    UCHAR  e32_border;                  
    UCHAR  e32_worder;                  
    ULONG  e32_level;                   
    USHORT e32_cpu;                     
    USHORT e32_os;                      
    ULONG  e32_ver;                     
    ULONG  e32_mflags;                  
    ULONG  e32_mpages;                  
    ULONG  e32_startobj;                
    ULONG  e32_eip;                     
    ULONG  e32_stackobj;                
    ULONG  e32_esp;                     
    ULONG  e32_pagesize;                
    ULONG  e32_lastpagesize;            
    ULONG  e32_fixupsize;               
    ULONG  e32_fixupsum;                
    ULONG  e32_ldrsize;                 
    ULONG  e32_ldrsum;                  
    ULONG  e32_objtab;                  
    ULONG  e32_objcnt;                  
    ULONG  e32_objmap;                  
    ULONG  e32_itermap;                 
    ULONG  e32_rsrctab;                 
    ULONG  e32_rsrccnt;                 
    ULONG  e32_restab;                  
    ULONG  e32_enttab;                  
    ULONG  e32_dirtab;                  
    ULONG  e32_dircnt;                  
    ULONG  e32_fpagetab;                
    ULONG  e32_frectab;                 
    ULONG  e32_impmod;                  
    ULONG  e32_impmodcnt;               
    ULONG  e32_impproc;                 
    ULONG  e32_pagesum;                 
    ULONG  e32_datapage;                
    ULONG  e32_preload;                 
    ULONG  e32_nrestab;                 
    ULONG  e32_cbnrestab;               
    ULONG  e32_nressum;                 
    ULONG  e32_autodata;                
    ULONG  e32_debuginfo;               
    ULONG  e32_debuglen;                
    ULONG  e32_instpreload;             
    ULONG  e32_instdemand;              
    ULONG  e32_heapsize;                
    UCHAR  e32_res3[12];                
    ULONG  e32_winresoff;
    ULONG  e32_winreslen;
    USHORT e32_devid;                   
    USHORT e32_ddkver;                  
  } IMAGE_VXD_HEADER, *PIMAGE_VXD_HEADER;




























#pragma warning(disable:4103)

#pragma pack(pop)













typedef struct _IMAGE_FILE_HEADER {
    USHORT  Machine;
    USHORT  NumberOfSections;
    ULONG   TimeDateStamp;
    ULONG   PointerToSymbolTable;
    ULONG   NumberOfSymbols;
    USHORT  SizeOfOptionalHeader;
    USHORT  Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;






























typedef struct _IMAGE_DATA_DIRECTORY {
    ULONG   VirtualAddress;
    ULONG   Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;







typedef struct _IMAGE_OPTIONAL_HEADER {
    
    
    

    USHORT  Magic;
    UCHAR   MajorLinkerVersion;
    UCHAR   MinorLinkerVersion;
    ULONG   SizeOfCode;
    ULONG   SizeOfInitializedData;
    ULONG   SizeOfUninitializedData;
    ULONG   AddressOfEntryPoint;
    ULONG   BaseOfCode;
    ULONG   BaseOfData;

    
    
    

    ULONG   ImageBase;
    ULONG   SectionAlignment;
    ULONG   FileAlignment;
    USHORT  MajorOperatingSystemVersion;
    USHORT  MinorOperatingSystemVersion;
    USHORT  MajorImageVersion;
    USHORT  MinorImageVersion;
    USHORT  MajorSubsystemVersion;
    USHORT  MinorSubsystemVersion;
    ULONG   Win32VersionValue;
    ULONG   SizeOfImage;
    ULONG   SizeOfHeaders;
    ULONG   CheckSum;
    USHORT  Subsystem;
    USHORT  DllCharacteristics;
    ULONG   SizeOfStackReserve;
    ULONG   SizeOfStackCommit;
    ULONG   SizeOfHeapReserve;
    ULONG   SizeOfHeapCommit;
    ULONG   LoaderFlags;
    ULONG   NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER, *PIMAGE_OPTIONAL_HEADER;

typedef struct _IMAGE_ROM_OPTIONAL_HEADER {
    USHORT Magic;
    UCHAR  MajorLinkerVersion;
    UCHAR  MinorLinkerVersion;
    ULONG  SizeOfCode;
    ULONG  SizeOfInitializedData;
    ULONG  SizeOfUninitializedData;
    ULONG  AddressOfEntryPoint;
    ULONG  BaseOfCode;
    ULONG  BaseOfData;
    ULONG  BaseOfBss;
    ULONG  GprMask;
    ULONG  CprMask[4];
    ULONG  GpValue;
} IMAGE_ROM_OPTIONAL_HEADER, *PIMAGE_ROM_OPTIONAL_HEADER;








typedef struct _IMAGE_NT_HEADERS {
    ULONG Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER OptionalHeader;
} IMAGE_NT_HEADERS, *PIMAGE_NT_HEADERS;

typedef struct _IMAGE_ROM_HEADERS {
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
} IMAGE_ROM_HEADERS, *PIMAGE_ROM_HEADERS;














































typedef struct _IMAGE_SECTION_HEADER {
    UCHAR   Name[8];
    union {
            ULONG   PhysicalAddress;
            ULONG   VirtualSize;
    } Misc;
    ULONG   VirtualAddress;
    ULONG   SizeOfRawData;
    ULONG   PointerToRawData;
    ULONG   PointerToRelocations;
    ULONG   PointerToLinenumbers;
    USHORT  NumberOfRelocations;
    USHORT  NumberOfLinenumbers;
    ULONG   Characteristics;
} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;

















































































#pragma warning(disable:4103)

#pragma pack(push)

#pragma pack(2)










typedef struct _IMAGE_SYMBOL {
    union {
        UCHAR   ShortName[8];
        struct {
            ULONG   Short;     
            ULONG   Long;      
        } Name;
        PUCHAR  LongName[2];
    } N;
    ULONG   Value;
    SHORT   SectionNumber;
    USHORT  Type;
    UCHAR   StorageClass;
    UCHAR   NumberOfAuxSymbols;
} IMAGE_SYMBOL;
typedef IMAGE_SYMBOL  *PIMAGE_SYMBOL;































































































































typedef union _IMAGE_AUX_SYMBOL {
    struct {
        ULONG    TagIndex;                      
        union {
            struct {
                USHORT  Linenumber;             
                USHORT  Size;                   
            } LnSz;
           ULONG    TotalSize;
        } Misc;
        union {
            struct {                            
                ULONG    PointerToLinenumber;
                ULONG    PointerToNextFunction;
            } Function;
            struct {                            
                USHORT   Dimension[4];
            } Array;
        } FcnAry;
        USHORT  TvIndex;                        
    } Sym;
    struct {
        UCHAR   Name[18];
    } File;
    struct {
        ULONG   Length;                         
        USHORT  NumberOfRelocations;            
        USHORT  NumberOfLinenumbers;            
        ULONG   CheckSum;                       
        SHORT   Number;                         
        UCHAR   Selection;                      
    } Section;
} IMAGE_AUX_SYMBOL;
typedef IMAGE_AUX_SYMBOL  *PIMAGE_AUX_SYMBOL;























typedef struct _IMAGE_RELOCATION {
    union {
        ULONG   VirtualAddress;
        ULONG   RelocCount;             
    };
    ULONG   SymbolTableIndex;
    USHORT  Type;
} IMAGE_RELOCATION;
typedef IMAGE_RELOCATION  *PIMAGE_RELOCATION;




































































































typedef struct _IMAGE_LINENUMBER {
    union {
        ULONG   SymbolTableIndex;               
        ULONG   VirtualAddress;                 
    } Type;
    USHORT  Linenumber;                         
} IMAGE_LINENUMBER;
typedef IMAGE_LINENUMBER  *PIMAGE_LINENUMBER;






























#pragma warning(disable:4103)

#pragma pack(pop)













typedef struct _IMAGE_BASE_RELOCATION {
    ULONG   VirtualAddress;
    ULONG   SizeOfBlock;

} IMAGE_BASE_RELOCATION;
typedef IMAGE_BASE_RELOCATION  * PIMAGE_BASE_RELOCATION;



























typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER {
    UCHAR    Name[16];                          
    UCHAR    Date[12];                          
    UCHAR    UserID[6];                         
    UCHAR    GroupID[6];                        
    UCHAR    Mode[8];                           
    UCHAR    Size[10];                          
    UCHAR    EndHeader[2];                      
} IMAGE_ARCHIVE_MEMBER_HEADER, *PIMAGE_ARCHIVE_MEMBER_HEADER;











typedef struct _IMAGE_EXPORT_DIRECTORY {
    ULONG   Characteristics;
    ULONG   TimeDateStamp;
    USHORT  MajorVersion;
    USHORT  MinorVersion;
    ULONG   Name;
    ULONG   Base;
    ULONG   NumberOfFunctions;
    ULONG   NumberOfNames;
    PULONG  *AddressOfFunctions;
    PULONG  *AddressOfNames;
    PUSHORT *AddressOfNameOrdinals;
} IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;





typedef struct _IMAGE_IMPORT_BY_NAME {
    USHORT  Hint;
    UCHAR   Name[1];
} IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;

typedef struct _IMAGE_THUNK_DATA {
    union {
        PUCHAR ForwarderString;
        PULONG Function;
        ULONG Ordinal;
        PIMAGE_IMPORT_BY_NAME AddressOfData;
    } u1;
} IMAGE_THUNK_DATA;
typedef IMAGE_THUNK_DATA * PIMAGE_THUNK_DATA;





typedef struct _IMAGE_IMPORT_DESCRIPTOR {
    union {
        ULONG   Characteristics;                
        PIMAGE_THUNK_DATA OriginalFirstThunk;   
    };
    ULONG   TimeDateStamp;                  
                                            
                                            
                                            

    ULONG   ForwarderChain;                 
    ULONG   Name;
    PIMAGE_THUNK_DATA FirstThunk;           
} IMAGE_IMPORT_DESCRIPTOR;
typedef IMAGE_IMPORT_DESCRIPTOR  *PIMAGE_IMPORT_DESCRIPTOR;





typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
    ULONG   TimeDateStamp;
    USHORT  OffsetModuleName;
    USHORT  NumberOfModuleForwarderRefs;

} IMAGE_BOUND_IMPORT_DESCRIPTOR,  *PIMAGE_BOUND_IMPORT_DESCRIPTOR;

typedef struct _IMAGE_BOUND_FORWARDER_REF {
    ULONG   TimeDateStamp;
    USHORT  OffsetModuleName;
    USHORT  Reserved;
} IMAGE_BOUND_FORWARDER_REF, *PIMAGE_BOUND_FORWARDER_REF;






typedef void
(__stdcall *PIMAGE_TLS_CALLBACK) (
    PVOID DllHandle,
    ULONG Reason,
    PVOID Reserved
    );

typedef struct _IMAGE_TLS_DIRECTORY {
    ULONG   StartAddressOfRawData;
    ULONG   EndAddressOfRawData;
    PULONG  AddressOfIndex;
    PIMAGE_TLS_CALLBACK *AddressOfCallBacks;
    ULONG   SizeOfZeroFill;
    ULONG   Characteristics;
} IMAGE_TLS_DIRECTORY, *PIMAGE_TLS_DIRECTORY;




















typedef struct _IMAGE_RESOURCE_DIRECTORY {
    ULONG   Characteristics;
    ULONG   TimeDateStamp;
    USHORT  MajorVersion;
    USHORT  MinorVersion;
    USHORT  NumberOfNamedEntries;
    USHORT  NumberOfIdEntries;

} IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;



















typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
    union {
        struct {
            ULONG NameOffset:31;
            ULONG NameIsString:1;
        };
        ULONG   Name;
        USHORT  Id;
    };
    union {
        ULONG   OffsetToData;
        struct {
            ULONG   OffsetToDirectory:31;
            ULONG   DataIsDirectory:1;
        };
    };
} IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY;










typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING {
    USHORT  Length;
    CHAR    NameString[ 1 ];
} IMAGE_RESOURCE_DIRECTORY_STRING, *PIMAGE_RESOURCE_DIRECTORY_STRING;


typedef struct _IMAGE_RESOURCE_DIR_STRING_U {
    USHORT  Length;
    WCHAR   NameString[ 1 ];
} IMAGE_RESOURCE_DIR_STRING_U, *PIMAGE_RESOURCE_DIR_STRING_U;











typedef struct _IMAGE_RESOURCE_DATA_ENTRY {
    ULONG   OffsetToData;
    ULONG   Size;
    ULONG   CodePage;
    ULONG   Reserved;
} IMAGE_RESOURCE_DATA_ENTRY, *PIMAGE_RESOURCE_DATA_ENTRY;





typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY {
    ULONG   Characteristics;
    ULONG   TimeDateStamp;
    USHORT  MajorVersion;
    USHORT  MinorVersion;
    ULONG   GlobalFlagsClear;
    ULONG   GlobalFlagsSet;
    ULONG   CriticalSectionDefaultTimeout;
    ULONG   DeCommitFreeBlockThreshold;
    ULONG   DeCommitTotalFreeThreshold;
    PVOID   LockPrefixTable;
    ULONG   MaximumAllocationSize;
    ULONG   VirtualMemoryThreshold;
    ULONG   ProcessHeapFlags;
    ULONG   ProcessAffinityMask;
    ULONG   Reserved[ 3 ];
} IMAGE_LOAD_CONFIG_DIRECTORY, *PIMAGE_LOAD_CONFIG_DIRECTORY;









typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
    ULONG BeginAddress;
    ULONG EndAddress;
    PVOID ExceptionHandler;
    PVOID HandlerData;
    ULONG PrologEndAddress;
} IMAGE_RUNTIME_FUNCTION_ENTRY, *PIMAGE_RUNTIME_FUNCTION_ENTRY;





typedef struct _IMAGE_DEBUG_DIRECTORY {
    ULONG   Characteristics;
    ULONG   TimeDateStamp;
    USHORT  MajorVersion;
    USHORT  MinorVersion;
    ULONG   Type;
    ULONG   SizeOfData;
    ULONG   AddressOfRawData;
    ULONG   PointerToRawData;
} IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY;

















typedef struct _IMAGE_COFF_SYMBOLS_HEADER {
    ULONG   NumberOfSymbols;
    ULONG   LvaToFirstSymbol;
    ULONG   NumberOfLinenumbers;
    ULONG   LvaToFirstLinenumber;
    ULONG   RvaToFirstByteOfCode;
    ULONG   RvaToLastByteOfCode;
    ULONG   RvaToFirstByteOfData;
    ULONG   RvaToLastByteOfData;
} IMAGE_COFF_SYMBOLS_HEADER, *PIMAGE_COFF_SYMBOLS_HEADER;






typedef struct _FPO_DATA {
    ULONG       ulOffStart;             
    ULONG       cbProcSize;             
    ULONG       cdwLocals;              
    USHORT      cdwParams;              
    USHORT      cbProlog : 8;           
    USHORT      cbRegs   : 3;           
    USHORT      fHasSEH  : 1;           
    USHORT      fUseBP   : 1;           
    USHORT      reserved : 1;           
    USHORT      cbFrame  : 2;           
} FPO_DATA, *PFPO_DATA;





typedef struct _IMAGE_DEBUG_MISC {
    ULONG       DataType;               
    ULONG       Length;                 
                                        
    BOOLEAN     Unicode;                
    UCHAR       Reserved[ 3 ];
    UCHAR       Data[ 1 ];              
} IMAGE_DEBUG_MISC, *PIMAGE_DEBUG_MISC;








typedef struct _IMAGE_FUNCTION_ENTRY {
    ULONG   StartingAddress;
    ULONG   EndingAddress;
    ULONG   EndOfPrologue;
} IMAGE_FUNCTION_ENTRY, *PIMAGE_FUNCTION_ENTRY;





















typedef struct _IMAGE_SEPARATE_DEBUG_HEADER {
    USHORT      Signature;
    USHORT      Flags;
    USHORT      Machine;
    USHORT      Characteristics;
    ULONG       TimeDateStamp;
    ULONG       CheckSum;
    ULONG       ImageBase;
    ULONG       SizeOfImage;
    ULONG       NumberOfSections;
    ULONG       ExportedNamesSize;
    ULONG       DebugDirectorySize;
    ULONG       SectionAlignment;
    ULONG       Reserved[2];
} IMAGE_SEPARATE_DEBUG_HEADER, *PIMAGE_SEPARATE_DEBUG_HEADER;





                                                




























#pragma warning(disable:4103)

#pragma pack(pop)













































































typedef struct _LDR_DATA_TABLE_ENTRY {
    LIST_ENTRY InLoadOrderLinks;
    LIST_ENTRY InMemoryOrderLinks;
    LIST_ENTRY InInitializationOrderLinks;
    PVOID DllBase;
    PVOID EntryPoint;
    ULONG SizeOfImage;
    UNICODE_STRING FullDllName;
    UNICODE_STRING BaseDllName;
    ULONG Flags;
    USHORT LoadCount;
    USHORT TlsIndex;
    union {
        LIST_ENTRY HashLinks;
        struct {
            PVOID SectionPointer;
            ULONG CheckSum;
        };
    };
    ULONG   TimeDateStamp;
} LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;






typedef
BOOLEAN
(*PDLL_INIT_ROUTINE) (
     PVOID DllHandle,
     ULONG Reason,
     PCONTEXT Context 
    );

typedef
BOOLEAN
(*PPROCESS_STARTER_ROUTINE) (
     PVOID RealStartAddress
    );

void
LdrProcessStarterHelper(
     PPROCESS_STARTER_ROUTINE ProcessStarter,
     PVOID RealStartAddress
    );

void
__stdcall
LdrShutdownProcess(
    void
    );

void
__stdcall
LdrShutdownThread(
    void
    );

NTSTATUS
__stdcall
LdrLoadDll(
     PWSTR DllPath ,
     PULONG DllCharacteristics ,
     PUNICODE_STRING DllName,
     PVOID *DllHandle
    );

NTSTATUS
__stdcall
LdrGetDllHandle(
     PWSTR DllPath ,
     PULONG DllCharacteristics ,
     PUNICODE_STRING DllName,
     PVOID *DllHandle
    );

NTSTATUS
__stdcall
LdrUnloadDll(
     PVOID DllHandle
    );

ULONG
__stdcall
LdrRelocateImage (
     PVOID NewBase,
     PUCHAR LoaderName,
     ULONG Success,
     ULONG Conflict,
     ULONG Invalid
    );

PIMAGE_BASE_RELOCATION
__stdcall
LdrProcessRelocationBlock(
     ULONG VA,
     ULONG SizeOfBlock,
     PUSHORT NextOffset,
     LONG Diff
    );

BOOLEAN
__stdcall
LdrVerifyMappedImageMatchesChecksum (
     PVOID BaseAddress,
     ULONG FileLength
    );

typedef
void
(*PLDR_IMPORT_MODULE_CALLBACK)(
     PVOID Parameter,
    PCHAR ModuleName
    );

NTSTATUS
__stdcall
LdrVerifyImageMatchesChecksum (
     HANDLE ImageFileHandle,
     PLDR_IMPORT_MODULE_CALLBACK ImportCallbackRoutine ,
     PVOID ImportCallbackParameter,
     PUSHORT ImageCharacteristics 
    );

NTSTATUS
__stdcall
LdrGetProcedureAddress(
     PVOID DllHandle,
     PANSI_STRING ProcedureName ,
     ULONG ProcedureNumber ,
     PVOID *ProcedureAddress
    );



NTSTATUS
__stdcall
LdrFindResourceDirectory_U(
     PVOID DllHandle,
     PULONG ResourceIdPath,
     ULONG ResourceIdPathLength,
     PIMAGE_RESOURCE_DIRECTORY *ResourceDirectory
    );

NTSTATUS
__stdcall
LdrFindResource_U(
     PVOID DllHandle,
     PULONG ResourceIdPath,
     ULONG ResourceIdPathLength,
     PIMAGE_RESOURCE_DATA_ENTRY *ResourceDataEntry
    );



typedef struct _LDR_ENUM_RESOURCE_ENTRY {
    union {
        ULONG NameOrId;
        PIMAGE_RESOURCE_DIRECTORY_STRING Name;
        struct {
            USHORT Id;
            USHORT NameIsPresent;
        };
    } Path[ 3 ];
    PVOID Data;
    ULONG Size;
    ULONG Reserved;
} LDR_ENUM_RESOURCE_ENTRY, *PLDR_ENUM_RESOURCE_ENTRY;

NTSTATUS
__stdcall
LdrEnumResources(
     PVOID DllHandle,
     PULONG ResourceIdPath,
     ULONG ResourceIdPathLength,
      PULONG NumberOfResources,
     PLDR_ENUM_RESOURCE_ENTRY Resources 
    );

NTSTATUS
__stdcall
LdrAccessResource(
     PVOID DllHandle,
     PIMAGE_RESOURCE_DATA_ENTRY ResourceDataEntry,
     PVOID *Address ,
     PULONG Size 
    );


NTSTATUS
__stdcall
LdrFindEntryForAddress(
     PVOID Address,
     PLDR_DATA_TABLE_ENTRY *TableEntry
    );


NTSTATUS
__stdcall
LdrDisableThreadCalloutsForDll (
     PVOID DllHandle
    );


typedef struct _RTL_PROCESS_MODULE_INFORMATION {
    HANDLE Section;                 
    PVOID MappedBase;
    PVOID ImageBase;
    ULONG ImageSize;
    ULONG Flags;
    USHORT LoadOrderIndex;
    USHORT InitOrderIndex;
    USHORT LoadCount;
    USHORT OffsetToFileName;
    UCHAR  FullPathName[ 256 ];
} RTL_PROCESS_MODULE_INFORMATION, *PRTL_PROCESS_MODULE_INFORMATION;

typedef struct _RTL_PROCESS_MODULES {
    ULONG NumberOfModules;
    RTL_PROCESS_MODULE_INFORMATION Modules[ 1 ];
} RTL_PROCESS_MODULES, *PRTL_PROCESS_MODULES;

NTSTATUS
__stdcall
LdrQueryProcessModuleInformation(
     PRTL_PROCESS_MODULES ModuleInformation,
     ULONG ModuleInformationLength,
     PULONG ReturnLength 
    );

NTSTATUS
__stdcall
LdrQueryImageFileExecutionOptions(
     PUNICODE_STRING ImagePathName,
     PWSTR OptionName,
     ULONG Type,
     PVOID Buffer,
     ULONG BufferSize,
     PULONG ResultSize 
    );




















































































typedef struct _PEB_LDR_DATA {
    ULONG Length;
    BOOLEAN Initialized;
    HANDLE SsHandle;
    LIST_ENTRY InLoadOrderModuleList;
    LIST_ENTRY InMemoryOrderModuleList;
    LIST_ENTRY InInitializationOrderModuleList;
} PEB_LDR_DATA, *PPEB_LDR_DATA;















typedef struct _PEB_FREE_BLOCK {
    struct _PEB_FREE_BLOCK *Next;
    ULONG Size;
} PEB_FREE_BLOCK, *PPEB_FREE_BLOCK;






typedef struct _CLIENT_ID {
    HANDLE UniqueProcess;
    HANDLE UniqueThread;
} CLIENT_ID;
typedef CLIENT_ID *PCLIENT_ID;




typedef struct _PEB {
    BOOLEAN InheritedAddressSpace;      
    BOOLEAN ReadImageFileExecOptions;   
    BOOLEAN BeingDebugged;              
    BOOLEAN SpareBool;                  
    HANDLE Mutant;                      

    PVOID ImageBaseAddress;
    PPEB_LDR_DATA Ldr;
    struct _RTL_USER_PROCESS_PARAMETERS *ProcessParameters;
    PVOID SubSystemData;
    PVOID ProcessHeap;
    PVOID FastPebLock;
    PVOID FastPebLockRoutine;
    PVOID FastPebUnlockRoutine;
    ULONG EnvironmentUpdateCount;
    PVOID KernelCallbackTable;
    HANDLE EventLogSection;
    PVOID EventLog;
    PPEB_FREE_BLOCK FreeList;
    ULONG TlsExpansionCounter;
    PVOID TlsBitmap;
    ULONG TlsBitmapBits[2];         
    PVOID ReadOnlySharedMemoryBase;
    PVOID ReadOnlySharedMemoryHeap;
    PVOID *ReadOnlyStaticServerData;
    PVOID AnsiCodePageData;
    PVOID OemCodePageData;
    PVOID UnicodeCaseTableData;

    
    
    ULONG NumberOfProcessors;
    ULONG NtGlobalFlag;

    
    
    

    LARGE_INTEGER CriticalSectionTimeout;
    ULONG HeapSegmentReserve;
    ULONG HeapSegmentCommit;
    ULONG HeapDeCommitTotalFreeThreshold;
    ULONG HeapDeCommitFreeBlockThreshold;

    
    
    
    
    
    
    

    ULONG NumberOfHeaps;
    ULONG MaximumNumberOfHeaps;
    PVOID *ProcessHeaps;

    
    
    PVOID GdiSharedHandleTable;
    PVOID ProcessStarterHelper;
    PVOID GdiDCAttributeList;
    PVOID LoaderLock;

    
    
    
    

    ULONG OSMajorVersion;
    ULONG OSMinorVersion;
    ULONG OSBuildNumber;
    ULONG OSPlatformId;
    ULONG ImageSubsystem;
    ULONG ImageSubsystemMajorVersion;
    ULONG ImageSubsystemMinorVersion;
    ULONG ImageProcessAffinityMask;
    ULONG GdiHandleBuffer[34];
} PEB, *PPEB;






















typedef struct _NT_TIB {
    struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID SubSystemTib;
    union {
        PVOID FiberData;
        ULONG Version;
    };
    PVOID ArbitraryUserPointer;
    struct _NT_TIB *Self;
} NT_TIB;
typedef NT_TIB *PNT_TIB;








typedef struct _GDI_TEB_BATCH {
    ULONG Offset;
    ULONG HDC;
    ULONG Buffer[310];
} GDI_TEB_BATCH,*PGDI_TEB_BATCH;









typedef struct _TEB {
    NT_TIB NtTib;
    PVOID  EnvironmentPointer;
    CLIENT_ID ClientId;
    PVOID ActiveRpcHandle;
    PVOID ThreadLocalStoragePointer;
    PPEB ProcessEnvironmentBlock;
    ULONG LastErrorValue;
    ULONG CountOfOwnedCriticalSections;
    PVOID CsrClientThread;
    PVOID Win32ThreadInfo;          
    ULONG Win32ClientInfo[31];    
    PVOID WOW32Reserved;           
    LCID CurrentLocale;
    ULONG FpSoftwareStatusRegister;
    PVOID SystemReserved1[54];      
    PVOID Spare1;                   
    NTSTATUS ExceptionCode;         
    UCHAR SpareBytes1[40];
    PVOID SystemReserved2[10];                      
    GDI_TEB_BATCH GdiTebBatch;      
    ULONG gdiRgn;
    ULONG gdiPen;
    ULONG gdiBrush;
    CLIENT_ID RealClientId;
    HANDLE GdiCachedProcessHandle;
    ULONG GdiClientPID;
    ULONG GdiClientTID;
    PVOID GdiThreadLocalInfo;
    PVOID UserReserved[5];          
    PVOID glDispatchTable[280];     
    ULONG glReserved1[26];          
    PVOID glReserved2;              
    PVOID glSectionInfo;            
    PVOID glSection;                
    PVOID glTable;                  
    PVOID glCurrentRC;              
    PVOID glContext;                
    ULONG LastStatusValue;
    UNICODE_STRING StaticUnicodeString;
    WCHAR StaticUnicodeBuffer[261];
    PVOID DeallocationStack;
    PVOID TlsSlots[64];
    LIST_ENTRY TlsLinks;
    PVOID Vdm;
    PVOID ReservedForNtRpc;
    PVOID DbgSsReserved[2];
    ULONG HardErrorsAreDisabled;
    PVOID Instrumentation[16];
    PVOID WinSockData;              
    ULONG GdiBatchCount;
    ULONG Spare2;
    ULONG Spare3;
    ULONG Spare4;
    PVOID ReservedForOle;
    ULONG WaitingOnLoaderLock;
} TEB;
typedef TEB *PTEB;






























typedef struct _Wx86TIB {
    ULONG Size;
    ULONG InitialPc;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID DeallocationStack;
    ULONG   LogFlags;
    PULONG  CallBx86Eip;
    ULONG   InitialSp;
    BOOLEAN UseKnownWx86Dll;
    BOOLEAN EmulateInitialPc;
    BOOLEAN InCpuSimulation;
    UCHAR   SimulationCount;
    BOOLEAN OleStubInvoked;
    BOOLEAN Initialized;
    PEXCEPTION_REGISTRATION_RECORD ExceptionList;
    PVOID   CpuContext;
    PCONTEXT InitialExceptionContext;
} WX86TIB, *PWX86TIB;




































typedef struct _INITIAL_TEB {
    struct {
        PVOID OldStackBase;
        PVOID OldStackLimit;
    } OldInitialTeb;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID StackAllocationBase;
} INITIAL_TEB, *PINITIAL_TEB;







typedef struct _PROCESS_PRIORITY_CLASS {
    BOOLEAN Foreground;
    UCHAR PriorityClass;
} PROCESS_PRIORITY_CLASS, *PPROCESS_PRIORITY_CLASS;







typedef enum _PROCESSINFOCLASS {
    ProcessBasicInformation,
    ProcessQuotaLimits,
    ProcessIoCounters,
    ProcessVmCounters,
    ProcessTimes,
    ProcessBasePriority,
    ProcessRaisePriority,
    ProcessDebugPort,
    ProcessExceptionPort,
    ProcessAccessToken,
    ProcessLdtInformation,
    ProcessLdtSize,
    ProcessDefaultHardErrorMode,
    ProcessIoPortHandlers,          
    ProcessPooledUsageAndLimits,
    ProcessWorkingSetWatch,
    ProcessUserModeIOPL,
    ProcessEnableAlignmentFaultFixup,
    ProcessPriorityClass,
    ProcessWx86Information,
    ProcessHandleCount,
    ProcessAffinityMask,
    ProcessPriorityBoost,
    MaxProcessInfoClass
    } PROCESSINFOCLASS;







typedef enum _THREADINFOCLASS {
    ThreadBasicInformation,
    ThreadTimes,
    ThreadPriority,
    ThreadBasePriority,
    ThreadAffinityMask,
    ThreadImpersonationToken,
    ThreadDescriptorTableEntry,
    ThreadEnableAlignmentFaultFixup,
    ThreadEventPair,
    ThreadQuerySetWin32StartAddress,
    ThreadZeroTlsCell,
    ThreadPerformanceCount,
    ThreadAmILastThread,
    ThreadIdealProcessor,
    ThreadPriorityBoost,
    ThreadSetTlsArrayAddress,
    MaxThreadInfoClass
    } THREADINFOCLASS;























typedef struct _PROCESS_WS_WATCH_INFORMATION {
    PVOID FaultingPc;
    PVOID FaultingVa;
} PROCESS_WS_WATCH_INFORMATION, *PPROCESS_WS_WATCH_INFORMATION;






typedef struct _PROCESS_BASIC_INFORMATION {
    NTSTATUS ExitStatus;
    PPEB PebBaseAddress;
    KAFFINITY AffinityMask;
    KPRIORITY BasePriority;
    ULONG UniqueProcessId;
    ULONG InheritedFromUniqueProcessId;
} PROCESS_BASIC_INFORMATION;
typedef PROCESS_BASIC_INFORMATION *PPROCESS_BASIC_INFORMATION;










typedef struct _QUOTA_LIMITS {
    ULONG PagedPoolLimit;
    ULONG NonPagedPoolLimit;
    ULONG MinimumWorkingSetSize;
    ULONG MaximumWorkingSetSize;
    ULONG PagefileLimit;
    LARGE_INTEGER TimeLimit;
} QUOTA_LIMITS;
typedef QUOTA_LIMITS *PQUOTA_LIMITS;








typedef struct _IO_COUNTERS {
    ULONG ReadOperationCount;
    ULONG WriteOperationCount;
    ULONG OtherOperationCount;
    LARGE_INTEGER ReadTransferCount;
    LARGE_INTEGER WriteTransferCount;
    LARGE_INTEGER OtherTransferCount;
} IO_COUNTERS;
typedef IO_COUNTERS *PIO_COUNTERS;






typedef struct _VM_COUNTERS {
    ULONG PeakVirtualSize;
    ULONG VirtualSize;
    ULONG PageFaultCount;
    ULONG PeakWorkingSetSize;
    ULONG WorkingSetSize;
    ULONG QuotaPeakPagedPoolUsage;
    ULONG QuotaPagedPoolUsage;
    ULONG QuotaPeakNonPagedPoolUsage;
    ULONG QuotaNonPagedPoolUsage;
    ULONG PagefileUsage;
    ULONG PeakPagefileUsage;
} VM_COUNTERS;
typedef VM_COUNTERS *PVM_COUNTERS;






typedef struct _POOLED_USAGE_AND_LIMITS {
    ULONG PeakPagedPoolUsage;
    ULONG PagedPoolUsage;
    ULONG PagedPoolLimit;
    ULONG PeakNonPagedPoolUsage;
    ULONG NonPagedPoolUsage;
    ULONG NonPagedPoolLimit;
    ULONG PeakPagefileUsage;
    ULONG PagefileUsage;
    ULONG PagefileLimit;
} POOLED_USAGE_AND_LIMITS;
typedef POOLED_USAGE_AND_LIMITS *PPOOLED_USAGE_AND_LIMITS;








typedef struct _PROCESS_ACCESS_TOKEN {

    
    
    
    

    HANDLE Token;

    
    
    
    
    
    
    

    HANDLE Thread;

} PROCESS_ACCESS_TOKEN, *PPROCESS_ACCESS_TOKEN;







typedef struct _KERNEL_USER_TIMES {
    LARGE_INTEGER CreateTime;
    LARGE_INTEGER ExitTime;
    LARGE_INTEGER KernelTime;
    LARGE_INTEGER UserTime;
} KERNEL_USER_TIMES;
typedef KERNEL_USER_TIMES *PKERNEL_USER_TIMES;











typedef struct _THREAD_BASIC_INFORMATION {
    NTSTATUS ExitStatus;
    PTEB TebBaseAddress;
    CLIENT_ID ClientId;
    KAFFINITY AffinityMask;
    KPRIORITY Priority;
    LONG BasePriority;
} THREAD_BASIC_INFORMATION;
typedef THREAD_BASIC_INFORMATION *PTHREAD_BASIC_INFORMATION;

typedef struct _FIBER {

    PVOID FiberData;

    
    
    

    struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
    PVOID StackBase;
    PVOID StackLimit;

    
    
    

    PVOID DeallocationStack;

    CONTEXT FiberContext;

} FIBER, *PFIBER;






__declspec(dllimport)
NTSTATUS
__stdcall
NtCreateProcess(
     PHANDLE ProcessHandle,
     ACCESS_MASK DesiredAccess,
     POBJECT_ATTRIBUTES ObjectAttributes ,
     HANDLE ParentProcess,
     BOOLEAN InheritObjectTable,
     HANDLE SectionHandle ,
     HANDLE DebugPort ,
     HANDLE ExceptionPort 
    );


__declspec(dllimport)
NTSTATUS
__stdcall
NtOpenProcess (
     PHANDLE ProcessHandle,
     ACCESS_MASK DesiredAccess,
     POBJECT_ATTRIBUTES ObjectAttributes,
     PCLIENT_ID ClientId 
    );



__declspec(dllimport)
NTSTATUS
__stdcall
NtTerminateProcess(
     HANDLE ProcessHandle ,
     NTSTATUS ExitStatus
    );










__declspec(dllimport)
NTSTATUS
__stdcall
NtQueryInformationProcess(
     HANDLE ProcessHandle,
     PROCESSINFOCLASS ProcessInformationClass,
     PVOID ProcessInformation,
     ULONG ProcessInformationLength,
     PULONG ReturnLength 
    );


__declspec(dllimport)
NTSTATUS
__stdcall
NtSetInformationProcess(
     HANDLE ProcessHandle,
     PROCESSINFOCLASS ProcessInformationClass,
     PVOID ProcessInformation,
     ULONG ProcessInformationLength
    );





__declspec(dllimport)
NTSTATUS
__stdcall
NtCreateThread(
     PHANDLE ThreadHandle,
     ACCESS_MASK DesiredAccess,
     POBJECT_ATTRIBUTES ObjectAttributes ,
     HANDLE ProcessHandle,
     PCLIENT_ID ClientId,
     PCONTEXT ThreadContext,
     PINITIAL_TEB InitialTeb,
     BOOLEAN CreateSuspended
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtOpenThread (
     PHANDLE ThreadHandle,
     ACCESS_MASK DesiredAccess,
     POBJECT_ATTRIBUTES ObjectAttributes,
     PCLIENT_ID ClientId 
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtTerminateThread(
     HANDLE ThreadHandle ,
     NTSTATUS ExitStatus
    );






__declspec(dllimport)
NTSTATUS
__stdcall
NtSuspendThread(
     HANDLE ThreadHandle,
     PULONG PreviousSuspendCount 
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtResumeThread(
     HANDLE ThreadHandle,
     PULONG PreviousSuspendCount 
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtGetContextThread(
     HANDLE ThreadHandle,
      PCONTEXT ThreadContext
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtSetContextThread(
     HANDLE ThreadHandle,
     PCONTEXT ThreadContext
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtQueryInformationThread(
     HANDLE ThreadHandle,
     THREADINFOCLASS ThreadInformationClass,
     PVOID ThreadInformation,
     ULONG ThreadInformationLength,
     PULONG ReturnLength 
    );


__declspec(dllimport)
NTSTATUS
__stdcall
NtSetInformationThread(
     HANDLE ThreadHandle,
     THREADINFOCLASS ThreadInformationClass,
     PVOID ThreadInformation,
     ULONG ThreadInformationLength
    );


__declspec(dllimport)
NTSTATUS
__stdcall
NtAlertThread(
     HANDLE ThreadHandle
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtAlertResumeThread(
     HANDLE ThreadHandle,
     PULONG PreviousSuspendCount 
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtImpersonateThread(
     HANDLE ServerThreadHandle,
     HANDLE ClientThreadHandle,
     PSECURITY_QUALITY_OF_SERVICE SecurityQos
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtTestAlert(
    void
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtRegisterThreadTerminatePort(
     HANDLE PortHandle
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtSetLdtEntries(
     ULONG Selector0,
     ULONG Entry0Low,
     ULONG Entry0Hi,
     ULONG Selector1,
     ULONG Entry1Low,
     ULONG Entry1High
    );

typedef
void
(*PPS_APC_ROUTINE) (
     PVOID ApcArgument1,
     PVOID ApcArgument2,
     PVOID ApcArgument3
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtQueueApcThread(
     HANDLE ThreadHandle,
     PPS_APC_ROUTINE ApcRoutine,
     PVOID ApcArgument1,
     PVOID ApcArgument2,
     PVOID ApcArgument3
    );
































































typedef struct _EXCEPTION_RECORD {
      
    NTSTATUS ExceptionCode;
      
    ULONG ExceptionFlags;
    struct _EXCEPTION_RECORD *ExceptionRecord;
    PVOID ExceptionAddress;
    ULONG NumberParameters;
    ULONG ExceptionInformation[15];
    } EXCEPTION_RECORD;

typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;





typedef struct _EXCEPTION_POINTERS {
    PEXCEPTION_RECORD ExceptionRecord;
    PCONTEXT ContextRecord;
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;










typedef struct _FP_32 {
    ULONG W[1];
} FP_32, *PFP_32;

typedef struct _FP_64 {
    ULONG W[2];
} FP_64, *PFP_64;

typedef struct _FP_80 {
    ULONG W[3];
} FP_80, *PFP_80;

typedef struct _FP_128 {
    ULONG W[4];
} FP_128, *PFP_128;





typedef enum _FP_IEEE_COMPARE_RESULT {
    FpCompareEqual,
    FpCompareGreater,
    FpCompareLess,
    FpCompareUnordered
} FP_IEEE_COMPARE_RESULT;





typedef enum _FP__IEEE_FORMAT {
    FpFormatFp32,
    FpFormatFp64,
    FpFormatFp80,
    FpFormatFp128,
    FpFormatI16,
    FpFormatI32,
    FpFormatI64,
    FpFormatU16,
    FpFormatU32,
    FpFormatU64,
    FpFormatCompare,
    FpFormatString
} FP_IEEE_FORMAT;





typedef enum _FP_IEEE_OPERATION_CODE {
    FpCodeUnspecified,
    FpCodeAdd,
    FpCodeSubtract,
    FpCodeMultiply,
    FpCodeDivide,
    FpCodeSquareRoot,
    FpCodeRemainder,
    FpCodeCompare,
    FpCodeConvert,
    FpCodeRound,
    FpCodeTruncate,
    FpCodeFloor,
    FpCodeCeil,
    FpCodeAcos,
    FpCodeAsin,
    FpCodeAtan,
    FpCodeAtan2,
    FpCodeCabs,
    FpCodeCos,
    FpCodeCosh,
    FpCodeExp,
    FpCodeFabs,
    FpCodeFmod,
    FpCodeFrexp,
    FpCodeHypot,
    FpCodeLdexp,
    FpCodeLog,
    FpCodeLog10,
    FpCodeModf,
    FpCodePow,
    FpCodeSin,
    FpCodeSinh,
    FpCodeTan,
    FpCodeTanh,
    FpCodeY0,
    FpCodeY1,
    FpCodeYn
} FP_OPERATION_CODE;





typedef enum _FP__IEEE_ROUNDING_MODE {
    FpRoundNearest,
    FpRoundMinusInfinity,
    FpRoundPlusInfinity,
    FpRoundChopped
} FP_IEEE_ROUNDING_MODE;





typedef struct _FP_IEEE_VALUE {
    union {
        SHORT I16Value;
        USHORT U16Value;
        LONG I32Value;
        ULONG U32Value;
        PVOID StringValue;
        ULONG CompareValue;
        FP_32 Fp32Value;
        LARGE_INTEGER I64Value;
        ULARGE_INTEGER U64Value;
        FP_64 Fp64Value;
        FP_80 Fp80Value;
        FP_128 Fp128Value;
    } Value;

    struct {
        ULONG RoundingMode : 2;
        ULONG Inexact : 1;
        ULONG Underflow : 1;
        ULONG Overflow : 1;
        ULONG ZeroDivide : 1;
        ULONG InvalidOperation : 1;
        ULONG OperandValid : 1;
        ULONG Format : 4;
        ULONG Precision : 4;
        ULONG Operation : 12;
        ULONG Spare : 3;
        ULONG HardwareException : 1;
    } Control;

} FP_IEEE_VALUE, *PFP_IEEE_VALUE;





























#pragma warning(disable:4103)

#pragma pack(push)

#pragma pack(4)





typedef struct _FP_IEEE_RECORD {
    FP_IEEE_VALUE Operand1;
    FP_IEEE_VALUE Operand2;
    FP_IEEE_VALUE Result;
} FP_IEEE_RECORD, *PFP_IEEE_RECORD;



























#pragma warning(disable:4103)

#pragma pack(pop)













__declspec(dllimport)
BOOLEAN
__stdcall
RtlDispatchException (
     PEXCEPTION_RECORD ExceptionRecord,
     PCONTEXT ContextRecord
    );





__declspec(dllimport)
void
__stdcall
RtlRaiseStatus (
     NTSTATUS Status
    );

__declspec(dllimport)
void
__stdcall
RtlRaiseException (
     PEXCEPTION_RECORD
    );

__declspec(dllimport)
void
__stdcall
RtlUnwind (
     PVOID TargetFrame ,
     PVOID TargetIp ,
     PEXCEPTION_RECORD ExceptionRecord ,
     PVOID ReturnValue
    );


































__declspec(dllimport)
NTSTATUS
__stdcall
NtContinue (
     PCONTEXT ContextRecord,
     BOOLEAN TestAlert
    );





__declspec(dllimport)
NTSTATUS
__stdcall
NtRaiseException (
     PEXCEPTION_RECORD ExceptionRecord,
     PCONTEXT ContextRecord,
     BOOLEAN FirstChance
    );







































typedef struct _PORT_MESSAGE {
    union {
        struct {
            CSHORT DataLength;
            CSHORT TotalLength;
        } s1;
        ULONG Length;
    } u1;
    union {
        struct {
            CSHORT Type;
            CSHORT DataInfoOffset;
        } s2;
        ULONG ZeroInit;
    } u2;
    union {
        CLIENT_ID ClientId;
        double DoNotUseThisField;       
    };
    ULONG MessageId;
    union {
        ULONG ClientViewSize;               
        ULONG CallbackId;                   
    };

} PORT_MESSAGE, *PPORT_MESSAGE;



typedef struct _PORT_DATA_ENTRY {
    PVOID Base;
    ULONG Size;
} PORT_DATA_ENTRY, *PPORT_DATA_ENTRY;

typedef struct _PORT_DATA_INFORMATION {
    ULONG CountDataEntries;
    PORT_DATA_ENTRY DataEntries[1];
} PORT_DATA_INFORMATION, *PPORT_DATA_INFORMATION;























typedef struct _LPC_CLIENT_DIED_MSG {
    PORT_MESSAGE PortMsg;
    LARGE_INTEGER CreateTime;
} LPC_CLIENT_DIED_MSG, *PLPC_CLIENT_DIED_MSG;



typedef struct _PORT_VIEW {
    ULONG Length;
    HANDLE SectionHandle;
    ULONG SectionOffset;
    ULONG ViewSize;
    PVOID ViewBase;
    PVOID ViewRemoteBase;
} PORT_VIEW, *PPORT_VIEW;

typedef struct _REMOTE_PORT_VIEW {
    ULONG Length;
    ULONG ViewSize;
    PVOID ViewBase;
} REMOTE_PORT_VIEW, *PREMOTE_PORT_VIEW;



__declspec(dllimport)
NTSTATUS
__stdcall
NtCreatePort(
     PHANDLE PortHandle,
     POBJECT_ATTRIBUTES ObjectAttributes,
     ULONG MaxConnectionInfoLength,
     ULONG MaxMessageLength,
     ULONG MaxPoolUsage
    );



__declspec(dllimport)
NTSTATUS
__stdcall
NtConnectPort(
     PHANDLE PortHandle,
     PUNICODE_STRING PortName,
     PSECURITY_QUALITY_OF_SERVICE SecurityQos,
      PPORT_VIEW ClientView ,
     PREMOTE_PORT_VIEW ServerView ,
     PULONG MaxMessageLength ,
      PVOID ConnectionInformation ,
      PULONG ConnectionInformationLength 
    );



__declspec(dllimport)
NTSTATUS
__stdcall
NtListenPort(
     HANDLE PortHandle,
     PPORT_MESSAGE ConnectionRequest
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtAcceptConnectPort(
     PHANDLE PortHandle,
     PVOID PortContext,
     PPORT_MESSAGE ConnectionRequest,
     BOOLEAN AcceptConnection,
      PPORT_VIEW ServerView ,
     PREMOTE_PORT_VIEW ClientView 
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtCompleteConnectPort(
     HANDLE PortHandle
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtRequestPort(
     HANDLE PortHandle,
     PPORT_MESSAGE RequestMessage
    );



__declspec(dllimport)
NTSTATUS
__stdcall
NtRequestWaitReplyPort(
     HANDLE PortHandle,
     PPORT_MESSAGE RequestMessage,
     PPORT_MESSAGE ReplyMessage
    );



__declspec(dllimport)
NTSTATUS
__stdcall
NtReplyPort(
     HANDLE PortHandle,
     PPORT_MESSAGE ReplyMessage
    );


__declspec(dllimport)
NTSTATUS
__stdcall
NtReplyWaitReplyPort(
     HANDLE PortHandle,
      PPORT_MESSAGE ReplyMessage
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtReplyWaitReceivePort(
     HANDLE PortHandle,
     PVOID *PortContext ,
     PPORT_MESSAGE ReplyMessage ,
     PPORT_MESSAGE ReceiveMessage
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtImpersonateClientOfPort(
     HANDLE PortHandle,
     PPORT_MESSAGE Message
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtReadRequestData(
     HANDLE PortHandle,
     PPORT_MESSAGE Message,
     ULONG DataEntryIndex,
     PVOID Buffer,
     ULONG BufferSize,
     PULONG NumberOfBytesRead 
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtWriteRequestData(
     HANDLE PortHandle,
     PPORT_MESSAGE Message,
     ULONG DataEntryIndex,
     PVOID Buffer,
     ULONG BufferSize,
     PULONG NumberOfBytesWritten 
    );


typedef enum _PORT_INFORMATION_CLASS {
    PortBasicInformation

,   PortDumpInformation

} PORT_INFORMATION_CLASS;


__declspec(dllimport)
NTSTATUS
__stdcall
NtQueryInformationPort(
     HANDLE PortHandle,
     PORT_INFORMATION_CLASS PortInformationClass,
     PVOID PortInformation,
     ULONG Length,
     PULONG ReturnLength 
    );
























































































































































































































































































typedef enum _FILE_STORAGE_TYPE {
    StorageTypeDefault          = 1,
    StorageTypeDirectory        = 2,
    StorageTypeFile             = 3,
    StorageTypeJunctionPoint    = 5,
    StorageTypeCatalog          = 6,
    StorageTypeStructuredStorage= 7,
    StorageTypeEmbedding        = 8,
    StorageTypeStream           = 9
} FILE_STORAGE_TYPE;











































































































































































































































































typedef struct _IO_STATUS_BLOCK {
    NTSTATUS Status;
    ULONG Information;
} IO_STATUS_BLOCK, *PIO_STATUS_BLOCK;





typedef
void
(*PIO_APC_ROUTINE) (
     PVOID ApcContext,
     PIO_STATUS_BLOCK IoStatusBlock,
     ULONG Reserved
    );









typedef struct _FILE_NOTIFY_INFORMATION {
    ULONG NextEntryOffset;
    ULONG Action;
    ULONG FileNameLength;
    WCHAR FileName[1];
} FILE_NOTIFY_INFORMATION, *PFILE_NOTIFY_INFORMATION;











typedef enum _FILE_INFORMATION_CLASS {
    FileDirectoryInformation = 1,
    FileFullDirectoryInformation,
    FileBothDirectoryInformation,
    FileBasicInformation,
    FileStandardInformation,
    FileInternalInformation,
    FileEaInformation,
    FileAccessInformation,
    FileNameInformation,
    FileRenameInformation,
    FileLinkInformation,
    FileNamesInformation,
    FileDispositionInformation,
    FilePositionInformation,
    FileFullEaInformation,
    FileModeInformation,
    FileAlignmentInformation,
    FileAllInformation,
    FileAllocationInformation,
    FileEndOfFileInformation,
    FileAlternateNameInformation,
    FileStreamInformation,
    FilePipeInformation,
    FilePipeLocalInformation,
    FilePipeRemoteInformation,
    FileMailslotQueryInformation,
    FileMailslotSetInformation,
    FileCompressionInformation,
    FileCopyOnWriteInformation,
    FileCompletionInformation,
    FileMoveClusterInformation,
    FileOleClassIdInformation,
    FileOleStateBitsInformation,
    FileNetworkOpenInformation,
    FileObjectIdInformation,
    FileOleAllInformation,
    FileOleDirectoryInformation,
    FileContentIndexInformation,
    FileInheritContentIndexInformation,
    FileOleInformation,
    FileMaximumInformation
} FILE_INFORMATION_CLASS, *PFILE_INFORMATION_CLASS;






















typedef struct _FILE_DIRECTORY_INFORMATION {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    WCHAR FileName[1];
} FILE_DIRECTORY_INFORMATION, *PFILE_DIRECTORY_INFORMATION;

typedef struct _FILE_FULL_DIR_INFORMATION {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    WCHAR FileName[1];
} FILE_FULL_DIR_INFORMATION, *PFILE_FULL_DIR_INFORMATION;

typedef struct _FILE_BOTH_DIR_INFORMATION {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    CCHAR ShortNameLength;
    WCHAR ShortName[12];
    WCHAR FileName[1];
} FILE_BOTH_DIR_INFORMATION, *PFILE_BOTH_DIR_INFORMATION;

typedef struct _FILE_NAMES_INFORMATION {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    ULONG FileNameLength;
    WCHAR FileName[1];
} FILE_NAMES_INFORMATION, *PFILE_NAMES_INFORMATION;

typedef struct _FILE_OLE_DIR_INFORMATION {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    FILE_STORAGE_TYPE StorageType;
    GUID OleClassId;
    ULONG OleStateBits;
    BOOLEAN ContentIndexDisable;
    BOOLEAN InheritContentIndexDisable;
    WCHAR FileName[1];
} FILE_OLE_DIR_INFORMATION, *PFILE_OLE_DIR_INFORMATION;























































typedef struct _FILE_BASIC_INFORMATION {                    
    LARGE_INTEGER CreationTime;                             
    LARGE_INTEGER LastAccessTime;                           
    LARGE_INTEGER LastWriteTime;                            
    LARGE_INTEGER ChangeTime;                               
    ULONG FileAttributes;                                   
} FILE_BASIC_INFORMATION, *PFILE_BASIC_INFORMATION;         
                                                            
typedef struct _FILE_STANDARD_INFORMATION {                 
    LARGE_INTEGER AllocationSize;                           
    LARGE_INTEGER EndOfFile;                                
    ULONG NumberOfLinks;                                    
    BOOLEAN DeletePending;                                  
    BOOLEAN Directory;                                      
} FILE_STANDARD_INFORMATION, *PFILE_STANDARD_INFORMATION;   
                                                            
typedef struct _FILE_INTERNAL_INFORMATION {
    LARGE_INTEGER IndexNumber;
} FILE_INTERNAL_INFORMATION, *PFILE_INTERNAL_INFORMATION;

typedef struct _FILE_EA_INFORMATION {
    ULONG EaSize;
} FILE_EA_INFORMATION, *PFILE_EA_INFORMATION;

typedef struct _FILE_ACCESS_INFORMATION {
    ACCESS_MASK AccessFlags;
} FILE_ACCESS_INFORMATION, *PFILE_ACCESS_INFORMATION;

typedef struct _FILE_POSITION_INFORMATION {                 
    LARGE_INTEGER CurrentByteOffset;                        
} FILE_POSITION_INFORMATION, *PFILE_POSITION_INFORMATION;   
                                                            
typedef struct _FILE_MODE_INFORMATION {
    ULONG Mode;
} FILE_MODE_INFORMATION, *PFILE_MODE_INFORMATION;

typedef struct _FILE_ALIGNMENT_INFORMATION {                
    ULONG AlignmentRequirement;                             
} FILE_ALIGNMENT_INFORMATION, *PFILE_ALIGNMENT_INFORMATION; 
                                                            
typedef struct _FILE_NAME_INFORMATION {
    ULONG FileNameLength;
    WCHAR FileName[1];
} FILE_NAME_INFORMATION, *PFILE_NAME_INFORMATION;

typedef struct _FILE_ALL_INFORMATION {
    FILE_BASIC_INFORMATION BasicInformation;
    FILE_STANDARD_INFORMATION StandardInformation;
    FILE_INTERNAL_INFORMATION InternalInformation;
    FILE_EA_INFORMATION EaInformation;
    FILE_ACCESS_INFORMATION AccessInformation;
    FILE_POSITION_INFORMATION PositionInformation;
    FILE_MODE_INFORMATION ModeInformation;
    FILE_ALIGNMENT_INFORMATION AlignmentInformation;
    FILE_NAME_INFORMATION NameInformation;
} FILE_ALL_INFORMATION, *PFILE_ALL_INFORMATION;

typedef struct _FILE_NETWORK_OPEN_INFORMATION {                 
    LARGE_INTEGER CreationTime;                                 
    LARGE_INTEGER LastAccessTime;                               
    LARGE_INTEGER LastWriteTime;                                
    LARGE_INTEGER ChangeTime;                                   
    LARGE_INTEGER AllocationSize;                               
    LARGE_INTEGER EndOfFile;                                    
    ULONG FileAttributes;                                       
} FILE_NETWORK_OPEN_INFORMATION, *PFILE_NETWORK_OPEN_INFORMATION;   
                                                                
typedef struct _FILE_ALLOCATION_INFORMATION {
    LARGE_INTEGER AllocationSize;
} FILE_ALLOCATION_INFORMATION, *PFILE_ALLOCATION_INFORMATION;

typedef struct _FILE_COMPRESSION_INFORMATION {
    LARGE_INTEGER CompressedFileSize;
    USHORT CompressionFormat;
    UCHAR CompressionUnitShift;
    UCHAR ChunkShift;
    UCHAR ClusterShift;
    UCHAR Reserved[3];
} FILE_COMPRESSION_INFORMATION, *PFILE_COMPRESSION_INFORMATION;

typedef struct _FILE_COPY_ON_WRITE_INFORMATION {
    BOOLEAN ReplaceIfExists;
    HANDLE RootDirectory;
    ULONG FileNameLength;
    WCHAR FileName[1];
} FILE_COPY_ON_WRITE_INFORMATION, *PFILE_COPY_ON_WRITE_INFORMATION;

typedef struct _FILE_DISPOSITION_INFORMATION {                  
    BOOLEAN DeleteFile;                                         
} FILE_DISPOSITION_INFORMATION, *PFILE_DISPOSITION_INFORMATION; 
                                                                
typedef struct _FILE_END_OF_FILE_INFORMATION {                  
    LARGE_INTEGER EndOfFile;                                    
} FILE_END_OF_FILE_INFORMATION, *PFILE_END_OF_FILE_INFORMATION; 
                                                                
typedef struct _FILE_LINK_INFORMATION {
    BOOLEAN ReplaceIfExists;
    HANDLE RootDirectory;
    ULONG FileNameLength;
    WCHAR FileName[1];
} FILE_LINK_INFORMATION, *PFILE_LINK_INFORMATION;

typedef struct _FILE_MOVE_CLUSTER_INFORMATION {
    ULONG ClusterCount;
    HANDLE RootDirectory;
    ULONG FileNameLength;
    WCHAR FileName[1];
} FILE_MOVE_CLUSTER_INFORMATION, *PFILE_MOVE_CLUSTER_INFORMATION;

typedef struct _FILE_RENAME_INFORMATION {
    BOOLEAN ReplaceIfExists;
    HANDLE RootDirectory;
    ULONG FileNameLength;
    WCHAR FileName[1];
} FILE_RENAME_INFORMATION, *PFILE_RENAME_INFORMATION;

typedef struct _FILE_STREAM_INFORMATION {
    ULONG NextEntryOffset;
    ULONG StreamNameLength;
    LARGE_INTEGER StreamSize;
    LARGE_INTEGER StreamAllocationSize;
    WCHAR StreamName[1];
} FILE_STREAM_INFORMATION, *PFILE_STREAM_INFORMATION;

typedef struct _FILE_COMPLETION_INFORMATION {
    HANDLE Port;
    ULONG Key;
} FILE_COMPLETION_INFORMATION, *PFILE_COMPLETION_INFORMATION;

typedef struct _FILE_OLE_CLASSID_INFORMATION {
    GUID ClassId;
} FILE_OLE_CLASSID_INFORMATION, *PFILE_OLE_CLASSID_INFORMATION;

typedef struct _FILE_OLE_STATE_BITS_INFORMATION {
    ULONG StateBits;
    ULONG StateBitsMask;
} FILE_OLE_STATE_BITS_INFORMATION, *PFILE_OLE_STATE_BITS_INFORMATION;

typedef struct _FILE_OBJECTID_INFORMATION {
    OBJECTID ObjectId;
} FILE_OBJECTID_INFORMATION, *PFILE_OBJECTID_INFORMATION;

typedef struct _FILE_OLE_INFORMATION {
    LARGE_INTEGER SecurityChangeTime;
    FILE_OLE_CLASSID_INFORMATION OleClassIdInformation;
    FILE_OBJECTID_INFORMATION ObjectIdInformation;
    FILE_STORAGE_TYPE StorageType;
    ULONG OleStateBits;
    BOOLEAN ContentIndexDisable;
    BOOLEAN InheritContentIndexDisable;
} FILE_OLE_INFORMATION, *PFILE_OLE_INFORMATION;

typedef struct _FILE_OLE_ALL_INFORMATION {
    FILE_BASIC_INFORMATION BasicInformation;
    FILE_STANDARD_INFORMATION StandardInformation;
    FILE_INTERNAL_INFORMATION InternalInformation;
    FILE_EA_INFORMATION EaInformation;
    FILE_ACCESS_INFORMATION AccessInformation;
    FILE_POSITION_INFORMATION PositionInformation;
    FILE_MODE_INFORMATION ModeInformation;
    FILE_ALIGNMENT_INFORMATION AlignmentInformation;
    USN LastChangeUsn;
    USN ReplicationUsn;
    LARGE_INTEGER SecurityChangeTime;
    FILE_OLE_CLASSID_INFORMATION OleClassIdInformation;
    FILE_OBJECTID_INFORMATION ObjectIdInformation;
    FILE_STORAGE_TYPE StorageType;
    ULONG OleStateBits;
    ULONG OleId;
    ULONG NumberOfStreamReferences;
    ULONG StreamIndex;
    ULONG SecurityId;
    BOOLEAN ContentIndexDisable;
    BOOLEAN InheritContentIndexDisable;
    FILE_NAME_INFORMATION NameInformation;
} FILE_OLE_ALL_INFORMATION, *PFILE_OLE_ALL_INFORMATION;

typedef struct _FILE_PIPE_INFORMATION {
     ULONG ReadMode;
     ULONG CompletionMode;
} FILE_PIPE_INFORMATION, *PFILE_PIPE_INFORMATION;

typedef struct _FILE_PIPE_LOCAL_INFORMATION {
     ULONG NamedPipeType;
     ULONG NamedPipeConfiguration;
     ULONG MaximumInstances;
     ULONG CurrentInstances;
     ULONG InboundQuota;
     ULONG ReadDataAvailable;
     ULONG OutboundQuota;
     ULONG WriteQuotaAvailable;
     ULONG NamedPipeState;
     ULONG NamedPipeEnd;
} FILE_PIPE_LOCAL_INFORMATION, *PFILE_PIPE_LOCAL_INFORMATION;

typedef struct _FILE_PIPE_REMOTE_INFORMATION {
     LARGE_INTEGER CollectDataTime;
     ULONG MaximumCollectionCount;
} FILE_PIPE_REMOTE_INFORMATION, *PFILE_PIPE_REMOTE_INFORMATION;

typedef struct _FILE_MAILSLOT_QUERY_INFORMATION {
    ULONG MaximumMessageSize;
    ULONG MailslotQuota;
    ULONG NextMessageSize;
    ULONG MessagesAvailable;
    LARGE_INTEGER ReadTimeout;
} FILE_MAILSLOT_QUERY_INFORMATION, *PFILE_MAILSLOT_QUERY_INFORMATION;

typedef struct _FILE_MAILSLOT_SET_INFORMATION {
    PLARGE_INTEGER ReadTimeout;
} FILE_MAILSLOT_SET_INFORMATION, *PFILE_MAILSLOT_SET_INFORMATION;










typedef struct _FILE_FULL_EA_INFORMATION {
    ULONG NextEntryOffset;
    UCHAR Flags;
    UCHAR EaNameLength;
    USHORT EaValueLength;
    CHAR EaName[1];
} FILE_FULL_EA_INFORMATION, *PFILE_FULL_EA_INFORMATION;



typedef struct _FILE_GET_EA_INFORMATION {
    ULONG NextEntryOffset;
    UCHAR EaNameLength;
    CHAR EaName[1];
} FILE_GET_EA_INFORMATION, *PFILE_GET_EA_INFORMATION;





typedef struct _FILE_GET_QUOTA_INFORMATION {
    ULONG NextEntryOffset;
    ULONG SidLength;
    SID Sid;
} FILE_GET_QUOTA_INFORMATION, *PFILE_GET_QUOTA_INFORMATION;

typedef struct _FILE_QUOTA_INFORMATION {
    ULONG NextEntryOffset;
    ULONG SidLength;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER QuotaUsed;
    LARGE_INTEGER QuotaThreshold;
    LARGE_INTEGER QuotaLimit;
    SID Sid;
} FILE_QUOTA_INFORMATION, *PFILE_QUOTA_INFORMATION;








typedef enum _FSINFOCLASS {
    FileFsVolumeInformation = 1,
    FileFsLabelInformation,
    FileFsSizeInformation,
    FileFsDeviceInformation,
    FileFsAttributeInformation,
    FileFsControlInformation,
    FileFsQuotaQueryInformation,        
    FileFsQuotaSetInformation,          
    FileFsMaximumInformation
} FS_INFORMATION_CLASS, *PFS_INFORMATION_CLASS;













typedef struct _FILE_FS_LABEL_INFORMATION {
    ULONG VolumeLabelLength;
    WCHAR VolumeLabel[1];
} FILE_FS_LABEL_INFORMATION, *PFILE_FS_LABEL_INFORMATION;

typedef struct _FILE_FS_VOLUME_INFORMATION {
    LARGE_INTEGER VolumeCreationTime;
    ULONG VolumeSerialNumber;
    ULONG VolumeLabelLength;
    BOOLEAN SupportsObjects;
    WCHAR VolumeLabel[1];
} FILE_FS_VOLUME_INFORMATION, *PFILE_FS_VOLUME_INFORMATION;

typedef struct _FILE_FS_SIZE_INFORMATION {
    LARGE_INTEGER TotalAllocationUnits;
    LARGE_INTEGER AvailableAllocationUnits;
    ULONG SectorsPerAllocationUnit;
    ULONG BytesPerSector;
} FILE_FS_SIZE_INFORMATION, *PFILE_FS_SIZE_INFORMATION;

typedef struct _FILE_FS_DEVICE_INFORMATION {                    
    ULONG DeviceType;                                     
    ULONG Characteristics;                                      
} FILE_FS_DEVICE_INFORMATION, *PFILE_FS_DEVICE_INFORMATION;     
                                                                
typedef struct _FILE_FS_ATTRIBUTE_INFORMATION {
    ULONG FileSystemAttributes;
    LONG MaximumComponentNameLength;
    ULONG FileSystemNameLength;
    WCHAR FileSystemName[1];
} FILE_FS_ATTRIBUTE_INFORMATION, *PFILE_FS_ATTRIBUTE_INFORMATION;























typedef struct _FILE_FS_CONTROL_INFORMATION {
    LARGE_INTEGER FreeSpaceStartFiltering;
    LARGE_INTEGER FreeSpaceThreshold;
    LARGE_INTEGER FreeSpaceStopFiltering;
    LARGE_INTEGER DefaultQuotaThreshold;
    LARGE_INTEGER DefaultQuotaLimit;
    ULONG FileSystemControlFlags;
} FILE_FS_CONTROL_INFORMATION, *PFILE_FS_CONTROL_INFORMATION;







typedef union _FILE_SEGMENT_ELEMENT {
    PVOID Buffer;
    ULONGLONG Alignment;
}FILE_SEGMENT_ELEMENT, *PFILE_SEGMENT_ELEMENT;







__declspec(dllimport)
NTSTATUS
__stdcall
NtCancelIoFile(
     HANDLE FileHandle,
     PIO_STATUS_BLOCK IoStatusBlock
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtCreateFile(
     PHANDLE FileHandle,
     ACCESS_MASK DesiredAccess,
     POBJECT_ATTRIBUTES ObjectAttributes,
     PIO_STATUS_BLOCK IoStatusBlock,
     PLARGE_INTEGER AllocationSize ,
     ULONG FileAttributes,
     ULONG ShareAccess,
     ULONG CreateDisposition,
     ULONG CreateOptions,
     PVOID EaBuffer ,
     ULONG EaLength
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtCreateNamedPipeFile(
      PHANDLE FileHandle,
      ULONG DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes,
      PIO_STATUS_BLOCK IoStatusBlock,
      ULONG ShareAccess,
      ULONG CreateDisposition,
      ULONG CreateOptions,
      ULONG NamedPipeType,
      ULONG ReadMode,
      ULONG CompletionMode,
      ULONG MaximumInstances,
      ULONG InboundQuota,
      ULONG OutboundQuota,
      PLARGE_INTEGER DefaultTimeout 
     );

__declspec(dllimport)
NTSTATUS
__stdcall
NtCreateMailslotFile(
      PHANDLE FileHandle,
      ULONG DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes,
      PIO_STATUS_BLOCK IoStatusBlock,
     ULONG CreateOptions,
      ULONG MailslotQuota,
      ULONG MaximumMessageSize,
      PLARGE_INTEGER ReadTimeout
     );

__declspec(dllimport)
NTSTATUS
__stdcall
NtDeleteFile(
     POBJECT_ATTRIBUTES ObjectAttributes
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtDeviceIoControlFile(
     HANDLE FileHandle,
     HANDLE Event ,
     PIO_APC_ROUTINE ApcRoutine ,
     PVOID ApcContext ,
     PIO_STATUS_BLOCK IoStatusBlock,
     ULONG IoControlCode,
     PVOID InputBuffer ,
     ULONG InputBufferLength,
     PVOID OutputBuffer ,
     ULONG OutputBufferLength
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtFlushBuffersFile(
     HANDLE FileHandle,
     PIO_STATUS_BLOCK IoStatusBlock
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtFsControlFile(
     HANDLE FileHandle,
     HANDLE Event ,
     PIO_APC_ROUTINE ApcRoutine ,
     PVOID ApcContext ,
     PIO_STATUS_BLOCK IoStatusBlock,
     ULONG FsControlCode,
     PVOID InputBuffer ,
     ULONG InputBufferLength,
     PVOID OutputBuffer ,
     ULONG OutputBufferLength
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtLockFile(
     HANDLE FileHandle,
     HANDLE Event ,
     PIO_APC_ROUTINE ApcRoutine ,
     PVOID ApcContext ,
     PIO_STATUS_BLOCK IoStatusBlock,
     PLARGE_INTEGER ByteOffset,
     PLARGE_INTEGER Length,
     ULONG Key,
     BOOLEAN FailImmediately,
     BOOLEAN ExclusiveLock
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtNotifyChangeDirectoryFile(
     HANDLE FileHandle,
     HANDLE Event ,
     PIO_APC_ROUTINE ApcRoutine ,
     PVOID ApcContext ,
     PIO_STATUS_BLOCK IoStatusBlock,
     PVOID Buffer,
     ULONG Length,
     ULONG CompletionFilter,
     BOOLEAN WatchTree
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtOpenFile(
     PHANDLE FileHandle,
     ACCESS_MASK DesiredAccess,
     POBJECT_ATTRIBUTES ObjectAttributes,
     PIO_STATUS_BLOCK IoStatusBlock,
     ULONG ShareAccess,
     ULONG OpenOptions
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtQueryAttributesFile(
     POBJECT_ATTRIBUTES ObjectAttributes,
     PFILE_BASIC_INFORMATION FileInformation
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtQueryDirectoryFile(
     HANDLE FileHandle,
     HANDLE Event ,
     PIO_APC_ROUTINE ApcRoutine ,
     PVOID ApcContext ,
     PIO_STATUS_BLOCK IoStatusBlock,
     PVOID FileInformation,
     ULONG Length,
     FILE_INFORMATION_CLASS FileInformationClass,
     BOOLEAN ReturnSingleEntry,
     PUNICODE_STRING FileName ,
     BOOLEAN RestartScan
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtQueryFullAttributesFile(
     POBJECT_ATTRIBUTES ObjectAttributes,
     PFILE_NETWORK_OPEN_INFORMATION FileInformation
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtQueryOleDirectoryFile(
     HANDLE FileHandle,
     HANDLE Event ,
     PIO_APC_ROUTINE ApcRoutine ,
     PVOID ApcContext ,
     PIO_STATUS_BLOCK IoStatusBlock,
     PVOID FileInformation,
     ULONG Length,
     FILE_INFORMATION_CLASS FileInformationClass,
     BOOLEAN ReturnSingleEntry,
     PUNICODE_STRING FileName ,
     BOOLEAN RestartScan
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtQueryEaFile(
     HANDLE FileHandle,
     PIO_STATUS_BLOCK IoStatusBlock,
     PVOID Buffer,
     ULONG Length,
     BOOLEAN ReturnSingleEntry,
     PVOID EaList ,
     ULONG EaListLength,
     PULONG EaIndex ,
     BOOLEAN RestartScan
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtQueryInformationFile(
     HANDLE FileHandle,
     PIO_STATUS_BLOCK IoStatusBlock,
     PVOID FileInformation,
     ULONG Length,
     FILE_INFORMATION_CLASS FileInformationClass
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtQueryQuotaInformationFile(
     HANDLE FileHandle,
     PIO_STATUS_BLOCK IoStatusBlock,
     PVOID Buffer,
     ULONG Length,
     BOOLEAN ReturnSingleEntry,
     PVOID SidList ,
     ULONG SidListLength,
     PSID StartSid ,
     BOOLEAN RestartScan
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtQueryVolumeInformationFile(
     HANDLE FileHandle,
     PIO_STATUS_BLOCK IoStatusBlock,
     PVOID FsInformation,
     ULONG Length,
     FS_INFORMATION_CLASS FsInformationClass
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtReadFile(
     HANDLE FileHandle,
     HANDLE Event ,
     PIO_APC_ROUTINE ApcRoutine ,
     PVOID ApcContext ,
     PIO_STATUS_BLOCK IoStatusBlock,
     PVOID Buffer,
     ULONG Length,
     PLARGE_INTEGER ByteOffset ,
     PULONG Key 
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtReadFileScatter(
     HANDLE FileHandle,
     HANDLE Event ,
     PIO_APC_ROUTINE ApcRoutine ,
     PVOID ApcContext ,
     PIO_STATUS_BLOCK IoStatusBlock,
     PFILE_SEGMENT_ELEMENT SegmentArray,
     ULONG Length,
     PLARGE_INTEGER ByteOffset ,
     PULONG Key 
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtSetEaFile(
     HANDLE FileHandle,
     PIO_STATUS_BLOCK IoStatusBlock,
     PVOID Buffer,
     ULONG Length
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtSetInformationFile(
     HANDLE FileHandle,
     PIO_STATUS_BLOCK IoStatusBlock,
     PVOID FileInformation,
     ULONG Length,
     FILE_INFORMATION_CLASS FileInformationClass
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtSetQuotaInformationFile(
     HANDLE FileHandle,
     PIO_STATUS_BLOCK IoStatusBlock,
     PVOID Buffer,
     ULONG Length
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtSetVolumeInformationFile(
     HANDLE FileHandle,
     PIO_STATUS_BLOCK IoStatusBlock,
     PVOID FsInformation,
     ULONG Length,
     FS_INFORMATION_CLASS FsInformationClass
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtUnlockFile(
     HANDLE FileHandle,
     PIO_STATUS_BLOCK IoStatusBlock,
     PLARGE_INTEGER ByteOffset,
     PLARGE_INTEGER Length,
     ULONG Key
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtWriteFile(
     HANDLE FileHandle,
     HANDLE Event ,
     PIO_APC_ROUTINE ApcRoutine ,
     PVOID ApcContext ,
     PIO_STATUS_BLOCK IoStatusBlock,
     PVOID Buffer,
     ULONG Length,
     PLARGE_INTEGER ByteOffset ,
     PULONG Key 
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtWriteFileGather(
     HANDLE FileHandle,
     HANDLE Event ,
     PIO_APC_ROUTINE ApcRoutine ,
     PVOID ApcContext ,
     PIO_STATUS_BLOCK IoStatusBlock,
     PFILE_SEGMENT_ELEMENT SegmentArray,
     ULONG Length,
     PLARGE_INTEGER ByteOffset ,
     PULONG Key 
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtLoadDriver(
     PUNICODE_STRING DriverServiceName
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtUnloadDriver(
     PUNICODE_STRING DriverServiceName
    );
































































































typedef struct _FILE_MOUNT_DBLS_BUFFER {
    ULONG CvfNameLength;
    WCHAR CvfName[1];
} FILE_MOUNT_DBLS_BUFFER, *PFILE_MOUNT_DBLS_BUFFER;



typedef struct _FSCTL_QUERY_FAT_BPB_BUFFER {
    UCHAR First0x24BytesOfBootSector[0x24];
} FSCTL_QUERY_FAT_BPB_BUFFER, *PFSCTL_QUERY_FAT_BPB_BUFFER;




typedef struct {
    LARGE_INTEGER VolumeSerialNumber;
    LARGE_INTEGER NumberSectors;
    LARGE_INTEGER TotalClusters;
    LARGE_INTEGER FreeClusters;
    LARGE_INTEGER TotalReserved;
    ULONG BytesPerSector;
    ULONG BytesPerCluster;
    ULONG BytesPerFileRecordSegment;
    ULONG ClustersPerFileRecordSegment;
    LARGE_INTEGER MftValidDataLength;
    LARGE_INTEGER MftStartLcn;
    LARGE_INTEGER Mft2StartLcn;
    LARGE_INTEGER MftZoneStart;
    LARGE_INTEGER MftZoneEnd;
} NTFS_VOLUME_DATA_BUFFER, *PNTFS_VOLUME_DATA_BUFFER;





typedef struct {
    LARGE_INTEGER StartingLcn;
} STARTING_LCN_INPUT_BUFFER, *PSTARTING_LCN_INPUT_BUFFER;

typedef struct {
    LARGE_INTEGER StartingLcn;
    LARGE_INTEGER BitmapSize;
    UCHAR Buffer[1];
} VOLUME_BITMAP_BUFFER, *PVOLUME_BITMAP_BUFFER;





typedef struct {
    LARGE_INTEGER StartingVcn;
} STARTING_VCN_INPUT_BUFFER, *PSTARTING_VCN_INPUT_BUFFER;

typedef struct RETRIEVAL_POINTERS_BUFFER {
    ULONG ExtentCount;
    LARGE_INTEGER StartingVcn;
    struct {
        LARGE_INTEGER NextVcn;
        LARGE_INTEGER Lcn;
    } Extents[1];
} RETRIEVAL_POINTERS_BUFFER, *PRETRIEVAL_POINTERS_BUFFER;





typedef struct {
    LARGE_INTEGER FileReferenceNumber;
} NTFS_FILE_RECORD_INPUT_BUFFER, *PNTFS_FILE_RECORD_INPUT_BUFFER;

typedef struct {
    LARGE_INTEGER FileReferenceNumber;
    ULONG FileRecordLength;
    UCHAR FileRecordBuffer[1];
} NTFS_FILE_RECORD_OUTPUT_BUFFER, *PNTFS_FILE_RECORD_OUTPUT_BUFFER;





typedef struct {
    HANDLE FileHandle;
    LARGE_INTEGER StartingVcn;
    LARGE_INTEGER StartingLcn;
    ULONG ClusterCount;
} MOVE_FILE_DATA, *PMOVE_FILE_DATA;





typedef struct {
    UCHAR FinderInfo[32];
} HFS_INFORMATION_BUFFER, *PHFS_INFORMATION_BUFFER;







typedef struct _NTFS_STATISTICS {
    ULONG LogFileFullExceptions;
    ULONG OtherExceptions;

    

    ULONG MftReads;
    ULONG MftReadBytes;
    ULONG MftWrites;
    ULONG MftWriteBytes;
    struct {
        USHORT Write;
        USHORT Create;
        USHORT SetInfo;
        USHORT Flush;
    } MftWritesUserLevel;

    USHORT MftWritesFlushForLogFileFull;
    USHORT MftWritesLazyWriter;
    USHORT MftWritesUserRequest;

    ULONG Mft2Writes;
    ULONG Mft2WriteBytes;
    struct {
        USHORT Write;
        USHORT Create;
        USHORT SetInfo;
        USHORT Flush;
    } Mft2WritesUserLevel;

    USHORT Mft2WritesFlushForLogFileFull;
    USHORT Mft2WritesLazyWriter;
    USHORT Mft2WritesUserRequest;

    ULONG RootIndexReads;
    ULONG RootIndexReadBytes;
    ULONG RootIndexWrites;
    ULONG RootIndexWriteBytes;

    ULONG BitmapReads;
    ULONG BitmapReadBytes;
    ULONG BitmapWrites;
    ULONG BitmapWriteBytes;

    USHORT BitmapWritesFlushForLogFileFull;
    USHORT BitmapWritesLazyWriter;
    USHORT BitmapWritesUserRequest;

    struct {
        USHORT Write;
        USHORT Create;
        USHORT SetInfo;
    } BitmapWritesUserLevel;

    ULONG MftBitmapReads;
    ULONG MftBitmapReadBytes;
    ULONG MftBitmapWrites;
    ULONG MftBitmapWriteBytes;

    USHORT MftBitmapWritesFlushForLogFileFull;
    USHORT MftBitmapWritesLazyWriter;
    USHORT MftBitmapWritesUserRequest;

    struct {
        USHORT Write;
        USHORT Create;
        USHORT SetInfo;
        USHORT Flush;
    } MftBitmapWritesUserLevel;

    ULONG UserIndexReads;
    ULONG UserIndexReadBytes;
    ULONG UserIndexWrites;
    ULONG UserIndexWriteBytes;

} NTFS_STATISTICS, *PNTFS_STATISTICS;

typedef struct _FAT_STATISTICS {
    ULONG CreateHits;
    ULONG SuccessfulCreates;
    ULONG FailedCreates;

    ULONG NonCachedReads;
    ULONG NonCachedReadBytes;
    ULONG NonCachedWrites;
    ULONG NonCachedWriteBytes;

    ULONG NonCachedDiskReads;
    ULONG NonCachedDiskWrites;

} FAT_STATISTICS, *PFAT_STATISTICS;

typedef struct _FILESYSTEM_STATISTICS {

    USHORT FileSystemType;
    USHORT Version;                     

    ULONG UserFileReads;
    ULONG UserFileReadBytes;
    ULONG UserDiskReads;
    ULONG UserFileWrites;
    ULONG UserFileWriteBytes;
    ULONG UserDiskWrites;

    ULONG MetaDataReads;
    ULONG MetaDataReadBytes;
    ULONG MetaDataDiskReads;
    ULONG MetaDataWrites;
    ULONG MetaDataWriteBytes;
    ULONG MetaDataDiskWrites;

    union {
        NTFS_STATISTICS Ntfs;
        FAT_STATISTICS Fat;
    };

    ULONG Pad[11];                      

} FILESYSTEM_STATISTICS, *PFILESYSTEM_STATISTICS;















































typedef struct _FILE_PIPE_ASSIGN_EVENT_BUFFER {
     HANDLE EventHandle;
     ULONG KeyValue;
} FILE_PIPE_ASSIGN_EVENT_BUFFER, *PFILE_PIPE_ASSIGN_EVENT_BUFFER;



typedef struct _FILE_PIPE_PEEK_BUFFER {
     ULONG NamedPipeState;
     ULONG ReadDataAvailable;
     ULONG NumberOfMessages;
     ULONG MessageLength;
     CHAR Data[1];
} FILE_PIPE_PEEK_BUFFER, *PFILE_PIPE_PEEK_BUFFER;



typedef struct _FILE_PIPE_EVENT_BUFFER {
     ULONG NamedPipeState;
     ULONG EntryType;
     ULONG ByteCount;
     ULONG KeyValue;
     ULONG NumberRequests;
} FILE_PIPE_EVENT_BUFFER, *PFILE_PIPE_EVENT_BUFFER;



typedef struct _FILE_PIPE_WAIT_FOR_BUFFER {
     LARGE_INTEGER Timeout;
     ULONG NameLength;
     BOOLEAN TimeoutSpecified;
     WCHAR Name[1];
} FILE_PIPE_WAIT_FOR_BUFFER, *PFILE_PIPE_WAIT_FOR_BUFFER;



typedef struct _FILE_PIPE_CLIENT_PROCESS_BUFFER {
     PVOID ClientSession;
     PVOID ClientProcess;
} FILE_PIPE_CLIENT_PROCESS_BUFFER, *PFILE_PIPE_CLIENT_PROCESS_BUFFER;




















typedef struct _FILE_MAILSLOT_PEEK_BUFFER {
    ULONG ReadDataAvailable;
    ULONG NumberOfMessages;
    ULONG MessageLength;
} FILE_MAILSLOT_PEEK_BUFFER, *PFILE_MAILSLOT_PEEK_BUFFER;





typedef struct _PATHNAME_BUFFER {
    ULONG PathNameLength;
    WCHAR Name[1];
} PATHNAME_BUFFER, *PPATHNAME_BUFFER;














typedef enum _IO_COMPLETION_INFORMATION_CLASS {
    IoCompletionBasicInformation
    } IO_COMPLETION_INFORMATION_CLASS;





typedef struct _IO_COMPLETION_BASIC_INFORMATION {
    LONG Depth;
} IO_COMPLETION_BASIC_INFORMATION, *PIO_COMPLETION_BASIC_INFORMATION;

__declspec(dllimport)
NTSTATUS
__stdcall
NtCreateIoCompletion (
     PHANDLE IoCompletionHandle,
     ACCESS_MASK DesiredAccess,
     POBJECT_ATTRIBUTES ObjectAttributes ,
     ULONG Count 
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtOpenIoCompletion (
     PHANDLE IoCompletionHandle,
     ACCESS_MASK DesiredAccess,
     POBJECT_ATTRIBUTES ObjectAttributes
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtQueryIoCompletion (
     HANDLE IoCompletionHandle,
     IO_COMPLETION_INFORMATION_CLASS IoCompletionInformationClass,
     PVOID IoCompletionInformation,
     ULONG IoCompletionInformationLength,
     PULONG ReturnLength 
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtSetIoCompletion (
     HANDLE IoCompletionHandle,
     ULONG KeyContext,
     PVOID ApcContext,
     NTSTATUS IoStatus,
     ULONG IoStatusInformation
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtRemoveIoCompletion (
     HANDLE IoCompletionHandle,
     PVOID *KeyContext,
     PVOID *ApcContext,
    PIO_STATUS_BLOCK IoStatusBlock,
     PLARGE_INTEGER Timeout
    );












typedef enum _INTERFACE_TYPE {
    InterfaceTypeUndefined = -1,
    Internal,
    Isa,
    Eisa,
    MicroChannel,
    TurboChannel,
    PCIBus,
    VMEBus,
    NuBus,
    PCMCIABus,
    CBus,
    MPIBus,
    MPSABus,
    ProcessorInternal,
    InternalPowerBus,
    PNPISABus,
    MaximumInterfaceType
}INTERFACE_TYPE, *PINTERFACE_TYPE;





typedef enum _BUS_DATA_TYPE {
    ConfigurationSpaceUndefined = -1,
    Cmos,
    EisaConfiguration,
    Pos,
    CbusConfiguration,
    PCIConfiguration,
    VMEConfiguration,
    NuBusConfiguration,
    PCMCIAConfiguration,
    MPIConfiguration,
    MPSAConfiguration,
    PNPISAConfiguration,
    MaximumBusDataType
} BUS_DATA_TYPE, *PBUS_DATA_TYPE;





typedef enum _DMA_WIDTH {
    Width8Bits,
    Width16Bits,
    Width32Bits,
    MaximumDmaWidth
}DMA_WIDTH, *PDMA_WIDTH;





typedef enum _DMA_SPEED {
    Compatible,
    TypeA,
    TypeB,
    TypeC,
    MaximumDmaSpeed
}DMA_SPEED, *PDMA_SPEED;










































typedef struct _IO_ERROR_LOG_PACKET {
    UCHAR MajorFunctionCode;
    UCHAR RetryCount;
    USHORT DumpDataSize;
    USHORT NumberOfStrings;
    USHORT StringOffset;
    USHORT EventCategory;
    NTSTATUS ErrorCode;
    ULONG UniqueErrorValue;
    NTSTATUS FinalStatus;
    ULONG SequenceNumber;
    ULONG IoControlCode;
    LARGE_INTEGER DeviceOffset;
    ULONG DumpData[1];
}IO_ERROR_LOG_PACKET, *PIO_ERROR_LOG_PACKET;






typedef struct _IO_ERROR_LOG_MESSAGE {
    USHORT Type;
    USHORT Size;
    USHORT DriverNameLength;
    LARGE_INTEGER TimeStamp;
    ULONG DriverNameOffset;
    IO_ERROR_LOG_PACKET EntryData;
}IO_ERROR_LOG_MESSAGE, *PIO_ERROR_LOG_MESSAGE;















































typedef enum _POWER_STATES {
    PowerUnspecified = 0,
    PowerUp,
    PowerQuery,
    PowerStandby,
    PowerSuspend,
    PowerHibernate,
    PowerDown,
    PowerDownRemove,
    MaximumPowerState
} POWER_STATE, *PPOWER_STATE;



__declspec(dllimport)
NTSTATUS
__stdcall
NtSetSystemPowerState(
     POWER_STATE SystemPowerState,
     BOOLEAN NoResumeAlarm,
     BOOLEAN ForcePowerDown
    );



typedef enum {
    BatteryCurrent,
    BatteryCycleCount,
    BatteryDesignedChargeCapacity,
    BatteryDeviceChemistry,
    BatteryDeviceName,
    BatteryFullChargeCapacity,
    BatteryManufactureData,
    BatteryManufactureName,
    BatteryReportingUnits,
    BatteryRemainingCapacity,
    BatterySerialNumber,
    BatterySuppliesSystemPower,
    BatteryVoltage
} BatteryInformationLevel, *PBatterInformationLevel;

typedef struct _BATTERY_CHARGE_WAIT {
    ULONG       BatteryTag;
    BOOLEAN     ACOnLine;
    BOOLEAN     StatusCharging;
    BOOLEAN     StatusDischarging;
    ULONG       LowChargeMark;
    ULONG       HighChargeMark;
} BATTERY_CHARGE_WAIT, *PBATTERY_CHARGE_WAIT;

typedef struct _BATTERY_CHARGE {
    ULONG       BatteryTag;
    BOOLEAN     ACOnLine;
    BOOLEAN     StatusCharging;
    BOOLEAN     StatusDischarging;
    ULONG       EstimatedCharge;
} BATTERY_CHARGE, *PBATTERY_CHARGE;
























































__declspec(dllimport)
NTSTATUS
__stdcall
NtDelayExecution (
     BOOLEAN Alertable,
     PLARGE_INTEGER DelayInterval
    );





__declspec(dllimport)
NTSTATUS
__stdcall
NtQuerySystemEnvironmentValue (
     PUNICODE_STRING VariableName,
     PWSTR VariableValue,
     USHORT ValueLength,
     PUSHORT ReturnLength 
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtSetSystemEnvironmentValue (
     PUNICODE_STRING VariableName,
     PUNICODE_STRING VariableValue
    );
















typedef enum _EVENT_INFORMATION_CLASS {
    EventBasicInformation
    } EVENT_INFORMATION_CLASS;





typedef struct _EVENT_BASIC_INFORMATION {
    EVENT_TYPE EventType;
    LONG EventState;
} EVENT_BASIC_INFORMATION, *PEVENT_BASIC_INFORMATION;





__declspec(dllimport)
NTSTATUS
__stdcall
NtClearEvent (
     HANDLE EventHandle
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtCreateEvent (
     PHANDLE EventHandle,
     ACCESS_MASK DesiredAccess,
     POBJECT_ATTRIBUTES ObjectAttributes ,
     EVENT_TYPE EventType,
     BOOLEAN InitialState
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtOpenEvent (
     PHANDLE EventHandle,
     ACCESS_MASK DesiredAccess,
     POBJECT_ATTRIBUTES ObjectAttributes
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtPulseEvent (
     HANDLE EventHandle,
     PLONG PreviousState 
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtQueryEvent (
     HANDLE EventHandle,
     EVENT_INFORMATION_CLASS EventInformationClass,
     PVOID EventInformation,
     ULONG EventInformationLength,
     PULONG ReturnLength 
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtResetEvent (
     HANDLE EventHandle,
     PLONG PreviousState 
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtSetEvent (
     HANDLE EventHandle,
     PLONG PreviousState 
    );













__declspec(dllimport)
NTSTATUS
__stdcall
NtCreateEventPair (
     PHANDLE EventPairHandle,
     ACCESS_MASK DesiredAccess,
     POBJECT_ATTRIBUTES ObjectAttributes 
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtOpenEventPair(
     PHANDLE EventPairHandle,
     ACCESS_MASK DesiredAccess,
     POBJECT_ATTRIBUTES ObjectAttributes
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtWaitLowEventPair(
     HANDLE EventPairHandle
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtWaitHighEventPair(
     HANDLE EventPairHandle
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtSetLowWaitHighEventPair(
     HANDLE EventPairHandle
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtSetHighWaitLowEventPair(
     HANDLE EventPairHandle
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtSetLowWaitHighThread(
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtSetHighWaitLowThread(
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtSetLowEventPair(
     HANDLE EventPairHandle
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtSetHighEventPair(
     HANDLE EventPairHandle
    );

















typedef enum _MUTANT_INFORMATION_CLASS {
    MutantBasicInformation
    } MUTANT_INFORMATION_CLASS;





typedef struct _MUTANT_BASIC_INFORMATION {
    LONG CurrentCount;
    BOOLEAN OwnedByCaller;
    BOOLEAN AbandonedState;
} MUTANT_BASIC_INFORMATION, *PMUTANT_BASIC_INFORMATION;





__declspec(dllimport)
NTSTATUS
__stdcall
NtCreateMutant (
     PHANDLE MutantHandle,
     ACCESS_MASK DesiredAccess,
     POBJECT_ATTRIBUTES ObjectAttributes ,
     BOOLEAN InitialOwner
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtOpenMutant (
     PHANDLE MutantHandle,
     ACCESS_MASK DesiredAccess,
     POBJECT_ATTRIBUTES ObjectAttributes
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtQueryMutant (
     HANDLE MutantHandle,
     MUTANT_INFORMATION_CLASS MutantInformationClass,
     PVOID MutantInformation,
     ULONG MutantInformationLength,
     PULONG ReturnLength 
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtReleaseMutant (
     HANDLE MutantHandle,
     PLONG PreviousCount 
    );















typedef enum _SEMAPHORE_INFORMATION_CLASS {
    SemaphoreBasicInformation
    } SEMAPHORE_INFORMATION_CLASS;





typedef struct _SEMAPHORE_BASIC_INFORMATION {
    LONG CurrentCount;
    LONG MaximumCount;
} SEMAPHORE_BASIC_INFORMATION, *PSEMAPHORE_BASIC_INFORMATION;





__declspec(dllimport)
NTSTATUS
__stdcall
NtCreateSemaphore (
     PHANDLE SemaphoreHandle,
     ACCESS_MASK DesiredAccess,
     POBJECT_ATTRIBUTES ObjectAttributes ,
     LONG InitialCount,
     LONG MaximumCount
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtOpenSemaphore(
     PHANDLE SemaphoreHandle,
     ACCESS_MASK DesiredAccess,
     POBJECT_ATTRIBUTES ObjectAttributes
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtQuerySemaphore (
     HANDLE SemaphoreHandle,
     SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass,
     PVOID SemaphoreInformation,
     ULONG SemaphoreInformationLength,
     PULONG ReturnLength 
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtReleaseSemaphore(
     HANDLE SemaphoreHandle,
     LONG ReleaseCount,
     PLONG PreviousCount 
    );

















typedef enum _TIMER_INFORMATION_CLASS {
    TimerBasicInformation
    } TIMER_INFORMATION_CLASS;





typedef struct _TIMER_BASIC_INFORMATION {
    LARGE_INTEGER RemainingTime;
    BOOLEAN TimerState;
} TIMER_BASIC_INFORMATION, *PTIMER_BASIC_INFORMATION;





typedef
void
(*PTIMER_APC_ROUTINE) (
     PVOID TimerContext,
     ULONG TimerLowValue,
     LONG TimerHighValue
    );





__declspec(dllimport)
NTSTATUS
__stdcall
NtCreateTimer (
     PHANDLE TimerHandle,
     ACCESS_MASK DesiredAccess,
     POBJECT_ATTRIBUTES ObjectAttributes ,
     TIMER_TYPE TimerType
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtOpenTimer (
     PHANDLE TimerHandle,
     ACCESS_MASK DesiredAccess,
     POBJECT_ATTRIBUTES ObjectAttributes
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtCancelTimer (
     HANDLE TimerHandle,
     PBOOLEAN CurrentState 
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtQueryTimer (
     HANDLE TimerHandle,
     TIMER_INFORMATION_CLASS TimerInformationClass,
     PVOID TimerInformation,
     ULONG TimerInformationLength,
     PULONG ReturnLength 
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtSetTimer (
     HANDLE TimerHandle,
     PLARGE_INTEGER DueTime,
     PTIMER_APC_ROUTINE TimerApcRoutine ,
     PVOID TimerContext ,
     BOOLEAN ResumeTimer,
     LONG Period ,
     PBOOLEAN PreviousState 
    );





__declspec(dllimport)
NTSTATUS
__stdcall
NtQuerySystemTime (
     PLARGE_INTEGER SystemTime
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtSetSystemTime (
     PLARGE_INTEGER SystemTime,
     PLARGE_INTEGER PreviousTime 
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtQueryTimerResolution (
     PULONG MaximumTime,
     PULONG MinimumTime,
     PULONG CurrentTime
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtSetTimerResolution (
     ULONG DesiredTime,
     BOOLEAN SetResolution,
     PULONG ActualTime
    );





__declspec(dllimport)
NTSTATUS
__stdcall
NtAllocateLocallyUniqueId(
     PLUID Luid
    );






__declspec(dllimport)
NTSTATUS
__stdcall
NtAllocateUuids(
     PULARGE_INTEGER Time,
     PULONG Range,
     PULONG Sequence
    );









__declspec(dllimport)
NTSTATUS
__stdcall
NtCreateProfile (
     PHANDLE ProfileHandle,
     HANDLE Process ,
     PVOID ProfileBase,
     ULONG ProfileSize,
     ULONG BucketSize,
     PULONG Buffer,
     ULONG BufferSize,
     KPROFILE_SOURCE ProfileSource,
     KAFFINITY Affinity
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtStartProfile (
     HANDLE ProfileHandle
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtStopProfile (
     HANDLE ProfileHandle
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtSetIntervalProfile (
     ULONG Interval,
     KPROFILE_SOURCE Source
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtQueryIntervalProfile (
     KPROFILE_SOURCE ProfileSource,
     PULONG Interval
    );






__declspec(dllimport)
NTSTATUS
__stdcall
NtQueryPerformanceCounter (
     PLARGE_INTEGER PerformanceCounter,
     PLARGE_INTEGER PerformanceFrequency 
    );










typedef struct _NAPDATA {
    ULONG NapLock;
    ULONG Calls;
    ULONG TimingErrors;
    LARGE_INTEGER TotalTime;
    LARGE_INTEGER FirstTime;
    LARGE_INTEGER MaxTime;
    LARGE_INTEGER MinTime;
} NAPDATA, *PNAPDATA;

NTSTATUS
NapClearData (
    void
    );

NTSTATUS
NapRetrieveData (
     NAPDATA *NapApiData,
     PCHAR **NapApiNames,
     PLARGE_INTEGER *NapCounterFrequency
    );

NTSTATUS
NapGetApiCount (
     PULONG NapApiCount
    );

NTSTATUS
NapPause (
    void
    );

NTSTATUS
NapResume (
    void
    );






typedef enum _SYSTEM_INFORMATION_CLASS {
    SystemBasicInformation,
    SystemProcessorInformation,             
    SystemPerformanceInformation,
    SystemTimeOfDayInformation,
    SystemPathInformation,
    SystemProcessInformation,
    SystemCallCountInformation,
    SystemDeviceInformation,
    SystemProcessorPerformanceInformation,
    SystemFlagsInformation,
    SystemCallTimeInformation,
    SystemModuleInformation,
    SystemLocksInformation,
    SystemStackTraceInformation,
    SystemPagedPoolInformation,
    SystemNonPagedPoolInformation,
    SystemHandleInformation,
    SystemObjectInformation,
    SystemPageFileInformation,
    SystemVdmInstemulInformation,
    SystemVdmBopInformation,
    SystemFileCacheInformation,
    SystemPoolTagInformation,
    SystemInterruptInformation,
    SystemDpcBehaviorInformation,
    SystemFullMemoryInformation,
    SystemLoadGdiDriverInformation,
    SystemUnloadGdiDriverInformation,
    SystemTimeAdjustmentInformation,
    SystemSummaryMemoryInformation,
    SystemNextEventIdInformation,
    SystemEventIdsInformation,
    SystemCrashDumpInformation,
    SystemExceptionInformation,
    SystemCrashDumpStateInformation,
    SystemKernelDebuggerInformation,
    SystemContextSwitchInformation,
    SystemRegistryQuotaInformation,
    SystemExtendServiceTableInformation,
    SystemPrioritySeperation,
    SystemPlugPlayBusInformation,
    SystemDockInformation,
    SystemPowerInformation,
    SystemProcessorSpeedInformation,
    SystemCurrentTimeZoneInformation,
    SystemLookasideInformation
} SYSTEM_INFORMATION_CLASS;











typedef struct _SYSTEM_VDM_INSTEMUL_INFO {
    ULONG SegmentNotPresent ;
    ULONG VdmOpcode0F       ;
    ULONG OpcodeESPrefix    ;
    ULONG OpcodeCSPrefix    ;
    ULONG OpcodeSSPrefix    ;
    ULONG OpcodeDSPrefix    ;
    ULONG OpcodeFSPrefix    ;
    ULONG OpcodeGSPrefix    ;
    ULONG OpcodeOPER32Prefix;
    ULONG OpcodeADDR32Prefix;
    ULONG OpcodeINSB        ;
    ULONG OpcodeINSW        ;
    ULONG OpcodeOUTSB       ;
    ULONG OpcodeOUTSW       ;
    ULONG OpcodePUSHF       ;
    ULONG OpcodePOPF        ;
    ULONG OpcodeINTnn       ;
    ULONG OpcodeINTO        ;
    ULONG OpcodeIRET        ;
    ULONG OpcodeINBimm      ;
    ULONG OpcodeINWimm      ;
    ULONG OpcodeOUTBimm     ;
    ULONG OpcodeOUTWimm     ;
    ULONG OpcodeINB         ;
    ULONG OpcodeINW         ;
    ULONG OpcodeOUTB        ;
    ULONG OpcodeOUTW        ;
    ULONG OpcodeLOCKPrefix  ;
    ULONG OpcodeREPNEPrefix ;
    ULONG OpcodeREPPrefix   ;
    ULONG OpcodeHLT         ;
    ULONG OpcodeCLI         ;
    ULONG OpcodeSTI         ;
    ULONG BopCount          ;
} SYSTEM_VDM_INSTEMUL_INFO, *PSYSTEM_VDM_INSTEMUL_INFO;

typedef struct _SYSTEM_TIMEOFDAY_INFORMATION {
    LARGE_INTEGER BootTime;
    LARGE_INTEGER CurrentTime;
    LARGE_INTEGER TimeZoneBias;
    ULONG TimeZoneId;
    ULONG Reserved;
} SYSTEM_TIMEOFDAY_INFORMATION, *PSYSTEM_TIMEOFDAY_INFORMATION;

typedef struct _SYSTEM_BASIC_INFORMATION {
    ULONG Reserved;
    ULONG TimerResolution;
    ULONG PageSize;
    ULONG NumberOfPhysicalPages;
    ULONG LowestPhysicalPageNumber;
    ULONG HighestPhysicalPageNumber;
    ULONG AllocationGranularity;
    ULONG MinimumUserModeAddress;
    ULONG MaximumUserModeAddress;
    KAFFINITY ActiveProcessorsAffinityMask;
    CCHAR NumberOfProcessors;
} SYSTEM_BASIC_INFORMATION, *PSYSTEM_BASIC_INFORMATION;

typedef struct _SYSTEM_PROCESSOR_INFORMATION {
    USHORT ProcessorArchitecture;
    USHORT ProcessorLevel;
    USHORT ProcessorRevision;
    USHORT Reserved;
    ULONG ProcessorFeatureBits;
} SYSTEM_PROCESSOR_INFORMATION, *PSYSTEM_PROCESSOR_INFORMATION;

typedef struct _SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION {
    LARGE_INTEGER IdleTime;
    LARGE_INTEGER KernelTime;
    LARGE_INTEGER UserTime;
    LARGE_INTEGER DpcTime;          
    LARGE_INTEGER InterruptTime;    
    ULONG InterruptCount;
} SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION, *PSYSTEM_PROCESSOR_PERFORMANCE_INFORMATION;

typedef struct _SYSTEM_QUERY_TIME_ADJUST_INFORMATION {
    ULONG TimeAdjustment;
    ULONG TimeIncrement;
    BOOLEAN Enable;
} SYSTEM_QUERY_TIME_ADJUST_INFORMATION, *PSYSTEM_QUERY_TIME_ADJUST_INFORMATION;

typedef struct _SYSTEM_SET_TIME_ADJUST_INFORMATION {
    ULONG TimeAdjustment;
    BOOLEAN Enable;
} SYSTEM_SET_TIME_ADJUST_INFORMATION, *PSYSTEM_SET_TIME_ADJUST_INFORMATION;

typedef struct _SYSTEM_PERFORMANCE_INFORMATION {
    LARGE_INTEGER IdleProcessTime;
    LARGE_INTEGER IoReadTransferCount;
    LARGE_INTEGER IoWriteTransferCount;
    LARGE_INTEGER IoOtherTransferCount;
    ULONG IoReadOperationCount;
    ULONG IoWriteOperationCount;
    ULONG IoOtherOperationCount;
    ULONG AvailablePages;
    ULONG CommittedPages;
    ULONG CommitLimit;
    ULONG PeakCommitment;
    ULONG PageFaultCount;
    ULONG CopyOnWriteCount;
    ULONG TransitionCount;
    ULONG CacheTransitionCount;
    ULONG DemandZeroCount;
    ULONG PageReadCount;
    ULONG PageReadIoCount;
    ULONG CacheReadCount;
    ULONG CacheIoCount;
    ULONG DirtyPagesWriteCount;
    ULONG DirtyWriteIoCount;
    ULONG MappedPagesWriteCount;
    ULONG MappedWriteIoCount;
    ULONG PagedPoolPages;
    ULONG NonPagedPoolPages;
    ULONG PagedPoolAllocs;
    ULONG PagedPoolFrees;
    ULONG NonPagedPoolAllocs;
    ULONG NonPagedPoolFrees;
    ULONG FreeSystemPtes;
    ULONG ResidentSystemCodePage;
    ULONG TotalSystemDriverPages;
    ULONG TotalSystemCodePages;
    ULONG NonPagedPoolLookasideHits;
    ULONG PagedPoolLookasideHits;
    ULONG Spare3Count;
    ULONG ResidentSystemCachePage;
    ULONG ResidentPagedPoolPage;
    ULONG ResidentSystemDriverPage;
    ULONG CcFastReadNoWait;
    ULONG CcFastReadWait;
    ULONG CcFastReadResourceMiss;
    ULONG CcFastReadNotPossible;
    ULONG CcFastMdlReadNoWait;
    ULONG CcFastMdlReadWait;
    ULONG CcFastMdlReadResourceMiss;
    ULONG CcFastMdlReadNotPossible;
    ULONG CcMapDataNoWait;
    ULONG CcMapDataWait;
    ULONG CcMapDataNoWaitMiss;
    ULONG CcMapDataWaitMiss;
    ULONG CcPinMappedDataCount;
    ULONG CcPinReadNoWait;
    ULONG CcPinReadWait;
    ULONG CcPinReadNoWaitMiss;
    ULONG CcPinReadWaitMiss;
    ULONG CcCopyReadNoWait;
    ULONG CcCopyReadWait;
    ULONG CcCopyReadNoWaitMiss;
    ULONG CcCopyReadWaitMiss;
    ULONG CcMdlReadNoWait;
    ULONG CcMdlReadWait;
    ULONG CcMdlReadNoWaitMiss;
    ULONG CcMdlReadWaitMiss;
    ULONG CcReadAheadIos;
    ULONG CcLazyWriteIos;
    ULONG CcLazyWritePages;
    ULONG CcDataFlushes;
    ULONG CcDataPages;
    ULONG ContextSwitches;
    ULONG FirstLevelTbFills;
    ULONG SecondLevelTbFills;
    ULONG SystemCalls;
} SYSTEM_PERFORMANCE_INFORMATION, *PSYSTEM_PERFORMANCE_INFORMATION;

typedef struct _SYSTEM_PROCESS_INFORMATION {
    ULONG NextEntryOffset;
    ULONG NumberOfThreads;
    LARGE_INTEGER SpareLi1;
    LARGE_INTEGER SpareLi2;
    LARGE_INTEGER SpareLi3;
    LARGE_INTEGER CreateTime;
    LARGE_INTEGER UserTime;
    LARGE_INTEGER KernelTime;
    UNICODE_STRING ImageName;
    KPRIORITY BasePriority;
    HANDLE UniqueProcessId;
    HANDLE InheritedFromUniqueProcessId;
    ULONG HandleCount;
    ULONG SpareUl2;
    ULONG SpareUl3;
    ULONG PeakVirtualSize;
    ULONG VirtualSize;
    ULONG PageFaultCount;
    ULONG PeakWorkingSetSize;
    ULONG WorkingSetSize;
    ULONG QuotaPeakPagedPoolUsage;
    ULONG QuotaPagedPoolUsage;
    ULONG QuotaPeakNonPagedPoolUsage;
    ULONG QuotaNonPagedPoolUsage;
    ULONG PagefileUsage;
    ULONG PeakPagefileUsage;
    ULONG PrivatePageCount;
} SYSTEM_PROCESS_INFORMATION, *PSYSTEM_PROCESS_INFORMATION;

typedef struct _SYSTEM_THREAD_INFORMATION {
    LARGE_INTEGER KernelTime;
    LARGE_INTEGER UserTime;
    LARGE_INTEGER CreateTime;
    ULONG WaitTime;
    PVOID StartAddress;
    CLIENT_ID ClientId;
    KPRIORITY Priority;
    LONG BasePriority;
    ULONG ContextSwitches;
    ULONG ThreadState;
    ULONG WaitReason;
} SYSTEM_THREAD_INFORMATION, *PSYSTEM_THREAD_INFORMATION;

typedef struct _SYSTEM_MEMORY_INFO {
    PUCHAR StringOffset;
    USHORT ValidCount;
    USHORT TransitionCount;
    USHORT ModifiedCount;
    USHORT PageTableCount;
} SYSTEM_MEMORY_INFO, *PSYSTEM_MEMORY_INFO;

typedef struct _SYSTEM_MEMORY_INFORMATION {
    ULONG InfoSize;
    ULONG StringStart;
    SYSTEM_MEMORY_INFO Memory[1];
} SYSTEM_MEMORY_INFORMATION, *PSYSTEM_MEMORY_INFORMATION;

typedef struct _SYSTEM_CALL_COUNT_INFORMATION {
    ULONG Length;
    ULONG NumberOfTables;
    
    
} SYSTEM_CALL_COUNT_INFORMATION, *PSYSTEM_CALL_COUNT_INFORMATION;

typedef struct _SYSTEM_DEVICE_INFORMATION {
    ULONG NumberOfDisks;
    ULONG NumberOfFloppies;
    ULONG NumberOfCdRoms;
    ULONG NumberOfTapes;
    ULONG NumberOfSerialPorts;
    ULONG NumberOfParallelPorts;
} SYSTEM_DEVICE_INFORMATION, *PSYSTEM_DEVICE_INFORMATION;

typedef struct _SYSTEM_CRASH_DUMP_INFORMATION {
    HANDLE CrashDumpSection;
} SYSTEM_CRASH_DUMP_INFORMATION, *PSYSTEM_CRASH_DUMP_INFORMATION;

typedef struct _SYSTEM_EXCEPTION_INFORMATION {
    ULONG AlignmentFixupCount;
    ULONG ExceptionDispatchCount;
    ULONG FloatingEmulationCount;
    ULONG ByteWordEmulationCount;
} SYSTEM_EXCEPTION_INFORMATION, *PSYSTEM_EXCEPTION_INFORMATION;

typedef struct _SYSTEM_CRASH_STATE_INFORMATION {
    ULONG ValidCrashDump;
} SYSTEM_CRASH_STATE_INFORMATION, *PSYSTEM_CRASH_STATE_INFORMATION;

typedef struct _SYSTEM_KERNEL_DEBUGGER_INFORMATION {
    BOOLEAN KernelDebuggerEnabled;
    BOOLEAN KernelDebuggerNotPresent;
} SYSTEM_KERNEL_DEBUGGER_INFORMATION, *PSYSTEM_KERNEL_DEBUGGER_INFORMATION;

typedef struct _SYSTEM_REGISTRY_QUOTA_INFORMATION {
    ULONG RegistryQuotaAllowed;
    ULONG RegistryQuotaUsed;
    ULONG PagedPoolSize;
} SYSTEM_REGISTRY_QUOTA_INFORMATION, *PSYSTEM_REGISTRY_QUOTA_INFORMATION;

typedef struct _SYSTEM_GDI_DRIVER_INFORMATION {
    UNICODE_STRING DriverName;
    PVOID ImageAddress;
    PVOID SectionPointer;
    PVOID EntryPoint;
    PIMAGE_EXPORT_DIRECTORY ExportSectionPointer;
} SYSTEM_GDI_DRIVER_INFORMATION, *PSYSTEM_GDI_DRIVER_INFORMATION;



typedef enum _SYSTEM_DOCK_STATE {
    SystemDockStateUnknown,
    SystemUndocked,
    SystemDocked
} SYSTEM_DOCK_STATE, *PSYSTEM_DOCK_STATE;





typedef enum _PLUGPLAY_BUS_CLASS {
    SystemBus,
    PlugPlayVirtualBus,
    MaxPlugPlayBusClass
} PLUGPLAY_BUS_CLASS, *PPLUGPLAY_BUS_CLASS;

typedef enum _PLUGPLAY_VIRTUAL_BUS_TYPE {
    Root,
    MaxPlugPlayVirtualBusType
} PLUGPLAY_VIRTUAL_BUS_TYPE, *PPLUGPLAY_VIRTUAL_BUS_TYPE;

typedef struct _PLUGPLAY_BUS_TYPE{
    PLUGPLAY_BUS_CLASS BusClass;
    union {
        INTERFACE_TYPE SystemBusType;
        PLUGPLAY_VIRTUAL_BUS_TYPE PlugPlayVirtualBusType;
    };
} PLUGPLAY_BUS_TYPE, *PPLUGPLAY_BUS_TYPE;

typedef struct _PLUGPLAY_BUS_INSTANCE {
    PLUGPLAY_BUS_TYPE BusType;
    ULONG BusNumber;
    WCHAR BusName[24];
} PLUGPLAY_BUS_INSTANCE, *PPLUGPLAY_BUS_INSTANCE;

typedef struct _SYSTEM_PLUGPLAY_BUS_INFORMATION {
    ULONG BusCount;
    PLUGPLAY_BUS_INSTANCE BusInstance[1];
} SYSTEM_PLUGPLAY_BUS_INFORMATION, *PSYSTEM_PLUGPLAY_BUS_INFORMATION;

typedef struct _SYSTEM_DOCK_INFORMATION {
    SYSTEM_DOCK_STATE DockState;
    INTERFACE_TYPE DeviceBusType;
    ULONG DeviceBusNumber;
    ULONG SlotNumber;
} SYSTEM_DOCK_INFORMATION, *PSYSTEM_DOCK_INFORMATION;



typedef struct _SYSTEM_FLAGS_INFORMATION {
    ULONG Flags;
} SYSTEM_FLAGS_INFORMATION, *PSYSTEM_FLAGS_INFORMATION;

typedef struct _SYSTEM_CALL_TIME_INFORMATION {
    ULONG Length;
    ULONG TotalCalls;
    LARGE_INTEGER TimeOfCalls[1];
} SYSTEM_CALL_TIME_INFORMATION, *PSYSTEM_CALL_TIME_INFORMATION;

typedef struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO {
    USHORT UniqueProcessId;
    USHORT CreatorBackTraceIndex;
    UCHAR ObjectTypeIndex;
    UCHAR HandleAttributes;
    USHORT HandleValue;
    PVOID Object;
    ULONG GrantedAccess;
} SYSTEM_HANDLE_TABLE_ENTRY_INFO, *PSYSTEM_HANDLE_TABLE_ENTRY_INFO;

typedef struct _SYSTEM_HANDLE_INFORMATION {
    ULONG NumberOfHandles;
    SYSTEM_HANDLE_TABLE_ENTRY_INFO Handles[ 1 ];
} SYSTEM_HANDLE_INFORMATION, *PSYSTEM_HANDLE_INFORMATION;

typedef struct _SYSTEM_OBJECTTYPE_INFORMATION {
    ULONG NextEntryOffset;
    ULONG NumberOfObjects;
    ULONG NumberOfHandles;
    ULONG TypeIndex;
    ULONG InvalidAttributes;
    GENERIC_MAPPING GenericMapping;
    ULONG ValidAccessMask;
    ULONG PoolType;
    BOOLEAN SecurityRequired;
    BOOLEAN WaitableObject;
    UNICODE_STRING TypeName;
} SYSTEM_OBJECTTYPE_INFORMATION, *PSYSTEM_OBJECTTYPE_INFORMATION;

typedef struct _SYSTEM_OBJECT_INFORMATION {
    ULONG NextEntryOffset;
    PVOID Object;
    HANDLE CreatorUniqueProcess;
    USHORT CreatorBackTraceIndex;
    USHORT Flags;
    LONG PointerCount;
    LONG HandleCount;
    ULONG PagedPoolCharge;
    ULONG NonPagedPoolCharge;
    HANDLE ExclusiveProcessId;
    PVOID SecurityDescriptor;
    OBJECT_NAME_INFORMATION NameInfo;
} SYSTEM_OBJECT_INFORMATION, *PSYSTEM_OBJECT_INFORMATION;

typedef struct _SYSTEM_PAGEFILE_INFORMATION {
    ULONG NextEntryOffset;
    ULONG TotalSize;
    ULONG TotalInUse;
    ULONG PeakUsage;
    UNICODE_STRING PageFileName;
} SYSTEM_PAGEFILE_INFORMATION, *PSYSTEM_PAGEFILE_INFORMATION;

typedef struct _SYSTEM_FILECACHE_INFORMATION {
    ULONG CurrentSize;
    ULONG PeakSize;
    ULONG PageFaultCount;
    ULONG MinimumWorkingSet;
    ULONG MaximumWorkingSet;
    ULONG spare[4];
} SYSTEM_FILECACHE_INFORMATION, *PSYSTEM_FILECACHE_INFORMATION;

typedef struct _SYSTEM_POOL_ENTRY {
    BOOLEAN Allocated;
    BOOLEAN Spare0;
    USHORT AllocatorBackTraceIndex;
    ULONG Size;
    union {
        UCHAR Tag[4];
        ULONG TagUlong;
        PVOID ProcessChargedQuota;
    };
} SYSTEM_POOL_ENTRY, *PSYSTEM_POOL_ENTRY;

typedef struct _SYSTEM_POOL_INFORMATION {
    ULONG TotalSize;
    PVOID FirstEntry;
    USHORT EntryOverhead;
    BOOLEAN PoolTagPresent;
    BOOLEAN Spare0;
    ULONG NumberOfEntries;
    SYSTEM_POOL_ENTRY Entries[1];
} SYSTEM_POOL_INFORMATION, *PSYSTEM_POOL_INFORMATION;

typedef struct _SYSTEM_POOLTAG {
    union {
        UCHAR Tag[4];
        ULONG TagUlong;
    };
    ULONG PagedAllocs;
    ULONG PagedFrees;
    ULONG PagedUsed;
    ULONG NonPagedAllocs;
    ULONG NonPagedFrees;
    ULONG NonPagedUsed;
} SYSTEM_POOLTAG, *PSYSTEM_POOLTAG;

typedef struct _SYSTEM_POOLTAG_INFORMATION {
    ULONG Count;
    SYSTEM_POOLTAG TagInfo[1];
} SYSTEM_POOLTAG_INFORMATION, *PSYSTEM_POOLTAG_INFORMATION;

typedef struct _SYSTEM_CONTEXT_SWITCH_INFORMATION {
    ULONG ContextSwitches;
    ULONG FindAny;
    ULONG FindLast;
    ULONG FindIdeal;
    ULONG IdleAny;
    ULONG IdleCurrent;
    ULONG IdleLast;
    ULONG IdleIdeal;
    ULONG PreemptAny;
    ULONG PreemptCurrent;
    ULONG PreemptLast;
    ULONG SwitchToIdle;
} SYSTEM_CONTEXT_SWITCH_INFORMATION, *PSYSTEM_CONTEXT_SWITCH_INFORMATION;

typedef struct _SYSTEM_INTERRUPT_INFORMATION {
    ULONG ContextSwitches;
    ULONG DpcCount;
    ULONG DpcRate;
    ULONG TimeIncrement;
    ULONG DpcBypassCount;
    ULONG ApcBypassCount;
} SYSTEM_INTERRUPT_INFORMATION, *PSYSTEM_INTERRUPT_INFORMATION;

typedef struct _SYSTEM_DPC_BEHAVIOR_INFORMATION {
    ULONG Spare;
    ULONG DpcQueueDepth;
    ULONG MinimumDpcRate;
    ULONG AdjustDpcThreshold;
    ULONG IdealDpcRate;
} SYSTEM_DPC_BEHAVIOR_INFORMATION, *PSYSTEM_DPC_BEHAVIOR_INFORMATION;



typedef struct _SYSTEM_POWER_INFORMATION {
    BOOLEAN SystemSuspendSupported;
    BOOLEAN SystemHibernateSupported;
    BOOLEAN ResumeTimerSupportsSuspend;
    BOOLEAN ResumeTimerSupportsHibernate;
    BOOLEAN LidSupported;
    BOOLEAN TurboSettingSupported;
    BOOLEAN TurboMode;
    BOOLEAN SystemAcOrDc;
    BOOLEAN PowerDownDisabled;
    LARGE_INTEGER SpindownDrives;
} SYSTEM_POWER_INFORMATION, *PSYSTEM_POWER_INFORMATION;

typedef struct _SYSTEM_PROCESSOR_SPEED_INFORMATION {
    ULONG MaximumProcessorSpeed;
    ULONG CurrentAvailableSpeed;
    ULONG ConfiguredSpeedLimit;
    BOOLEAN PowerLimit;
    BOOLEAN ThermalLimit;
    BOOLEAN TurboLimit;
} SYSTEM_PROCESSOR_SPEED_INFORMATION, *PSYSTEM_PROCESSOR_SPEED_INFORMATION;

typedef struct _SYSTEM_LOOKASIDE_INFORMATION {
    USHORT CurrentDepth;
    USHORT MaximumDepth;
    ULONG TotalAllocates;
    ULONG AllocateMisses;
    ULONG TotalFrees;
    ULONG FreeMisses;
    ULONG Type;
    ULONG Tag;
    ULONG Size;
} SYSTEM_LOOKASIDE_INFORMATION, *PSYSTEM_LOOKASIDE_INFORMATION;


















__declspec(dllimport)
NTSTATUS
__stdcall
NtQuerySystemInformation (
     SYSTEM_INFORMATION_CLASS SystemInformationClass,
     PVOID SystemInformation,
     ULONG SystemInformationLength,
     PULONG ReturnLength 
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtSetSystemInformation (
     SYSTEM_INFORMATION_CLASS SystemInformationClass,
     PVOID SystemInformation,
     ULONG SystemInformationLength
    );








typedef enum {
    SystemEventVirtualKey,
    SystemEventLidState,
    SystemEventTimeChanged
} SYSTEM_EVENT_ID, *PSYSTEM_EVENT_ID;








typedef enum _SYSDBG_COMMAND {
    SysDbgQueryModuleInformation,
    SysDbgQueryTraceInformation,
    SysDbgSetTracepoint,
    SysDbgSetSpecialCall,
    SysDbgClearSpecialCalls,
    SysDbgQuerySpecialCalls
} SYSDBG_COMMAND, *PSYSDBG_COMMAND;

__declspec(dllimport)
NTSTATUS
__stdcall
NtSystemDebugControl (
     SYSDBG_COMMAND Command,
     PVOID InputBuffer,
     ULONG InputBufferLength,
     PVOID OutputBuffer,
     ULONG OutputBufferLength,
     PULONG ReturnLength
    );

typedef enum _HARDERROR_RESPONSE_OPTION {
        OptionAbortRetryIgnore,
        OptionOk,
        OptionOkCancel,
        OptionRetryCancel,
        OptionYesNo,
        OptionYesNoCancel,
        OptionShutdownSystem
} HARDERROR_RESPONSE_OPTION;

typedef enum _HARDERROR_RESPONSE {
        ResponseReturnToCaller,
        ResponseNotHandled,
        ResponseAbort,
        ResponseCancel,
        ResponseIgnore,
        ResponseNo,
        ResponseOk,
        ResponseRetry,
        ResponseYes
} HARDERROR_RESPONSE;



typedef struct _HARDERROR_MSG {
    PORT_MESSAGE h;
    NTSTATUS Status;
    LARGE_INTEGER ErrorTime;
    ULONG ValidResponseOptions;
    ULONG Response;
    ULONG NumberOfParameters;
    ULONG UnicodeStringParameterMask;
    ULONG Parameters[4];
} HARDERROR_MSG, *PHARDERROR_MSG;

__declspec(dllimport)
NTSTATUS
__stdcall
NtRaiseHardError(
     NTSTATUS ErrorStatus,
     ULONG NumberOfParameters,
     ULONG UnicodeStringParameterMask,
     PULONG Parameters,
     ULONG ValidResponseOptions,
     PULONG Response
    );






















typedef struct _KUSER_SHARED_DATA {

    
    
    
    
    

    volatile ULONG TickCountLow;
    ULONG TickCountMultiplier;

    
    
    

    volatile KSYSTEM_TIME InterruptTime;

    
    
    

    volatile KSYSTEM_TIME SystemTime;

    
    
    

    volatile KSYSTEM_TIME TimeZoneBias;

    
    
    
    
    

    USHORT ImageNumberLow;
    USHORT ImageNumberHigh;

    
    
    

    WCHAR NtSystemRoot[ 260 ];

    
    
    

    ULONG DosDeviceMap;

    
    
    

    ULONG CryptoExponent;

    
    
    

    ULONG TimeZoneId;

    
    
    
    

    UCHAR DosDeviceDriveType[ 32 ];

    
    
    

    NT_PRODUCT_TYPE    NtProductType;
    BOOLEAN ProductTypeIsValid;

    
    
    
    
    

    ULONG NtMajorVersion;
    ULONG NtMinorVersion;


    
    
    

    BOOLEAN ProcessorFeatures[64];


} KUSER_SHARED_DATA, *PKUSER_SHARED_DATA;













#pragma warning(disable:4035)
__inline ULONG
__stdcall
NtGetTickCount (
    void
    )
{
    __asm {
        mov     edx, 0x7FFE0000
        mov     eax, [edx] KUSER_SHARED_DATA.TickCountLow
        mul     dword ptr [edx] KUSER_SHARED_DATA.TickCountMultiplier
        shrd    eax,edx,24
    }
}
#pragma warning(default:4035)




















NTSTATUS
__stdcall
NtQueryDefaultLocale(
     BOOLEAN UserProfile,
     PLCID DefaultLocaleId
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtSetDefaultLocale(
     BOOLEAN UserProfile,
     LCID DefaultLocaleId
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtSetDefaultHardErrorPort(
     HANDLE DefaultHardErrorPort
    );

typedef enum _SHUTDOWN_ACTION {
    ShutdownNoReboot,
    ShutdownReboot,
    ShutdownPowerOff
} SHUTDOWN_ACTION;

__declspec(dllimport)
NTSTATUS
__stdcall
NtShutdownSystem(
     SHUTDOWN_ACTION Action
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtDisplayString(
     PUNICODE_STRING String
    );


















































































typedef USHORT RTL_ATOM, *PRTL_ATOM;

__declspec(dllimport)
NTSTATUS
__stdcall
NtAddAtom(
     PWSTR AtomName ,
      PRTL_ATOM Atom 
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtFindAtom(
     PWSTR AtomName,
     PRTL_ATOM Atom 
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtDeleteAtom(
     RTL_ATOM Atom
    );

typedef enum _ATOM_INFORMATION_CLASS {
    AtomBasicInformation,
    AtomTableInformation
} ATOM_INFORMATION_CLASS;

typedef struct _ATOM_BASIC_INFORMATION {
    USHORT UsageCount;
    USHORT Flags;
    USHORT NameLength;
    WCHAR Name[ 1 ];
} ATOM_BASIC_INFORMATION, *PATOM_BASIC_INFORMATION;

typedef struct _ATOM_TABLE_INFORMATION {
    ULONG NumberOfAtoms;
    RTL_ATOM Atoms[ 1 ];
} ATOM_TABLE_INFORMATION, *PATOM_TABLE_INFORMATION;

__declspec(dllimport)
NTSTATUS
__stdcall
NtQueryInformationAtom(
     RTL_ATOM Atom,
     ATOM_INFORMATION_CLASS AtomInformationClass,
     PVOID AtomInformation,
     ULONG AtomInformationLength,
     PULONG ReturnLength 
    );
















































typedef struct _CHANNEL_MESSAGE {
    PVOID Text;
    ULONG Length;
    PVOID Context;
    PVOID Base;
    union {
        BOOLEAN Close;
        LONGLONG Align;
    };

} CHANNEL_MESSAGE, *PCHANNEL_MESSAGE;





__declspec(dllimport)
NTSTATUS
__stdcall
NtCreateChannel (
     PHANDLE ChannelHandle,
     POBJECT_ATTRIBUTES ObjectAttributes 
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtOpenChannel (
     PHANDLE ChannelHandle,
     POBJECT_ATTRIBUTES ObjectAttributes
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtListenChannel (
     HANDLE ChannelHandle,
     PCHANNEL_MESSAGE *Message
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtSendWaitReplyChannel (
     HANDLE ChannelHandle,
     PVOID Text,
     ULONG Length,
     PCHANNEL_MESSAGE *Message
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtReplyWaitSendChannel (
     PVOID Text,
     ULONG Length,
     PCHANNEL_MESSAGE *Message
    );








__declspec(dllimport)
NTSTATUS
__stdcall
NtSetContextChannel (
     PVOID Context
    );



























typedef enum _MEMORY_INFORMATION_CLASS {
    MemoryBasicInformation

    ,MemoryWorkingSetInformation

    ,MemoryMappedFilenameInformation
} MEMORY_INFORMATION_CLASS;





typedef struct _MEMORY_BASIC_INFORMATION {
    PVOID BaseAddress;
    PVOID AllocationBase;
    ULONG AllocationProtect;
    ULONG RegionSize;
    ULONG State;
    ULONG Protect;
    ULONG Type;
} MEMORY_BASIC_INFORMATION, *PMEMORY_BASIC_INFORMATION;


typedef struct _MEMORY_WORKING_SET_BLOCK {
    ULONG Protection : 5;
    ULONG Filler1 : 3;
    ULONG Shared : 1;
    ULONG Filler2 : 3;
    ULONG VirtualPage : 20;
} MEMORY_WORKING_SET_BLOCK, *PMEMORY_WORKING_SET_BLOCK;


typedef struct _MEMORY_WORKING_SET_INFORMATION {
    ULONG NumberOfEntries;
    MEMORY_WORKING_SET_BLOCK WorkingSetInfo[1];
} MEMORY_WORKING_SET_INFORMATION, *PMEMORY_WORKING_SET_INFORMATION;

typedef enum _SECTION_INFORMATION_CLASS {
    SectionBasicInformation,
    SectionImageInformation
} SECTION_INFORMATION_CLASS;









typedef struct _SECTIONBASICINFO {
    PVOID BaseAddress;
    ULONG AllocationAttributes;
    LARGE_INTEGER MaximumSize;
} SECTION_BASIC_INFORMATION, *PSECTION_BASIC_INFORMATION;

typedef struct _SECTION_IMAGE_INFORMATION {
    PVOID TransferAddress;
    ULONG ZeroBits;
    ULONG MaximumStackSize;
    ULONG CommittedStackSize;
    ULONG SubSystemType;
    union {
        struct {
            USHORT SubSystemMinorVersion;
            USHORT SubSystemMajorVersion;
        };
        ULONG SubSystemVersion;
    };
    ULONG GpValue;
    USHORT ImageCharacteristics;
    USHORT DllCharacteristics;
    USHORT Machine;
    BOOLEAN ImageContainsCode;
    BOOLEAN Spare1;
    ULONG LoaderFlags;
    ULONG Reserved[ 2 ];
} SECTION_IMAGE_INFORMATION, *PSECTION_IMAGE_INFORMATION;


typedef enum _SECTION_INHERIT {
    ViewShare = 1,
    ViewUnmap = 2
} SECTION_INHERIT;





























































__declspec(dllimport)
NTSTATUS
__stdcall
NtCreateSection (
     PHANDLE SectionHandle,
     ACCESS_MASK DesiredAccess,
     POBJECT_ATTRIBUTES ObjectAttributes ,
     PLARGE_INTEGER MaximumSize ,
     ULONG SectionPageProtection,
     ULONG AllocationAttributes,
     HANDLE FileHandle 
    );



__declspec(dllimport)
NTSTATUS
__stdcall
NtOpenSection(
     PHANDLE SectionHandle,
     ACCESS_MASK DesiredAccess,
     POBJECT_ATTRIBUTES ObjectAttributes
    );


__declspec(dllimport)
NTSTATUS
__stdcall
NtMapViewOfSection(
     HANDLE SectionHandle,
     HANDLE ProcessHandle,
      PVOID *BaseAddress,
     ULONG ZeroBits,
     ULONG CommitSize,
      PLARGE_INTEGER SectionOffset ,
      PULONG ViewSize,
     SECTION_INHERIT InheritDisposition,
     ULONG AllocationType,
     ULONG Protect
    );


__declspec(dllimport)
NTSTATUS
__stdcall
NtUnmapViewOfSection(
     HANDLE ProcessHandle,
     PVOID BaseAddress
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtExtendSection(
     HANDLE SectionHandle,
      PLARGE_INTEGER NewSectionSize
    );



__declspec(dllimport)
NTSTATUS
__stdcall
NtAllocateVirtualMemory(
     HANDLE ProcessHandle,
      PVOID *BaseAddress,
     ULONG ZeroBits,
      PULONG RegionSize,
     ULONG AllocationType,
     ULONG Protect
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtFreeVirtualMemory(
     HANDLE ProcessHandle,
      PVOID *BaseAddress,
      PULONG RegionSize,
     ULONG FreeType
    );



__declspec(dllimport)
NTSTATUS
__stdcall
NtReadVirtualMemory(
     HANDLE ProcessHandle,
     PVOID BaseAddress,
     PVOID Buffer,
     ULONG BufferSize,
     PULONG NumberOfBytesRead 
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtWriteVirtualMemory(
     HANDLE ProcessHandle,
     PVOID BaseAddress,
     PVOID Buffer,
     ULONG BufferSize,
     PULONG NumberOfBytesWritten 
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtFlushVirtualMemory(
     HANDLE ProcessHandle,
      PVOID *BaseAddress,
      PULONG RegionSize,
     PIO_STATUS_BLOCK IoStatus
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtLockVirtualMemory(
     HANDLE ProcessHandle,
      PVOID *BaseAddress,
      PULONG RegionSize,
     ULONG MapType
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtUnlockVirtualMemory(
     HANDLE ProcessHandle,
      PVOID *BaseAddress,
      PULONG RegionSize,
     ULONG MapType
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtProtectVirtualMemory(
     HANDLE ProcessHandle,
      PVOID *BaseAddress,
      PULONG RegionSize,
     ULONG NewProtect,
     PULONG OldProtect
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtQueryVirtualMemory(
     HANDLE ProcessHandle,
     PVOID BaseAddress,
     MEMORY_INFORMATION_CLASS MemoryInformationClass,
     PVOID MemoryInformation,
     ULONG MemoryInformationLength,
     PULONG ReturnLength 
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtQuerySection(
     HANDLE SectionHandle,
     SECTION_INFORMATION_CLASS SectionInformationClass,
     PVOID SectionInformation,
     ULONG SectionInformationLength,
     PULONG ReturnLength 
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtCreatePagingFile (
     PUNICODE_STRING PageFileName,
     PLARGE_INTEGER MinimumSize,
     PLARGE_INTEGER MaximumSize,
     ULONG Priority 
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtFlushInstructionCache (
     HANDLE ProcessHandle,
     PVOID BaseAddress ,
     ULONG Length
    );






__declspec(dllimport)
NTSTATUS
__stdcall
NtFlushWriteBuffer (
    void
    );















































































                                                    


                                                    


                                                    


                                                    
                                                    



















































typedef struct _KEY_BASIC_INFORMATION {
    LARGE_INTEGER LastWriteTime;
    ULONG   TitleIndex;
    ULONG   NameLength;
    WCHAR   Name[1];            
} KEY_BASIC_INFORMATION, *PKEY_BASIC_INFORMATION;

typedef struct _KEY_NODE_INFORMATION {
    LARGE_INTEGER LastWriteTime;
    ULONG   TitleIndex;
    ULONG   ClassOffset;
    ULONG   ClassLength;
    ULONG   NameLength;
    WCHAR   Name[1];            

} KEY_NODE_INFORMATION, *PKEY_NODE_INFORMATION;

typedef struct _KEY_FULL_INFORMATION {
    LARGE_INTEGER LastWriteTime;
    ULONG   TitleIndex;
    ULONG   ClassOffset;
    ULONG   ClassLength;
    ULONG   SubKeys;
    ULONG   MaxNameLen;
    ULONG   MaxClassLen;
    ULONG   Values;
    ULONG   MaxValueNameLen;
    ULONG   MaxValueDataLen;
    WCHAR   Class[1];           
} KEY_FULL_INFORMATION, *PKEY_FULL_INFORMATION;

typedef enum _KEY_INFORMATION_CLASS {
    KeyBasicInformation,
    KeyNodeInformation,
    KeyFullInformation
} KEY_INFORMATION_CLASS;

typedef struct _KEY_WRITE_TIME_INFORMATION {
    LARGE_INTEGER LastWriteTime;
} KEY_WRITE_TIME_INFORMATION, *PKEY_WRITE_TIME_INFORMATION;

typedef enum _KEY_SET_INFORMATION_CLASS {
    KeyWriteTimeInformation
} KEY_SET_INFORMATION_CLASS;





typedef struct _KEY_VALUE_BASIC_INFORMATION {
    ULONG   TitleIndex;
    ULONG   Type;
    ULONG   NameLength;
    WCHAR   Name[1];            
} KEY_VALUE_BASIC_INFORMATION, *PKEY_VALUE_BASIC_INFORMATION;

typedef struct _KEY_VALUE_FULL_INFORMATION {
    ULONG   TitleIndex;
    ULONG   Type;
    ULONG   DataOffset;
    ULONG   DataLength;
    ULONG   NameLength;
    WCHAR   Name[1];            

} KEY_VALUE_FULL_INFORMATION, *PKEY_VALUE_FULL_INFORMATION;

typedef struct _KEY_VALUE_PARTIAL_INFORMATION {
    ULONG   TitleIndex;
    ULONG   Type;
    ULONG   DataLength;
    UCHAR   Data[1];            
} KEY_VALUE_PARTIAL_INFORMATION, *PKEY_VALUE_PARTIAL_INFORMATION;

typedef struct _KEY_VALUE_ENTRY {
    PUNICODE_STRING ValueName;
    ULONG           DataLength;
    ULONG           DataOffset;
    ULONG           Type;
} KEY_VALUE_ENTRY, *PKEY_VALUE_ENTRY;

typedef enum _KEY_VALUE_INFORMATION_CLASS {
    KeyValueBasicInformation,
    KeyValueFullInformation,
    KeyValuePartialInformation
} KEY_VALUE_INFORMATION_CLASS;







typedef enum _REG_ACTION {
    KeyAdded,
    KeyRemoved,
    KeyModified
} REG_ACTION;

typedef struct _REG_NOTIFY_INFORMATION {
    ULONG           NextEntryOffset;
    REG_ACTION      Action;
    ULONG           KeyLength;
    WCHAR           Key[1];     
} REG_NOTIFY_INFORMATION, *PREG_NOTIFY_INFORMATION;






__declspec(dllimport)
NTSTATUS
__stdcall
NtCreateKey(
     PHANDLE KeyHandle,
     ACCESS_MASK DesiredAccess,
     POBJECT_ATTRIBUTES ObjectAttributes,
     ULONG TitleIndex,
     PUNICODE_STRING Class ,
     ULONG CreateOptions,
     PULONG Disposition 
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtDeleteKey(
     HANDLE KeyHandle
    );


__declspec(dllimport)
NTSTATUS
__stdcall
NtDeleteValueKey(
     HANDLE KeyHandle,
     PUNICODE_STRING ValueName
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtEnumerateKey(
     HANDLE KeyHandle,
     ULONG Index,
     KEY_INFORMATION_CLASS KeyInformationClass,
     PVOID KeyInformation,
     ULONG Length,
     PULONG ResultLength
    );


__declspec(dllimport)
NTSTATUS
__stdcall
NtEnumerateValueKey(
     HANDLE KeyHandle,
     ULONG Index,
     KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass,
     PVOID KeyValueInformation,
     ULONG Length,
     PULONG ResultLength
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtFlushKey(
     HANDLE KeyHandle
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtInitializeRegistry(
     BOOLEAN SetupBoot
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtNotifyChangeKey(
     HANDLE KeyHandle,
     HANDLE Event ,
     PIO_APC_ROUTINE ApcRoutine ,
     PVOID ApcContext ,
     PIO_STATUS_BLOCK IoStatusBlock,
     ULONG CompletionFilter,
     BOOLEAN WatchTree,
     PVOID Buffer,
     ULONG BufferSize,
     BOOLEAN Asynchronous
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtLoadKey(
     POBJECT_ATTRIBUTES TargetKey,
     POBJECT_ATTRIBUTES SourceFile
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtLoadKey2(
     POBJECT_ATTRIBUTES TargetKey,
     POBJECT_ATTRIBUTES SourceFile,
     ULONG Flags
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtOpenKey(
     PHANDLE KeyHandle,
     ACCESS_MASK DesiredAccess,
     POBJECT_ATTRIBUTES ObjectAttributes
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtQueryKey(
     HANDLE KeyHandle,
     KEY_INFORMATION_CLASS KeyInformationClass,
     PVOID KeyInformation,
     ULONG Length,
     PULONG ResultLength
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtQueryValueKey(
     HANDLE KeyHandle,
     PUNICODE_STRING ValueName,
     KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass,
     PVOID KeyValueInformation,
     ULONG Length,
     PULONG ResultLength
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtQueryMultipleValueKey(
     HANDLE KeyHandle,
     PKEY_VALUE_ENTRY ValueEntries,
     ULONG EntryCount,
     PVOID ValueBuffer,
      PULONG BufferLength,
      PULONG RequiredBufferLength
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtReplaceKey(
     POBJECT_ATTRIBUTES NewFile,
     HANDLE             TargetHandle,
     POBJECT_ATTRIBUTES OldFile
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtRestoreKey(
     HANDLE KeyHandle,
     HANDLE FileHandle,
     ULONG  Flags
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtSaveKey(
     HANDLE KeyHandle,
     HANDLE FileHandle
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtSetValueKey(
     HANDLE KeyHandle,
     PUNICODE_STRING ValueName,
     ULONG TitleIndex ,
     ULONG Type,
     PVOID Data,
     ULONG DataSize
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtUnloadKey(
     POBJECT_ATTRIBUTES TargetKey
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtSetInformationKey(
     HANDLE KeyHandle,
     KEY_SET_INFORMATION_CLASS KeySetInformationClass,
     PVOID KeySetInformation,
     ULONG KeySetInformationLength
    );



































































typedef struct _EVENTLOGRECORD {
    ULONG  Length;        
    ULONG  Reserved;      
    ULONG  RecordNumber;  
    ULONG  TimeGenerated; 
    ULONG  TimeWritten;   
    ULONG  EventID;
    USHORT EventType;
    USHORT NumStrings;
    USHORT EventCategory;
    USHORT ReservedFlags; 
    ULONG  ClosingRecordNumber; 
    ULONG  StringOffset;  
    ULONG  UserSidLength;
    ULONG  UserSidOffset;
    ULONG  DataLength;
    ULONG  DataOffset;    
    
    
    
    
    
    
    
    
    
    
    
} EVENTLOGRECORD, *PEVENTLOGRECORD;






























NTSTATUS
__stdcall
ElfClearEventLogFileW (
      HANDLE LogHandle,
      PUNICODE_STRING BackupFileName
    );

NTSTATUS
__stdcall
ElfClearEventLogFileA (
      HANDLE LogHandle,
      PSTRING BackupFileName
    );

NTSTATUS
__stdcall
ElfBackupEventLogFileW (
      HANDLE LogHandle,
      PUNICODE_STRING BackupFileName
    );

NTSTATUS
__stdcall
ElfBackupEventLogFileA (
      HANDLE LogHandle,
      PSTRING BackupFileName
    );

NTSTATUS
__stdcall
ElfCloseEventLog (
      HANDLE LogHandle
    );

NTSTATUS
__stdcall
ElfDeregisterEventSource (
      HANDLE LogHandle
    );

NTSTATUS
__stdcall
ElfNumberOfRecords (
      HANDLE LogHandle,
     PULONG NumberOfRecords
    );

NTSTATUS
__stdcall
ElfOldestRecord (
      HANDLE LogHandle,
     PULONG OldestRecord
    );


NTSTATUS
__stdcall
ElfChangeNotify (
      HANDLE LogHandle,
      HANDLE Event
    );


NTSTATUS
__stdcall
ElfOpenEventLogW (
      PUNICODE_STRING UNCServerName,
      PUNICODE_STRING SourceName,
     PHANDLE         LogHandle
    );

NTSTATUS
__stdcall
ElfRegisterEventSourceW (
      PUNICODE_STRING UNCServerName,
      PUNICODE_STRING SourceName,
     PHANDLE         LogHandle
    );

NTSTATUS
__stdcall
ElfOpenBackupEventLogW (
      PUNICODE_STRING UNCServerName,
      PUNICODE_STRING FileName,
     PHANDLE         LogHandle
    );

NTSTATUS
__stdcall
ElfOpenEventLogA (
      PSTRING UNCServerName,
      PSTRING SourceName,
     PHANDLE LogHandle
    );

NTSTATUS
__stdcall
ElfRegisterEventSourceA (
      PSTRING UNCServerName,
      PSTRING SourceName,
     PHANDLE LogHandle
    );

NTSTATUS
__stdcall
ElfOpenBackupEventLogA (
      PSTRING UNCServerName,
      PSTRING FileName,
     PHANDLE LogHandle
    );


NTSTATUS
__stdcall
ElfReadEventLogW (
      HANDLE LogHandle,
      ULONG  ReadFlags,
      ULONG  RecordNumber,
     PVOID  Buffer,
      ULONG  NumberOfBytesToRead,
     PULONG NumberOfBytesRead,
     PULONG MinNumberOfBytesNeeded
    );


NTSTATUS
__stdcall
ElfReadEventLogA (
      HANDLE LogHandle,
      ULONG  ReadFlags,
      ULONG  RecordNumber,
     PVOID  Buffer,
      ULONG  NumberOfBytesToRead,
     PULONG NumberOfBytesRead,
     PULONG MinNumberOfBytesNeeded
    );


NTSTATUS
__stdcall
ElfReportEventW (
         HANDLE      LogHandle,
         USHORT      EventType,
         USHORT      EventCategory   ,
         ULONG       EventID,
         PSID        UserSid         ,
         USHORT      NumStrings,
         ULONG       DataSize,
         PUNICODE_STRING *Strings    ,
         PVOID       Data            ,
         USHORT      Flags,
      PULONG      RecordNumber    ,
      PULONG      TimeWritten     
    );

NTSTATUS
__stdcall
ElfReportEventA (
         HANDLE      LogHandle,
         USHORT      EventType,
         USHORT      EventCategory   ,
         ULONG       EventID,
         PSID        UserSid         ,
         USHORT      NumStrings,
         ULONG       DataSize,
         PANSI_STRING *Strings       ,
         PVOID       Data            ,
         USHORT      Flags,
      PULONG      RecordNumber    ,
      PULONG      TimeWritten     
    );







































                                            




























































typedef enum _CM_SERVICE_NODE_TYPE {
    DriverType               = 0x00000001,
    FileSystemType           = 0x00000002,
    Win32ServiceOwnProcess   = 0x00000010,
    Win32ServiceShareProcess = 0x00000020,
    AdapterType              = 0x00000004,
    RecognizerType           = 0x00000008
} SERVICE_NODE_TYPE;

typedef enum _CM_SERVICE_LOAD_TYPE {
    BootLoad    = 0x00000000,
    SystemLoad  = 0x00000001,
    AutoLoad    = 0x00000002,
    DemandLoad  = 0x00000003,
    DisableLoad = 0x00000004
} SERVICE_LOAD_TYPE;

typedef enum _CM_ERROR_CONTROL_TYPE {
    IgnoreError   = 0x00000000,
    NormalError   = 0x00000001,
    SevereError   = 0x00000002,
    CriticalError = 0x00000003
} SERVICE_ERROR_TYPE;
















typedef enum _CM_RESOURCE_TYPE {
    CmResourceTypeNull = 0,    
    CmResourceTypePort,
    CmResourceTypeInterrupt,
    CmResourceTypeMemory,
    CmResourceTypeDma,
    CmResourceTypeDeviceSpecific,
    CmResourceTypeMaximum
} CM_RESOURCE_TYPE;





typedef enum _CM_SHARE_DISPOSITION {
    CmResourceShareUndetermined = 0,    
    CmResourceShareDeviceExclusive,
    CmResourceShareDriverExclusive,
    CmResourceShareShared
} CM_SHARE_DISPOSITION;











































































#pragma warning(disable:4103)

#pragma pack(push)

#pragma pack(4)





typedef struct _CM_PARTIAL_RESOURCE_DESCRIPTOR {
    UCHAR Type;
    UCHAR ShareDisposition;
    USHORT Flags;
    union {

        
        
        
        
        

        struct {
            PHYSICAL_ADDRESS Start;
            ULONG Length;
        } Port;

        
        
        
        

        struct {
            ULONG Level;
            ULONG Vector;
            ULONG Affinity;
        } Interrupt;

        
        
        
        
        

        struct {
            PHYSICAL_ADDRESS Start;    
            ULONG Length;
        } Memory;

        
        
        

        struct {
            ULONG Channel;
            ULONG Port;
            ULONG Reserved1;
        } Dma;

        
        
        
        
        
        

        struct {
            ULONG DataSize;
            ULONG Reserved1;
            ULONG Reserved2;
        } DeviceSpecificData;
    } u;
} CM_PARTIAL_RESOURCE_DESCRIPTOR, *PCM_PARTIAL_RESOURCE_DESCRIPTOR;



























#pragma warning(disable:4103)

#pragma pack(pop)




















typedef struct _CM_PARTIAL_RESOURCE_LIST {
    USHORT Version;
    USHORT Revision;
    ULONG Count;
    CM_PARTIAL_RESOURCE_DESCRIPTOR PartialDescriptors[1];
} CM_PARTIAL_RESOURCE_LIST, *PCM_PARTIAL_RESOURCE_LIST;
















typedef struct _CM_FULL_RESOURCE_DESCRIPTOR {
    INTERFACE_TYPE InterfaceType;
    ULONG BusNumber;
    CM_PARTIAL_RESOURCE_LIST PartialResourceList;
} CM_FULL_RESOURCE_DESCRIPTOR, *PCM_FULL_RESOURCE_DESCRIPTOR;






typedef struct _CM_RESOURCE_LIST {
    ULONG Count;
    CM_FULL_RESOURCE_DESCRIPTOR List[1];
} CM_RESOURCE_LIST, *PCM_RESOURCE_LIST;













typedef struct _DEVICE_FLAGS {
    ULONG Failed : 1;
    ULONG ReadOnly : 1;
    ULONG Removable : 1;
    ULONG ConsoleIn : 1;
    ULONG ConsoleOut : 1;
    ULONG Input : 1;
    ULONG Output : 1;
} DEVICE_FLAGS, *PDEVICE_FLAGS;





typedef struct _CM_COMPONENT_INFORMATION {
    DEVICE_FLAGS Flags;
    ULONG Version;
    ULONG Key;
    ULONG AffinityMask;
} CM_COMPONENT_INFORMATION, *PCM_COMPONENT_INFORMATION;















typedef struct _CM_ROM_BLOCK {
    ULONG Address;
    ULONG Size;
} CM_ROM_BLOCK, *PCM_ROM_BLOCK;



























#pragma warning(disable:4103)

#pragma pack(push)

#pragma pack(1)












typedef struct _CM_INT13_DRIVE_PARAMETER {
    USHORT DriveSelect;
    ULONG MaxCylinders;
    USHORT SectorsPerTrack;
    USHORT MaxHeads;
    USHORT NumberDrives;
} CM_INT13_DRIVE_PARAMETER, *PCM_INT13_DRIVE_PARAMETER;







typedef struct _CM_MCA_POS_DATA {
    USHORT AdapterId;
    UCHAR PosData1;
    UCHAR PosData2;
    UCHAR PosData3;
    UCHAR PosData4;
} CM_MCA_POS_DATA, *PCM_MCA_POS_DATA;





typedef struct _EISA_MEMORY_TYPE {
    UCHAR ReadWrite: 1;
    UCHAR Cached : 1;
    UCHAR Reserved0 :1;
    UCHAR Type:2;
    UCHAR Shared:1;
    UCHAR Reserved1 :1;
    UCHAR MoreEntries : 1;
} EISA_MEMORY_TYPE, *PEISA_MEMORY_TYPE;

typedef struct _EISA_MEMORY_CONFIGURATION {
    EISA_MEMORY_TYPE ConfigurationByte;
    UCHAR DataSize;
    USHORT AddressLowWord;
    UCHAR AddressHighByte;
    USHORT MemorySize;
} EISA_MEMORY_CONFIGURATION, *PEISA_MEMORY_CONFIGURATION;






typedef struct _EISA_IRQ_DESCRIPTOR {
    UCHAR Interrupt : 4;
    UCHAR Reserved :1;
    UCHAR LevelTriggered :1;
    UCHAR Shared : 1;
    UCHAR MoreEntries : 1;
} EISA_IRQ_DESCRIPTOR, *PEISA_IRQ_DESCRIPTOR;

typedef struct _EISA_IRQ_CONFIGURATION {
    EISA_IRQ_DESCRIPTOR ConfigurationByte;
    UCHAR Reserved;
} EISA_IRQ_CONFIGURATION, *PEISA_IRQ_CONFIGURATION;






typedef struct _DMA_CONFIGURATION_BYTE0 {
    UCHAR Channel : 3;
    UCHAR Reserved : 3;
    UCHAR Shared :1;
    UCHAR MoreEntries :1;
} DMA_CONFIGURATION_BYTE0;

typedef struct _DMA_CONFIGURATION_BYTE1 {
    UCHAR Reserved0 : 2;
    UCHAR TransferSize : 2;
    UCHAR Timing : 2;
    UCHAR Reserved1 : 2;
} DMA_CONFIGURATION_BYTE1;

typedef struct _EISA_DMA_CONFIGURATION {
    DMA_CONFIGURATION_BYTE0 ConfigurationByte0;
    DMA_CONFIGURATION_BYTE1 ConfigurationByte1;
} EISA_DMA_CONFIGURATION, *PEISA_DMA_CONFIGURATION;






typedef struct _EISA_PORT_DESCRIPTOR {
    UCHAR NumberPorts : 5;
    UCHAR Reserved :1;
    UCHAR Shared :1;
    UCHAR MoreEntries : 1;
} EISA_PORT_DESCRIPTOR, *PEISA_PORT_DESCRIPTOR;

typedef struct _EISA_PORT_CONFIGURATION {
    EISA_PORT_DESCRIPTOR Configuration;
    USHORT PortAddress;
} EISA_PORT_CONFIGURATION, *PEISA_PORT_CONFIGURATION;








typedef struct _CM_EISA_SLOT_INFORMATION {
    UCHAR ReturnCode;
    UCHAR ReturnFlags;
    UCHAR MajorRevision;
    UCHAR MinorRevision;
    USHORT Checksum;
    UCHAR NumberFunctions;
    UCHAR FunctionInformation;
    ULONG CompressedId;
} CM_EISA_SLOT_INFORMATION, *PCM_EISA_SLOT_INFORMATION;






typedef struct _CM_EISA_FUNCTION_INFORMATION {
    ULONG CompressedId;
    UCHAR IdSlotFlags1;
    UCHAR IdSlotFlags2;
    UCHAR MinorRevision;
    UCHAR MajorRevision;
    UCHAR Selections[26];
    UCHAR FunctionFlags;
    UCHAR TypeString[80];
    EISA_MEMORY_CONFIGURATION EisaMemory[9];
    EISA_IRQ_CONFIGURATION EisaIrq[7];
    EISA_DMA_CONFIGURATION EisaDma[4];
    EISA_PORT_CONFIGURATION EisaPort[20];
    UCHAR InitializationData[60];
} CM_EISA_FUNCTION_INFORMATION, *PCM_EISA_FUNCTION_INFORMATION;



















typedef struct _CM_PNP_BIOS_DEVICE_NODE {
    USHORT Size;
    UCHAR Node;
    ULONG ProductId;
    UCHAR DeviceType[3];
    USHORT DeviceAttributes;
    
    
} CM_PNP_BIOS_DEVICE_NODE,*PCM_PNP_BIOS_DEVICE_NODE;





typedef struct _CM_PNP_BIOS_INSTALLATION_CHECK {
    UCHAR Signature[4];             
    UCHAR Revision;
    UCHAR Length;
    USHORT ControlField;
    UCHAR Checksum;
    ULONG EventFlagAddress;         
    USHORT RealModeEntryOffset;
    USHORT RealModeEntrySegment;
    USHORT ProtectedModeEntryOffset;
    ULONG ProtectedModeCodeBaseAddress;
    ULONG OemDeviceId;
    USHORT RealModeDataBaseAddress;
    ULONG ProtectedModeDataBaseAddress;
} CM_PNP_BIOS_INSTALLATION_CHECK, *PCM_PNP_BIOS_INSTALLATION_CHECK;




























#pragma warning(disable:4103)

#pragma pack(pop)




























































typedef struct _CM_SCSI_DEVICE_DATA {
    USHORT Version;
    USHORT Revision;
    UCHAR HostIdentifier;
} CM_SCSI_DEVICE_DATA, *PCM_SCSI_DEVICE_DATA;









typedef struct _CM_VIDEO_DEVICE_DATA {
    USHORT Version;
    USHORT Revision;
    ULONG VideoClock;
} CM_VIDEO_DEVICE_DATA, *PCM_VIDEO_DEVICE_DATA;





typedef struct _CM_SONIC_DEVICE_DATA {
    USHORT Version;
    USHORT Revision;
    USHORT DataConfigurationRegister;
    UCHAR EthernetAddress[8];
} CM_SONIC_DEVICE_DATA, *PCM_SONIC_DEVICE_DATA;





typedef struct _CM_SERIAL_DEVICE_DATA {
    USHORT Version;
    USHORT Revision;
    ULONG BaudClock;
} CM_SERIAL_DEVICE_DATA, *PCM_SERIAL_DEVICE_DATA;









typedef struct _CM_MONITOR_DEVICE_DATA {
    USHORT Version;
    USHORT Revision;
    USHORT HorizontalScreenSize;
    USHORT VerticalScreenSize;
    USHORT HorizontalResolution;
    USHORT VerticalResolution;
    USHORT HorizontalDisplayTimeLow;
    USHORT HorizontalDisplayTime;
    USHORT HorizontalDisplayTimeHigh;
    USHORT HorizontalBackPorchLow;
    USHORT HorizontalBackPorch;
    USHORT HorizontalBackPorchHigh;
    USHORT HorizontalFrontPorchLow;
    USHORT HorizontalFrontPorch;
    USHORT HorizontalFrontPorchHigh;
    USHORT HorizontalSyncLow;
    USHORT HorizontalSync;
    USHORT HorizontalSyncHigh;
    USHORT VerticalBackPorchLow;
    USHORT VerticalBackPorch;
    USHORT VerticalBackPorchHigh;
    USHORT VerticalFrontPorchLow;
    USHORT VerticalFrontPorch;
    USHORT VerticalFrontPorchHigh;
    USHORT VerticalSyncLow;
    USHORT VerticalSync;
    USHORT VerticalSyncHigh;
} CM_MONITOR_DEVICE_DATA, *PCM_MONITOR_DEVICE_DATA;





typedef struct _CM_FLOPPY_DEVICE_DATA {
    USHORT Version;
    USHORT Revision;
    CHAR Size[8];
    ULONG MaxDensity;
    ULONG MountDensity;
    
    
    
    UCHAR StepRateHeadUnloadTime;
    UCHAR HeadLoadTime;
    UCHAR MotorOffTime;
    UCHAR SectorLengthCode;
    UCHAR SectorPerTrack;
    UCHAR ReadWriteGapLength;
    UCHAR DataTransferLength;
    UCHAR FormatGapLength;
    UCHAR FormatFillCharacter;
    UCHAR HeadSettleTime;
    UCHAR MotorSettleTime;
    UCHAR MaximumTrackValue;
    UCHAR DataTransferRate;
} CM_FLOPPY_DEVICE_DATA, *PCM_FLOPPY_DEVICE_DATA;














typedef struct _CM_KEYBOARD_DEVICE_DATA {
    USHORT Version;
    USHORT Revision;
    UCHAR Type;
    UCHAR Subtype;
    USHORT KeyboardFlags;
} CM_KEYBOARD_DEVICE_DATA, *PCM_KEYBOARD_DEVICE_DATA;





typedef struct _CM_DISK_GEOMETRY_DEVICE_DATA {
    ULONG BytesPerSector;
    ULONG NumberOfCylinders;
    ULONG SectorsPerTrack;
    ULONG NumberOfHeads;
} CM_DISK_GEOMETRY_DEVICE_DATA, *PCM_DISK_GEOMETRY_DEVICE_DATA;
















typedef struct _IO_RESOURCE_DESCRIPTOR {
    UCHAR Option;
    UCHAR Type;                         
    UCHAR ShareDisposition;             
    UCHAR Spare1;
    USHORT Flags;                       
    USHORT Spare2;                      

    union {
        struct {
            ULONG Length;
            ULONG Alignment;
            PHYSICAL_ADDRESS MinimumAddress;
            PHYSICAL_ADDRESS MaximumAddress;
        } Port;

        struct {
            ULONG Length;
            ULONG Alignment;
            PHYSICAL_ADDRESS MinimumAddress;
            PHYSICAL_ADDRESS MaximumAddress;
        } Memory;

        struct {
            ULONG MinimumVector;
            ULONG MaximumVector;
        } Interrupt;

        struct {
            ULONG MinimumChannel;
            ULONG MaximumChannel;
        } Dma;

    } u;

} IO_RESOURCE_DESCRIPTOR, *PIO_RESOURCE_DESCRIPTOR;




typedef struct _IO_RESOURCE_LIST {
    USHORT Version;
    USHORT Revision;

    ULONG Count;
    IO_RESOURCE_DESCRIPTOR Descriptors[1];
} IO_RESOURCE_LIST, *PIO_RESOURCE_LIST;


typedef struct _IO_RESOURCE_REQUIREMENTS_LIST {
    ULONG ListSize;
    INTERFACE_TYPE InterfaceType;
    ULONG BusNumber;
    ULONG SlotNumber;
    ULONG Reserved[3];
    ULONG AlternativeLists;
    IO_RESOURCE_LIST  List[1];
} IO_RESOURCE_REQUIREMENTS_LIST, *PIO_RESOURCE_REQUIREMENTS_LIST;































typedef struct _CPTABLEINFO {
    USHORT CodePage;                    
    USHORT MaximumCharacterSize;        
    USHORT DefaultChar;                 
    USHORT UniDefaultChar;              
    USHORT TransDefaultChar;            
    USHORT TransUniDefaultChar;         
    USHORT DBCSCodePage;                
    UCHAR  LeadByte[12]; 
    PUSHORT MultiByteTable;             
    PVOID   WideCharTable;              
    PUSHORT DBCSRanges;                 
    PUSHORT DBCSOffsets;                
} CPTABLEINFO, *PCPTABLEINFO;

typedef struct _NLSTABLEINFO {
    CPTABLEINFO OemTableInfo;
    CPTABLEINFO AnsiTableInfo;
    PUSHORT UpperCaseTable;             
    PUSHORT LowerCaseTable;             
} NLSTABLEINFO, *PNLSTABLEINFO;



















































































































































































typedef struct _PLUGPLAY_EVENT_QUERY_EJECT_DATA {
    PLUGPLAY_BUS_INSTANCE BusInstance;
    WCHAR DeviceId[1];
} PLUGPLAY_EVENT_QUERY_EJECT_DATA, *PPLUGPLAY_EVENT_QUERY_EJECT_DATA;





typedef struct _PLUGPLAY_EVENT_BUSCHECK_DATA {
    PLUGPLAY_BUS_INSTANCE BusInstance;
} PLUGPLAY_EVENT_BUSCHECK_DATA, *PPLUGPLAY_EVENT_BUSCHECK_DATA;




















typedef struct _PLUGPLAY_EVENT_DOCK_CHANGE_DATA {
    SYSTEM_DOCK_INFORMATION NewDockState;
} PLUGPLAY_EVENT_DOCK_CHANGE_DATA, *PPLUGPLAY_EVENT_DOCK_CHANGE_DATA;




typedef struct _PLUGPLAY_EVENT_BLOCK {
    ULONG EventId;
    ULONG EventBufferLength;
    UCHAR EventBuffer[1];
} PLUGPLAY_EVENT_BLOCK, *PPLUGPLAY_EVENT_BLOCK;





typedef
void
(*PPLUGPLAY_APC_ROUTINE) (
     PVOID PnPContext,
     NTSTATUS Status,
     PPLUGPLAY_EVENT_BLOCK PnPEvent
    );




typedef enum _PLUGPLAY_CONTROL_CLASS {
    PlugPlayControlQueryRemoveDevice,
    PlugPlayControlRemoveDevice,
    PlugPlayControlCancelRemoveDevice,
    PlugPlayControlAddDevice,
    PlugPlayControlEjectDevice,
    PlugPlayControlUnlockDevice,
    PlugPlayControlQueryDeviceCapabilities,
    PlugPlayControlGetDevicePathInformation,
    PlugPlayControlRegisterNewDevice,
    PlugPlayControlEnumerateDevice,
    PlugPlayControlGenerateLegacyDevice,
    PlugPlayControlDeregisterDevice,
    PlugPlayControlDetectResourceConflict,
    MaxPlugPlayControl
} PLUGPLAY_CONTROL_CLASS, *PPLUGPLAY_CONTROL_CLASS;




typedef struct _PLUGPLAY_CONTROL_DEVICE_CONTROL_DATA {
    UNICODE_STRING DeviceInstance;
    NTSTATUS Status;
} PLUGPLAY_CONTROL_DEVICE_CONTROL_DATA, *PPLUGPLAY_CONTROL_DEVICE_CONTROL_DATA;






typedef struct _PLUGPLAY_CONTROL_DEVICE_CAPABILITIES_DATA {
    UNICODE_STRING DeviceInstance;
    
} PLUGPLAY_CONTROL_DEVICE_CAPABILITIES_DATA, *PPLUGPLAY_CONTROL_DEVICE_CAPABILITIES_DATA;




typedef struct _PLUGPLAY_CONTROL_DEVICE_PATH_DATA {
    UNICODE_STRING DevicePath;
    ULONG ServiceNameLength;
    ULONG DeviceInstanceOffset;
    ULONG DeviceInstanceLength;
    ULONG ServiceInstanceOrdinal;
    WCHAR ServiceName[1];       
} PLUGPLAY_CONTROL_DEVICE_PATH_DATA, *PPLUGPLAY_CONTROL_DEVICE_PATH_DATA;




typedef struct _PLUGPLAY_CONTROL_LEGACY_DEVGEN_DATA {
    UNICODE_STRING ServiceName;
    ULONG DeviceInstanceLength;
    WCHAR DeviceInstance[1];
} PLUGPLAY_CONTROL_LEGACY_DEVGEN_DATA, *PPLUGPLAY_CONTROL_LEGACY_DEVGEN_DATA;




typedef struct _PLUGPLAY_CONTROL_DEVICE_RESOURCE_DATA {
    UNICODE_STRING DeviceInstance;
    PCM_RESOURCE_LIST ResourceList;
    ULONG ResourceListSize;
    NTSTATUS Status;
} PLUGPLAY_CONTROL_DEVICE_RESOURCE_DATA, *PPLUGPLAY_CONTROL_DEVICE_RESOURCE_DATA;


















__declspec(dllimport)
NTSTATUS
__stdcall
NtGetPlugPlayEvent(
      PPLUGPLAY_APC_ROUTINE PnPApcRoutine ,
      PVOID PnPContext ,
     PPLUGPLAY_EVENT_BLOCK PnPEvent,
      ULONG EventBufferLength
    );

__declspec(dllimport)
NTSTATUS
__stdcall
NtPlugPlayControl(
         PLUGPLAY_CONTROL_CLASS PnPControlClass,
      PVOID PnPControlData,
         ULONG PnPControlDataLength,
        PULONG RequiredLength 
    );


























































#pragma once






























































typedef unsigned int size_t;







































        void *  __cdecl memcpy(void *, const void *, size_t);
        int     __cdecl memcmp(const void *, const void *, size_t);
        void *  __cdecl memset(void *, int, size_t);
        char *  __cdecl _strset(char *, int);
        char *  __cdecl strcpy(char *, const char *);
        char *  __cdecl strcat(char *, const char *);
        int     __cdecl strcmp(const char *, const char *);
        size_t  __cdecl strlen(const char *);

__declspec(dllimport) void *  __cdecl _memccpy(void *, const void *, int, unsigned int);
__declspec(dllimport) void *  __cdecl memchr(const void *, int, size_t);
__declspec(dllimport) int     __cdecl _memicmp(const void *, const void *, unsigned int);





__declspec(dllimport) void *  __cdecl memmove(void *, const void *, size_t);



__declspec(dllimport) char *  __cdecl strchr(const char *, int);
__declspec(dllimport) int     __cdecl _strcmpi(const char *, const char *);
__declspec(dllimport) int     __cdecl _stricmp(const char *, const char *);
__declspec(dllimport) int     __cdecl strcoll(const char *, const char *);
__declspec(dllimport) int     __cdecl _stricoll(const char *, const char *);
__declspec(dllimport) int     __cdecl _strncoll(const char *, const char *, size_t);
__declspec(dllimport) int     __cdecl _strnicoll(const char *, const char *, size_t);
__declspec(dllimport) size_t  __cdecl strcspn(const char *, const char *);
__declspec(dllimport) char *  __cdecl _strdup(const char *);
__declspec(dllimport) char *  __cdecl _strerror(const char *);
__declspec(dllimport) char *  __cdecl strerror(int);
__declspec(dllimport) char *  __cdecl _strlwr(char *);
__declspec(dllimport) char *  __cdecl strncat(char *, const char *, size_t);
__declspec(dllimport) int     __cdecl strncmp(const char *, const char *, size_t);
__declspec(dllimport) int     __cdecl _strnicmp(const char *, const char *, size_t);
__declspec(dllimport) char *  __cdecl strncpy(char *, const char *, size_t);
__declspec(dllimport) char *  __cdecl _strnset(char *, int, size_t);
__declspec(dllimport) char *  __cdecl strpbrk(const char *, const char *);
__declspec(dllimport) char *  __cdecl strrchr(const char *, int);
__declspec(dllimport) char *  __cdecl _strrev(char *);
__declspec(dllimport) size_t  __cdecl strspn(const char *, const char *);
__declspec(dllimport) char *  __cdecl strstr(const char *, const char *);
__declspec(dllimport) char *  __cdecl strtok(char *, const char *);
__declspec(dllimport) char *  __cdecl _strupr(char *);
__declspec(dllimport) size_t  __cdecl strxfrm (char *, const char *, size_t);































__declspec(dllimport) void * __cdecl memccpy(void *, const void *, int, unsigned int);
__declspec(dllimport) int __cdecl memicmp(const void *, const void *, unsigned int);
__declspec(dllimport) int __cdecl strcmpi(const char *, const char *);
__declspec(dllimport) int __cdecl stricmp(const char *, const char *);
__declspec(dllimport) char * __cdecl strdup(const char *);
__declspec(dllimport) char * __cdecl strlwr(char *);
__declspec(dllimport) int __cdecl strnicmp(const char *, const char *, size_t);
__declspec(dllimport) char * __cdecl strnset(char *, int, size_t);
__declspec(dllimport) char * __cdecl strrev(char *);
        char * __cdecl strset(char *, int);
__declspec(dllimport) char * __cdecl strupr(char *);











__declspec(dllimport) wchar_t * __cdecl wcscat(wchar_t *, const wchar_t *);
__declspec(dllimport) wchar_t * __cdecl wcschr(const wchar_t *, wchar_t);
__declspec(dllimport) int __cdecl wcscmp(const wchar_t *, const wchar_t *);
__declspec(dllimport) wchar_t * __cdecl wcscpy(wchar_t *, const wchar_t *);
__declspec(dllimport) size_t __cdecl wcscspn(const wchar_t *, const wchar_t *);
__declspec(dllimport) size_t __cdecl wcslen(const wchar_t *);
__declspec(dllimport) wchar_t * __cdecl wcsncat(wchar_t *, const wchar_t *, size_t);
__declspec(dllimport) int __cdecl wcsncmp(const wchar_t *, const wchar_t *, size_t);
__declspec(dllimport) wchar_t * __cdecl wcsncpy(wchar_t *, const wchar_t *, size_t);
__declspec(dllimport) wchar_t * __cdecl wcspbrk(const wchar_t *, const wchar_t *);
__declspec(dllimport) wchar_t * __cdecl wcsrchr(const wchar_t *, wchar_t);
__declspec(dllimport) size_t __cdecl wcsspn(const wchar_t *, const wchar_t *);
__declspec(dllimport) wchar_t * __cdecl wcsstr(const wchar_t *, const wchar_t *);
__declspec(dllimport) wchar_t * __cdecl wcstok(wchar_t *, const wchar_t *);

__declspec(dllimport) wchar_t * __cdecl _wcsdup(const wchar_t *);
__declspec(dllimport) int __cdecl _wcsicmp(const wchar_t *, const wchar_t *);
__declspec(dllimport) int __cdecl _wcsnicmp(const wchar_t *, const wchar_t *, size_t);
__declspec(dllimport) wchar_t * __cdecl _wcsnset(wchar_t *, wchar_t, size_t);
__declspec(dllimport) wchar_t * __cdecl _wcsrev(wchar_t *);
__declspec(dllimport) wchar_t * __cdecl _wcsset(wchar_t *, wchar_t);

__declspec(dllimport) wchar_t * __cdecl _wcslwr(wchar_t *);
__declspec(dllimport) wchar_t * __cdecl _wcsupr(wchar_t *);
__declspec(dllimport) size_t __cdecl wcsxfrm(wchar_t *, const wchar_t *, size_t);
__declspec(dllimport) int __cdecl wcscoll(const wchar_t *, const wchar_t *);
__declspec(dllimport) int __cdecl _wcsicoll(const wchar_t *, const wchar_t *);
__declspec(dllimport) int __cdecl _wcsncoll(const wchar_t *, const wchar_t *, size_t);
__declspec(dllimport) int __cdecl _wcsnicoll(const wchar_t *, const wchar_t *, size_t);






















__declspec(dllimport) wchar_t * __cdecl wcsdup(const wchar_t *);
__declspec(dllimport) int __cdecl wcsicmp(const wchar_t *, const wchar_t *);
__declspec(dllimport) int __cdecl wcsnicmp(const wchar_t *, const wchar_t *, size_t);
__declspec(dllimport) wchar_t * __cdecl wcsnset(wchar_t *, wchar_t, size_t);
__declspec(dllimport) wchar_t * __cdecl wcsrev(wchar_t *);
__declspec(dllimport) wchar_t * __cdecl wcsset(wchar_t *, wchar_t);
__declspec(dllimport) wchar_t * __cdecl wcslwr(wchar_t *);
__declspec(dllimport) wchar_t * __cdecl wcsupr(wchar_t *);
__declspec(dllimport) int __cdecl wcsicoll(const wchar_t *, const wchar_t *);






























__declspec(dllimport)
void
__stdcall
RtlAssert(
    PVOID FailedAssertion,
    PVOID FileName,
    ULONG LineNumber,
    PCHAR Message
    );






























































































































































typedef struct _RTL_SPLAY_LINKS {
    struct _RTL_SPLAY_LINKS *Parent;
    struct _RTL_SPLAY_LINKS *LeftChild;
    struct _RTL_SPLAY_LINKS *RightChild;
} RTL_SPLAY_LINKS;
typedef RTL_SPLAY_LINKS *PRTL_SPLAY_LINKS;





































































































































































__declspec(dllimport)
PRTL_SPLAY_LINKS
__stdcall
RtlSplay (
    PRTL_SPLAY_LINKS Links
    );








__declspec(dllimport)
PRTL_SPLAY_LINKS
__stdcall
RtlDelete (
    PRTL_SPLAY_LINKS Links
    );










__declspec(dllimport)
void
__stdcall
RtlDeleteNoSplay (
    PRTL_SPLAY_LINKS Links,
    PRTL_SPLAY_LINKS *Root
    );








__declspec(dllimport)
PRTL_SPLAY_LINKS
__stdcall
RtlSubtreeSuccessor (
    PRTL_SPLAY_LINKS Links
    );








__declspec(dllimport)
PRTL_SPLAY_LINKS
__stdcall
RtlSubtreePredecessor (
    PRTL_SPLAY_LINKS Links
    );







__declspec(dllimport)
PRTL_SPLAY_LINKS
__stdcall
RtlRealSuccessor (
    PRTL_SPLAY_LINKS Links
    );








__declspec(dllimport)
PRTL_SPLAY_LINKS
__stdcall
RtlRealPredecessor (
    PRTL_SPLAY_LINKS Links
    );
























struct _RTL_GENERIC_TABLE;





typedef enum _RTL_GENERIC_COMPARE_RESULTS {
    GenericLessThan,
    GenericGreaterThan,
    GenericEqual
} RTL_GENERIC_COMPARE_RESULTS;







typedef
RTL_GENERIC_COMPARE_RESULTS
(__stdcall *PRTL_GENERIC_COMPARE_ROUTINE) (
    struct _RTL_GENERIC_TABLE *Table,
    PVOID FirstStruct,
    PVOID SecondStruct
    );






typedef
PVOID
(__stdcall *PRTL_GENERIC_ALLOCATE_ROUTINE) (
    struct _RTL_GENERIC_TABLE *Table,
    CLONG ByteSize
    );







typedef
void
(__stdcall *PRTL_GENERIC_FREE_ROUTINE) (
    struct _RTL_GENERIC_TABLE *Table,
    PVOID Buffer
    );








typedef struct _RTL_GENERIC_TABLE {
    PRTL_SPLAY_LINKS TableRoot;
    LIST_ENTRY InsertOrderList;
    PLIST_ENTRY OrderedPointer;
    ULONG WhichOrderedElement;
    ULONG NumberGenericTableElements;
    PRTL_GENERIC_COMPARE_ROUTINE CompareRoutine;
    PRTL_GENERIC_ALLOCATE_ROUTINE AllocateRoutine;
    PRTL_GENERIC_FREE_ROUTINE FreeRoutine;
    PVOID TableContext;
} RTL_GENERIC_TABLE;
typedef RTL_GENERIC_TABLE *PRTL_GENERIC_TABLE;








__declspec(dllimport)
void
__stdcall
RtlInitializeGenericTable (
    PRTL_GENERIC_TABLE Table,
    PRTL_GENERIC_COMPARE_ROUTINE CompareRoutine,
    PRTL_GENERIC_ALLOCATE_ROUTINE AllocateRoutine,
    PRTL_GENERIC_FREE_ROUTINE FreeRoutine,
    PVOID TableContext
    );














__declspec(dllimport)
PVOID
__stdcall
RtlInsertElementGenericTable (
    PRTL_GENERIC_TABLE Table,
    PVOID Buffer,
    CLONG BufferSize,
    PBOOLEAN NewElement
    );









__declspec(dllimport)
BOOLEAN
__stdcall
RtlDeleteElementGenericTable (
    PRTL_GENERIC_TABLE Table,
    PVOID Buffer
    );









__declspec(dllimport)
PVOID
__stdcall
RtlLookupElementGenericTable (
    PRTL_GENERIC_TABLE Table,
    PVOID Buffer
    );
























__declspec(dllimport)
PVOID
__stdcall
RtlEnumerateGenericTable (
    PRTL_GENERIC_TABLE Table,
    BOOLEAN Restart
    );


























__declspec(dllimport)
PVOID
__stdcall
RtlEnumerateGenericTableWithoutSplaying (
    PRTL_GENERIC_TABLE Table,
    PVOID *RestartKey
    );










__declspec(dllimport)
PVOID
__stdcall
RtlGetElementGenericTable(
    PRTL_GENERIC_TABLE Table,
    ULONG I
    );






__declspec(dllimport)
ULONG
__stdcall
RtlNumberGenericTableElements(
    PRTL_GENERIC_TABLE Table
    );







__declspec(dllimport)
BOOLEAN
__stdcall
RtlIsGenericTableEmpty (
    PRTL_GENERIC_TABLE Table
    );









__declspec(dllimport)
NTSTATUS
__stdcall
RtlInitializeHeapManager(
    void
    );



typedef NTSTATUS
(*PRTL_HEAP_COMMIT_ROUTINE)(
     PVOID Base,
      PVOID *CommitAddress,
      PULONG CommitSize
    );

typedef struct _RTL_HEAP_PARAMETERS {
    ULONG Length;
    ULONG SegmentReserve;
    ULONG SegmentCommit;
    ULONG DeCommitFreeBlockThreshold;
    ULONG DeCommitTotalFreeThreshold;
    ULONG MaximumAllocationSize;
    ULONG VirtualMemoryThreshold;
    ULONG InitialCommit;
    ULONG InitialReserve;
    PRTL_HEAP_COMMIT_ROUTINE CommitRoutine;
    ULONG Reserved[ 2 ];
} RTL_HEAP_PARAMETERS, *PRTL_HEAP_PARAMETERS;

__declspec(dllimport)
PVOID
__stdcall
RtlCreateHeap(
     ULONG Flags,
     PVOID HeapBase ,
     ULONG ReserveSize ,
     ULONG CommitSize ,
     PVOID Lock ,
     PRTL_HEAP_PARAMETERS Parameters 
    );

















































__declspec(dllimport)
PVOID
__stdcall
RtlDestroyHeap(
     PVOID HeapHandle
    );

__declspec(dllimport)
PVOID
__stdcall
RtlAllocateHeap(
     PVOID HeapHandle,
     ULONG Flags,
     ULONG Size
    );

__declspec(dllimport)
BOOLEAN
__stdcall
RtlFreeHeap(
     PVOID HeapHandle,
     ULONG Flags,
     PVOID BaseAddress
    );



__declspec(dllimport)
void
__stdcall
RtlProtectHeap(
     PVOID HeapHandle,
     BOOLEAN MakeReadOnly
    );










typedef
NTSTATUS
(__stdcall *PRTL_INITIALIZE_LOCK_ROUTINE) (
    PVOID Lock
    );

typedef
NTSTATUS
(__stdcall *PRTL_ACQUIRE_LOCK_ROUTINE) (
    PVOID Lock
    );

typedef
NTSTATUS
(__stdcall *PRTL_RELEASE_LOCK_ROUTINE) (
    PVOID Lock
    );

typedef
NTSTATUS
(__stdcall *PRTL_DELETE_LOCK_ROUTINE) (
    PVOID Lock
    );

typedef
BOOLEAN
(__stdcall *PRTL_OKAY_TO_LOCK_ROUTINE) (
     PVOID Lock
    );

__declspec(dllimport)
ULONG
__stdcall
RtlGetNtGlobalFlags(
    void
    );



















__declspec(dllimport)
void
__stdcall
RtlGetCallersAddress(
     PVOID *CallersAddress,
     PVOID *CallersCaller
    );





__declspec(dllimport)
NTSTATUS
__stdcall
RtlInitStackTraceDataBaseEx(
     PVOID CommitBase,
     ULONG CommitSize,
     ULONG ReserveSize,
     PRTL_INITIALIZE_LOCK_ROUTINE InitializeLockRoutine,
     PRTL_ACQUIRE_LOCK_ROUTINE AcquireLockRoutine,
     PRTL_RELEASE_LOCK_ROUTINE ReleaseLockRoutine,
     PRTL_OKAY_TO_LOCK_ROUTINE OkayToLockRoutine
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlInitializeStackTraceDataBase(
     PVOID CommitBase,
     ULONG CommitSize,
     ULONG ReserveSize
    );

__declspec(dllimport)
USHORT
__stdcall
RtlLogStackBackTrace(
    void
    );

__declspec(dllimport)
USHORT
__stdcall
RtlCaptureStackBackTrace(
    ULONG FramesToSkip,
    ULONG FramesToCapture,
    PVOID *BackTrace,
    PULONG BackTraceHash
   );




typedef struct _RTL_PROCESS_BACKTRACE_INFORMATION {
    PCHAR SymbolicBackTrace;        
    ULONG TraceCount;
    USHORT Index;
    USHORT Depth;
    PVOID BackTrace[ 16 ];
} RTL_PROCESS_BACKTRACE_INFORMATION, *PRTL_PROCESS_BACKTRACE_INFORMATION;

typedef struct _RTL_PROCESS_BACKTRACES {
    ULONG CommittedMemory;
    ULONG ReservedMemory;
    ULONG NumberOfBackTraceLookups;
    ULONG NumberOfBackTraces;
    RTL_PROCESS_BACKTRACE_INFORMATION BackTraces[ 1 ];
} RTL_PROCESS_BACKTRACES, *PRTL_PROCESS_BACKTRACES;













NTSTATUS
RtlInitializeAtomPackage(
     ULONG AllocationTag
    );

NTSTATUS
RtlCreateAtomTable(
     ULONG NumberOfBuckets,
     PVOID *AtomTableHandle
    );

NTSTATUS
RtlDestroyAtomTable(
     PVOID AtomTableHandle
    );

NTSTATUS
RtlEmptyAtomTable(
     PVOID AtomTableHandle,
     BOOLEAN IncludePinnedAtoms
    );

NTSTATUS
RtlAddAtomToAtomTable(
     PVOID AtomTableHandle,
     PWSTR AtomName ,
      PRTL_ATOM Atom 
    );

NTSTATUS
RtlLookupAtomInAtomTable(
     PVOID AtomTableHandle,
     PWSTR AtomName,
     PRTL_ATOM Atom 
    );

NTSTATUS
RtlDeleteAtomFromAtomTable(
     PVOID AtomTableHandle,
     RTL_ATOM Atom
    );

NTSTATUS
RtlPinAtomInAtomTable(
     PVOID AtomTableHandle,
     RTL_ATOM Atom
    );

NTSTATUS
RtlQueryAtomInAtomTable(
     PVOID AtomTableHandle,
     RTL_ATOM Atom,
     PULONG AtomUsage ,
     PULONG AtomFlags ,
      PWSTR AtomName ,
      PULONG AtomNameLength 
    );

NTSTATUS
RtlQueryAtomsInAtomTable(
     PVOID AtomTableHandle,
     ULONG MaximumNumberOfAtoms,
     PULONG NumberOfAtoms,
     PRTL_ATOM Atoms
    );








__declspec(dllimport)
BOOLEAN
__stdcall
RtlGetNtProductType(
    PNT_PRODUCT_TYPE    NtProductType
    );


__declspec(dllimport)
NTSTATUS
__stdcall
RtlFormatCurrentUserKeyPath (
     PUNICODE_STRING CurrentUserKeyPath
    );

NTSTATUS
__stdcall
RtlOpenCurrentUser(
     ULONG DesiredAccess,
     PHANDLE CurrentUserKey
    );



typedef NTSTATUS (*PRTL_QUERY_REGISTRY_ROUTINE)(
     PWSTR ValueName,
     ULONG ValueType,
     PVOID ValueData,
     ULONG ValueLength,
     PVOID Context,
     PVOID EntryContext
    );

typedef struct _RTL_QUERY_REGISTRY_TABLE {
    PRTL_QUERY_REGISTRY_ROUTINE QueryRoutine;
    ULONG Flags;
    PWSTR Name;
    PVOID EntryContext;
    ULONG DefaultType;
    PVOID DefaultData;
    ULONG DefaultLength;

} RTL_QUERY_REGISTRY_TABLE, *PRTL_QUERY_REGISTRY_TABLE;








                                                
                                                


                                                


                                                


                                                
                                                


                                                
                                                
                                                


                                                
                                                
                                                
                                                
                                                
                                                
                                                


                                                

__declspec(dllimport)
NTSTATUS
__stdcall
RtlQueryRegistryValues(
     ULONG RelativeTo,
     PWSTR Path,
     PRTL_QUERY_REGISTRY_TABLE QueryTable,
     PVOID Context,
     PVOID Environment 
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlWriteRegistryValue(
     ULONG RelativeTo,
     PWSTR Path,
     PWSTR ValueName,
     ULONG ValueType,
     PVOID ValueData,
     ULONG ValueLength
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlDeleteRegistryValue(
     ULONG RelativeTo,
     PWSTR Path,
     PWSTR ValueName
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlCreateRegistryKey(
     ULONG RelativeTo,
     PWSTR Path
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlCheckRegistryKey(
     ULONG RelativeTo,
     PWSTR Path
    );























__declspec(dllimport)
ULONG
__stdcall
RtlUniform (
    PULONG Seed
    );

__declspec(dllimport)                                            
ULONG                                               
__stdcall                                               
RtlRandom (                                         
    PULONG Seed                                     
    );                                              

__declspec(dllimport)
NTSTATUS
__stdcall
RtlIntegerToChar (
    ULONG Value,
    ULONG Base,
    LONG OutputLength,
    PSZ String
    );

__declspec(dllimport)                                            
NTSTATUS                                            
__stdcall                                               
RtlCharToInteger (                                  
    PCSZ String,                                    
    ULONG Base,                                     
    PULONG Value                                    
    );                                              

__declspec(dllimport)
NTSTATUS
__stdcall
RtlLargeIntegerToChar (
    PLARGE_INTEGER Value,
    ULONG Base ,
    LONG OutputLength,
    PSZ String
    );



__declspec(dllimport)
NTSTATUS
__stdcall
RtlIntegerToUnicodeString (
    ULONG Value,
    ULONG Base,
    PUNICODE_STRING String
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlUnicodeStringToInteger (
    PUNICODE_STRING String,
    ULONG Base,
    PULONG Value
    );


















extern BOOLEAN (*NlsMbCodePageTag);     
extern BOOLEAN (*NlsMbOemCodePageTag); 

__declspec(dllimport)
void
__stdcall
RtlInitString(
    PSTRING DestinationString,
    PCSZ SourceString
    );

__declspec(dllimport)
void
__stdcall
RtlInitAnsiString(
    PANSI_STRING DestinationString,
    PCSZ SourceString
    );

__declspec(dllimport)
void
__stdcall
RtlInitUnicodeString(
    PUNICODE_STRING DestinationString,
    PCWSTR SourceString
    );



__declspec(dllimport)
BOOLEAN
__stdcall
RtlCreateUnicodeString(
     PUNICODE_STRING DestinationString,
     PCWSTR SourceString
    );

__declspec(dllimport)
BOOLEAN
__stdcall
RtlEqualDomainName(
     PUNICODE_STRING String1,
     PUNICODE_STRING String2
    );

__declspec(dllimport)
BOOLEAN
__stdcall
RtlEqualComputerName(
     PUNICODE_STRING String1,
     PUNICODE_STRING String2
    );

__declspec(dllimport)
BOOLEAN
__stdcall
RtlCreateUnicodeStringFromAsciiz(
     PUNICODE_STRING DestinationString,
     PCSZ SourceString
    );



__declspec(dllimport)
void
__stdcall
RtlCopyString(
    PSTRING DestinationString,
    PSTRING SourceString
    );

__declspec(dllimport)
CHAR
__stdcall
RtlUpperChar (
    CHAR Character
    );

__declspec(dllimport)
LONG
__stdcall
RtlCompareString(
    PSTRING String1,
    PSTRING String2,
    BOOLEAN CaseInSensitive
    );

__declspec(dllimport)
BOOLEAN
__stdcall
RtlEqualString(
    PSTRING String1,
    PSTRING String2,
    BOOLEAN CaseInSensitive
    );



__declspec(dllimport)
BOOLEAN
__stdcall
RtlPrefixString(
    PSTRING String1,
    PSTRING String2,
    BOOLEAN CaseInSensitive
    );



__declspec(dllimport)
void
__stdcall
RtlUpperString(
    PSTRING DestinationString,
    PSTRING SourceString
    );



__declspec(dllimport)
NTSTATUS
__stdcall
RtlAppendAsciizToString (
    PSTRING Destination,
    PCSZ Source
    );



__declspec(dllimport)
NTSTATUS
__stdcall
RtlAppendStringToString (
    PSTRING Destination,
    PSTRING Source
    );






__declspec(dllimport)
NTSTATUS
__stdcall
RtlAnsiStringToUnicodeString(
    PUNICODE_STRING DestinationString,
    PANSI_STRING SourceString,
    BOOLEAN AllocateDestinationString
    );



__declspec(dllimport)
WCHAR
__stdcall
RtlAnsiCharToUnicodeChar(
    PUCHAR *SourceCharacter
    );



__declspec(dllimport)
NTSTATUS
__stdcall
RtlUnicodeStringToAnsiString(
    PANSI_STRING DestinationString,
    PUNICODE_STRING SourceString,
    BOOLEAN AllocateDestinationString
    );



__declspec(dllimport)
NTSTATUS
__stdcall
RtlUpcaseUnicodeStringToAnsiString(
    PANSI_STRING DestinationString,
    PUNICODE_STRING SourceString,
    BOOLEAN AllocateDestinationString
    );



__declspec(dllimport)
NTSTATUS
__stdcall
RtlOemStringToUnicodeString(
    PUNICODE_STRING DestinationString,
    POEM_STRING SourceString,
    BOOLEAN AllocateDestinationString
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlUnicodeStringToOemString(
    POEM_STRING DestinationString,
    PUNICODE_STRING SourceString,
    BOOLEAN AllocateDestinationString
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlUpcaseUnicodeStringToOemString(
    POEM_STRING DestinationString,
    PUNICODE_STRING SourceString,
    BOOLEAN AllocateDestinationString
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlOemStringToCountedUnicodeString(
    PUNICODE_STRING DestinationString,
    POEM_STRING SourceString,
    BOOLEAN AllocateDestinationString
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlUnicodeStringToCountedOemString(
    POEM_STRING DestinationString,
    PUNICODE_STRING SourceString,
    BOOLEAN AllocateDestinationString
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlUpcaseUnicodeStringToCountedOemString(
    POEM_STRING DestinationString,
    PUNICODE_STRING SourceString,
    BOOLEAN AllocateDestinationString
    );



__declspec(dllimport)
LONG
__stdcall
RtlCompareUnicodeString(
    PUNICODE_STRING String1,
    PUNICODE_STRING String2,
    BOOLEAN CaseInSensitive
    );

__declspec(dllimport)
BOOLEAN
__stdcall
RtlEqualUnicodeString(
    PUNICODE_STRING String1,
    PUNICODE_STRING String2,
    BOOLEAN CaseInSensitive
    );

__declspec(dllimport)
BOOLEAN
__stdcall
RtlPrefixUnicodeString(
     PUNICODE_STRING String1,
     PUNICODE_STRING String2,
     BOOLEAN CaseInSensitive
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlUpcaseUnicodeString(
    PUNICODE_STRING DestinationString,
    PUNICODE_STRING SourceString,
    BOOLEAN AllocateDestinationString
    );





NTSTATUS
RtlDowncaseUnicodeString(
     PUNICODE_STRING DestinationString,
     PUNICODE_STRING SourceString,
     BOOLEAN AllocateDestinationString
    );





__declspec(dllimport)
void
__stdcall
RtlCopyUnicodeString(
    PUNICODE_STRING DestinationString,
    PUNICODE_STRING SourceString
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlAppendUnicodeStringToString (
    PUNICODE_STRING Destination,
    PUNICODE_STRING Source
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlAppendUnicodeToString (
    PUNICODE_STRING Destination,
    PWSTR Source
    );



__declspec(dllimport)
WCHAR
__stdcall
RtlUpcaseUnicodeChar(
    WCHAR SourceCharacter
    );



__declspec(dllimport)
void
__stdcall
RtlFreeUnicodeString(
    PUNICODE_STRING UnicodeString
    );

__declspec(dllimport)
void
__stdcall
RtlFreeAnsiString(
    PANSI_STRING AnsiString
    );



__declspec(dllimport)
void
__stdcall
RtlFreeOemString(
    POEM_STRING OemString
    );

__declspec(dllimport)
ULONG
__stdcall
RtlxUnicodeStringToAnsiSize(
    PUNICODE_STRING UnicodeString
    );

















__declspec(dllimport)
ULONG
__stdcall
RtlxUnicodeStringToOemSize(
    PUNICODE_STRING UnicodeString
    );































__declspec(dllimport)
ULONG
__stdcall
RtlxAnsiStringToUnicodeSize(
    PANSI_STRING AnsiString
    );


















__declspec(dllimport)
ULONG
__stdcall
RtlxOemStringToUnicodeSize(
    POEM_STRING OemString
    );


























__declspec(dllimport)
NTSTATUS
__stdcall
RtlMultiByteToUnicodeN(
    PWSTR UnicodeString,
    ULONG MaxBytesInUnicodeString,
    PULONG BytesInUnicodeString,
    PCHAR MultiByteString,
    ULONG BytesInMultiByteString
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlMultiByteToUnicodeSize(
    PULONG BytesInUnicodeString,
    PCHAR MultiByteString,
    ULONG BytesInMultiByteString
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlUnicodeToMultiByteSize(
    PULONG BytesInMultiByteString,
    PWSTR UnicodeString,
    ULONG BytesInUnicodeString
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlUnicodeToMultiByteN(
    PCHAR MultiByteString,
    ULONG MaxBytesInMultiByteString,
    PULONG BytesInMultiByteString,
    PWSTR UnicodeString,
    ULONG BytesInUnicodeString
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlUpcaseUnicodeToMultiByteN(
    PCHAR MultiByteString,
    ULONG MaxBytesInMultiByteString,
    PULONG BytesInMultiByteString,
    PWSTR UnicodeString,
    ULONG BytesInUnicodeString
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlOemToUnicodeN(
    PWSTR UnicodeString,
    ULONG MaxBytesInUnicodeString,
    PULONG BytesInUnicodeString,
    PCHAR OemString,
    ULONG BytesInOemString
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlUnicodeToOemN(
    PCHAR OemString,
    ULONG MaxBytesInOemString,
    PULONG BytesInOemString,
    PWSTR UnicodeString,
    ULONG BytesInUnicodeString
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlUpcaseUnicodeToOemN(
    PCHAR OemString,
    ULONG MaxBytesInOemString,
    PULONG BytesInOemString,
    PWSTR UnicodeString,
    ULONG BytesInUnicodeString
    );

NTSTATUS
RtlConsoleMultiByteToUnicodeN(
     PWCH UnicodeString,
     ULONG MaxBytesInUnicodeString,
     PULONG BytesInUnicodeString ,
     PCH MultiByteString,
     ULONG BytesInMultiByteString,
     PULONG pdwSpecialChar );



























BOOLEAN
RtlIsTextUnicode(
     PVOID Buffer,
     ULONG Size,
      PULONG Result 
    );

typedef
PVOID
(__stdcall *PRTL_ALLOCATE_STRING_ROUTINE) (
    ULONG NumberOfBytes
    );

typedef
void
(__stdcall *PRTL_FREE_STRING_ROUTINE) (
    PVOID Buffer
    );

extern PRTL_ALLOCATE_STRING_ROUTINE RtlAllocateStringRoutine;
extern PRTL_FREE_STRING_ROUTINE RtlFreeStringRoutine;











typedef struct _GENERATE_NAME_CONTEXT {

    
    
    
    
    
    

    USHORT Checksum;
    BOOLEAN ChecksumInserted;

    UCHAR NameLength;         
    WCHAR NameBuffer[8];      

    ULONG ExtensionLength;    
    WCHAR ExtensionBuffer[4]; 

    ULONG LastIndexValue;

} GENERATE_NAME_CONTEXT;
typedef GENERATE_NAME_CONTEXT *PGENERATE_NAME_CONTEXT;

__declspec(dllimport)
void
__stdcall
RtlGenerate8dot3Name (
     PUNICODE_STRING Name,
     BOOLEAN AllowExtendedCharacters,
      PGENERATE_NAME_CONTEXT Context,
     PUNICODE_STRING Name8dot3
    );
__declspec(dllimport)
BOOLEAN
__stdcall
RtlIsNameLegalDOS8Dot3 (
     PUNICODE_STRING Name,
      POEM_STRING OemName ,
      PBOOLEAN NameContainsSpaces 
    );






__declspec(dllimport)
void
__stdcall
RtlInitializeContext(
    HANDLE Process,
    PCONTEXT Context,
    PVOID Parameter,
    PVOID InitialPc,
    PVOID InitialSp
    );


__declspec(dllimport)
NTSTATUS
__stdcall
RtlRemoteCall(
    HANDLE Process,
    HANDLE Thread,
    PVOID CallSite,
    ULONG ArgumentCount,
    PULONG Arguments,
    BOOLEAN PassContext,
    BOOLEAN AlreadySuspended
    );






__declspec(dllimport)
void
__stdcall
RtlAcquirePebLock(
    void
    );

__declspec(dllimport)
void
__stdcall
RtlReleasePebLock(
    void
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlAllocateFromPeb(
    ULONG Size,
    PVOID *Block
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlFreeToPeb(
    PVOID Block,
    ULONG Size
    );





__declspec(dllimport)
NTSTATUS
__stdcall
RtlCreateEnvironment(
    BOOLEAN CloneCurrentEnvironment,
    PVOID *Environment
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlDestroyEnvironment(
    PVOID Environment
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlSetCurrentEnvironment(
    PVOID Environment,
    PVOID *PreviousEnvironment
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlSetEnvironmentVariable(
    PVOID *Environment,
    PUNICODE_STRING Name,
    PUNICODE_STRING Value
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlQueryEnvironmentVariable_U (
    PVOID Environment,
    PUNICODE_STRING Name,
    PUNICODE_STRING Value
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlExpandEnvironmentStrings_U(
     PVOID Environment ,
     PUNICODE_STRING Source,
     PUNICODE_STRING Destination,
     PULONG ReturnedLength 
    );











typedef struct _PREFIX_TABLE_ENTRY {
    CSHORT NodeTypeCode;
    CSHORT NameLength;
    struct _PREFIX_TABLE_ENTRY *NextPrefixTree;
    RTL_SPLAY_LINKS Links;
    PSTRING Prefix;
} PREFIX_TABLE_ENTRY;
typedef PREFIX_TABLE_ENTRY *PPREFIX_TABLE_ENTRY;

typedef struct _PREFIX_TABLE {
    CSHORT NodeTypeCode;
    CSHORT NameLength;
    PPREFIX_TABLE_ENTRY NextPrefixTree;
} PREFIX_TABLE;
typedef PREFIX_TABLE *PPREFIX_TABLE;





__declspec(dllimport)
void
__stdcall
PfxInitialize (
    PPREFIX_TABLE PrefixTable
    );

__declspec(dllimport)
BOOLEAN
__stdcall
PfxInsertPrefix (
    PPREFIX_TABLE PrefixTable,
    PSTRING Prefix,
    PPREFIX_TABLE_ENTRY PrefixTableEntry
    );

__declspec(dllimport)
void
__stdcall
PfxRemovePrefix (
    PPREFIX_TABLE PrefixTable,
    PPREFIX_TABLE_ENTRY PrefixTableEntry
    );

__declspec(dllimport)
PPREFIX_TABLE_ENTRY
__stdcall
PfxFindPrefix (
    PPREFIX_TABLE PrefixTable,
    PSTRING FullName
    );






typedef struct _UNICODE_PREFIX_TABLE_ENTRY {
    CSHORT NodeTypeCode;
    CSHORT NameLength;
    struct _UNICODE_PREFIX_TABLE_ENTRY *NextPrefixTree;
    struct _UNICODE_PREFIX_TABLE_ENTRY *CaseMatch;
    RTL_SPLAY_LINKS Links;
    PUNICODE_STRING Prefix;
} UNICODE_PREFIX_TABLE_ENTRY;
typedef UNICODE_PREFIX_TABLE_ENTRY *PUNICODE_PREFIX_TABLE_ENTRY;

typedef struct _UNICODE_PREFIX_TABLE {
    CSHORT NodeTypeCode;
    CSHORT NameLength;
    PUNICODE_PREFIX_TABLE_ENTRY NextPrefixTree;
    PUNICODE_PREFIX_TABLE_ENTRY LastNextEntry;
} UNICODE_PREFIX_TABLE;
typedef UNICODE_PREFIX_TABLE *PUNICODE_PREFIX_TABLE;

__declspec(dllimport)
void
__stdcall
RtlInitializeUnicodePrefix (
    PUNICODE_PREFIX_TABLE PrefixTable
    );

__declspec(dllimport)
BOOLEAN
__stdcall
RtlInsertUnicodePrefix (
    PUNICODE_PREFIX_TABLE PrefixTable,
    PUNICODE_STRING Prefix,
    PUNICODE_PREFIX_TABLE_ENTRY PrefixTableEntry
    );

__declspec(dllimport)
void
__stdcall
RtlRemoveUnicodePrefix (
    PUNICODE_PREFIX_TABLE PrefixTable,
    PUNICODE_PREFIX_TABLE_ENTRY PrefixTableEntry
    );

__declspec(dllimport)
PUNICODE_PREFIX_TABLE_ENTRY
__stdcall
RtlFindUnicodePrefix (
    PUNICODE_PREFIX_TABLE PrefixTable,
    PUNICODE_STRING FullName,
    ULONG CaseInsensitiveIndex
    );

__declspec(dllimport)
PUNICODE_PREFIX_TABLE_ENTRY
__stdcall
RtlNextUnicodePrefix (
    PUNICODE_PREFIX_TABLE PrefixTable,
    BOOLEAN Restart
    );
























typedef struct _COMPRESSED_DATA_INFO {

    
    
    
    
    
    

    USHORT CompressionFormatAndEngine;

    
    
    
    
    
    
    
    
    
    

    UCHAR CompressionUnitShift;
    UCHAR ChunkShift;
    UCHAR ClusterShift;
    UCHAR Reserved;

    
    
    
    

    USHORT NumberOfChunks;

    
    
    
    
    
    
    
    
    
    
    
    

    ULONG CompressedChunkSizes[1];

} COMPRESSED_DATA_INFO;
typedef COMPRESSED_DATA_INFO *PCOMPRESSED_DATA_INFO;

__declspec(dllimport)
NTSTATUS
__stdcall
RtlGetCompressionWorkSpaceSize (
     USHORT CompressionFormatAndEngine,
     PULONG CompressBufferWorkSpaceSize,
     PULONG CompressFragmentWorkSpaceSize
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlCompressBuffer (
     USHORT CompressionFormatAndEngine,
     PUCHAR UncompressedBuffer,
     ULONG UncompressedBufferSize,
     PUCHAR CompressedBuffer,
     ULONG CompressedBufferSize,
     ULONG UncompressedChunkSize,
     PULONG FinalCompressedSize,
     PVOID WorkSpace
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlDecompressBuffer (
     USHORT CompressionFormat,
     PUCHAR UncompressedBuffer,
     ULONG UncompressedBufferSize,
     PUCHAR CompressedBuffer,
     ULONG CompressedBufferSize,
     PULONG FinalUncompressedSize
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlDecompressFragment (
     USHORT CompressionFormat,
     PUCHAR UncompressedFragment,
     ULONG UncompressedFragmentSize,
     PUCHAR CompressedBuffer,
     ULONG CompressedBufferSize,
     ULONG FragmentOffset,
     PULONG FinalUncompressedSize,
     PVOID WorkSpace
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlDescribeChunk (
     USHORT CompressionFormat,
      PUCHAR *CompressedBuffer,
     PUCHAR EndOfCompressedBufferPlus1,
     PUCHAR *ChunkBuffer,
     PULONG ChunkSize
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlReserveChunk (
     USHORT CompressionFormat,
      PUCHAR *CompressedBuffer,
     PUCHAR EndOfCompressedBufferPlus1,
     PUCHAR *ChunkBuffer,
     ULONG ChunkSize
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlDecompressChunks (
     PUCHAR UncompressedBuffer,
     ULONG UncompressedBufferSize,
     PUCHAR CompressedBuffer,
     ULONG CompressedBufferSize,
     PUCHAR CompressedTail,
     ULONG CompressedTailSize,
     PCOMPRESSED_DATA_INFO CompressedDataInfo
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlCompressChunks (
     PUCHAR UncompressedBuffer,
     ULONG UncompressedBufferSize,
     PUCHAR CompressedBuffer,
     ULONG CompressedBufferSize,
      PCOMPRESSED_DATA_INFO CompressedDataInfo,
     ULONG CompressedDataInfoLength,
     PVOID WorkSpace
    );










typedef struct _CURDIR {
    UNICODE_STRING DosPath;
    HANDLE Handle;
} CURDIR, *PCURDIR;








typedef struct _RTL_DRIVE_LETTER_CURDIR {
    USHORT Flags;
    USHORT Length;
    ULONG TimeStamp;
    STRING DosPath;
} RTL_DRIVE_LETTER_CURDIR, *PRTL_DRIVE_LETTER_CURDIR;




typedef struct _RTL_USER_PROCESS_PARAMETERS {
    ULONG MaximumLength;
    ULONG Length;

    ULONG Flags;
    ULONG DebugFlags;

    HANDLE ConsoleHandle;
    ULONG  ConsoleFlags;
    HANDLE StandardInput;
    HANDLE StandardOutput;
    HANDLE StandardError;

    CURDIR CurrentDirectory;        
    UNICODE_STRING DllPath;         
    UNICODE_STRING ImagePathName;   
    UNICODE_STRING CommandLine;     
    PVOID Environment;              

    ULONG StartingX;
    ULONG StartingY;
    ULONG CountX;
    ULONG CountY;
    ULONG CountCharsX;
    ULONG CountCharsY;
    ULONG FillAttribute;

    ULONG WindowFlags;
    ULONG ShowWindowFlags;
    UNICODE_STRING WindowTitle;     
    UNICODE_STRING DesktopInfo;     
    UNICODE_STRING ShellInfo;       
    UNICODE_STRING RuntimeData;     
    RTL_DRIVE_LETTER_CURDIR CurrentDirectores[ 32 ];
} RTL_USER_PROCESS_PARAMETERS, *PRTL_USER_PROCESS_PARAMETERS;















__declspec(dllimport)
NTSTATUS
__stdcall
RtlCreateProcessParameters(
    PRTL_USER_PROCESS_PARAMETERS *ProcessParameters,
    PUNICODE_STRING ImagePathName,
    PUNICODE_STRING DllPath,
    PUNICODE_STRING CurrentDirectory,
    PUNICODE_STRING CommandLine,
    PVOID Environment,
    PUNICODE_STRING WindowTitle,
    PUNICODE_STRING DesktopInfo,
    PUNICODE_STRING ShellInfo,
    PUNICODE_STRING RuntimeData
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlDestroyProcessParameters(
    PRTL_USER_PROCESS_PARAMETERS ProcessParameters
    );

__declspec(dllimport)
PRTL_USER_PROCESS_PARAMETERS
__stdcall
RtlNormalizeProcessParams(
    PRTL_USER_PROCESS_PARAMETERS ProcessParameters
    );

__declspec(dllimport)
PRTL_USER_PROCESS_PARAMETERS
__stdcall
RtlDeNormalizeProcessParams(
    PRTL_USER_PROCESS_PARAMETERS ProcessParameters
    );

typedef NTSTATUS (*PUSER_PROCESS_START_ROUTINE)(
    PRTL_USER_PROCESS_PARAMETERS ProcessParameters
    );

typedef NTSTATUS (*PUSER_THREAD_START_ROUTINE)(
    PVOID ThreadParameter
    );

typedef struct _RTL_USER_PROCESS_INFORMATION {
    ULONG Length;
    HANDLE Process;
    HANDLE Thread;
    CLIENT_ID ClientId;
    SECTION_IMAGE_INFORMATION ImageInformation;
} RTL_USER_PROCESS_INFORMATION, *PRTL_USER_PROCESS_INFORMATION;

__declspec(dllimport)
NTSTATUS
__stdcall
RtlCreateUserProcess(
    PUNICODE_STRING NtImagePathName,
    ULONG Attributes,
    PRTL_USER_PROCESS_PARAMETERS ProcessParameters,
    PSECURITY_DESCRIPTOR ProcessSecurityDescriptor,
    PSECURITY_DESCRIPTOR ThreadSecurityDescriptor,
    HANDLE ParentProcess,
    BOOLEAN InheritHandles,
    HANDLE DebugPort,
    HANDLE ExceptionPort,
    PRTL_USER_PROCESS_INFORMATION ProcessInformation
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlCreateUserThread(
    HANDLE Process,
    PSECURITY_DESCRIPTOR ThreadSecurityDescriptor,
    BOOLEAN CreateSuspended,
    ULONG StackZeroBits,
    ULONG MaximumStackSize,
    ULONG InitialStackSize,
    PUSER_THREAD_START_ROUTINE StartAddress,
    PVOID Parameter,
    PHANDLE Thread,
    PCLIENT_ID ClientId
    );

__declspec(dllimport)
void
RtlFreeUserThreadStack(
    HANDLE hProcess,
    HANDLE hThread
    );

__declspec(dllimport)
PVOID
__stdcall
RtlPcToFileHeader(
    PVOID PcValue,
    PVOID *BaseOfImage
    );

__declspec(dllimport)
PIMAGE_NT_HEADERS
__stdcall
RtlImageNtHeader(
    PVOID Base
    );

__declspec(dllimport)
PVOID
__stdcall
RtlAddressInSectionTable (
     PIMAGE_NT_HEADERS NtHeaders,
     PVOID BaseOfImage,
     PVOID VirtualAddress
    );

__declspec(dllimport)
PIMAGE_SECTION_HEADER
__stdcall
RtlSectionTableFromVirtualAddress (
     PIMAGE_NT_HEADERS NtHeaders,
     PVOID BaseOfImage,
     PVOID VirtualAddress
    );

__declspec(dllimport)
PVOID
__stdcall
RtlImageDirectoryEntryToData(
    PVOID BaseOfImage,
    BOOLEAN MappedAsImage,
    USHORT DirectoryEntry,
    PULONG Size
    );

PIMAGE_SECTION_HEADER
RtlImageRvaToSection(
     PIMAGE_NT_HEADERS NtHeaders,
     PVOID Base,
     ULONG Rva
    );

PVOID
RtlImageRvaToVa(
     PIMAGE_NT_HEADERS NtHeaders,
     PVOID Base,
     ULONG Rva,
      PIMAGE_SECTION_HEADER *LastRvaSection 
    );






















































































__declspec(dllimport)
ULONG
__stdcall
RtlCompareMemory (
    PVOID Source1,
    PVOID Source2,
    ULONG Length
    );



















































__declspec(dllimport)
ULONG
__stdcall
RtlCompareMemoryUlong (
    PVOID Source,
    ULONG Length,
    ULONG Pattern
    );

__declspec(dllimport)
void
__stdcall
RtlFillMemoryUlong (
   PVOID Destination,
   ULONG Length,
   ULONG Pattern
   );







typedef struct _RTL_PROCESS_LOCK_INFORMATION {
    PVOID Address;
    USHORT Type;
    USHORT CreatorBackTraceIndex;

    HANDLE OwningThread;        
    LONG LockCount;
    ULONG ContentionCount;
    ULONG EntryCount;

    
    
    

    LONG RecursionCount;

    
    
    

    ULONG NumberOfWaitingShared;
    ULONG NumberOfWaitingExclusive;
} RTL_PROCESS_LOCK_INFORMATION, *PRTL_PROCESS_LOCK_INFORMATION;


typedef struct _RTL_PROCESS_LOCKS {
    ULONG NumberOfLocks;
    RTL_PROCESS_LOCK_INFORMATION Locks[ 1 ];
} RTL_PROCESS_LOCKS, *PRTL_PROCESS_LOCKS;









typedef struct _LAST_EXCEPTION_LOG {
    EXCEPTION_RECORD ExceptionRecord;
    CONTEXT ContextRecord;
    ULONG   ControlPc;
    EXCEPTION_DISPOSITION Disposition;
    
    
    ULONG HandlerData[5];
} LAST_EXCEPTION_LOG, *PLAST_EXCEPTION_LOG;

void
RtlInitializeExceptionLog(
     ULONG Entries
    );


void
__stdcall
DbgUserBreakPoint(
    void
    );






void
__stdcall
DbgBreakPoint(
    void
    );

void
__stdcall
DbgBreakPointWithStatus(
     ULONG Status
    );






















ULONG
_cdecl
DbgPrint(
    PCH Format,
    ...
    );



ULONG
__stdcall
DbgPrompt(
    PCH Prompt,
    PCH Response,
    ULONG MaximumResponseLength
    );

__declspec(dllimport)
void
__stdcall
DbgLoadImageSymbols(
    PSTRING FileName,
    PVOID ImageBase,
    ULONG ProcessId
    );

__declspec(dllimport)
void
__stdcall
DbgUnLoadImageSymbols(
    PSTRING FileName,
    PVOID ImageBase,
    ULONG ProcessId
    );




















































































#pragma warning(disable:4035)               





__inline LARGE_INTEGER
__stdcall
RtlLargeIntegerAdd (
    LARGE_INTEGER Addend1,
    LARGE_INTEGER Addend2
    )
{
    __asm {
        mov     eax,Addend1.LowPart     ; (eax)=add1.low
        mov     edx,Addend1.HighPart    ; (edx)=add1.hi
        add     eax,Addend2.LowPart     ; (eax)=sum.low
        adc     edx,Addend2.HighPart    ; (edx)=sum.hi
    }
}





__inline LARGE_INTEGER
__stdcall
RtlEnlargedIntegerMultiply (
    LONG Multiplicand,
    LONG Multiplier
    )
{
    __asm {
        mov     eax, Multiplicand
        imul    Multiplier
    }
}





__inline LARGE_INTEGER
__stdcall
RtlEnlargedUnsignedMultiply (
    ULONG Multiplicand,
    ULONG Multiplier
    )
{
    __asm {
        mov     eax, Multiplicand
        mul     Multiplier
    }
}





__inline ULONG
__stdcall
RtlEnlargedUnsignedDivide (
     ULARGE_INTEGER Dividend,
     ULONG Divisor,
     PULONG Remainder
    )
{
    __asm {
        mov     eax, Dividend.LowPart
        mov     edx, Dividend.HighPart
        mov     ecx, Remainder
        div     Divisor             ; eax = eax:edx / divisor
        or      ecx, ecx            ; save remainer?
        jz      short done
        mov     [ecx], edx
done:
    }
}






__inline LARGE_INTEGER
__stdcall
RtlLargeIntegerNegate (
    LARGE_INTEGER Subtrahend
    )
{
    __asm {
        mov     eax, Subtrahend.LowPart
        mov     edx, Subtrahend.HighPart
        neg     edx                 ; (edx) = 2s comp of hi part
        neg     eax                 ; if ((eax) == 0) CF = 0
                                    ; else CF = 1
        sbb     edx,0               ; (edx) = (edx) - CF
    }
}





__inline LARGE_INTEGER
__stdcall
RtlLargeIntegerSubtract (
    LARGE_INTEGER Minuend,
    LARGE_INTEGER Subtrahend
    )
{
    __asm {
        mov     eax, Minuend.LowPart
        mov     edx, Minuend.HighPart
        sub     eax, Subtrahend.LowPart
        sbb     edx, Subtrahend.HighPart
    }
}

#pragma warning(default:4035)







__declspec(dllimport)
LARGE_INTEGER
__stdcall
RtlExtendedMagicDivide (
    LARGE_INTEGER Dividend,
    LARGE_INTEGER MagicDivisor,
    CCHAR ShiftCount
    );





__declspec(dllimport)
LARGE_INTEGER
__stdcall
RtlExtendedLargeIntegerDivide (
    LARGE_INTEGER Dividend,
    ULONG Divisor,
    PULONG Remainder
    );





__declspec(dllimport)
LARGE_INTEGER
__stdcall
RtlLargeIntegerDivide (
    LARGE_INTEGER Dividend,
    LARGE_INTEGER Divisor,
    PLARGE_INTEGER Remainder
    );





__declspec(dllimport)
LARGE_INTEGER
__stdcall
RtlExtendedIntegerMultiply (
    LARGE_INTEGER Multiplicand,
    LONG Multiplier
    );






































































#pragma warning(disable:4035)               





__inline LARGE_INTEGER
__stdcall
RtlConvertLongToLargeInteger (
    LONG SignedInteger
    )
{
    __asm {
        mov     eax, SignedInteger
        cdq                 ; (edx:eax) = signed LargeInt
    }
}





__inline LARGE_INTEGER
__stdcall
RtlConvertUlongToLargeInteger (
    ULONG UnsignedInteger
    )
{
    __asm {
        sub     edx, edx    ; zero highpart
        mov     eax, UnsignedInteger
    }
}





__inline LARGE_INTEGER
__stdcall
RtlLargeIntegerShiftLeft (
    LARGE_INTEGER LargeInteger,
    CCHAR ShiftCount
    )
{
    __asm    {
        mov     cl, ShiftCount
        and     cl, 0x3f                    ; mod 64

        cmp     cl, 32
        jc      short sl10

        mov     edx, LargeInteger.LowPart   ; ShiftCount >= 32
        xor     eax, eax                    ; lowpart is zero
        shl     edx, cl                     ; store highpart
        jmp     short done

sl10:
        mov     eax, LargeInteger.LowPart   ; ShiftCount < 32
        mov     edx, LargeInteger.HighPart
        shld    edx, eax, cl
        shl     eax, cl
done:
    }
}


__inline LARGE_INTEGER
__stdcall
RtlLargeIntegerShiftRight (
    LARGE_INTEGER LargeInteger,
    CCHAR ShiftCount
    )
{
    __asm    {
        mov     cl, ShiftCount
        and     cl, 0x3f               ; mod 64

        cmp     cl, 32
        jc      short sr10

        mov     eax, LargeInteger.HighPart  ; ShiftCount >= 32
        xor     edx, edx                    ; lowpart is zero
        shr     eax, cl                     ; store highpart
        jmp     short done

sr10:
        mov     eax, LargeInteger.LowPart   ; ShiftCount < 32
        mov     edx, LargeInteger.HighPart
        shrd    eax, edx, cl
        shr     edx, cl
done:
    }
}


__inline LARGE_INTEGER
__stdcall
RtlLargeIntegerArithmeticShift (
    LARGE_INTEGER LargeInteger,
    CCHAR ShiftCount
    )
{
    __asm {
        mov     cl, ShiftCount
        and     cl, 3fh                 ; mod 64

        cmp     cl, 32
        jc      short sar10

        mov     eax, LargeInteger.HighPart
        sar     eax, cl
        bt      eax, 31                     ; sign bit set?
        sbb     edx, edx                    ; duplicate sign bit into highpart
        jmp     short done
sar10:
        mov     eax, LargeInteger.LowPart   ; (eax) = LargeInteger.LowPart
        mov     edx, LargeInteger.HighPart  ; (edx) = LargeInteger.HighPart
        shrd    eax, edx, cl
        sar     edx, cl
done:
    }
}

#pragma warning(default:4035)



































































































































typedef struct _TIME_FIELDS {
    CSHORT Year;        
    CSHORT Month;       
    CSHORT Day;         
    CSHORT Hour;        
    CSHORT Minute;      
    CSHORT Second;      
    CSHORT Milliseconds;
    CSHORT Weekday;     
} TIME_FIELDS;
typedef TIME_FIELDS *PTIME_FIELDS;



__declspec(dllimport)
BOOLEAN
__stdcall
RtlCutoverTimeToSystemTime(
    PTIME_FIELDS CutoverTime,
    PLARGE_INTEGER SystemTime,
    PLARGE_INTEGER CurrentSystemTime,
    BOOLEAN ThisYear
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlSystemTimeToLocalTime (
     PLARGE_INTEGER SystemTime,
     PLARGE_INTEGER LocalTime
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlLocalTimeToSystemTime (
     PLARGE_INTEGER LocalTime,
     PLARGE_INTEGER SystemTime
    );





__declspec(dllimport)
void
__stdcall
RtlTimeToElapsedTimeFields (
     PLARGE_INTEGER Time,
     PTIME_FIELDS TimeFields
    );



__declspec(dllimport)
void
__stdcall
RtlTimeToTimeFields (
    PLARGE_INTEGER Time,
    PTIME_FIELDS TimeFields
    );





__declspec(dllimport)
BOOLEAN
__stdcall
RtlTimeFieldsToTime (
    PTIME_FIELDS TimeFields,
    PLARGE_INTEGER Time
    );







__declspec(dllimport)
BOOLEAN
__stdcall
RtlTimeToSecondsSince1980 (
    PLARGE_INTEGER Time,
    PULONG ElapsedSeconds
    );





__declspec(dllimport)
void
__stdcall
RtlSecondsSince1980ToTime (
    ULONG ElapsedSeconds,
    PLARGE_INTEGER Time
    );





__declspec(dllimport)
BOOLEAN
__stdcall
RtlTimeToSecondsSince1970 (
    PLARGE_INTEGER Time,
    PULONG ElapsedSeconds
    );





__declspec(dllimport)
void
__stdcall
RtlSecondsSince1970ToTime (
    ULONG ElapsedSeconds,
    PLARGE_INTEGER Time
    );







typedef struct _RTL_TIME_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[ 32 ];
    TIME_FIELDS StandardStart;
    LONG StandardBias;
    WCHAR DaylightName[ 32 ];
    TIME_FIELDS DaylightStart;
    LONG DaylightBias;
} RTL_TIME_ZONE_INFORMATION, *PRTL_TIME_ZONE_INFORMATION;


__declspec(dllimport)
NTSTATUS
__stdcall
RtlQueryTimeZoneInformation(
     PRTL_TIME_ZONE_INFORMATION TimeZoneInformation
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlSetTimeZoneInformation(
     PRTL_TIME_ZONE_INFORMATION TimeZoneInformation
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlSetActiveTimeBias(
     LONG ActiveBias
    );
























































































































































































































































typedef struct _RTL_BITMAP {
    ULONG SizeOfBitMap;                     
    PULONG Buffer;                          
} RTL_BITMAP;
typedef RTL_BITMAP *PRTL_BITMAP;







__declspec(dllimport)
void
__stdcall
RtlInitializeBitMap (
    PRTL_BITMAP BitMapHeader,
    PULONG BitMapBuffer,
    ULONG SizeOfBitMap
    );






__declspec(dllimport)
void
__stdcall
RtlClearAllBits (
    PRTL_BITMAP BitMapHeader
    );

__declspec(dllimport)
void
__stdcall
RtlSetAllBits (
    PRTL_BITMAP BitMapHeader
    );











__declspec(dllimport)
ULONG
__stdcall
RtlFindClearBits (
    PRTL_BITMAP BitMapHeader,
    ULONG NumberToFind,
    ULONG HintIndex
    );

__declspec(dllimport)
ULONG
__stdcall
RtlFindSetBits (
    PRTL_BITMAP BitMapHeader,
    ULONG NumberToFind,
    ULONG HintIndex
    );












__declspec(dllimport)
ULONG
__stdcall
RtlFindClearBitsAndSet (
    PRTL_BITMAP BitMapHeader,
    ULONG NumberToFind,
    ULONG HintIndex
    );

__declspec(dllimport)
ULONG
__stdcall
RtlFindSetBitsAndClear (
    PRTL_BITMAP BitMapHeader,
    ULONG NumberToFind,
    ULONG HintIndex
    );






__declspec(dllimport)
void
__stdcall
RtlClearBits (
    PRTL_BITMAP BitMapHeader,
    ULONG StartingIndex,
    ULONG NumberToClear
    );

__declspec(dllimport)
void
__stdcall
RtlSetBits (
    PRTL_BITMAP BitMapHeader,
    ULONG StartingIndex,
    ULONG NumberToSet
    );








__declspec(dllimport)
ULONG
__stdcall
RtlFindLongestRunClear (
    PRTL_BITMAP BitMapHeader,
    PULONG StartingIndex
    );

__declspec(dllimport)
ULONG
__stdcall
RtlFindLongestRunSet (
    PRTL_BITMAP BitMapHeader,
    PULONG StartingIndex
    );








__declspec(dllimport)
ULONG
__stdcall
RtlFindFirstRunClear (
    PRTL_BITMAP BitMapHeader,
    PULONG StartingIndex
    );

__declspec(dllimport)
ULONG
__stdcall
RtlFindFirstRunSet (
    PRTL_BITMAP BitMapHeader,
    PULONG StartingIndex
    );

























__declspec(dllimport)
ULONG
__stdcall
RtlNumberOfClearBits (
    PRTL_BITMAP BitMapHeader
    );

__declspec(dllimport)
ULONG
__stdcall
RtlNumberOfSetBits (
    PRTL_BITMAP BitMapHeader
    );






__declspec(dllimport)
BOOLEAN
__stdcall
RtlAreBitsClear (
    PRTL_BITMAP BitMapHeader,
    ULONG StartingIndex,
    ULONG Length
    );

__declspec(dllimport)
BOOLEAN
__stdcall
RtlAreBitsSet (
    PRTL_BITMAP BitMapHeader,
    ULONG StartingIndex,
    ULONG Length
    );









__declspec(dllimport)
BOOLEAN
__stdcall
RtlValidSid (
    PSID Sid
    );


__declspec(dllimport)
BOOLEAN
__stdcall
RtlEqualSid (
    PSID Sid1,
    PSID Sid2
    );


__declspec(dllimport)
BOOLEAN
__stdcall
RtlEqualPrefixSid (
    PSID Sid1,
    PSID Sid2
    );

__declspec(dllimport)
ULONG
__stdcall
RtlLengthRequiredSid (
    ULONG SubAuthorityCount
    );

__declspec(dllimport)
PVOID
__stdcall
RtlFreeSid(
     PSID Sid
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlAllocateAndInitializeSid(
     PSID_IDENTIFIER_AUTHORITY IdentifierAuthority,
     UCHAR SubAuthorityCount,
     ULONG SubAuthority0,
     ULONG SubAuthority1,
     ULONG SubAuthority2,
     ULONG SubAuthority3,
     ULONG SubAuthority4,
     ULONG SubAuthority5,
     ULONG SubAuthority6,
     ULONG SubAuthority7,
     PSID *Sid
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlInitializeSid (
    PSID Sid,
    PSID_IDENTIFIER_AUTHORITY IdentifierAuthority,
    UCHAR SubAuthorityCount
    );

__declspec(dllimport)
PSID_IDENTIFIER_AUTHORITY
__stdcall
RtlIdentifierAuthoritySid (
    PSID Sid
    );

__declspec(dllimport)
PULONG
__stdcall
RtlSubAuthoritySid (
    PSID Sid,
    ULONG SubAuthority
    );

__declspec(dllimport)
PUCHAR
__stdcall
RtlSubAuthorityCountSid (
    PSID Sid
    );

__declspec(dllimport)
ULONG
__stdcall
RtlLengthSid (
    PSID Sid
    );


__declspec(dllimport)
NTSTATUS
__stdcall
RtlCopySid (
    ULONG DestinationSidLength,
    PSID DestinationSid,
    PSID SourceSid
    );


__declspec(dllimport)
NTSTATUS
__stdcall
RtlCopySidAndAttributesArray (
    ULONG ArrayLength,
    PSID_AND_ATTRIBUTES Source,
    ULONG TargetSidBufferSize,
    PSID_AND_ATTRIBUTES TargetArrayElement,
    PSID TargetSid,
    PSID *NextTargetSid,
    PULONG RemainingTargetSidSize
    );


__declspec(dllimport)
NTSTATUS
__stdcall
RtlConvertSidToUnicodeString(
    PUNICODE_STRING UnicodeString,
    PSID Sid,
    BOOLEAN AllocateDestinationString
    );















__inline LUID
__stdcall
RtlConvertLongToLuid(
    LONG Long
    )
{
    LUID TempLuid;
    LARGE_INTEGER TempLi;

    TempLi = RtlConvertLongToLargeInteger(Long);
    TempLuid.LowPart = TempLi.LowPart;
    TempLuid.HighPart = TempLi.HighPart;
    return(TempLuid);
}

__inline LUID
__stdcall
RtlConvertUlongToLuid(
    ULONG Ulong
    )
{
    LUID TempLuid;

    TempLuid.LowPart = Ulong;
    TempLuid.HighPart = 0;
    return(TempLuid);
}




__declspec(dllimport)
void
__stdcall
RtlCopyLuid (
    PLUID DestinationLuid,
    PLUID SourceLuid
    );



__declspec(dllimport)
void
__stdcall
RtlCopyLuidAndAttributesArray (
    ULONG ArrayLength,
    PLUID_AND_ATTRIBUTES Source,
    PLUID_AND_ATTRIBUTES Target
    );







__declspec(dllimport)
BOOLEAN
__stdcall
RtlAreAllAccessesGranted(
    ACCESS_MASK GrantedAccess,
    ACCESS_MASK DesiredAccess
    );


__declspec(dllimport)
BOOLEAN
__stdcall
RtlAreAnyAccessesGranted(
    ACCESS_MASK GrantedAccess,
    ACCESS_MASK DesiredAccess
    );


__declspec(dllimport)
void
__stdcall
RtlMapGenericMask(
    PACCESS_MASK AccessMask,
    PGENERIC_MAPPING GenericMapping
    );







__declspec(dllimport)
BOOLEAN
__stdcall
RtlValidAcl (
    PACL Acl
    );

__declspec(dllimport)                                        
NTSTATUS                                        
__stdcall                                           
RtlCreateAcl (                                  
    PACL Acl,                                   
    ULONG AclLength,                            
    ULONG AclRevision                           
    );                                          

__declspec(dllimport)
NTSTATUS
__stdcall
RtlQueryInformationAcl (
    PACL Acl,
    PVOID AclInformation,
    ULONG AclInformationLength,
    ACL_INFORMATION_CLASS AclInformationClass
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlSetInformationAcl (
    PACL Acl,
    PVOID AclInformation,
    ULONG AclInformationLength,
    ACL_INFORMATION_CLASS AclInformationClass
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlAddAce (
    PACL Acl,
    ULONG AceRevision,
    ULONG StartingAceIndex,
    PVOID AceList,
    ULONG AceListLength
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlDeleteAce (
    PACL Acl,
    ULONG AceIndex
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlGetAce (
    PACL Acl,
    ULONG AceIndex,
    PVOID *Ace
    );


__declspec(dllimport)                                        
NTSTATUS                                        
__stdcall                                           
RtlAddAccessAllowedAce (                        
    PACL Acl,                                   
    ULONG AceRevision,                          
    ACCESS_MASK AccessMask,                     
    PSID Sid                                    
    );                                          

__declspec(dllimport)
NTSTATUS
__stdcall
RtlAddAccessDeniedAce (
    PACL Acl,
    ULONG AceRevision,
    ACCESS_MASK AccessMask,
    PSID Sid
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlAddAuditAccessAce (
    PACL Acl,
    ULONG AceRevision,
    ACCESS_MASK AccessMask,
    PSID Sid,
    BOOLEAN AuditSuccess,
    BOOLEAN AuditFailure
    );

__declspec(dllimport)
BOOLEAN
__stdcall
RtlFirstFreeAce (
    PACL Acl,
    PVOID *FirstFree
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlAddCompoundAce (
     PACL Acl,
     ULONG AceRevision,
     UCHAR AceType,
     ACCESS_MASK AccessMask,
     PSID ServerSid,
     PSID ClientSid
    );







__declspec(dllimport)
NTSTATUS
__stdcall
RtlCreateSecurityDescriptor (
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    ULONG Revision
    );

__declspec(dllimport)
BOOLEAN
__stdcall
RtlValidSecurityDescriptor (
    PSECURITY_DESCRIPTOR SecurityDescriptor
    );


__declspec(dllimport)
ULONG
__stdcall
RtlLengthSecurityDescriptor (
    PSECURITY_DESCRIPTOR SecurityDescriptor
    );



__declspec(dllimport)
NTSTATUS
__stdcall
RtlGetControlSecurityDescriptor (
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    PSECURITY_DESCRIPTOR_CONTROL Control,
    PULONG Revision
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlSetAttributesSecurityDescriptor(
     PSECURITY_DESCRIPTOR SecurityDescriptor,
     SECURITY_DESCRIPTOR_CONTROL Control,
      PULONG Revision
    );



__declspec(dllimport)
NTSTATUS
__stdcall
RtlSetDaclSecurityDescriptor (
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    BOOLEAN DaclPresent,
    PACL Dacl,
    BOOLEAN DaclDefaulted
    );




__declspec(dllimport)
NTSTATUS
__stdcall
RtlGetDaclSecurityDescriptor (
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    PBOOLEAN DaclPresent,
    PACL *Dacl,
    PBOOLEAN DaclDefaulted
    );



__declspec(dllimport)
NTSTATUS
__stdcall
RtlSetSaclSecurityDescriptor (
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    BOOLEAN SaclPresent,
    PACL Sacl,
    BOOLEAN SaclDefaulted
    );


__declspec(dllimport)
NTSTATUS
__stdcall
RtlGetSaclSecurityDescriptor (
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    PBOOLEAN SaclPresent,
    PACL *Sacl,
    PBOOLEAN SaclDefaulted
    );


__declspec(dllimport)                                        
NTSTATUS                                        
__stdcall                                           
RtlSetOwnerSecurityDescriptor (                 
    PSECURITY_DESCRIPTOR SecurityDescriptor,    
    PSID Owner,                                 
    BOOLEAN OwnerDefaulted                      
    );                                          



__declspec(dllimport)
NTSTATUS
__stdcall
RtlGetOwnerSecurityDescriptor (
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    PSID *Owner,
    PBOOLEAN OwnerDefaulted
    );



__declspec(dllimport)
NTSTATUS
__stdcall
RtlSetGroupSecurityDescriptor (
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    PSID Group,
    BOOLEAN GroupDefaulted
    );


__declspec(dllimport)
NTSTATUS
__stdcall
RtlGetGroupSecurityDescriptor (
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    PSID *Group,
    PBOOLEAN GroupDefaulted
    );


__declspec(dllimport)
NTSTATUS
__stdcall
RtlMakeSelfRelativeSD(
    PSECURITY_DESCRIPTOR AbsoluteSecurityDescriptor,
    PSECURITY_DESCRIPTOR SelfRelativeSecurityDescriptor,
    PULONG BufferLength
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlAbsoluteToSelfRelativeSD(
    PSECURITY_DESCRIPTOR AbsoluteSecurityDescriptor,
    PSECURITY_DESCRIPTOR SelfRelativeSecurityDescriptor,
    PULONG BufferLength
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlSelfRelativeToAbsoluteSD(
    PSECURITY_DESCRIPTOR SelfRelativeSecurityDescriptor,
    PSECURITY_DESCRIPTOR AbsoluteSecurityDescriptor,
    PULONG AbsoluteSecurityDescriptorSize,
    PACL Dacl,
    PULONG DaclSize,
    PACL Sacl,
    PULONG SaclSize,
    PSID Owner,
    PULONG OwnerSize,
    PSID PrimaryGroup,
    PULONG PrimaryGroupSize
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlNewSecurityGrantedAccess(
    ACCESS_MASK DesiredAccess,
    PPRIVILEGE_SET Privileges,
    PULONG Length,
    HANDLE Token,
    PGENERIC_MAPPING GenericMapping,
    PACCESS_MASK RemainingDesiredAccess
    );



__declspec(dllimport)
NTSTATUS
__stdcall
RtlImpersonateSelf(
     SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
    );


__declspec(dllimport)
NTSTATUS
__stdcall
RtlAdjustPrivilege(
    ULONG Privilege,
    BOOLEAN Enable,
    BOOLEAN Client,
    PBOOLEAN WasEnabled
    );



__declspec(dllimport)
void
__stdcall
RtlRunEncodeUnicodeString(
    PUCHAR          Seed        ,
    PUNICODE_STRING String
    );


__declspec(dllimport)
void
__stdcall
RtlRunDecodeUnicodeString(
    UCHAR           Seed,
    PUNICODE_STRING String
    );


__declspec(dllimport)
void
__stdcall
RtlEraseUnicodeString(
    PUNICODE_STRING String
    );

















                
                
                
                
                





















NTSTATUS
__stdcall
RtlGetPrimaryDomain(
      ULONG            SidLength,
     PBOOLEAN         PrimaryDomainPresent,
     PUNICODE_STRING  PrimaryDomainName,
     PUSHORT          RequiredNameLength,
     PSID             PrimaryDomainSid ,
     PULONG           RequiredSidLength
    );





                                                                       
NTSTATUS                                                               
RtlpNtOpenKey(                                                         
    PHANDLE KeyHandle,                                                 
    ACCESS_MASK DesiredAccess,                                         
    POBJECT_ATTRIBUTES ObjectAttributes,                               
    ULONG Options                                                      
    );                                                                 
                                                                       
NTSTATUS                                                               
RtlpNtCreateKey(                                                       
    PHANDLE KeyHandle,                                                 
    ACCESS_MASK DesiredAccess,                                         
    POBJECT_ATTRIBUTES ObjectAttributes,                               
    ULONG Options,                                                     
    PUNICODE_STRING Provider,                                          
    PULONG Disposition                                                 
    );                                                                 
                                                                       
NTSTATUS                                                               
RtlpNtEnumerateSubKey(                                                 
    HANDLE KeyHandle,                                                  
    PUNICODE_STRING SubKeyName,                                        
    ULONG Index,                                                       
    PLARGE_INTEGER LastWriteTime                                       
    );                                                                 
                                                                       
NTSTATUS                                                               
RtlpNtQueryValueKey(                                                   
    HANDLE KeyHandle,                                                  
    PULONG KeyValueType,                                               
    PVOID KeyValue,                                                    
    PULONG KeyValueLength,                                             
    PLARGE_INTEGER LastWriteTime                                       
    );                                                                 
                                                                       
NTSTATUS                                                               
RtlpNtSetValueKey(                                                     
    HANDLE KeyHandle,                                                  
    ULONG KeyValueType,                                                
    PVOID KeyValue,                                                    
    ULONG KeyValueLength                                               
    );                                                                 
                                                                       
NTSTATUS                                                               
RtlpNtMakeTemporaryKey(                                                
    HANDLE KeyHandle                                                   
    );                                                                 
                                                                       















typedef struct _MESSAGE_RESOURCE_ENTRY {
    USHORT Length;
    USHORT Flags;
    UCHAR Text[ 1 ];
} MESSAGE_RESOURCE_ENTRY, *PMESSAGE_RESOURCE_ENTRY;



typedef struct _MESSAGE_RESOURCE_BLOCK {
    ULONG LowId;
    ULONG HighId;
    ULONG OffsetToEntries;
} MESSAGE_RESOURCE_BLOCK, *PMESSAGE_RESOURCE_BLOCK;

typedef struct _MESSAGE_RESOURCE_DATA {
    ULONG NumberOfBlocks;
    MESSAGE_RESOURCE_BLOCK Blocks[ 1 ];
} MESSAGE_RESOURCE_DATA, *PMESSAGE_RESOURCE_DATA;



__declspec(dllimport)
NTSTATUS
__stdcall
RtlFindMessage(
    PVOID DllHandle,
    ULONG MessageTableId,
    ULONG MessageLanguageId,
    ULONG MessageId,
    PMESSAGE_RESOURCE_ENTRY *MessageEntry
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlFormatMessage(
     PWSTR MessageFormat,
     ULONG MaximumWidth ,
     BOOLEAN IgnoreInserts,
     BOOLEAN ArgumentsAreAnsi,
     BOOLEAN ArgumentsAreAnArray,
     va_list *Arguments,
     PWSTR Buffer,
     ULONG Length,
     PULONG ReturnLength 
    );








typedef enum _RTL_RXACT_OPERATION {
    RtlRXactOperationDelete = 1,        
    RtlRXactOperationSetValue,          
    RtlRXactOperationDelAttribute,
    RtlRXactOperationSetAttribute
} RTL_RXACT_OPERATION, *PRTL_RXACT_OPERATION;


typedef struct _RTL_RXACT_LOG {
    ULONG OperationCount;
    ULONG LogSize;                   
    ULONG LogSizeInUse;

} RTL_RXACT_LOG, *PRTL_RXACT_LOG;



typedef struct _RTL_RXACT_CONTEXT {
    HANDLE RootRegistryKey;
    HANDLE RXactKey;
    BOOLEAN HandlesValid;             
    PRTL_RXACT_LOG RXactLog;
} RTL_RXACT_CONTEXT, *PRTL_RXACT_CONTEXT;





__declspec(dllimport)
NTSTATUS
__stdcall
RtlInitializeRXact(
     HANDLE RootRegistryKey,
     BOOLEAN CommitIfNecessary,
     PRTL_RXACT_CONTEXT *RXactContext
    );


__declspec(dllimport)
NTSTATUS
__stdcall
RtlStartRXact(
     PRTL_RXACT_CONTEXT RXactContext
    );


__declspec(dllimport)
NTSTATUS
__stdcall
RtlAbortRXact(
     PRTL_RXACT_CONTEXT RXactContext
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlAddAttributeActionToRXact(
     PRTL_RXACT_CONTEXT RXactContext,
     RTL_RXACT_OPERATION Operation,
     PUNICODE_STRING SubKeyName,
     HANDLE KeyHandle,
     PUNICODE_STRING AttributeName,
     ULONG NewValueType,
     PVOID NewValue,
     ULONG NewValueLength
    );


__declspec(dllimport)
NTSTATUS
__stdcall
RtlAddActionToRXact(
     PRTL_RXACT_CONTEXT RXactContext,
     RTL_RXACT_OPERATION Operation,
     PUNICODE_STRING SubKeyName,
     ULONG NewKeyValueType,
     PVOID NewKeyValue ,
     ULONG NewKeyValueLength
    );


__declspec(dllimport)
NTSTATUS
__stdcall
RtlApplyRXact(
     PRTL_RXACT_CONTEXT RXactContext
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlApplyRXactNoFlush(
     PRTL_RXACT_CONTEXT RXactContext
    );








__declspec(dllimport)
ULONG
__stdcall
RtlNtStatusToDosError (
   NTSTATUS Status
   );

__declspec(dllimport)
ULONG
__stdcall
RtlNtStatusToDosErrorNoTeb (
   NTSTATUS Status
   );



__declspec(dllimport)
NTSTATUS
__stdcall
RtlCustomCPToUnicodeN(
     PCPTABLEINFO CustomCP,
     PWCH UnicodeString,
     ULONG MaxBytesInUnicodeString,
     PULONG BytesInUnicodeString ,
     PCH CustomCPString,
     ULONG BytesInCustomCPString
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlUnicodeToCustomCPN(
     PCPTABLEINFO CustomCP,
     PCH CustomCPString,
     ULONG MaxBytesInCustomCPString,
     PULONG BytesInCustomCPString ,
     PWCH UnicodeString,
     ULONG BytesInUnicodeString
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlUpcaseUnicodeToCustomCPN(
     PCPTABLEINFO CustomCP,
     PCH CustomCPString,
     ULONG MaxBytesInCustomCPString,
     PULONG BytesInCustomCPString ,
     PWCH UnicodeString,
     ULONG BytesInUnicodeString
    );

__declspec(dllimport)
void
__stdcall
RtlInitCodePageTable(
     PUSHORT TableBase,
     PCPTABLEINFO CodePageTable
    );



__declspec(dllimport)
void
__stdcall
RtlInitNlsTables(
     PUSHORT AnsiNlsBase,
     PUSHORT OemNlsBase,
     PUSHORT LanguageNlsBase,
     PNLSTABLEINFO TableInfo
    );

__declspec(dllimport)
void
__stdcall
RtlResetRtlTranslations(
    PNLSTABLEINFO TableInfo
    );


__declspec(dllimport)
void
__stdcall
RtlGetDefaultCodePage(
     PUSHORT AnsiCodePage,
     PUSHORT OemCodePage
    );





































typedef union _SLIST_HEADER {
    ULONGLONG Alignment;
    struct {
        SINGLE_LIST_ENTRY Next;
        USHORT Depth;
        USHORT Sequence;
    };
} SLIST_HEADER, *PSLIST_HEADER;



























typedef struct _SMALL_POOL_LOOKASIDE {
    SLIST_HEADER SListHead;
    USHORT Depth;
    USHORT MaximumDepth;
    ULONG TotalAllocates;
    ULONG AllocateHits;
    ULONG TotalFrees;
    ULONG FreeHits;
    ULONG LastTotalAllocates;
    ULONG LastAllocateHits;
    KSPIN_LOCK Lock;
} SMALL_POOL_LOOKASIDE, *PSMALL_POOL_LOOKASIDE;






























extern ULONG NtGlobalFlag;

















typedef CCHAR KPROCESSOR_MODE;

typedef enum _MODE {
    KernelMode,
    UserMode,
    MaximumMode
} MODE;











struct _KAPC;

typedef
void
(*PKNORMAL_ROUTINE) (
     PVOID NormalContext,
     PVOID SystemArgument1,
     PVOID SystemArgument2
    );

typedef
void
(*PKKERNEL_ROUTINE) (
     struct _KAPC *Apc,
      PKNORMAL_ROUTINE *NormalRoutine,
      PVOID *NormalContext,
      PVOID *SystemArgument1,
      PVOID *SystemArgument2
    );

typedef
void
(*PKRUNDOWN_ROUTINE) (
     struct _KAPC *Apc
    );

typedef
BOOLEAN
(*PKSYNCHRONIZE_ROUTINE) (
     PVOID SynchronizeContext
    );

typedef
BOOLEAN
(*PKTRANSFER_ROUTINE) (
    void
    );






typedef struct _KAPC {
    CSHORT Type;
    CSHORT Size;
    ULONG Spare0;
    struct _KTHREAD *Thread;
    LIST_ENTRY ApcListEntry;
    PKKERNEL_ROUTINE KernelRoutine;
    PKRUNDOWN_ROUTINE RundownRoutine;
    PKNORMAL_ROUTINE NormalRoutine;
    PVOID NormalContext;

    
    
    

    PVOID SystemArgument1;
    PVOID SystemArgument2;
    CCHAR ApcStateIndex;
    KPROCESSOR_MODE ApcMode;
    BOOLEAN Inserted;
} KAPC, *PKAPC, * PRKAPC;






struct _KDPC;

typedef
void
(*PKDEFERRED_ROUTINE) (
     struct _KDPC *Dpc,
     PVOID DeferredContext,
     PVOID SystemArgument1,
     PVOID SystemArgument2
    );















typedef enum _KDPC_IMPORTANCE {
    LowImportance,
    MediumImportance,
    HighImportance
} KDPC_IMPORTANCE;





typedef struct _KDPC {
    CSHORT Type;
    UCHAR Number;
    UCHAR Importance;
    LIST_ENTRY DpcListEntry;
    PKDEFERRED_ROUTINE DeferredRoutine;
    PVOID DeferredContext;
    PVOID SystemArgument1;
    PVOID SystemArgument2;
    PULONG Lock;
} KDPC, *PKDPC, * PRKDPC;





typedef PULONG PKIPI_CONTEXT;

typedef
void
(*PKIPI_WORKER)(
     PKIPI_CONTEXT PacketContext,
     PVOID Parameter1,
     PVOID Parameter2,
     PVOID Parameter3
    );





typedef struct _KIPI_COUNTS {
    ULONG Freeze;
    ULONG Packet;
    ULONG DPC;
    ULONG APC;
    ULONG FlushSingleTb;
    ULONG FlushMultipleTb;
    ULONG FlushEntireTb;
    ULONG GenericCall;
    ULONG ChangeColor;
    ULONG SweepDcache;
    ULONG SweepIcache;
    ULONG SweepIcacheRange;
    ULONG FlushIoBuffers;
    ULONG GratuitousDPC;
} KIPI_COUNTS, *PKIPI_COUNTS;


































typedef struct _MDL {
    struct _MDL *Next;
    CSHORT Size;
    CSHORT MdlFlags;
    struct _EPROCESS *Process;
    PVOID MappedSystemVa;
    PVOID StartVa;
    ULONG ByteCount;
    ULONG ByteOffset;
} MDL, *PMDL;






















































typedef struct _SECURITY_CLIENT_CONTEXT {
    SECURITY_QUALITY_OF_SERVICE SecurityQos;
    PACCESS_TOKEN ClientToken;
    BOOLEAN DirectlyAccessClientToken;
    BOOLEAN DirectAccessEffectiveOnly;
    BOOLEAN ServerIsRemote;
    TOKEN_CONTROL ClientTokenControl;
    } SECURITY_CLIENT_CONTEXT, *PSECURITY_CLIENT_CONTEXT;

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































extern UNICODE_STRING NtSystemRoot;
extern ULONG NtBuildNumber;
extern ULONG NtMajorVersion;
extern ULONG NtMinorVersion;
extern ULONG CmNtCSDVersion;
extern UNICODE_STRING CmVersionString;
extern UNICODE_STRING CmCSDVersionString;

extern NLSTABLEINFO InitTableInfo;
extern ULONG InitNlsTableSize;
extern PVOID InitNlsTableBase;
extern ULONG InitAnsiCodePageDataOffset;
extern ULONG InitOemCodePageDataOffset;
extern ULONG InitUnicodeCaseTableDataOffset;
extern PVOID InitNlsSectionPointer;



void
KiSystemStartup(
     PVOID LoaderBlock
    );








void
Phase1Initialization(
     PVOID Context
    );

typedef
BOOLEAN
(*PTESTFCN)( void );

extern PTESTFCN TestFunction;
extern ULONG InitializationPhase;


extern BOOLEAN ForceNonPagedPool;
extern ULONG MmDebug;






































typedef enum _EMULATOR_PORT_ACCESS_TYPE {
    Uchar,
    Ushort,
    Ulong
} EMULATOR_PORT_ACCESS_TYPE, *PEMULATOR_PORT_ACCESS_TYPE;








typedef struct _EMULATOR_ACCESS_ENTRY {
    ULONG BasePort;
    ULONG NumConsecutivePorts;
    EMULATOR_PORT_ACCESS_TYPE AccessType;
    UCHAR AccessMode;
    UCHAR StringSupport;
    PVOID Routine;
} EMULATOR_ACCESS_ENTRY, *PEMULATOR_ACCESS_ENTRY;








typedef
NTSTATUS
(*PDRIVER_IO_PORT_UCHAR ) (
     ULONG Context,
     ULONG Port,
     UCHAR AccessMode,
      PUCHAR Data
    );

typedef
NTSTATUS
(*PDRIVER_IO_PORT_UCHAR_STRING ) (
     ULONG Context,
     ULONG Port,
     UCHAR AccessMode,
      PUCHAR Data,
     ULONG DataLength
    );

typedef
NTSTATUS
(*PDRIVER_IO_PORT_USHORT ) (
     ULONG Context,
     ULONG Port,
     UCHAR AccessMode,
      PUSHORT Data
    );

typedef
NTSTATUS
(*PDRIVER_IO_PORT_USHORT_STRING ) (
     ULONG Context,
     ULONG Port,
     UCHAR AccessMode,
      PUSHORT Data,
     ULONG DataLength 
    );

typedef
NTSTATUS
(*PDRIVER_IO_PORT_ULONG ) (
     ULONG Context,
     ULONG Port,
     UCHAR AccessMode,
      PULONG Data
    );

typedef
NTSTATUS
(*PDRIVER_IO_PORT_ULONG_STRING ) (
     ULONG Context,
     ULONG Port,
     UCHAR AccessMode,
      PULONG Data,
     ULONG DataLength  
    );













































































































































































typedef union _MCI_STATS {
    struct {
        USHORT  McaCod;
        USHORT  MsCod;
        ULONG   OtherInfo : 25;
        ULONG   Damage : 1;
        ULONG   AddressValid : 1;
        ULONG   MiscValid : 1;
        ULONG   Enabled : 1;
        ULONG   UnCorrected : 1;
        ULONG   OverFlow : 1;
        ULONG   Valid : 1;
    } MciStats;

    ULONGLONG QuadPart;

} MCI_STATS, *PMCI_STATS;















extern ULONG KiInterruptTemplate[106];
extern PULONG KiInterruptTemplateObject;
extern PULONG KiInterruptTemplateDispatch;
extern PULONG KiInterruptTemplate2ndDispatch;










































extern ULONG KeI386MachineType;




















































































UCHAR
READ_REGISTER_UCHAR(
    PUCHAR  Register
    );


USHORT
READ_REGISTER_USHORT(
    PUSHORT Register
    );


ULONG
READ_REGISTER_ULONG(
    PULONG  Register
    );


void
READ_REGISTER_BUFFER_UCHAR(
    PUCHAR  Register,
    PUCHAR  Buffer,
    ULONG   Count
    );


void
READ_REGISTER_BUFFER_USHORT(
    PUSHORT Register,
    PUSHORT Buffer,
    ULONG   Count
    );


void
READ_REGISTER_BUFFER_ULONG(
    PULONG  Register,
    PULONG  Buffer,
    ULONG   Count
    );



void
WRITE_REGISTER_UCHAR(
    PUCHAR  Register,
    UCHAR   Value
    );


void
WRITE_REGISTER_USHORT(
    PUSHORT Register,
    USHORT  Value
    );


void
WRITE_REGISTER_ULONG(
    PULONG  Register,
    ULONG   Value
    );


void
WRITE_REGISTER_BUFFER_UCHAR(
    PUCHAR  Register,
    PUCHAR  Buffer,
    ULONG   Count
    );


void
WRITE_REGISTER_BUFFER_USHORT(
    PUSHORT Register,
    PUSHORT Buffer,
    ULONG   Count
    );


void
WRITE_REGISTER_BUFFER_ULONG(
    PULONG  Register,
    PULONG  Buffer,
    ULONG   Count
    );


UCHAR
READ_PORT_UCHAR(
    PUCHAR  Port
    );


USHORT
READ_PORT_USHORT(
    PUSHORT Port
    );


ULONG
READ_PORT_ULONG(
    PULONG  Port
    );


void
READ_PORT_BUFFER_UCHAR(
    PUCHAR  Port,
    PUCHAR  Buffer,
    ULONG   Count
    );


void
READ_PORT_BUFFER_USHORT(
    PUSHORT Port,
    PUSHORT Buffer,
    ULONG   Count
    );


void
READ_PORT_BUFFER_ULONG(
    PULONG  Port,
    PULONG  Buffer,
    ULONG   Count
    );


void
WRITE_PORT_UCHAR(
    PUCHAR  Port,
    UCHAR   Value
    );


void
WRITE_PORT_USHORT(
    PUSHORT Port,
    USHORT  Value
    );


void
WRITE_PORT_ULONG(
    PULONG  Port,
    ULONG   Value
    );


void
WRITE_PORT_BUFFER_UCHAR(
    PUCHAR  Port,
    PUCHAR  Buffer,
    ULONG   Count
    );


void
WRITE_PORT_BUFFER_USHORT(
    PUSHORT Port,
    PUSHORT Buffer,
    ULONG   Count
    );


void
WRITE_PORT_BUFFER_ULONG(
    PULONG  Port,
    PULONG  Buffer,
    ULONG   Count
    );





















__inline
void
Ke386InvalidateTb (
     PVOID Virtual
    )
{
    __asm {
        mov eax, Virtual
        invlpg [eax]
    }
}



































































#pragma warning(disable:4164)
#pragma intrinsic(_disable)
#pragma intrinsic(_enable)
#pragma warning(default:4164)























void
_fastcall
KiAcquireSpinLock (
     PKSPIN_LOCK SpinLock
    );

void
_fastcall
KiReleaseSpinLock (
     PKSPIN_LOCK SpinLock
    );




































void
KeQueryTickCount (
     PLARGE_INTEGER CurrentCount
    );































typedef struct _HARDWARE_PTE {
    ULONG Valid : 1;
    ULONG Write : 1;
    ULONG Owner : 1;
    ULONG WriteThrough : 1;
    ULONG CacheDisable : 1;
    ULONG Accessed : 1;
    ULONG Dirty : 1;
    ULONG LargePage : 1;
    ULONG Global : 1;
    ULONG CopyOnWrite : 1; 
    ULONG Prototype : 1;   
    ULONG reserved : 1;  
    ULONG PageFrameNumber : 20;
} HARDWARE_PTE, *PHARDWARE_PTE;






typedef struct _KGDTENTRY {
    USHORT  LimitLow;
    USHORT  BaseLow;
    union {
        struct {
            UCHAR   BaseMid;
            UCHAR   Flags1;     
            UCHAR   Flags2;     
            UCHAR   BaseHi;
        } Bytes;
        struct {
            ULONG   BaseMid : 8;
            ULONG   Type : 5;
            ULONG   Dpl : 2;
            ULONG   Pres : 1;
            ULONG   LimitHi : 4;
            ULONG   Sys : 1;
            ULONG   Reserved_0 : 1;
            ULONG   Default_Big : 1;
            ULONG   Granularity : 1;
            ULONG   BaseHi : 8;
        } Bits;
    } HighWord;
} KGDTENTRY, *PKGDTENTRY;


















typedef struct _KIDTENTRY {
   USHORT Offset;
   USHORT Selector;
   USHORT Access;
   USHORT ExtendedOffset;
} KIDTENTRY;

typedef KIDTENTRY *PKIDTENTRY;



















typedef UCHAR   KINT_DIRECTION_MAP[32];


                                    
                                    






                                    

typedef UCHAR   KIO_ACCESS_MAP[8192];

typedef KIO_ACCESS_MAP *PKIO_ACCESS_MAP;

typedef struct _KiIoAccessMap {
    KINT_DIRECTION_MAP DirectionMap;
    UCHAR IoMap[8196];
} KIIO_ACCESS_MAP;


typedef struct _KTSS {

    USHORT  Backlink;
    USHORT  Reserved0;

    ULONG   Esp0;
    USHORT  Ss0;
    USHORT  Reserved1;

    ULONG   NotUsed1[4];

    ULONG   CR3;

    ULONG   Eip;

    ULONG   NotUsed2[9];

    USHORT  Es;
    USHORT  Reserved2;

    USHORT  Cs;
    USHORT  Reserved3;

    USHORT  Ss;
    USHORT  Reserved4;

    USHORT  Ds;
    USHORT  Reserved5;

    USHORT  Fs;
    USHORT  Reserved6;

    USHORT  Gs;
    USHORT  Reserved7;

    USHORT  LDT;
    USHORT  Reserved8;

    USHORT  Flags;

    USHORT  IoMapBase;

    KIIO_ACCESS_MAP IoMaps[1];

    
    
    
    
    KINT_DIRECTION_MAP IntDirectionMap;
} KTSS, *PKTSS;














typedef struct _DESCRIPTOR {
    USHORT  Pad;
    USHORT  Limit;
    ULONG   Base;
} KDESCRIPTOR, *PKDESCRIPTOR;

typedef struct _KSPECIAL_REGISTERS {
    ULONG Cr0;
    ULONG Cr2;
    ULONG Cr3;
    ULONG Cr4;
    ULONG KernelDr0;
    ULONG KernelDr1;
    ULONG KernelDr2;
    ULONG KernelDr3;
    ULONG KernelDr6;
    ULONG KernelDr7;
    KDESCRIPTOR Gdtr;
    KDESCRIPTOR Idtr;
    USHORT Tr;
    USHORT Ldtr;
    ULONG Reserved[6];
} KSPECIAL_REGISTERS, *PKSPECIAL_REGISTERS;







typedef struct _KPROCESSOR_STATE {
    struct _CONTEXT ContextFrame;
    struct _KSPECIAL_REGISTERS SpecialRegisters;
} KPROCESSOR_STATE, *PKPROCESSOR_STATE;












typedef struct _KPRCB {






    USHORT MinorVersion;
    USHORT MajorVersion;

    struct _KTHREAD *CurrentThread;
    struct _KTHREAD *NextThread;
    struct _KTHREAD *IdleThread;

    CCHAR  Number;
    CCHAR  Reserved;
    USHORT BuildType;
    KAFFINITY SetMember;

    CCHAR   CpuType;
    CCHAR   CpuID;
    USHORT  CpuStep;

    struct _KPROCESSOR_STATE ProcessorState;

    ULONG   KernelReserved[16];         
    ULONG   HalReserved[16];            




    struct _KTHREAD *NpxThread;

    ULONG   InterruptCount;             
    ULONG   KernelTime;
    ULONG   UserTime;
    ULONG   DpcTime;
    ULONG   InterruptTime;
    ULONG   ApcBypassCount;
    ULONG   DpcBypassCount;
    ULONG   AdjustDpcThreshold;
    ULONG   Spare2[5];

    ULONG   ThreadStartCount[2];        















    SINGLE_LIST_ENTRY   FsRtlFreeSharedLockList;
    SINGLE_LIST_ENTRY   FsRtlFreeExclusiveLockList;





    ULONG CcFastReadNoWait;
    ULONG CcFastReadWait;
    ULONG CcFastReadNotPossible;
    ULONG CcCopyReadNoWait;
    ULONG CcCopyReadWait;
    ULONG CcCopyReadNoWaitMiss;





    ULONG KeAlignmentFixupCount;
    ULONG KeContextSwitches;
    ULONG KeDcacheFlushCount;
    ULONG KeExceptionDispatchCount;
    ULONG KeFirstLevelTbFills;
    ULONG KeFloatingEmulationCount;
    ULONG KeIcacheFlushCount;
    ULONG KeSecondLevelTbFills;
    ULONG KeSystemCalls;





    SINGLE_LIST_ENTRY   FsRtlFreeWaitingLockList;
    SINGLE_LIST_ENTRY   FsRtlFreeLockTreeNodeList;





    ULONG ReservedCounter[6];





    PVOID SmallIrpFreeEntry;
    PVOID LargeIrpFreeEntry;
    PVOID MdlFreeEntry;





    PVOID CreateInfoFreeEntry;
    PVOID NameBufferFreeEntry;





    PVOID SharedCacheMapEntry;





    ULONG CachePad0[2];





    ULONG ReservedPad[16 * 8];







    volatile PVOID CurrentPacket[3];
    volatile KAFFINITY TargetSet;
    volatile PKIPI_WORKER WorkerRoutine;
    volatile ULONG IpiFrozen;
    ULONG CachePad1[2];





    volatile ULONG RequestSummary;
    volatile struct _KPRCB *SignalDone;
    volatile ULONG ReverseStall;
    PVOID IpiFrame;
    ULONG CachePad2[4];





    ULONG DpcInterruptRequested;
    ULONG CachePad3[3];





    ULONG MaximumDpcQueueDepth;
    ULONG MinimumDpcRate;
    ULONG CachePad4[2];





    LIST_ENTRY DpcListHead;
    ULONG DpcQueueDepth;
    ULONG DpcRoutineActive;
    ULONG DpcCount;
    ULONG DpcLastCount;
    ULONG DpcRequestRate;

    ULONG KernelReserved2[11];
    KSPIN_LOCK DpcLock;





    BOOLEAN SkipTick;
    UCHAR VendorString[13];
    ULONG MHz;
    ULONG FeatureBits;
    LARGE_INTEGER UpdateSignature;





    ULONG QuantumEnd;


} KPRCB, *PKPRCB, * PRKPRCB;










typedef struct _KPCR {







    NT_TIB  NtTib;
    struct _KPCR *SelfPcr;              
    struct _KPRCB *Prcb;                
    KIRQL   Irql;
    ULONG   IRR;
    ULONG   IrrActive;
    ULONG   IDR;
    ULONG   Reserved2;

    struct _KIDTENTRY *IDT;
    struct _KGDTENTRY *GDT;
    struct _KTSS      *TSS;
    USHORT  MajorVersion;
    USHORT  MinorVersion;
    KAFFINITY SetMember;
    ULONG   StallScaleFactor;
    UCHAR   DebugActive;
    UCHAR   Number;



    UCHAR   VdmAlert;
    UCHAR   Reserved[1];                
    ULONG   KernelReserved[16];         
    ULONG   HalReserved[16];            




    ULONG   InterruptMode;
    UCHAR   Spare1;
    ULONG   KernelReserved2[17];
    struct _KPRCB PrcbData;


} KPCR;
typedef KPCR *PKPCR;





















































                                
                                

























typedef struct _KNONVOLATILE_CONTEXT_POINTERS {
    ULONG   Junk;
} KNONVOLATILE_CONTEXT_POINTERS,  *PKNONVOLATILE_CONTEXT_POINTERS;





























typedef struct _KTRAP_FRAME {









    ULONG   DbgEbp;         
    ULONG   DbgEip;         
    ULONG   DbgArgMark;     
    ULONG   DbgArgPointer;  













    ULONG   TempSegCs;
    ULONG   TempEsp;





    ULONG   Dr0;
    ULONG   Dr1;
    ULONG   Dr2;
    ULONG   Dr3;
    ULONG   Dr6;
    ULONG   Dr7;





    ULONG   SegGs;
    ULONG   SegEs;
    ULONG   SegDs;





    ULONG   Edx;
    ULONG   Ecx;
    ULONG   Eax;





    ULONG   PreviousPreviousMode;

    PEXCEPTION_REGISTRATION_RECORD ExceptionList;
                                            
                                            
                                            
                                            





    ULONG   SegFs;





    ULONG   Edi;
    ULONG   Esi;
    ULONG   Ebx;
    ULONG   Ebp;





    ULONG   ErrCode;
    ULONG   Eip;
    ULONG   SegCs;
    ULONG   EFlags;

    ULONG   HardwareEsp;    
    ULONG   HardwareSegSs;  

    ULONG   V86Es;          
    ULONG   V86Ds;          
    ULONG   V86Fs;
    ULONG   V86Gs;
} KTRAP_FRAME;


typedef KTRAP_FRAME *PKTRAP_FRAME;
typedef KTRAP_FRAME *PKEXCEPTION_FRAME;



















typedef struct _KCALLOUT_FRAME {
    ULONG   InStk;          
    ULONG   TrFr;           
    ULONG   CbStk;          
    ULONG   Edi;            
    ULONG   Esi;            
    ULONG   Ebx;            
    ULONG   Ebp;            
    ULONG   Ret;            
    ULONG   OutBf;          
    ULONG   OutLn;          
} KCALLOUT_FRAME;

typedef KCALLOUT_FRAME *PKCALLOUT_FRAME;






















typedef struct _KSWITCHFRAME {
    ULONG   ExceptionList;
    ULONG   Eflags;
    ULONG   RetAddr;
} KSWITCHFRAME, *PKSWITCHFRAME;












typedef struct _KFLOATING_SAVE {
    ULONG   ControlWord;
    ULONG   StatusWord;
    ULONG   ErrorOffset;
    ULONG   ErrorSelector;
    ULONG   DataOffset;
    ULONG   DataSelector;
    ULONG   Cr0NpxState;
    ULONG   Spare1;
} KFLOATING_SAVE, *PKFLOATING_SAVE;








































































































































typedef enum _INTERLOCKED_RESULT {
    ResultNegative = ((0x8000 & ~0x4000) & (0x8000 | 0x4000)),
    ResultZero     = ((~0x8000 & 0x4000) & (0x8000 | 0x4000)),
    ResultPositive = ((~0x8000 & ~0x4000) & (0x8000 | 0x4000))
} INTERLOCKED_RESULT;


INTERLOCKED_RESULT
_fastcall
Exfi386InterlockedIncrementLong (
     PLONG Addend
    );


INTERLOCKED_RESULT
_fastcall
Exfi386InterlockedDecrementLong (
     PLONG Addend
    );


LARGE_INTEGER
ExInterlockedExchangeAddLargeInteger (
     PLARGE_INTEGER Addend,
     LARGE_INTEGER Increment,
     PKSPIN_LOCK Lock
    );


ULONG
_fastcall
Exfi386InterlockedExchangeUlong (
     PULONG Target,
     ULONG Value
    );






















































#pragma warning(disable:4035)               





















































































__inline
LONG
_fastcall
InterlockedIncrement(
     PLONG Addend
    )
{
    __asm {
        mov     eax, 1
        mov     ecx, Addend
   lock xadd    [ecx], eax
        inc     eax
    }
}

__inline
LONG
_fastcall
InterlockedDecrement(
     PLONG Addend
    )
{
    __asm {
        mov     eax, -1
        mov     ecx, Addend
   lock xadd    [ecx], eax
        dec     eax
    }
}

__inline
LONG
_fastcall
InterlockedExchange(
      PLONG Target,
     LONG Value
    )
{
    __asm {
        mov     eax, Value
        mov     ecx, Target
        xchg    [ecx], eax
    }
}

__inline
LONG
_fastcall
InterlockedExchangeAdd(
      PLONG Addend,
     LONG Increment
    )
{
    __asm {
        mov     eax, Increment
        mov     ecx, Addend
   lock xadd    [ecx], eax
    }
}

__inline
PVOID
_fastcall
InterlockedCompareExchange(
      PVOID *Destination,
     PVOID Exchange,
     PVOID Comperand
    )
{
    __asm {
        mov     eax, Comperand
        mov     ecx, Destination
        mov     edx, Exchange
   lock cmpxchg [ecx], edx
    }
}




#pragma warning(default:4035)








typedef struct _LDTINFORMATION {
    ULONG Size;
    ULONG AllocatedSize;
    PLDT_ENTRY Ldt;
} LDTINFORMATION, *PLDTINFORMATION;





typedef struct _PROCESS_IO_PORT_HANDLER_INFORMATION {
    BOOLEAN Install;            
    ULONG NumEntries;
    ULONG Context;
    PEMULATOR_ACCESS_ENTRY EmulatorAccessEntries;
} PROCESS_IO_PORT_HANDLER_INFORMATION, *PPROCESS_IO_PORT_HANDLER_INFORMATION;






typedef struct _VDM_IO_HANDLER_FUNCTIONS {
    PDRIVER_IO_PORT_ULONG  UlongIo;
    PDRIVER_IO_PORT_ULONG_STRING UlongStringIo;
    PDRIVER_IO_PORT_USHORT UshortIo[2];
    PDRIVER_IO_PORT_USHORT_STRING UshortStringIo[2];
    PDRIVER_IO_PORT_UCHAR UcharIo[4];
    PDRIVER_IO_PORT_UCHAR_STRING UcharStringIo[4];
} VDM_IO_HANDLER_FUNCTIONS, *PVDM_IO_HANDLER_FUNCTIONS;

typedef struct _VDM_IO_HANDLER {
    struct _VDM_IO_HANDLER *Next;
    ULONG PortNumber;
    VDM_IO_HANDLER_FUNCTIONS IoFunctions[2];
} VDM_IO_HANDLER, *PVDM_IO_HANDLER;











#pragma warning(disable:4035)               






    








__inline PKPCR KeGetPcr(void)
{



    __asm {  mov eax, fs:[0] KPCR.SelfPcr  }

}






__inline PKPRCB KeGetCurrentPrcb (void)
{
    __asm {  mov eax, fs:[0] KPCR.Prcb     }
}









KIRQL
KeGetCurrentIrql();





__inline ULONG KeGetCurrentProcessorNumber(void)
{
    __asm {  movzx eax, fs:[0] KPCR.Number  }
}


















static __inline struct _KTHREAD *KeGetCurrentThread (void)
{
    __asm {  mov eax, fs:[0] KPCR.PrcbData.CurrentThread }
}






__inline ULONG KeIsExecutingDpc(void)
{
    __asm {  mov eax, fs:[0] KPCR.PrcbData.DpcRoutineActive }
}






























#pragma warning(default:4035)



























void
KiSetIRR (
     ULONG SWInterruptMask
    );

void
KiInitializeGDT (
      PKGDTENTRY Gdt,
     USHORT GdtLimit,
     PKPCR Pcr,
     USHORT PcrLimit,
     PKTSS Tss,
     USHORT TssLimit,
     USHORT TebLimit
    );

void
KiInitializeGdtEntry (
     PKGDTENTRY GdtEntry,
     ULONG Base,
     ULONG Limit,
     USHORT Type,
     USHORT Dpl,
     USHORT Granularity
    );





ULONG
KiEspFromTrapFrame(
     PKTRAP_FRAME TrapFrame
    );

void
KiEspToTrapFrame(
     PKTRAP_FRAME TrapFrame,
     ULONG Esp
    );

ULONG
KiSegSsFromTrapFrame(
     PKTRAP_FRAME TrapFrame
    );

void
KiSegSsToTrapFrame(
     PKTRAP_FRAME TrapFrame,
     ULONG SegSs
    );





void
KiUpdateRunTime (
    void
    );

void
KiUpdateSystemTime (
    void
    );



void
KeProfileInterrupt (
     KIRQL OldIrql,
     KTRAP_FRAME TrapFrame
    );


void
KeProfileInterruptWithSource (
     struct _KTRAP_FRAME *TrapFrame,
     KPROFILE_SOURCE ProfileSource
    );

void
KeUpdateRuntime (
     KIRQL OldIrql,
     KTRAP_FRAME TrapFrame
    );

void
KeUpdateSystemTime (
     KIRQL OldIrql,
     KTRAP_FRAME TrapFrame
    );











void
Ke386SetLdtProcess (
    struct _KPROCESS  *Process,
    PLDT_ENTRY  Ldt,
    ULONG       Limit
    );

void
Ke386SetDescriptorProcess (
    struct _KPROCESS  *Process,
    ULONG       Offset,
    LDT_ENTRY   LdtEntry
    );

void
Ke386GetGdtEntryThread (
    struct _KTHREAD *Thread,
    ULONG Offset,
    PKGDTENTRY Descriptor
    );

BOOLEAN
Ke386SetIoAccessMap (
    ULONG               MapNumber,
    PKIO_ACCESS_MAP     IoAccessMap
    );

BOOLEAN
Ke386QueryIoAccessMap (
    ULONG              MapNumber,
    PKIO_ACCESS_MAP    IoAccessMap
    );

BOOLEAN
Ke386IoSetAccessProcess (
    struct _KPROCESS    *Process,
    ULONG       MapNumber
    );

void
Ke386SetIOPL(
    struct _KPROCESS    *Process
    );

NTSTATUS
Ke386CallBios (
     ULONG BiosCommand,
      PCONTEXT BiosArguments
    );

void
KiEditIopmDpc (
     struct _KDPC *Dpc,
     PVOID DeferredContext,
     PVOID SystemArgument1,
     PVOID SystemArgument2
    );

BOOLEAN
Ki386GetSelectorParameters(
     USHORT Selector,
     PULONG Flags,
     PULONG Base,
     PULONG Limit
    );

NTSTATUS
Ke386SetVdmInterruptHandler (
     struct _KPROCESS *Process,
     ULONG Interrupt,
     USHORT Selector,
     ULONG  Offset,
     BOOLEAN Gate32
    );





NTSTATUS
KeI386GetLid(
     USHORT DeviceId,
     USHORT RelativeLid,
     BOOLEAN SharedLid,
     struct _DRIVER_OBJECT *DeviceObject,
     PUSHORT LogicalId
    );

NTSTATUS
KeI386ReleaseLid(
     USHORT LogicalId,
     struct _DRIVER_OBJECT *DeviceObject
    );

NTSTATUS
KeI386AbiosCall(
     USHORT LogicalId,
     struct _DRIVER_OBJECT *DriverObject,
     PUCHAR RequestBlock,
     USHORT EntryPoint
    );




NTSTATUS
KeI386AllocateGdtSelectors(
     PUSHORT SelectorArray,
     USHORT NumberOfSelectors
    );

void
KeI386Call16BitFunction (
      PCONTEXT Regs
    );

USHORT
KeI386Call16BitCStyleFunction (
     ULONG EntryOffset,
     ULONG EntrySelector,
     PUCHAR Parameters,
     ULONG Size
    );

NTSTATUS
KeI386FlatToGdtSelector(
     ULONG SelectorBase,
     USHORT Length,
     USHORT Selector
    );

NTSTATUS
KeI386ReleaseGdtSelectors(
     PUSHORT SelectorArray,
     USHORT NumberOfSelectors
    );

NTSTATUS
KeI386SetGdtSelector (
    ULONG       Selector,
    PKGDTENTRY  GdtValue
    );


void
KeOptimizeProcessorControlState (
    void
    );

NTSTATUS
KeSaveFloatingPointState (
     PKFLOATING_SAVE     FloatSave
    );

NTSTATUS
KeRestoreFloatingPointState (
     PKFLOATING_SAVE      FloatSave
    );




BOOLEAN
Ke386VdmInsertQueueApc (
     PKAPC             Apc,
     struct _KTHREAD  *Thread,
     KPROCESSOR_MODE   ApcMode,
     PKKERNEL_ROUTINE  KernelRoutine,
     PKRUNDOWN_ROUTINE RundownRoutine ,
     PKNORMAL_ROUTINE  NormalRoutine  ,
     PVOID             NormalContext   ,
     PVOID             SystemArgument1 ,
     PVOID             SystemArgument2 ,
     KPRIORITY         Increment
    );

void
Ke386VdmClearApcObject (
     PKAPC Apc
    );

void
KeI386VdmInitialize (
    void
    );





void
CPUID (
    ULONG   InEax,
    PULONG  OutEax,
    PULONG  OutEbx,
    PULONG  OutEcx,
    PULONG  OutEdx
    );

LONGLONG
RDTSC (
    void
    );

ULONGLONG
_fastcall
RDMSR (
     ULONG MsrRegister
    );

void
WRMSR (
     ULONG MsrRegister,
     ULONGLONG MsrValue
    );




extern ULONG KeI386EFlagsAndMaskV86;
extern ULONG KeI386EFlagsOrMaskV86;
extern BOOLEAN KeI386VdmIoplAllowed;
extern ULONG KeI386VirtualIntExtensions;


extern ULONG KeI386CpuType;
extern ULONG KeI386CpuStep;
extern BOOLEAN KeI386NpxPresent;




















extern ULONG KiBootFeatureBits;
























































typedef ULONG ARC_STATUS;





typedef enum _FIRMWARE_ENTRY {
    LoadRoutine,
    InvokeRoutine,
    ExecuteRoutine,
    HaltRoutine,
    PowerDownRoutine,
    RestartRoutine,
    RebootRoutine,
    InteractiveModeRoutine,
    Reserved1,
    GetPeerRoutine,
    GetChildRoutine,
    GetParentRoutine,
    GetDataRoutine,
    AddChildRoutine,
    DeleteComponentRoutine,
    GetComponentRoutine,
    SaveConfigurationRoutine,
    GetSystemIdRoutine,
    MemoryRoutine,
    Reserved2,
    GetTimeRoutine,
    GetRelativeTimeRoutine,
    GetDirectoryEntryRoutine,
    OpenRoutine,
    CloseRoutine,
    ReadRoutine,
    ReadStatusRoutine,
    WriteRoutine,
    SeekRoutine,
    MountRoutine,
    GetEnvironmentRoutine,
    SetEnvironmentRoutine,
    GetFileInformationRoutine,
    SetFileInformationRoutine,
    FlushAllCachesRoutine,
    TestUnicodeCharacterRoutine,
    GetDisplayStatusRoutine,
    MaximumRoutine
    } FIRMWARE_ENTRY;





typedef
ARC_STATUS
(*PARC_EXECUTE_ROUTINE) (
     PCHAR ImagePath,
     ULONG Argc,
     PCHAR Argv[],
     PCHAR Envp[]
    );

typedef
ARC_STATUS
(*PARC_INVOKE_ROUTINE) (
     ULONG EntryAddress,
     ULONG StackAddress,
     ULONG Argc,
     PCHAR Argv[],
     PCHAR Envp[]
    );

typedef
ARC_STATUS
(*PARC_LOAD_ROUTINE) (
     PCHAR ImagePath,
     ULONG TopAddress,
     PULONG EntryAddress,
     PULONG LowAddress
    );





ARC_STATUS
FwExecute (
     PCHAR ImagePath,
     ULONG Argc,
     PCHAR Argv[],
     PCHAR Envp[]
    );

ARC_STATUS
FwInvoke (
     ULONG EntryAddress,
     ULONG StackAddress,
     ULONG Argc,
     PCHAR Argv[],
     PCHAR Envp[]
    );

ARC_STATUS
FwLoad (
     PCHAR ImagePath,
     ULONG TopAddress,
     PULONG EntryAddress,
     PULONG LowAddress
    );





typedef
void
(*PARC_HALT_ROUTINE) (
    void
    );

typedef
void
(*PARC_POWERDOWN_ROUTINE) (
    void
    );

typedef
void
(*PARC_RESTART_ROUTINE) (
    void
    );

typedef
void
(*PARC_REBOOT_ROUTINE) (
    void
    );

typedef
void
(*PARC_INTERACTIVE_MODE_ROUTINE) (
    void
    );





void
FwHalt (
    void
    );

void
FwPowerDown (
    void
    );

void
FwRestart (
    void
    );

void
FwReboot (
    void
    );

void
FwEnterInteractiveMode (
    void
    );









typedef enum _CONFIGURATION_CLASS {
    SystemClass,
    ProcessorClass,
    CacheClass,
    AdapterClass,
    ControllerClass,
    PeripheralClass,
    MemoryClass,
    MaximumClass
} CONFIGURATION_CLASS, *PCONFIGURATION_CLASS;



typedef enum _CONFIGURATION_TYPE {
    ArcSystem,
    CentralProcessor,
    FloatingPointProcessor,
    PrimaryIcache,
    PrimaryDcache,
    SecondaryIcache,
    SecondaryDcache,
    SecondaryCache,
    EisaAdapter,
    TcAdapter,
    ScsiAdapter,
    DtiAdapter,
    MultiFunctionAdapter,
    DiskController,
    TapeController,
    CdromController,
    WormController,
    SerialController,
    NetworkController,
    DisplayController,
    ParallelController,
    PointerController,
    KeyboardController,
    AudioController,
    OtherController,
    DiskPeripheral,
    FloppyDiskPeripheral,
    TapePeripheral,
    ModemPeripheral,
    MonitorPeripheral,
    PrinterPeripheral,
    PointerPeripheral,
    KeyboardPeripheral,
    TerminalPeripheral,
    OtherPeripheral,
    LinePeripheral,
    NetworkPeripheral,
    SystemMemory,
    MaximumType
} CONFIGURATION_TYPE, *PCONFIGURATION_TYPE;



typedef struct _CONFIGURATION_COMPONENT {
    CONFIGURATION_CLASS Class;
    CONFIGURATION_TYPE Type;
    DEVICE_FLAGS Flags;
    USHORT Version;
    USHORT Revision;
    ULONG Key;
    ULONG AffinityMask;
    ULONG ConfigurationDataLength;
    ULONG IdentifierLength;
    PCHAR Identifier;
} CONFIGURATION_COMPONENT, *PCONFIGURATION_COMPONENT;

typedef
PCONFIGURATION_COMPONENT
(*PARC_GET_CHILD_ROUTINE) (
     PCONFIGURATION_COMPONENT Component 
    );

typedef
PCONFIGURATION_COMPONENT
(*PARC_GET_PARENT_ROUTINE) (
     PCONFIGURATION_COMPONENT Component
    );

typedef
PCONFIGURATION_COMPONENT
(*PARC_GET_PEER_ROUTINE) (
     PCONFIGURATION_COMPONENT Component
    );

typedef
PCONFIGURATION_COMPONENT
(*PARC_ADD_CHILD_ROUTINE) (
     PCONFIGURATION_COMPONENT Component,
     PCONFIGURATION_COMPONENT NewComponent,
     PVOID ConfigurationData
    );

typedef
ARC_STATUS
(*PARC_DELETE_COMPONENT_ROUTINE) (
     PCONFIGURATION_COMPONENT Component
    );

typedef
PCONFIGURATION_COMPONENT
(*PARC_GET_COMPONENT_ROUTINE) (
     PCHAR Path
    );

typedef
ARC_STATUS
(*PARC_GET_DATA_ROUTINE) (
     PVOID ConfigurationData,
     PCONFIGURATION_COMPONENT Component
    );

typedef
ARC_STATUS
(*PARC_SAVE_CONFIGURATION_ROUTINE) (
    void
    );





PCONFIGURATION_COMPONENT
FwGetChild (
     PCONFIGURATION_COMPONENT Component 
    );

PCONFIGURATION_COMPONENT
FwGetParent (
     PCONFIGURATION_COMPONENT Component
    );

PCONFIGURATION_COMPONENT
FwGetPeer (
     PCONFIGURATION_COMPONENT Component
    );

PCONFIGURATION_COMPONENT
FwAddChild (
     PCONFIGURATION_COMPONENT Component,
     PCONFIGURATION_COMPONENT NewComponent,
     PVOID ConfigurationData 
    );

ARC_STATUS
FwDeleteComponent (
     PCONFIGURATION_COMPONENT Component
    );

PCONFIGURATION_COMPONENT
FwGetComponent(
     PCHAR Path
    );

ARC_STATUS
FwGetConfigurationData (
     PVOID ConfigurationData,
     PCONFIGURATION_COMPONENT Component
    );

ARC_STATUS
FwSaveConfiguration (
    void
    );





typedef struct _SYSTEM_ID {
    CHAR VendorId[8];
    CHAR ProductId[8];
} SYSTEM_ID, *PSYSTEM_ID;

typedef
PSYSTEM_ID
(*PARC_GET_SYSTEM_ID_ROUTINE) (
    void
    );





PSYSTEM_ID
FwGetSystemId (
    void
    );





typedef enum _MEMORY_TYPE {
    MemoryExceptionBlock,
    MemorySystemBlock,
    MemoryFree,
    MemoryBad,
    MemoryLoadedProgram,
    MemoryFirmwareTemporary,
    MemoryFirmwarePermanent,
    MemoryFreeContiguous,
    MemorySpecialMemory,
    MemoryMaximum
    } MEMORY_TYPE;

typedef struct _MEMORY_DESCRIPTOR {
    MEMORY_TYPE MemoryType;
    ULONG BasePage;
    ULONG PageCount;
} MEMORY_DESCRIPTOR, *PMEMORY_DESCRIPTOR;

typedef
PMEMORY_DESCRIPTOR
(*PARC_MEMORY_ROUTINE) (
     PMEMORY_DESCRIPTOR MemoryDescriptor 
    );





PMEMORY_DESCRIPTOR
FwGetMemoryDescriptor (
     PMEMORY_DESCRIPTOR MemoryDescriptor 
    );





typedef
PTIME_FIELDS
(*PARC_GET_TIME_ROUTINE) (
    void
    );

typedef
ULONG
(*PARC_GET_RELATIVE_TIME_ROUTINE) (
    void
    );





PTIME_FIELDS
FwGetTime (
    void
    );

ULONG
FwGetRelativeTime (
    void
    );












typedef enum _OPEN_MODE {
    ArcOpenReadOnly,
    ArcOpenWriteOnly,
    ArcOpenReadWrite,
    ArcCreateWriteOnly,
    ArcCreateReadWrite,
    ArcSupersedeWriteOnly,
    ArcSupersedeReadWrite,
    ArcOpenDirectory,
    ArcCreateDirectory,
    ArcOpenMaximumMode
    } OPEN_MODE;

typedef struct _FILE_INFORMATION {
    LARGE_INTEGER StartingAddress;
    LARGE_INTEGER EndingAddress;
    LARGE_INTEGER CurrentPosition;
    CONFIGURATION_TYPE Type;
    ULONG FileNameLength;
    UCHAR Attributes;
    CHAR FileName[32];
} FILE_INFORMATION, *PFILE_INFORMATION;

typedef enum _SEEK_MODE {
    SeekAbsolute,
    SeekRelative,
    SeekMaximum
    } SEEK_MODE;

typedef enum _MOUNT_OPERATION {
    MountLoadMedia,
    MountUnloadMedia,
    MountMaximum
    } MOUNT_OPERATION;

typedef struct _DIRECTORY_ENTRY {
        ULONG FileNameLength;
        UCHAR FileAttribute;
        CHAR FileName[32];
    } DIRECTORY_ENTRY, *PDIRECTORY_ENTRY;

typedef
ARC_STATUS
(*PARC_CLOSE_ROUTINE) (
     ULONG FileId
    );

typedef
ARC_STATUS
(*PARC_MOUNT_ROUTINE) (
     PCHAR MountPath,
     MOUNT_OPERATION Operation
    );

typedef
ARC_STATUS
(*PARC_OPEN_ROUTINE) (
     PCHAR OpenPath,
     OPEN_MODE OpenMode,
     PULONG FileId
    );

typedef
ARC_STATUS
(*PARC_READ_ROUTINE) (
     ULONG FileId,
     PVOID Buffer,
     ULONG Length,
     PULONG Count
    );

typedef
ARC_STATUS
(*PARC_READ_STATUS_ROUTINE) (
     ULONG FileId
    );

typedef
ARC_STATUS
(*PARC_SEEK_ROUTINE) (
     ULONG FileId,
     PLARGE_INTEGER Offset,
     SEEK_MODE SeekMode
    );

typedef
ARC_STATUS
(*PARC_WRITE_ROUTINE) (
     ULONG FileId,
     PVOID Buffer,
     ULONG Length,
     PULONG Count
    );

typedef
ARC_STATUS
(*PARC_GET_FILE_INFO_ROUTINE) (
     ULONG FileId,
     PFILE_INFORMATION FileInformation
    );

typedef
ARC_STATUS
(*PARC_SET_FILE_INFO_ROUTINE) (
     ULONG FileId,
     ULONG AttributeFlags,
     ULONG AttributeMask
    );

typedef
ARC_STATUS
(*PARC_GET_DIRECTORY_ENTRY_ROUTINE) (
     ULONG FileId,
     PDIRECTORY_ENTRY Buffer,
     ULONG Length,
     PULONG Count
    );





ARC_STATUS
FwClose (
     ULONG FileId
    );

ARC_STATUS
FwMount (
     PCHAR MountPath,
     MOUNT_OPERATION Operation
    );

ARC_STATUS
FwOpen (
     PCHAR OpenPath,
     OPEN_MODE OpenMode,
     PULONG FileId
    );

ARC_STATUS
FwRead (
     ULONG FileId,
     PVOID Buffer,
     ULONG Length,
     PULONG Count
    );

ARC_STATUS
FwGetReadStatus (
     ULONG FileId
    );

ARC_STATUS
FwSeek (
     ULONG FileId,
     PLARGE_INTEGER Offset,
     SEEK_MODE SeekMode
    );

ARC_STATUS
FwWrite (
     ULONG FileId,
     PVOID Buffer,
     ULONG Length,
     PULONG Count
    );

ARC_STATUS
FwGetFileInformation (
     ULONG FileId,
     PFILE_INFORMATION FileInformation
    );

ARC_STATUS
FwSetFileInformation (
     ULONG FileId,
     ULONG AttributeFlags,
     ULONG AttributeMask
    );

ARC_STATUS
FwGetDirectoryEntry (
     ULONG FileId,
     PDIRECTORY_ENTRY Buffer,
     ULONG Length,
     PULONG Count
    );






typedef
PCHAR
(*PARC_GET_ENVIRONMENT_ROUTINE) (
     PCHAR Variable
    );

typedef
ARC_STATUS
(*PARC_SET_ENVIRONMENT_ROUTINE) (
     PCHAR Variable,
     PCHAR Value
    );





PCHAR
FwGetEnvironmentVariable (
     PCHAR Variable
    );

ARC_STATUS
FwSetEnvironmentVariable (
     PCHAR Variable,
     PCHAR Value
    );





typedef
void
(*PARC_FLUSH_ALL_CACHES_ROUTINE) (
    void
    );





void
FwFlushAllCaches (
    void
    );





typedef struct _ARC_DISPLAY_STATUS {
    USHORT CursorXPosition;
    USHORT CursorYPosition;
    USHORT CursorMaxXPosition;
    USHORT CursorMaxYPosition;
    UCHAR ForegroundColor;
    UCHAR BackgroundColor;
    BOOLEAN HighIntensity;
    BOOLEAN Underscored;
    BOOLEAN ReverseVideo;
} ARC_DISPLAY_STATUS, *PARC_DISPLAY_STATUS;

typedef
ARC_STATUS
(*PARC_TEST_UNICODE_CHARACTER_ROUTINE) (
     ULONG FileId,
     WCHAR UnicodeCharacter
    );

typedef
PARC_DISPLAY_STATUS
(*PARC_GET_DISPLAY_STATUS_ROUTINE) (
     ULONG FileId
    );

ARC_STATUS
FwTestUnicodeCharacter(
     ULONG FileId,
     WCHAR UnicodeCharacter
    );

PARC_DISPLAY_STATUS
FwGetDisplayStatus(
     ULONG FileId
    );








typedef struct _DEBUG_BLOCK {
    ULONG Signature;
    ULONG Length;
} DEBUG_BLOCK, *PDEBUG_BLOCK;







typedef struct _BOOT_STATUS {
    ULONG BootStarted : 1;
    ULONG BootFinished : 1;
    ULONG RestartStarted : 1;
    ULONG RestartFinished : 1;
    ULONG PowerFailStarted : 1;
    ULONG PowerFailFinished : 1;
    ULONG ProcessorReady : 1;
    ULONG ProcessorRunning : 1;
    ULONG ProcessorStart : 1;
} BOOT_STATUS, *PBOOT_STATUS;

typedef struct _ALPHA_RESTART_STATE {



















































































































    ULONG PlaceHolder;



} ALPHA_RESTART_STATE, *PALPHA_RESTART_STATE;

typedef struct _I386_RESTART_STATE {



    
    
    

    ULONG PlaceHolder;







} I386_RESTART_STATE, *PI386_RESTART_STATE;

typedef struct _MIPS_RESTART_STATE {








































































































    ULONG PlaceHolder;



} MIPS_RESTART_STATE, *PMIPS_RESTART_STATE;

typedef struct _PPC_RESTART_STATE {































































































    ULONG PlaceHolder;



} PPC_RESTART_STATE, *PPPC_RESTART_STATE;

typedef struct _RESTART_BLOCK {
    ULONG Signature;
    ULONG Length;
    USHORT Version;
    USHORT Revision;
    struct _RESTART_BLOCK *NextRestartBlock;
    PVOID RestartAddress;
    ULONG BootMasterId;
    ULONG ProcessorId;
    volatile BOOT_STATUS BootStatus;
    ULONG CheckSum;
    ULONG SaveAreaLength;
    union {
        ULONG SaveArea[1];
        ALPHA_RESTART_STATE Alpha;
        I386_RESTART_STATE I386;
        MIPS_RESTART_STATE Mips;
        PPC_RESTART_STATE Ppc;
    } u;

} RESTART_BLOCK, *PRESTART_BLOCK;





typedef struct _SYSTEM_PARAMETER_BLOCK {
    ULONG Signature;
    ULONG Length;
    USHORT Version;
    USHORT Revision;
    PRESTART_BLOCK RestartBlock;
    PDEBUG_BLOCK DebugBlock;
    PVOID GenerateExceptionVector;
    PVOID TlbMissExceptionVector;
    ULONG FirmwareVectorLength;
    PVOID *FirmwareVector;
    ULONG VendorVectorLength;
    PVOID *VendorVector;
    ULONG AdapterCount;
    ULONG Adapter0Type;
    ULONG Adapter0Length;
    PVOID *Adapter0Vector;
} SYSTEM_PARAMETER_BLOCK, *PSYSTEM_PARAMETER_BLOCK;




















extern SYSTEM_PARAMETER_BLOCK GlobalSystemBlock;









































































































































































typedef struct _CONFIGURATION_COMPONENT_DATA {
    struct _CONFIGURATION_COMPONENT_DATA *Parent;
    struct _CONFIGURATION_COMPONENT_DATA *Child;
    struct _CONFIGURATION_COMPONENT_DATA *Sibling;
    CONFIGURATION_COMPONENT ComponentEntry;
    PVOID ConfigurationData;
} CONFIGURATION_COMPONENT_DATA, *PCONFIGURATION_COMPONENT_DATA;





typedef struct _MONITOR_CONFIGURATION_DATA {
    USHORT Version;
    USHORT Revision;
    USHORT HorizontalResolution;
    USHORT HorizontalDisplayTime;
    USHORT HorizontalBackPorch;
    USHORT HorizontalFrontPorch;
    USHORT HorizontalSync;
    USHORT VerticalResolution;
    USHORT VerticalBackPorch;
    USHORT VerticalFrontPorch;
    USHORT VerticalSync;
    USHORT HorizontalScreenSize;
    USHORT VerticalScreenSize;
} MONITOR_CONFIGURATION_DATA, *PMONITOR_CONFIGURATION_DATA;





typedef struct _FLOPPY_CONFIGURATION_DATA {
    USHORT Version;
    USHORT Revision;
    CHAR Size[8];
    ULONG MaxDensity;
    ULONG MountDensity;
} FLOPPY_CONFIGURATION_DATA, *PFLOPPY_CONFIGURATION_DATA;





typedef enum _TYPE_OF_MEMORY {
    LoaderExceptionBlock = MemoryExceptionBlock,            
    LoaderSystemBlock = MemorySystemBlock,                  
    LoaderFree = MemoryFree,                                
    LoaderBad = MemoryBad,                                  
    LoaderLoadedProgram = MemoryLoadedProgram,              
    LoaderFirmwareTemporary = MemoryFirmwareTemporary,      
    LoaderFirmwarePermanent = MemoryFirmwarePermanent,      
    LoaderOsloaderHeap,                                     
    LoaderOsloaderStack,                                    
    LoaderSystemCode,                                       
    LoaderHalCode,                                          
    LoaderBootDriver,                                       
    LoaderConsoleInDriver,                                  
    LoaderConsoleOutDriver,                                 
    LoaderStartupDpcStack,                                  
    LoaderStartupKernelStack,                               
    LoaderStartupPanicStack,                                
    LoaderStartupPcrPage,                                   
    LoaderStartupPdrPage,                                   
    LoaderRegistryData,                                     
    LoaderMemoryData,                                       
    LoaderNlsData,                                          
    LoaderSpecialMemory,                                    
    LoaderMaximum                                           
    } TYPE_OF_MEMORY;

typedef struct _MEMORY_ALLOCATION_DESCRIPTOR {
    LIST_ENTRY ListEntry;
    TYPE_OF_MEMORY MemoryType;
    ULONG BasePage;
    ULONG PageCount;
} MEMORY_ALLOCATION_DESCRIPTOR, *PMEMORY_ALLOCATION_DESCRIPTOR;





typedef struct _NLS_DATA_BLOCK {
    PVOID AnsiCodePageData;
    PVOID OemCodePageData;
    PVOID UnicodeCaseTableData;
} NLS_DATA_BLOCK, *PNLS_DATA_BLOCK;

typedef struct _ARC_DISK_SIGNATURE {
    LIST_ENTRY ListEntry;
    ULONG   Signature;
    PCHAR   ArcName;
    ULONG   CheckSum;
    BOOLEAN ValidPartitionTable;
} ARC_DISK_SIGNATURE, *PARC_DISK_SIGNATURE;

typedef struct _ARC_DISK_INFORMATION {
    LIST_ENTRY DiskSignatures;
} ARC_DISK_INFORMATION, *PARC_DISK_INFORMATION;

typedef struct _I386_LOADER_BLOCK {



    PVOID CommonDataArea;
    ULONG MachineType;      







} I386_LOADER_BLOCK, *PI386_LOADER_BLOCK;

typedef struct _MIPS_LOADER_BLOCK {




















    ULONG PlaceHolder;



} MIPS_LOADER_BLOCK, *PMIPS_LOADER_BLOCK;

typedef struct _PPC_LOADER_BLOCK {
































    ULONG PlaceHolder;



} PPC_LOADER_BLOCK, *PPPC_LOADER_BLOCK;

typedef struct _ALPHA_LOADER_BLOCK {

































    ULONG PlaceHolder;



} ALPHA_LOADER_BLOCK, *PALPHA_LOADER_BLOCK;

struct _SETUP_LOADER_BLOCK;

typedef struct _LOADER_PARAMETER_BLOCK {
    LIST_ENTRY LoadOrderListHead;
    LIST_ENTRY MemoryDescriptorListHead;
    LIST_ENTRY BootDriverListHead;
    ULONG KernelStack;
    ULONG Prcb;
    ULONG Process;
    ULONG Thread;
    ULONG RegistryLength;
    PVOID RegistryBase;
    PCONFIGURATION_COMPONENT_DATA ConfigurationRoot;
    PCHAR ArcBootDeviceName;
    PCHAR ArcHalDeviceName;
    PCHAR NtBootPathName;
    PCHAR NtHalPathName;
    PCHAR LoadOptions;
    PNLS_DATA_BLOCK NlsData;
    PARC_DISK_INFORMATION ArcDiskInformation;
    PVOID OemFontFile;
    struct _SETUP_LOADER_BLOCK *SetupLoaderBlock;
    ULONG Spare1;

    union {
        I386_LOADER_BLOCK I386;
        MIPS_LOADER_BLOCK Mips;
        ALPHA_LOADER_BLOCK Alpha;
        PPC_LOADER_BLOCK Ppc;
    } u;

} LOADER_PARAMETER_BLOCK, *PLOADER_PARAMETER_BLOCK;































































typedef struct _KTHREAD_SWITCH_COUNTERS {
    ULONG FindAny;
    ULONG FindIdeal;
    ULONG FindLast;
    ULONG IdleAny;
    ULONG IdleCurrent;
    ULONG IdleIdeal;
    ULONG IdleLast;
    ULONG PreemptAny;
    ULONG PreemptCurrent;
    ULONG PreemptLast;
    ULONG SwitchToIdle;
} KTHREAD_SWITCH_COUNTERS, *PKTHREAD_SWITCH_COUNTERS;



















































typedef enum _KOBJECTS {
    EventNotificationObject = 0,
    EventSynchronizationObject = 1,
    MutantObject = 2,
    ProcessObject = 3,
    QueueObject = 4,
    SemaphoreObject = 5,
    ThreadObject = 6,
    Spare1Object = 7,
    TimerNotificationObject = 8,
    TimerSynchronizationObject = 9,
    Spare2Object = 10,
    Spare3Object = 11,
    Spare4Object = 12,
    Spare5Object = 13,
    Spare6Object = 14,
    Spare7Object = 15,
    Spare8Object = 16,
    Spare9Object = 17,
    ApcObject,
    DpcObject,
    DeviceQueueObject,
    EventPairObject,
    InterruptObject,
    ProfileObject
    } KOBJECTS;





typedef enum _KAPC_ENVIRONMENT {
    OriginalApcEnvironment,
    AttachedApcEnvironment,
    CurrentApcEnvironment
    } KAPC_ENVIRONMENT;







typedef enum _KINTERRUPT_MODE {
    LevelSensitive,
    Latched
    } KINTERRUPT_MODE;







typedef enum _KPROCESS_STATE {
    ProcessInMemory,
    ProcessOutOfMemory,
    ProcessInTransition
    } KPROCESS_STATE;





typedef enum _KTHREAD_STATE {
    Initialized,
    Ready,
    Running,
    Standby,
    Terminated,
    Waiting,
    Transition
    } KTHREAD_STATE;






typedef enum _KWAIT_REASON {
    Executive,
    FreePage,
    PageIn,
    PoolAllocation,
    DelayExecution,
    Suspended,
    UserRequest,
    WrExecutive,
    WrFreePage,
    WrPageIn,
    WrPoolAllocation,
    WrDelayExecution,
    WrSuspended,
    WrUserRequest,
    WrEventPair,
    WrQueue,
    WrLpcReceive,
    WrLpcReply,
    WrVirtualMemory,
    WrPageOut,
    WrRendezvous,
    Spare2,
    Spare3,
    Spare4,
    Spare5,
    Spare6,
    WrKernel,
    MaximumWaitReason
    } KWAIT_REASON;









typedef struct _KAPC_STATE {
    LIST_ENTRY ApcListHead[MaximumMode];
    struct _KPROCESS *Process;
    BOOLEAN KernelApcInProgress;
    BOOLEAN KernelApcPending;
    BOOLEAN UserApcPending;
} KAPC_STATE, *PKAPC_STATE, * PRKAPC_STATE;








typedef struct _DISPATCHER_HEADER {
    UCHAR Type;
    UCHAR Absolute;
    UCHAR Size;
    UCHAR Inserted;
    LONG SignalState;
    LIST_ENTRY WaitListHead;
} DISPATCHER_HEADER;







typedef ULONG KPAGE_FRAME;






typedef struct _KWAIT_BLOCK {
    LIST_ENTRY WaitListEntry;
    struct _KTHREAD * Thread;
    PVOID Object;
    struct _KWAIT_BLOCK * NextWaitBlock;
    USHORT WaitKey;
    USHORT WaitType;
} KWAIT_BLOCK, *PKWAIT_BLOCK, * PRKWAIT_BLOCK;



















typedef struct _KSERVICE_TABLE_DESCRIPTOR {
    PULONG Base;
    PULONG Count;
    ULONG Limit;
    PUCHAR Number;
} KSERVICE_TABLE_DESCRIPTOR, *PKSERVICE_TABLE_DESCRIPTOR;







typedef
BOOLEAN
(*PKDEBUG_ROUTINE) (
     PKTRAP_FRAME TrapFrame,
     PKEXCEPTION_FRAME ExceptionFrame,
     PEXCEPTION_RECORD ExceptionRecord,
     PCONTEXT ContextRecord,
     KPROCESSOR_MODE PreviousMode,
     BOOLEAN SecondChance
    );

typedef
BOOLEAN
(*PKDEBUG_SWITCH_ROUTINE) (
     PEXCEPTION_RECORD ExceptionRecord,
     PCONTEXT ContextRecord,
     BOOLEAN SecondChance
    );

typedef enum {
    ContinueError = 0,
    ContinueSuccess = 1,
    ContinueProcessorReselected,
    ContinueNextProcessor
} KCONTINUE_STATUS;






typedef
void
(*PKSTART_ROUTINE) (
     PVOID StartContext
    );







typedef
void
(*PKSYSTEM_ROUTINE) (
     PKSTART_ROUTINE StartRoutine ,
     PVOID StartContext 
    );










typedef struct _KDEVICE_QUEUE {
    CSHORT Type;
    CSHORT Size;
    LIST_ENTRY DeviceListHead;
    KSPIN_LOCK Lock;
    BOOLEAN Busy;
} KDEVICE_QUEUE, *PKDEVICE_QUEUE, * PRKDEVICE_QUEUE;

typedef struct _KDEVICE_QUEUE_ENTRY {
    LIST_ENTRY DeviceListEntry;
    ULONG SortKey;
    BOOLEAN Inserted;
} KDEVICE_QUEUE_ENTRY, *PKDEVICE_QUEUE_ENTRY, * PRKDEVICE_QUEUE_ENTRY;






typedef struct _KEVENT {
    DISPATCHER_HEADER Header;
} KEVENT, *PKEVENT, * PRKEVENT;






typedef struct _KEVENT_PAIR {
    CSHORT Type;
    CSHORT Size;
    KEVENT EventLow;
    KEVENT EventHigh;
} KEVENT_PAIR, *PKEVENT_PAIR, * PRKEVENT_PAIR;








struct _KINTERRUPT;


typedef
BOOLEAN
(*PKSERVICE_ROUTINE) (
     struct _KINTERRUPT *Interrupt,
     PVOID ServiceContext
    );










typedef struct _KINTERRUPT {
    CSHORT Type;
    CSHORT Size;
    LIST_ENTRY InterruptListEntry;
    PKSERVICE_ROUTINE ServiceRoutine;
    PVOID ServiceContext;
    KSPIN_LOCK SpinLock;
    ULONG Spare1;
    PKSPIN_LOCK ActualLock;
    PKINTERRUPT_ROUTINE DispatchAddress;
    ULONG Vector;
    KIRQL Irql;
    KIRQL SynchronizeIrql;
    BOOLEAN FloatingSave;
    BOOLEAN Connected;
    CCHAR Number;
    BOOLEAN ShareVector;
    KINTERRUPT_MODE Mode;
    ULONG Spare2;
    ULONG Spare3;
    ULONG DispatchCode[106];
} KINTERRUPT;

typedef struct _KINTERRUPT *PKINTERRUPT, * PRKINTERRUPT; 






typedef struct _KMUTANT {
    DISPATCHER_HEADER Header;
    LIST_ENTRY MutantListEntry;
    struct _KTHREAD * OwnerThread;
    BOOLEAN Abandoned;
    UCHAR ApcDisable;
} KMUTANT, *PKMUTANT, * PRKMUTANT, KMUTEX, *PKMUTEX, * PRKMUTEX;






typedef struct _KQUEUE {
    DISPATCHER_HEADER Header;
    LIST_ENTRY EntryListHead;
    ULONG CurrentCount;
    ULONG MaximumCount;
    LIST_ENTRY ThreadListHead;
} KQUEUE, *PKQUEUE, * PRKQUEUE;







typedef struct _KSEMAPHORE {
    DISPATCHER_HEADER Header;
    LONG Limit;
} KSEMAPHORE, *PKSEMAPHORE, * PRKSEMAPHORE;






typedef struct _KTIMER {
    DISPATCHER_HEADER Header;
    ULARGE_INTEGER DueTime;
    LIST_ENTRY TimerListEntry;
    struct _KDPC *Dpc;
    LONG Period;
} KTIMER, *PKTIMER, * PRKTIMER;







struct _ECHANNEL;

typedef struct _KTHREAD {

    
    
    
    
    

    DISPATCHER_HEADER Header;
    LIST_ENTRY MutantListHead;

    
    
    
    
    
    
    

    PVOID InitialStack;
    PVOID StackLimit;
    PVOID Teb;
    PVOID TlsArray;
    PVOID KernelStack;
    BOOLEAN DebugActive;
    UCHAR State;
    BOOLEAN Alerted[MaximumMode];
    UCHAR Iopl;
    UCHAR NpxState;
    BOOLEAN Saturation;
    SCHAR Priority;
    KAPC_STATE ApcState;
    ULONG ContextSwitches;

    
    
    

    NTSTATUS WaitStatus;
    KIRQL WaitIrql;
    KPROCESSOR_MODE WaitMode;
    BOOLEAN WaitNext;
    UCHAR WaitReason;
    PRKWAIT_BLOCK WaitBlockList;
    LIST_ENTRY WaitListEntry;
    ULONG WaitTime;
    SCHAR BasePriority;
    UCHAR DecrementCount;
    SCHAR PriorityDecrement;
    SCHAR Quantum;
    KWAIT_BLOCK WaitBlock[3 + 1];
    PVOID LegoData;
    ULONG KernelApcDisable;
    KAFFINITY UserAffinity;
    BOOLEAN SystemAffinityActive;
    UCHAR Pad[3];
    PVOID ServiceTable;





    
    
    

    PRKQUEUE Queue;
    KSPIN_LOCK ApcQueueLock;
    KTIMER Timer;
    LIST_ENTRY QueueListEntry;

    
    
    
    

    KAFFINITY Affinity;
    BOOLEAN Preempted;
    BOOLEAN ProcessReadyQueue;
    BOOLEAN KernelStackResident;
    UCHAR NextProcessor;

    
    
    

    PVOID CallbackStack;
    PVOID Win32Thread;
    PKTRAP_FRAME TrapFrame;
    PKAPC_STATE ApcStatePointer[2];
    UCHAR EnableStackSwap;
    UCHAR LargeStack;
    UCHAR ResourceIndex;
    CCHAR PreviousMode;

    
    
    

    ULONG KernelTime;
    ULONG UserTime;

    
    
    
    

    KAPC_STATE SavedApcState;
    BOOLEAN Alertable;
    UCHAR ApcStateIndex;
    BOOLEAN ApcQueueable;
    BOOLEAN AutoAlignment;

    
    
    
    

    PVOID StackBase;
    KAPC SuspendApc;
    KSEMAPHORE SuspendSemaphore;
    LIST_ENTRY ThreadListEntry;

    
    
    
    
    
    
    CCHAR FreezeCount;
    CCHAR SuspendCount;
    UCHAR IdealProcessor;
    UCHAR DisableBoost;
} KTHREAD, *PKTHREAD, * PRKTHREAD;





typedef struct _KPROCESS {

    
    
    
    
    

    DISPATCHER_HEADER Header;
    LIST_ENTRY ProfileListHead;

    
    
    

    ULONG DirectoryTableBase[2];



    KGDTENTRY LdtDescriptor;
    KIDTENTRY Int21Descriptor;
    USHORT IopmOffset;
    UCHAR Iopl;
    BOOLEAN VdmFlag;










    KAFFINITY ActiveProcessors;

    
    
    

    ULONG KernelTime;
    ULONG UserTime;

    
    
    

    LIST_ENTRY ReadyListHead;
    LIST_ENTRY SwapListEntry;
    LIST_ENTRY ThreadListHead;
    KSPIN_LOCK ProcessLock;
    KAFFINITY Affinity;
    USHORT StackCount;
    SCHAR BasePriority;
    SCHAR ThreadQuantum;
    BOOLEAN AutoAlignment;
    UCHAR State;
    UCHAR ThreadSeed;
    BOOLEAN DisableBoost;
} KPROCESS, *PKPROCESS, * PRKPROCESS;





typedef struct _KPROFILE {
    CSHORT Type;
    CSHORT Size;
    LIST_ENTRY ProfileListEntry;
    PKPROCESS Process;
    PVOID RangeBase;
    PVOID RangeLimit;
    ULONG BucketShift;
    PVOID Buffer;
    ULONG Segment;
    KAFFINITY Affinity;
    CSHORT Source;
    BOOLEAN Started;
} KPROFILE, *PKPROFILE, * PRKPROFILE;








typedef enum _ECHANNEL_STATE {
    ClientIdle,
    ClientSendWaitReply,
    ClientShutdown,
    ServerIdle,
    ServerReceiveMessage,
    ServerShutdown
} ECHANNEL_STATE;

typedef struct _ECHANNEL {
    USHORT Type;
    USHORT State;
    PKPROCESS OwnerProcess;
    PKTHREAD ClientThread;
    PKTHREAD ServerThread;
    PVOID ServerContext;
    struct _ECHANNEL *ServerChannel;
    KEVENT ReceiveEvent;
    KEVENT ClearToSendEvent;
} ECHANNEL, *PECHANNEL, * PRECHANNEL;









void
KeInitializeApc (
     PRKAPC Apc,
     PRKTHREAD Thread,
     KAPC_ENVIRONMENT Environment,
     PKKERNEL_ROUTINE KernelRoutine,
     PKRUNDOWN_ROUTINE RundownRoutine ,
     PKNORMAL_ROUTINE NormalRoutine ,
     KPROCESSOR_MODE ProcessorMode ,
     PVOID NormalContext 
    );

PLIST_ENTRY
KeFlushQueueApc (
     PKTHREAD Thread,
     KPROCESSOR_MODE ProcessorMode
    );


BOOLEAN
KeInsertQueueApc (
     PRKAPC Apc,
     PVOID SystemArgument1,
     PVOID SystemArgument2,
     KPRIORITY Increment
    );

BOOLEAN
KeRemoveQueueApc (
     PKAPC Apc
    );







void
KeInitializeDpc (
     PRKDPC Dpc,
     PKDEFERRED_ROUTINE DeferredRoutine,
     PVOID DeferredContext
    );


BOOLEAN
KeInsertQueueDpc (
     PRKDPC Dpc,
     PVOID SystemArgument1,
     PVOID SystemArgument2
    );


BOOLEAN
KeRemoveQueueDpc (
     PRKDPC Dpc
    );


void
KeSetImportanceDpc (
     PRKDPC Dpc,
     KDPC_IMPORTANCE Importance
    );


void
KeSetTargetProcessorDpc (
     PRKDPC Dpc,
     CCHAR Number
    );






void
KeInitializeDeviceQueue (
     PKDEVICE_QUEUE DeviceQueue
    );


BOOLEAN
KeInsertDeviceQueue (
     PKDEVICE_QUEUE DeviceQueue,
     PKDEVICE_QUEUE_ENTRY DeviceQueueEntry
    );


BOOLEAN
KeInsertByKeyDeviceQueue (
     PKDEVICE_QUEUE DeviceQueue,
     PKDEVICE_QUEUE_ENTRY DeviceQueueEntry,
     ULONG SortKey
    );


PKDEVICE_QUEUE_ENTRY
KeRemoveDeviceQueue (
     PKDEVICE_QUEUE DeviceQueue
    );


PKDEVICE_QUEUE_ENTRY
KeRemoveByKeyDeviceQueue (
     PKDEVICE_QUEUE DeviceQueue,
     ULONG SortKey
    );


BOOLEAN
KeRemoveEntryDeviceQueue (
     PKDEVICE_QUEUE DeviceQueue,
     PKDEVICE_QUEUE_ENTRY DeviceQueueEntry
    );







                                         
void                                                
KeInitializeInterrupt (                             
     PKINTERRUPT Interrupt,                       
     PKSERVICE_ROUTINE ServiceRoutine,            
     PVOID ServiceContext,                        
     PKSPIN_LOCK SpinLock ,               
     ULONG Vector,                                
     KIRQL Irql,                                  
     KIRQL SynchronizeIrql,                       
     KINTERRUPT_MODE InterruptMode,               
     BOOLEAN ShareVector,                         
     CCHAR ProcessorNumber,                       
     BOOLEAN FloatingSave                         
    );                                              
                                                    
                                         
BOOLEAN                                             
KeConnectInterrupt (                                
     PKINTERRUPT Interrupt                        
    );                                              
                                                    

BOOLEAN
KeDisconnectInterrupt (
     PKINTERRUPT Interrupt
    );

                                         
BOOLEAN                                             
KeSynchronizeExecution (                            
     PKINTERRUPT Interrupt,                       
     PKSYNCHRONIZE_ROUTINE SynchronizeRoutine,    
     PVOID SynchronizeContext                     
    );                                              
                                                    




void
KeInitializeProfile (
     PKPROFILE Profile,
     PKPROCESS Process ,
     PVOID RangeBase,
     ULONG RangeSize,
     ULONG BucketSize,
     ULONG Segment,
     KPROFILE_SOURCE ProfileSource,
     KAFFINITY Affinity
    );

BOOLEAN
KeStartProfile (
     PKPROFILE Profile,
     PULONG Buffer
    );

BOOLEAN
KeStopProfile (
     PKPROFILE Profile
    );

void
KeSetIntervalProfile (
     ULONG Interval,
     KPROFILE_SOURCE Source
    );

ULONG
KeQueryIntervalProfile (
     KPROFILE_SOURCE Source
    );






































LONG
KePulseEvent (
     PRKEVENT Event,
     KPRIORITY Increment,
     BOOLEAN Wait
    );




LONG
KeReadStateEvent (
     PRKEVENT Event
    );


LONG
KeResetEvent (
     PRKEVENT Event
    );


LONG
KeSetEvent (
     PRKEVENT Event,
     KPRIORITY Increment,
     BOOLEAN Wait
    );



void
KeSetEventBoostPriority (
     PRKEVENT Event,
     PRKTHREAD *Thread 
    );

void
KeInitializeEventPair (
     PKEVENT_PAIR EventPair
    );
















void
KeInitializeMutant (
     PRKMUTANT Mutant,
     BOOLEAN InitialOwner
    );

LONG
KeReadStateMutant (
     PRKMUTANT
    );


LONG
KeReleaseMutant (
     PRKMUTANT Mutant,
     KPRIORITY Increment,
     BOOLEAN Abandoned,
     BOOLEAN Wait
    );







void
KeInitializeMutex (
     PRKMUTEX Mutex,
     ULONG Level
    );




LONG
KeReleaseMutex (
     PRKMUTEX Mutex,
     BOOLEAN Wait
    );







void
KeInitializeQueue (
     PRKQUEUE Queue,
     ULONG Count 
    );


LONG
KeReadStateQueue (
     PRKQUEUE Queue
    );


LONG
KeInsertQueue (
     PRKQUEUE Queue,
     PLIST_ENTRY Entry
    );


LONG
KeInsertHeadQueue (
     PRKQUEUE Queue,
     PLIST_ENTRY Entry
    );


PLIST_ENTRY
KeRemoveQueue (
     PRKQUEUE Queue,
     KPROCESSOR_MODE WaitMode,
     PLARGE_INTEGER Timeout 
    );

PLIST_ENTRY
KeRundownQueue (
     PRKQUEUE Queue
    );







void
KeInitializeSemaphore (
     PRKSEMAPHORE Semaphore,
     LONG Count,
     LONG Limit
    );


LONG
KeReadStateSemaphore (
     PRKSEMAPHORE Semaphore
    );


LONG
KeReleaseSemaphore (
     PRKSEMAPHORE Semaphore,
     KPRIORITY Increment,
     LONG Adjustment,
     BOOLEAN Wait
    );







void
KeInitializeProcess (
     PRKPROCESS Process,
     KPRIORITY Priority,
     KAFFINITY Affinity,
     ULONG DirectoryTableBase[2],
     BOOLEAN Enable
    );




void
KeAttachProcess (
     PRKPROCESS Process
    );

BOOLEAN
KeTryToAttachProcess (
     PRKPROCESS Process
    );


void
KeDetachProcess (
    void
    );






LONG
KeReadStateProcess (
     PRKPROCESS Process
    );

BOOLEAN
KeSetAutoAlignmentProcess (
     PRKPROCESS Process,
     BOOLEAN Enable
    );

LONG
KeSetProcess (
     PRKPROCESS Process,
     KPRIORITY Increment,
     BOOLEAN Wait
    );

KPRIORITY
KeSetPriorityProcess (
     PKPROCESS Process,
     KPRIORITY BasePriority
    );








void
KeInitializeThread (
     PKTHREAD Thread,
     PVOID KernelStack,
     PKSYSTEM_ROUTINE SystemRoutine,
     PKSTART_ROUTINE StartRoutine ,
     PVOID StartContext ,
     PCONTEXT ContextFrame ,
     PVOID Teb ,
     PKPROCESS Process
    );

BOOLEAN
KeAlertThread (
     PKTHREAD Thread,
     KPROCESSOR_MODE ProcessorMode
    );

ULONG
KeAlertResumeThread (
     PKTHREAD Thread
    );

void
KeBoostPriorityThread (
     PKTHREAD Thread,
     KPRIORITY Increment
    );

KAFFINITY
KeConfineThread (
    void
    );

                                         
NTSTATUS                                            
KeDelayExecutionThread (                            
     KPROCESSOR_MODE WaitMode,                    
     BOOLEAN Alertable,                           
     PLARGE_INTEGER Interval                      
    );                                              
                                                    
BOOLEAN
KeDisableApcQueuingThread (
     PKTHREAD Thread
    );

BOOLEAN
KeEnableApcQueuingThread (
     PKTHREAD
    );

LOGICAL
KeSetDisableBoostThread (
     PKTHREAD Thread,
     LOGICAL Disable
    );

ULONG
KeForceResumeThread (
     PKTHREAD Thread
    );

void
KeFreezeAllThreads (
    void
    );

BOOLEAN
KeQueryAutoAlignmentThread (
     PKTHREAD Thread
    );

LONG
KeQueryBasePriorityThread (
     PKTHREAD Thread
    );

BOOLEAN
KeReadStateThread (
     PKTHREAD Thread
    );

void
KeReadyThread (
     PKTHREAD Thread
    );

ULONG
KeResumeThread (
     PKTHREAD Thread
    );

void
KeRevertToUserAffinityThread (
    void
    );

void
KeRundownThread (
    void
    );

KAFFINITY                                           
KeSetAffinityThread (                               
     PKTHREAD Thread,                             
     KAFFINITY Affinity                           
    );                                              

void
KeSetSystemAffinityThread (
     KAFFINITY Affinity
    );

BOOLEAN
KeSetAutoAlignmentThread (
     PKTHREAD Thread,
     BOOLEAN Enable
    );

                                         
LONG                                                
KeSetBasePriorityThread (                           
     PKTHREAD Thread,                             
     LONG Increment                               
    );                                              
                                                    




CCHAR
KeSetIdealProcessorThread (
     PKTHREAD Thread,
     CCHAR Processor
    );




BOOLEAN
KeSetKernelStackSwapEnable (
     BOOLEAN Enable
    );

                                         
KPRIORITY                                           
KeSetPriorityThread (                               
     PKTHREAD Thread,                             
     KPRIORITY Priority                           
    );                                              
                                                    
ULONG
KeSuspendThread (
     PKTHREAD
    );


void
KeTerminateThread (
     KPRIORITY Increment
    );

BOOLEAN
KeTestAlertThread (
     KPROCESSOR_MODE
    );

void
KeThawAllThreads (
    void
    );











































































































void
KeInitializeTimer (
     PKTIMER Timer
    );


void
KeInitializeTimerEx (
     PKTIMER Timer,
     TIMER_TYPE Type
    );


BOOLEAN
KeCancelTimer (
     PKTIMER
    );


BOOLEAN
KeReadStateTimer (
    PKTIMER Timer
    );


BOOLEAN
KeSetTimer (
     PKTIMER Timer,
     LARGE_INTEGER DueTime,
     PKDPC Dpc 
    );


BOOLEAN
KeSetTimerEx (
     PKTIMER Timer,
     LARGE_INTEGER DueTime,
     LONG Period ,
     PKDPC Dpc 
    );







NTSTATUS
KiSetServerWaitClientEvent (
     PKEVENT SeverEvent,
     PKEVENT ClientEvent,
     ULONG WaitMode
    );

NTSTATUS
KeReleaseWaitForSemaphore (
     PKSEMAPHORE Server,
     PKSEMAPHORE Client,
     ULONG WaitReason,
     ULONG WaitMode
    );






























NTSTATUS
KeWaitForMultipleObjects (
     ULONG Count,
     PVOID Object[],
     WAIT_TYPE WaitType,
     KWAIT_REASON WaitReason,
     KPROCESSOR_MODE WaitMode,
     BOOLEAN Alertable,
     PLARGE_INTEGER Timeout ,
     PKWAIT_BLOCK WaitBlockArray 
    );


NTSTATUS
KeWaitForSingleObject (
     PVOID Object,
     KWAIT_REASON WaitReason,
     KPROCESSOR_MODE WaitMode,
     BOOLEAN Alertable,
     PLARGE_INTEGER Timeout 
    );









void
__stdcall
KeInitializeSpinLock (
     PKSPIN_LOCK SpinLock
    );




void
_fastcall
KefAcquireSpinLockAtDpcLevel (
     PKSPIN_LOCK SpinLock
    );


void
_fastcall
KefReleaseSpinLockFromDpcLevel (
     PKSPIN_LOCK SpinLock
    );
























__declspec(dllimport)
KIRQL
_fastcall
KfAcquireSpinLock (
     PKSPIN_LOCK SpinLock
    );

__declspec(dllimport)
void
_fastcall
KfReleaseSpinLock (
     PKSPIN_LOCK SpinLock,
     KIRQL NewIrql
    );

__declspec(dllimport)
KIRQL
_fastcall
KeAcquireSpinLockRaiseToSynch (
     PKSPIN_LOCK SpinLock
    );













































































BOOLEAN
KeTryToAcquireSpinLock (
     PKSPIN_LOCK SpinLock,
     PKIRQL OldIrql
    );










__declspec(dllimport)
void
_fastcall
KfLowerIrql (
     KIRQL NewIrql
    );

__declspec(dllimport)
KIRQL
_fastcall
KfRaiseIrql (
     KIRQL NewIrql
    );

__declspec(dllimport)
KIRQL
KeRaiseIrqlToDpcLevel(
    void
    );

__declspec(dllimport)
KIRQL
KeRaiseIrqlToSynchLevel(
    void
    );


















































































































BOOLEAN
KeInitSystem(
    void
    );






BOOLEAN
KeGetBugMessageText(
     ULONG MessageId,
     PANSI_STRING ReturnedString 
    );

typedef enum _KBUGCHECK_BUFFER_DUMP_STATE {
    BufferEmpty,
    BufferInserted,
    BufferStarted,
    BufferFinished,
    BufferIncomplete
} KBUGCHECK_BUFFER_DUMP_STATE;

typedef
void
(*PKBUGCHECK_CALLBACK_ROUTINE) (
     PVOID Buffer,
     ULONG Length
    );

typedef struct _KBUGCHECK_CALLBACK_RECORD {
    LIST_ENTRY Entry;
    PKBUGCHECK_CALLBACK_ROUTINE CallbackRoutine;
    PVOID Buffer;
    ULONG Length;
    PUCHAR Component;
    ULONG Checksum;
    UCHAR State;
} KBUGCHECK_CALLBACK_RECORD, *PKBUGCHECK_CALLBACK_RECORD;


void
__stdcall
KeBugCheck (
     ULONG BugCheckCode
    );


void
KeBugCheckEx(
     ULONG BugCheckCode,
     ULONG BugCheckParameter1,
     ULONG BugCheckParameter2,
     ULONG BugCheckParameter3,
     ULONG BugCheckParameter4
    );





BOOLEAN
KeDeregisterBugCheckCallback (
     PKBUGCHECK_CALLBACK_RECORD CallbackRecord
    );


BOOLEAN
KeRegisterBugCheckCallback (
     PKBUGCHECK_CALLBACK_RECORD CallbackRecord,
     PKBUGCHECK_CALLBACK_ROUTINE CallbackRoutine,
     PVOID Buffer,
     ULONG Length,
     PUCHAR Component
    );


void
KeEnterKernelDebugger (
    void
    );



typedef
PCHAR
(*PKE_BUGCHECK_UNICODE_TO_ANSI) (
     PUNICODE_STRING UnicodeString,
     PCHAR AnsiBuffer,
     ULONG MaxAnsiLength
    );

void
KeDumpMachineState (
     PKPROCESSOR_STATE ProcessorState,
     PCHAR Buffer,
     PULONG BugCheckParameters,
     ULONG NumberOfParameters,
     PKE_BUGCHECK_UNICODE_TO_ANSI UnicodeToAnsiRoutine
    );

void
KeContextFromKframes (
     PKTRAP_FRAME TrapFrame,
     PKEXCEPTION_FRAME ExceptionFrame,
      PCONTEXT ContextFrame
    );

void
KeContextToKframes (
      PKTRAP_FRAME TrapFrame,
      PKEXCEPTION_FRAME ExceptionFrame,
     PCONTEXT ContextFrame,
     ULONG ContextFlags,
     KPROCESSOR_MODE PreviousMode
    );

void
KeCopyTrapDispatcher (
    void
    );





typedef
void
(*PGDI_BATCHFLUSH_ROUTINE) (
    void
    );

                                         
void                                                
KeFlushCurrentTb (                                  
    void                                            
    );                                              
                                                    































































































void
KeFlushEntireTb (
     BOOLEAN Invalid,
     BOOLEAN AllProcessors
    );

void
KeFlushMultipleTb (
     ULONG Number,
     PVOID *Virtual,
     BOOLEAN Invalid,
     BOOLEAN AllProcesors,
     PHARDWARE_PTE *PtePointer ,
     HARDWARE_PTE PteValue
    );

HARDWARE_PTE
KeFlushSingleTb (
     PVOID Virtual,
     BOOLEAN Invalid,
     BOOLEAN AllProcesors,
     PHARDWARE_PTE PtePointer,
     HARDWARE_PTE PteValue
    );



BOOLEAN
KeFreezeExecution (
     PKTRAP_FRAME TrapFrame,
     PKEXCEPTION_FRAME ExceptionFrame
    );

KCONTINUE_STATUS
KeSwitchFrozenProcessor (
     ULONG ProcessorNumber
    );

void
KeGetNonVolatileContextPointers (
     PKNONVOLATILE_CONTEXT_POINTERS NonVolatileContext
    );




                                                    
                                         
void                                                
KeSetDmaIoCoherency (                               
     ULONG Attributes                             
    );                                              
                                                    



                                         
void                                                
KeSetProfileIrql (                                  
     KIRQL ProfileIrql                            
    );                                              
                                                    












void
KeSetSystemTime (
     PLARGE_INTEGER NewTime,
     PLARGE_INTEGER OldTime,
     PLARGE_INTEGER HalTimeToSet 
    );






BOOLEAN
KeAddSystemServiceTable(
     PULONG Base,
     PULONG Count ,
     ULONG Limit,
     PUCHAR Number,
     ULONG Index
    );

NTSTATUS
KeSuspendHibernateSystem (
     PTIME_FIELDS         ResumeTime ,
     PVOID                SystemCallback
    );





void
KeQuerySystemTime (
     PLARGE_INTEGER CurrentTime
    );


ULONG
KeQueryTimeIncrement (
    void
    );






void
KeSetTimeIncrement (
     ULONG MaximumIncrement,
     ULONG MimimumIncrement
    );



void
KeThawExecution (
     BOOLEAN Enable
    );








typedef enum _FIRMWARE_REENTRY {
    HalHaltRoutine,
    HalPowerDownRoutine,
    HalRestartRoutine,
    HalRebootRoutine,
    HalInteractiveModeRoutine,
    HalMaximumRoutine
} FIRMWARE_REENTRY, *PFIRMWARE_REENTRY;



void
KeReturnToFirmware (
     FIRMWARE_REENTRY Routine
    );

void
KeStartAllProcessors (
    void
    );





void
KeBalanceSetManager (
     PVOID Context
    );

void
KeSwapProcessOrStack (
     PVOID Context
    );





NTSTATUS
KeUserModeCallback (
     ULONG ApiNumber,
     PVOID InputBuffer,
     ULONG InputLength,
     PVOID *OutputBuffer,
     PULONG OutputLength
    );

PVOID
KeSwitchKernelStack (
     PVOID StackBase,
     PVOID StackLimit
    );

NTSTATUS
KeRaiseUserException(
     NTSTATUS ExceptionCode
    );







PCONFIGURATION_COMPONENT_DATA
KeFindConfigurationEntry (
     PCONFIGURATION_COMPONENT_DATA Child,
     CONFIGURATION_CLASS Class,
     CONFIGURATION_TYPE Type,
     PULONG Key 
    );


PCONFIGURATION_COMPONENT_DATA
KeFindConfigurationNextEntry (
     PCONFIGURATION_COMPONENT_DATA Child,
     CONFIGURATION_CLASS Class,
     CONFIGURATION_TYPE Type,
     PULONG Key ,
     PCONFIGURATION_COMPONENT_DATA *Resume
    );








typedef
void
(_fastcall *PSWAP_CONTEXT_NOTIFY_ROUTINE)(
     HANDLE OldThreadId,
     HANDLE NewThreadId
    );


void
_fastcall
KeSetSwapContextNotifyRoutine(
     PSWAP_CONTEXT_NOTIFY_ROUTINE NotifyRoutine
    );





typedef
LOGICAL
(_fastcall *PTHREAD_SELECT_NOTIFY_ROUTINE)(
     HANDLE ThreadId
    );


void
_fastcall
KeSetThreadSelectNotifyRoutine(
     PTHREAD_SELECT_NOTIFY_ROUTINE NotifyRoutine
    );





typedef
void
(_fastcall *PTIME_UPDATE_NOTIFY_ROUTINE)(
     HANDLE ThreadId,
     KPROCESSOR_MODE Mode
    );


void
_fastcall
KeSetTimeUpdateNotifyRoutine(
     PTIME_UPDATE_NOTIFY_ROUTINE NotifyRoutine
    );







extern KAFFINITY KeActiveProcessors;
extern LARGE_INTEGER KeBootTime;
extern LIST_ENTRY KeBugCheckCallbackListHead;
extern KSPIN_LOCK KeBugCheckCallbackLock;
extern PGDI_BATCHFLUSH_ROUTINE KeGdiFlushUserBatch;
extern PLOADER_PARAMETER_BLOCK KeLoaderBlock;
extern ULONG KeMaximumIncrement;
extern ULONG KeMinimumIncrement;
extern CCHAR KeNumberProcessors;                    
extern USHORT KeProcessorArchitecture;
extern USHORT KeProcessorLevel;
extern USHORT KeProcessorRevision;
extern ULONG KeFeatureBits;
extern PKPRCB KiProcessorBlock[];
extern KTHREAD_SWITCH_COUNTERS KeThreadSwitchCounters;



extern ULONG KeRegisteredProcessors;
extern ULONG KeLicensedProcessors;



extern PULONG KeServiceCountTable;
extern KSERVICE_TABLE_DESCRIPTOR KeServiceDescriptorTable[4];
extern KSERVICE_TABLE_DESCRIPTOR KeServiceDescriptorTableShadow[4];

extern volatile KSYSTEM_TIME KeTickCount;           










extern ULONG KeUserApcDispatcher;
extern ULONG KeUserCallbackDispatcher;
extern ULONG KeUserExceptionDispatcher;
extern ULONG KeRaiseUserExceptionDispatcher;
extern ULONG KeTimeAdjustment;
extern ULONG KeTimeIncrement;
extern BOOLEAN KeTimeSynchronization;





typedef enum _MEMORY_CACHING_TYPE {
    MmNonCached = 0,
    MmCached = 1,
    MmFrameBufferCached,
    MmHardwareCoherentCached,
    MmMaximumCacheType
} MEMORY_CACHING_TYPE;









NTSTATUS
KeSetPhysicalCacheTypeRange (
     PHYSICAL_ADDRESS PhysicalAddress,
     ULONG NumberOfBytes,
     MEMORY_CACHING_TYPE CacheType
    );



































































BOOLEAN
KdInitSystem(
     PLOADER_PARAMETER_BLOCK LoaderBlock,
    BOOLEAN StopInDebugger
    );

BOOLEAN
KdEnterDebugger(
     PKTRAP_FRAME TrapFrame,
     PKEXCEPTION_FRAME ExceptionFrame
    );

void
KdExitDebugger(
     BOOLEAN Enable
    );

extern BOOLEAN KdPitchDebugger;

BOOLEAN
KdPollBreakIn (
    void
    );

BOOLEAN
KdIsThisAKdTrap (
     PEXCEPTION_RECORD ExceptionRecord,
     PCONTEXT ContextRecord,
     KPROCESSOR_MODE PreviousMode
    );






typedef struct _KD_SYMBOLS_INFO {
     PVOID BaseOfDll;
     ULONG ProcessId;
     ULONG CheckSum;
     ULONG SizeOfImage;
} KD_SYMBOLS_INFO, *PKD_SYMBOLS_INFO;











typedef struct _DEBUG_PARAMETERS {
    ULONG CommunicationPort;
    ULONG BaudRate;
} DEBUG_PARAMETERS, *PDEBUG_PARAMETERS;








extern BOOLEAN KdDebuggerNotPresent;
extern BOOLEAN KdDebuggerEnabled;



extern DEBUG_PARAMETERS KdDebugParameters;

































typedef struct _CALL_HASH_ENTRY {
    LIST_ENTRY ListEntry;
    PVOID CallersAddress;
    PVOID CallersCaller;
    ULONG CallCount;
} CALL_HASH_ENTRY, *PCALL_HASH_ENTRY;

typedef struct _CALL_PERFORMANCE_DATA {
    KSPIN_LOCK SpinLock;
    LIST_ENTRY HashTable[64];
} CALL_PERFORMANCE_DATA, *PCALL_PERFORMANCE_DATA;

void
ExInitializeCallData(
     PCALL_PERFORMANCE_DATA CallData
    );

void
ExRecordCallerInHashTable(
     PCALL_PERFORMANCE_DATA CallData,
     PVOID CallersAddress,
     PVOID CallersCaller
    );













typedef struct _EEVENT_PAIR {
    KEVENT_PAIR KernelEventPair;
} EEVENT_PAIR, *PEEVENT_PAIR;





struct _ETHREAD;






BOOLEAN
ExInitSystem(
    void
    );


void
ExInitSystemPhase2(
    void
    );

ULONG
ExComputeTickCountMultiplier (
     ULONG TimeIncrement
    );






typedef enum _POOL_TYPE {
    NonPagedPool,
    PagedPool,
    NonPagedPoolMustSucceed,
    DontUseThisType,
    NonPagedPoolCacheAligned,
    PagedPoolCacheAligned,
    NonPagedPoolCacheAlignedMustS,
    MaxPoolType
    } POOL_TYPE;












void
InitializePool(
     POOL_TYPE PoolType,
     ULONG Threshold
    );




PVOID
ExAllocatePool(
     POOL_TYPE PoolType,
     ULONG NumberOfBytes
    );


PVOID
ExAllocatePoolWithQuota(
     POOL_TYPE PoolType,
     ULONG NumberOfBytes
    );


PVOID
ExAllocatePoolWithTag(
     POOL_TYPE PoolType,
     ULONG NumberOfBytes,
     ULONG Tag
    );







PVOID
ExAllocatePoolWithQuotaTag(
     POOL_TYPE PoolType,
     ULONG NumberOfBytes,
     ULONG Tag
    );






void
__stdcall
ExFreePool(
     PVOID P
    );










void
ExFreePoolWithTag(
     PVOID P,
     ULONG Tag
    );







KIRQL
ExLockPool(
     POOL_TYPE PoolType
    );


void
ExUnlockPool(
     POOL_TYPE PoolType,
     KIRQL LockHandle
    );

                                     
ULONG                                           
ExQueryPoolBlockSize (                          
     PVOID PoolBlock,                         
     PBOOLEAN QuotaCharged                   
    );                                          


void
ExQueryPoolUsage(
     PULONG PagedPoolPages,
     PULONG NonPagedPoolPages,
     PULONG PagedPoolAllocs,
     PULONG PagedPoolFrees,
     PULONG PagedPoolLookasideHits,
     PULONG NonPagedPoolAllocs,
     PULONG NonPagedPoolFrees,
     PULONG NonPagedPoolLookasideHits
    );

void
ExReturnPoolQuota (
     PVOID P
    );



NTSTATUS
ExSnapShotPool(
     POOL_TYPE PoolType,
     PSYSTEM_POOL_INFORMATION PoolInformation,
     ULONG Length,
     PULONG ReturnLength 
    );








typedef struct _FAST_MUTEX {
    LONG Count;
    PKTHREAD Owner;
    ULONG Contention;
    KEVENT Event;
    ULONG OldIrql;
} FAST_MUTEX, *PFAST_MUTEX;



















void
_fastcall
ExAcquireFastMutexUnsafe (
     PFAST_MUTEX FastMutex
    );


void
_fastcall
ExReleaseFastMutexUnsafe (
     PFAST_MUTEX FastMutex
    );


























__declspec(dllimport)
void
_fastcall
ExAcquireFastMutex (
     PFAST_MUTEX FastMutex
    );

__declspec(dllimport)
void
_fastcall
ExReleaseFastMutex (
     PFAST_MUTEX FastMutex
    );

__declspec(dllimport)
BOOLEAN
_fastcall
ExTryToAcquireFastMutex (
     PFAST_MUTEX FastMutex
    );
















void
_fastcall
ExInterlockedAddLargeStatistic (
     PLARGE_INTEGER Addend,
     ULONG Increment
    );


LARGE_INTEGER
ExInterlockedAddLargeInteger (
     PLARGE_INTEGER Addend,
     LARGE_INTEGER Increment,
     PKSPIN_LOCK Lock
    );









ULONG
_fastcall
ExfInterlockedAddUlong (
     PULONG Addend,
     ULONG Increment,
     PKSPIN_LOCK Lock
    );



















ULONGLONG
_fastcall
ExInterlockedCompareExchange64 (
     PULONGLONG Destination,
     PULONGLONG Exchange,
     PULONGLONG Comperand,
     PKSPIN_LOCK Lock
    );




PLIST_ENTRY
_fastcall
ExfInterlockedInsertHeadList (
     PLIST_ENTRY ListHead,
     PLIST_ENTRY ListEntry,
     PKSPIN_LOCK Lock
    );


PLIST_ENTRY
_fastcall
ExfInterlockedInsertTailList (
     PLIST_ENTRY ListHead,
     PLIST_ENTRY ListEntry,
     PKSPIN_LOCK Lock
    );


PLIST_ENTRY
_fastcall
ExfInterlockedRemoveHeadList (
     PLIST_ENTRY ListHead,
     PKSPIN_LOCK Lock
    );


PSINGLE_LIST_ENTRY
_fastcall
ExfInterlockedPopEntryList (
     PSINGLE_LIST_ENTRY ListHead,
     PKSPIN_LOCK Lock
    );


PSINGLE_LIST_ENTRY
_fastcall
ExfInterlockedPushEntryList (
     PSINGLE_LIST_ENTRY ListHead,
     PSINGLE_LIST_ENTRY ListEntry,
     PKSPIN_LOCK Lock
    );






























































































PSINGLE_LIST_ENTRY
_fastcall
ExInterlockedPopEntrySList (
     PSLIST_HEADER ListHead,
     PKSPIN_LOCK Lock
    );


PSINGLE_LIST_ENTRY
_fastcall
ExInterlockedPushEntrySList (
     PSLIST_HEADER ListHead,
     PSINGLE_LIST_ENTRY ListEntry,
     PKSPIN_LOCK Lock
    );







void
ExAdjustLookasideDepth (
    void
    );

typedef
PVOID
(*PALLOCATE_FUNCTION) (
     POOL_TYPE PoolType,
     ULONG NumberOfBytes,
     ULONG Tag
    );

typedef
void
(*PFREE_FUNCTION) (
     PVOID Buffer
    );

typedef struct _GENERAL_LOOKASIDE {
    SLIST_HEADER ListHead;
    USHORT Depth;
    USHORT MaximumDepth;
    ULONG TotalAllocates;
    ULONG AllocateMisses;
    ULONG TotalFrees;
    ULONG FreeMisses;
    POOL_TYPE Type;
    ULONG Tag;
    ULONG Size;
    PALLOCATE_FUNCTION Allocate;
    PFREE_FUNCTION Free;
    LIST_ENTRY ListEntry;
    ULONG LastTotalAllocates;
    ULONG LastAllocateMisses;
    ULONG Future[2];
} GENERAL_LOOKASIDE, *PGENERAL_LOOKASIDE;

typedef struct _NPAGED_LOOKASIDE_LIST {
    GENERAL_LOOKASIDE L;
    KSPIN_LOCK Lock;
} NPAGED_LOOKASIDE_LIST, *PNPAGED_LOOKASIDE_LIST;


void
ExInitializeNPagedLookasideList (
     PNPAGED_LOOKASIDE_LIST Lookaside,
     PALLOCATE_FUNCTION Allocate,
     PFREE_FUNCTION Free,
     ULONG Flags,
     ULONG Size,
     ULONG Tag,
     USHORT Depth
    );



void
ExDeleteNPagedLookasideList (
     PNPAGED_LOOKASIDE_LIST Lookaside
    );

__inline
PVOID
ExAllocateFromNPagedLookasideList(
     PNPAGED_LOOKASIDE_LIST Lookaside
    )




















{

    PVOID Entry;

    Lookaside->L.TotalAllocates += 1;
    Entry = ExInterlockedPopEntrySList(&Lookaside->L.ListHead, &Lookaside->Lock);
    if (Entry == ((void *)0)) {
        Lookaside->L.AllocateMisses += 1;
        Entry = (Lookaside->L.Allocate)(Lookaside->L.Type,
                                        Lookaside->L.Size,
                                        Lookaside->L.Tag);
    }

    return Entry;
}

__inline
void
ExFreeToNPagedLookasideList(
     PNPAGED_LOOKASIDE_LIST Lookaside,
     PVOID Entry
    )





















{

    Lookaside->L.TotalFrees += 1;
    if ((&Lookaside->L.ListHead)->Depth >= Lookaside->L.Depth) {
        Lookaside->L.FreeMisses += 1;
        (Lookaside->L.Free)(Entry);

    } else {
        ExInterlockedPushEntrySList(&Lookaside->L.ListHead,
                                    (PSINGLE_LIST_ENTRY)Entry,
                                    &Lookaside->Lock);
    }

    return;
}

typedef struct _PAGED_LOOKASIDE_LIST {
    GENERAL_LOOKASIDE L;
    FAST_MUTEX Lock;
} PAGED_LOOKASIDE_LIST, *PPAGED_LOOKASIDE_LIST;


void
ExInitializePagedLookasideList (
     PPAGED_LOOKASIDE_LIST Lookaside,
     PALLOCATE_FUNCTION Allocate,
     PFREE_FUNCTION Free,
     ULONG Flags,
     ULONG Size,
     ULONG Tag,
     USHORT Depth
    );


void
ExDeletePagedLookasideList (
     PPAGED_LOOKASIDE_LIST Lookaside
    );




PVOID
ExAllocateFromPagedLookasideList(
     PPAGED_LOOKASIDE_LIST Lookaside
    );


void
ExFreeToPagedLookasideList(
     PPAGED_LOOKASIDE_LIST Lookaside,
     PVOID Entry
    );



























































































extern LIST_ENTRY ExNPagedLookasideListHead;
extern KSPIN_LOCK ExNPagedLookasideLock;

extern LIST_ENTRY ExPagedLookasideListHead;
extern KSPIN_LOCK ExPagedLookasideLock;



NTSTATUS
ExQuerySystemBackTraceInformation(
     PRTL_PROCESS_BACKTRACES BackTraceInformation,
     ULONG BackTraceInformationLength,
     PULONG ReturnLength 
    );


USHORT
ExGetPoolBackTraceIndex(
     PVOID P
    );




PVOID
ExLockUserBuffer(
     PVOID Buffer,
     ULONG Length,
     PVOID *LockVariable
    );


void
ExUnlockUserBuffer(
     PVOID LockVariable
    );










































































































































































































































































































































































































































































































































































































































































void
__stdcall
ProbeForWrite (
     PVOID Address,
     ULONG Length,
     ULONG Alignment
    );








void
ExTimerRundown (
    void
    );






typedef enum _WORK_QUEUE_TYPE {
    CriticalWorkQueue,
    DelayedWorkQueue,
    HyperCriticalWorkQueue,
    MaximumWorkQueue
} WORK_QUEUE_TYPE;

typedef
void
(*PWORKER_THREAD_ROUTINE)(
     PVOID Parameter
    );

typedef struct _WORK_QUEUE_ITEM {
    LIST_ENTRY List;
    PWORKER_THREAD_ROUTINE WorkerRoutine;
    PVOID Parameter;
} WORK_QUEUE_ITEM, *PWORK_QUEUE_ITEM;








void
ExQueueWorkItem(
     PWORK_QUEUE_ITEM WorkItem,
     WORK_QUEUE_TYPE QueueType
    );



BOOLEAN
ExIsProcessorFeaturePresent(
    ULONG ProcessorFeature
    );



extern KQUEUE ExWorkerQueue[];







typedef struct _ZONE_SEGMENT_HEADER {
    SINGLE_LIST_ENTRY SegmentList;
    PVOID Reserved;
} ZONE_SEGMENT_HEADER, *PZONE_SEGMENT_HEADER;

typedef struct _ZONE_HEADER {
    SINGLE_LIST_ENTRY FreeList;
    SINGLE_LIST_ENTRY SegmentList;
    ULONG BlockSize;
    ULONG TotalSegmentSize;
} ZONE_HEADER, *PZONE_HEADER;



NTSTATUS
ExInitializeZone(
     PZONE_HEADER Zone,
     ULONG BlockSize,
     PVOID InitialSegment,
     ULONG InitialSegmentSize
    );


NTSTATUS
ExExtendZone(
     PZONE_HEADER Zone,
     PVOID Segment,
     ULONG SegmentSize
    );


NTSTATUS
ExInterlockedExtendZone(
     PZONE_HEADER Zone,
     PVOID Segment,
     ULONG SegmentSize,
     PKSPIN_LOCK Lock
    );





































































































































































































typedef ULONG ERESOURCE_THREAD;
typedef ERESOURCE_THREAD *PERESOURCE_THREAD;

typedef struct _OWNER_ENTRY {
    ERESOURCE_THREAD OwnerThread;
    SHORT OwnerCount;
    USHORT TableSize;
} OWNER_ENTRY, *POWNER_ENTRY;

typedef struct _ERESOURCE {
    LIST_ENTRY SystemResourcesList;
    POWNER_ENTRY OwnerTable;
    SHORT ActiveCount;
    USHORT Flag;
    PKSEMAPHORE SharedWaiters;
    PKEVENT ExclusiveWaiters;
    OWNER_ENTRY OwnerThreads[2];
    ULONG ContentionCount;
    USHORT NumberOfSharedWaiters;
    USHORT NumberOfExclusiveWaiters;
    union {
        PVOID Address;
        ULONG CreatorBackTraceIndex;
    };
    KSPIN_LOCK SpinLock;
} ERESOURCE, *PERESOURCE;










typedef struct _RESOURCE_HASH_ENTRY {
    LIST_ENTRY ListEntry;
    PVOID Address;
    ULONG ContentionCount;
    ULONG Number;
} RESOURCE_HASH_ENTRY, *PRESOURCE_HASH_ENTRY;

typedef struct _RESOURCE_PERFORMANCE_DATA {
    ULONG ActiveResourceCount;
    ULONG TotalResourceCount;
    ULONG ExclusiveAcquire;
    ULONG SharedFirstLevel;
    ULONG SharedSecondLevel;
    ULONG StarveFirstLevel;
    ULONG StarveSecondLevel;
    ULONG WaitForExclusive;
    ULONG OwnerTableExpands;
    ULONG MaximumTableExpand;
    LIST_ENTRY HashTable[64];
} RESOURCE_PERFORMANCE_DATA, *PRESOURCE_PERFORMANCE_DATA;






NTSTATUS
ExInitializeResourceLite(
     PERESOURCE Resource
    );


NTSTATUS
ExReinitializeResourceLite(
     PERESOURCE Resource
    );


BOOLEAN
ExAcquireResourceSharedLite(
     PERESOURCE Resource,
     BOOLEAN Wait
    );


BOOLEAN
ExAcquireResourceExclusiveLite(
     PERESOURCE Resource,
     BOOLEAN Wait
    );


BOOLEAN
ExAcquireSharedStarveExclusive(
     PERESOURCE Resource,
     BOOLEAN Wait
    );


BOOLEAN
ExAcquireSharedWaitForExclusive(
     PERESOURCE Resource,
     BOOLEAN Wait
    );


BOOLEAN
ExTryToAcquireResourceExclusiveLite(
     PERESOURCE Resource
    );











void
_fastcall
ExReleaseResourceLite(
     PERESOURCE Resource
    );


void
ExReleaseResourceForThreadLite(
     PERESOURCE Resource,
     ERESOURCE_THREAD ResourceThreadId
    );


void
ExSetResourceOwnerPointer(
     PERESOURCE Resource,
     PVOID OwnerPointer
    );


void
ExConvertExclusiveToSharedLite(
     PERESOURCE Resource
    );


NTSTATUS
ExDeleteResourceLite (
     PERESOURCE Resource
    );


ULONG
ExGetExclusiveWaiterCount (
     PERESOURCE Resource
    );


ULONG
ExGetSharedWaiterCount (
     PERESOURCE Resource
    );




void
ExDisableResourceBoostLite (
     PERESOURCE Resource
    );











BOOLEAN
ExIsResourceAcquiredExclusiveLite (
     PERESOURCE Resource
    );


USHORT
ExIsResourceAcquiredSharedLite (
     PERESOURCE Resource
    );



















NTSTATUS
ExQuerySystemLockInformation(
     struct _RTL_PROCESS_LOCKS *LockInformation,
     ULONG LockInformationLength,
     PULONG ReturnLength 
    );









typedef struct _NTDDK_ERESOURCE {

    
    
    
    

    LIST_ENTRY          SystemResourcesList;

    
    
    
    

    PERESOURCE_THREAD   OwnerThreads;
    PUCHAR              OwnerCounts;

    USHORT              TableSize;
    USHORT              ActiveCount;

    USHORT              Flag;
    USHORT              TableRover;                 

    
    
    
    

    UCHAR               InitialOwnerCounts[4];
    ERESOURCE_THREAD    InitialOwnerThreads[4];

    ULONG               Spare1;

    
    
    
    
    

    ULONG               ContentionCount;

    USHORT              NumberOfExclusiveWaiters;
    USHORT              NumberOfSharedWaiters;

    KSEMAPHORE          SharedWaiters;
    KEVENT              ExclusiveWaiters;

    KSPIN_LOCK          SpinLock;

    USHORT CreatorBackTraceIndex;
    USHORT Spare2;

} NTDDK_ERESOURCE;
typedef NTDDK_ERESOURCE *PNTDDK_ERESOURCE;















































typedef struct _HANDLE_ENTRY {
    union {
        LIST_ENTRY ListEntry;
        struct {
            PVOID Object;
            ULONG Attributes;
        };
    };
} HANDLE_ENTRY, *PHANDLE_ENTRY;








struct _EPROCESS;

typedef union _HANDLE_SYNCH {
    struct {
        USHORT NumberOfSharedWaiters;
        USHORT NumberOfExclusiveWaiters;
        ULONG OwnerCount;
    } u;

    ULONGLONG Value;
}HANDLE_SYNCH, *PHANDLE_SYNCH;

typedef struct _HANDLE_TABLE {
    HANDLE_SYNCH State;
    KSPIN_LOCK SpinLock;
    PHANDLE_ENTRY TableEntries;
    PHANDLE_ENTRY TableBound;
    ULONG HandleCount;
    struct _EPROCESS *QuotaProcess;
    HANDLE UniqueProcessId;
    USHORT CountToGrowBy;
    BOOLEAN LifoOrder;
    UCHAR Spare1;
    LIST_ENTRY ListEntry;
    KEVENT ExclusiveWaiters;
    KSEMAPHORE SharedWaiters;
} HANDLE_TABLE, *PHANDLE_TABLE;





typedef
BOOLEAN
(*PEX_CHANGE_HANDLE_ROUTINE) (
      PHANDLE_ENTRY HandleEntry,
     ULONG Parameter
    );


BOOLEAN
ExChangeHandle(
     PHANDLE_TABLE HandleTable,
     HANDLE Handle,
     PEX_CHANGE_HANDLE_ROUTINE ChangeRoutine,
     ULONG Parameter
    );


HANDLE
ExCreateHandle(
     PHANDLE_TABLE HandleTable,
     PHANDLE_ENTRY HandleEntry
    );


PHANDLE_TABLE
ExCreateHandleTable(
     struct _EPROCESS *Process ,
     ULONG CountEntries,
     ULONG CountToGrowBy
    );


BOOLEAN
ExDestroyHandle(
     PHANDLE_TABLE HandleTable,
     HANDLE Handle,
     BOOLEAN TableLocked
    );

typedef void (*EX_DESTROY_HANDLE_ROUTINE)(
     HANDLE Handle,
     PHANDLE_ENTRY HandleEntry
    );


void
ExDestroyHandleTable(
     PHANDLE_TABLE HandleTable,
     EX_DESTROY_HANDLE_ROUTINE DestroyHandleProcedure
    );


void
ExRemoveHandleTable(
     PHANDLE_TABLE HandleTable
    );

typedef BOOLEAN (*EX_DUPLICATE_HANDLE_ROUTINE)(
     struct _EPROCESS *Process ,
     PHANDLE_ENTRY HandleEntry
    );


PHANDLE_TABLE
ExDupHandleTable(
     struct _EPROCESS *Process ,
     PHANDLE_TABLE OldHandleTable,
     EX_DUPLICATE_HANDLE_ROUTINE DupHandleProcedure 
    );

typedef BOOLEAN (*EX_ENUMERATE_HANDLE_ROUTINE)(
     PHANDLE_ENTRY HandleEntry,
     HANDLE Handle,
     PVOID EnumParameter
    );


BOOLEAN
ExEnumHandleTable(
     PHANDLE_TABLE HandleTable,
     EX_ENUMERATE_HANDLE_ROUTINE EnumHandleProcedure,
     PVOID EnumParameter,
     PHANDLE Handle 
    );


void
_fastcall
ExAcquireHandleTableExclusive (
     PHANDLE_TABLE HandleTable
    );


void
_fastcall
ExAcquireHandleTableShared (
     PHANDLE_TABLE HandleTable
    );


void
_fastcall
ExReleaseHandleTableExclusive (
     PHANDLE_TABLE HandleTable
    );


void
_fastcall
ExReleaseHandleTableShared (
     PHANDLE_TABLE HandleTable
    );


















PHANDLE_ENTRY
ExMapHandleToPointer(
     PHANDLE_TABLE HandleTable,
     HANDLE Handle,
     BOOLEAN Shared
    );


void
ExInitializeHandleTablePackage(
    void
    );





typedef NTSTATUS (*PEX_SNAPSHOT_HANDLE_ENTRY)(
      PSYSTEM_HANDLE_TABLE_ENTRY_INFO *HandleEntryInfo,
     HANDLE UniqueProcessId,
     PHANDLE_ENTRY HandleEntry,
     HANDLE Handle,
     ULONG Length,
      PULONG RequiredLength
    );


NTSTATUS
ExSnapShotHandleTables(
     PEX_SNAPSHOT_HANDLE_ENTRY SnapShotHandleEntry,
      PSYSTEM_HANDLE_INFORMATION HandleInformation,
     ULONG Length,
      PULONG RequiredLength
    );







BOOLEAN
ExLuidInitialization (
    void
    );
































extern LARGE_INTEGER ExpLuid;
extern LARGE_INTEGER ExpLuidIncrement;
extern KSPIN_LOCK ExpLuidLock;




















KPROCESSOR_MODE
ExGetPreviousMode(
    void
    );







void
__stdcall
ExRaiseException (
    PEXCEPTION_RECORD ExceptionRecord
    );







void
__stdcall
ExRaiseStatus (
     NTSTATUS Status
    );


void
ExRaiseDatatypeMisalignment (
    void
    );


void
ExRaiseAccessViolation (
    void
    );



extern BOOLEAN ExReadyForErrors;


NTSTATUS
ExRaiseHardError(
     NTSTATUS ErrorStatus,
     ULONG NumberOfParameters,
     ULONG UnicodeStringParameterMask,
     PULONG Parameters,
     ULONG ValidResponseOptions,
     PULONG Response
    );

int
ExSystemExceptionFilter(
    void
    );






extern ULONG EvPrSetHigh;
extern ULONG EvPrSetLow;


















typedef struct _EX_DEBUG_LOG_TAG {
    UCHAR Format[ 4 ];
    PCHAR Name;
} EX_DEBUG_LOG_TAG, *PEX_DEBUG_LOG_TAG;

typedef struct _EX_DEBUG_LOG_EVENT {
    USHORT ThreadId;
    USHORT ProcessId;
    ULONG Time : 24;
    ULONG Tag : 8;
    ULONG BackTrace[ 4 ];
    ULONG Data[ 4 ];
} EX_DEBUG_LOG_EVENT, *PEX_DEBUG_LOG_EVENT;

typedef struct _EX_DEBUG_LOG {
    KSPIN_LOCK Lock;
    ULONG NumberOfTags;
    ULONG MaximumNumberOfTags;
    PEX_DEBUG_LOG_TAG Tags;
    ULONG CountOfEventsLogged;
    PEX_DEBUG_LOG_EVENT First;
    PEX_DEBUG_LOG_EVENT Last;
    PEX_DEBUG_LOG_EVENT Next;
} EX_DEBUG_LOG, *PEX_DEBUG_LOG;



PEX_DEBUG_LOG
ExCreateDebugLog(
     UCHAR MaximumNumberOfTags,
     ULONG MaximumNumberOfEvents
    );


UCHAR
ExCreateDebugLogTag(
     PEX_DEBUG_LOG Log,
     PCHAR Name,
     UCHAR Format1,
     UCHAR Format2,
     UCHAR Format3,
     UCHAR Format4
    );


void
ExDebugLogEvent(
     PEX_DEBUG_LOG Log,
     UCHAR Tag,
     ULONG Data1,
     ULONG Data2,
     ULONG Data3,
     ULONG Data4
    );


BOOLEAN
ExRefreshTimeZoneInformation(
     PLARGE_INTEGER CurrentUniversalTime
    );







void
ExSystemTimeToLocalTime (
     PLARGE_INTEGER SystemTime,
     PLARGE_INTEGER LocalTime
    );





void
ExLocalTimeToSystemTime (
     PLARGE_INTEGER LocalTime,
     PLARGE_INTEGER SystemTime
    );




void
ExInitializeTimeRefresh(
    void
    );






void
ExPostSystemEvent(
     SYSTEM_EVENT_ID EventID,
     PVOID           EventData ,
     ULONG           EventDataLength
    );









typedef struct _CALLBACK_OBJECT *PCALLBACK_OBJECT;

typedef void (*PCALLBACK_FUNCTION ) (
     PVOID CallbackContext,
     PVOID Argument1,
     PVOID Argument2
    );



NTSTATUS
ExCreateCallback (
     PCALLBACK_OBJECT *CallbackObject,
     POBJECT_ATTRIBUTES ObjectAttributes,
     BOOLEAN Create,
     BOOLEAN AllowMultipleCallbacks
    );


PVOID
ExRegisterCallback (
     PCALLBACK_OBJECT CallbackObject,
     PCALLBACK_FUNCTION CallbackFunction,
     PVOID CallbackContext
    );


void
ExUnregisterCallback (
     PVOID CallbackRegistration
    );


void
ExNotifyCallback (
     PVOID CallbackObject,
     PVOID Argument1,
     PVOID Argument2
    );







extern LARGE_INTEGER ExpTimeZoneBias;
extern LONG ExpLastTimeZoneBias;
extern LONG ExpAltTimeZoneBias;
extern ULONG ExpCurrentTimeZoneId;
extern ULONG ExpRealTimeIsUniversal;
extern ULONG ExCriticalWorkerThreads;
extern ULONG ExDelayedWorkerThreads;
extern ULONG ExpTickCountMultiplier;





extern PVOID ExPageLockHandle;













typedef
PVOID
(*PKWIN32_GLOBALATOMTABLE_CALLOUT) ( void );

extern PKWIN32_GLOBALATOMTABLE_CALLOUT ExGlobalAtomTableCallout;
















































typedef struct _MMSUPPORT {
    LARGE_INTEGER LastTrimTime;
    ULONG LastTrimFaultCount;
    ULONG PageFaultCount;
    ULONG PeakWorkingSetSize;
    ULONG WorkingSetSize;
    ULONG MinimumWorkingSetSize;
    ULONG MaximumWorkingSetSize;
    struct _MMWSL *VmWorkingSetList;
    LIST_ENTRY WorkingSetExpansionLinks;
    UCHAR AllowWorkingSetAdjustment;
    BOOLEAN AddressSpaceBeingDeleted;
    UCHAR ForegroundSwitchCount;
    UCHAR MemoryPriority;
    } MMSUPPORT;

typedef MMSUPPORT *PMMSUPPORT;





typedef struct _PS_IMPERSONATION_INFORMATION {
    PACCESS_TOKEN Token;
    BOOLEAN CopyOnOpen;
    BOOLEAN EffectiveOnly;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
} PS_IMPERSONATION_INFORMATION, *PPS_IMPERSONATION_INFORMATION;









typedef struct _EPROCESS_QUOTA_BLOCK {
    KSPIN_LOCK QuotaLock;
    ULONG ReferenceCount;
    ULONG QuotaPeakPoolUsage[2];
    ULONG QuotaPoolUsage[2];
    ULONG QuotaPoolLimit[2];
    ULONG PeakPagefileUsage;
    ULONG PagefileUsage;
    ULONG PagefileLimit;
} EPROCESS_QUOTA_BLOCK, *PEPROCESS_QUOTA_BLOCK;







typedef struct _PAGEFAULT_HISTORY {
    ULONG CurrentIndex;
    ULONG MaxIndex;
    KSPIN_LOCK SpinLock;
    PVOID Reserved;
    PROCESS_WS_WATCH_INFORMATION WatchInfo[1];
} PAGEFAULT_HISTORY, *PPAGEFAULT_HISTORY;













typedef struct _EPROCESS {
    KPROCESS Pcb;
    NTSTATUS ExitStatus;
    KEVENT LockEvent;
    ULONG LockCount;
    LARGE_INTEGER CreateTime;
    LARGE_INTEGER ExitTime;
    PKTHREAD LockOwner;

    HANDLE UniqueProcessId;

    LIST_ENTRY ActiveProcessLinks;

    
    
    

    ULONG QuotaPeakPoolUsage[2];
    ULONG QuotaPoolUsage[2];

    ULONG PagefileUsage;
    ULONG CommitCharge;
    ULONG PeakPagefileUsage;

    
    
    

    ULONG PeakVirtualSize;
    ULONG VirtualSize;

    MMSUPPORT Vm;
    PVOID LastProtoPteFault;

    PVOID DebugPort;
    PVOID ExceptionPort;
    PHANDLE_TABLE ObjectTable;

    
    
    

    PACCESS_TOKEN Token;         

    

    FAST_MUTEX WorkingSetLock;
    ULONG WorkingSetPage;
    BOOLEAN ProcessOutswapEnabled;
    BOOLEAN ProcessOutswapped;
    BOOLEAN AddressSpaceInitialized;
    BOOLEAN AddressSpaceDeleted;
    FAST_MUTEX AddressCreationLock;
    KSPIN_LOCK HyperSpaceLock;
    struct _ETHREAD *ForkInProgress;
    USHORT VmOperation;
    BOOLEAN ForkWasSuccessful;
    UCHAR MmAgressiveWsTrimMask;
    PKEVENT VmOperationEvent;
    HARDWARE_PTE PageDirectoryPte;
    ULONG LastFaultCount;
    ULONG ModifiedPageCount;
    PVOID VadRoot;
    PVOID VadHint;
    PVOID CloneRoot;
    ULONG NumberOfPrivatePages;
    ULONG NumberOfLockedPages;
    USHORT NextPageColor;
    BOOLEAN ExitProcessCalled;

    
    
    

    BOOLEAN CreateProcessReported;
    HANDLE SectionHandle;

    
    
    

    PPEB Peb;
    PVOID SectionBaseAddress;

    PEPROCESS_QUOTA_BLOCK QuotaBlock;
    NTSTATUS LastThreadExitStatus;
    PPAGEFAULT_HISTORY WorkingSetWatch;
    HANDLE Win32WindowStation;
    HANDLE InheritedFromUniqueProcessId;
    ACCESS_MASK GrantedAccess;
    ULONG DefaultHardErrorProcessing;
    PVOID LdtInformation;
    PVOID VadFreeHint;
    PVOID VdmObjects;
    KMUTANT ProcessMutant;

    UCHAR ImageFileName[ 16 ];
    ULONG VmTrimFaultValue;
    BOOLEAN SetTimerResolution;
    UCHAR PriorityClass;
    union {
        struct {
            UCHAR SubSystemMinorVersion;
            UCHAR SubSystemMajorVersion;
        };
        USHORT SubSystemVersion;
    };
    PVOID Win32Process;
} EPROCESS;

typedef EPROCESS *PEPROCESS;















typedef struct _ETHREAD {
    KTHREAD Tcb;
    LARGE_INTEGER CreateTime;
    union {
        LARGE_INTEGER ExitTime;
        LIST_ENTRY LpcReplyChain;
    };
    union {
        NTSTATUS ExitStatus;
        PVOID OfsChain;
    };

    
    
    

    LIST_ENTRY PostBlockList;
    LIST_ENTRY TerminationPortList;     

    KSPIN_LOCK ActiveTimerListLock;
    LIST_ENTRY ActiveTimerListHead;

    CLIENT_ID Cid;

    
    
    

    KSEMAPHORE LpcReplySemaphore;
    PVOID LpcReplyMessage;          
    ULONG LpcReplyMessageId;        

    
    
    
    
    
    
    

    ULONG PerformanceCountLow;
    PPS_IMPERSONATION_INFORMATION ImpersonationInfo;


    
    
    

    LIST_ENTRY IrpList;

    
    
    

    ULONG TopLevelIrp;  
    struct _DEVICE_OBJECT *DeviceToVerify;

    
    
    

    ULONG ReadClusterSize;
    BOOLEAN ForwardClusterOnly;
    BOOLEAN DisablePageFaultClustering;

    BOOLEAN DeadThread;
    BOOLEAN HasTerminated;

    
    
    

    PEEVENT_PAIR EventPair;
    ACCESS_MASK GrantedAccess;
    PEPROCESS ThreadsProcess;
    PVOID StartAddress;
    union {
        PVOID Win32StartAddress;
        ULONG LpcReceivedMessageId;
    };
    BOOLEAN LpcExitThreadCalled;
    BOOLEAN HardErrorsAreDisabled;
    BOOLEAN LpcReceivedMsgIdValid;
    BOOLEAN ActiveImpersonationInfo;
    LONG PerformanceCountHigh;
} ETHREAD;
typedef ETHREAD *PETHREAD;





typedef struct _INITIAL_PEB {
    BOOLEAN InheritedAddressSpace;      
    BOOLEAN ReadImageFileExecOptions;   
    BOOLEAN BeingDebugged;              
    BOOLEAN SpareBool;                  
    HANDLE Mutant;                      
} INITIAL_PEB, *PINITIAL_PEB;





extern ULONG PsPrioritySeperation;
extern LIST_ENTRY PsActiveProcessHead;
extern UNICODE_STRING PsNtDllPathName;
extern PVOID PsSystemDllBase;
extern PEPROCESS PsInitialSystemProcess;
extern PVOID PsNtosImageBase;
extern PVOID PsHalImageBase;
extern LIST_ENTRY PsLoadedModuleList;
extern ERESOURCE PsLoadedModuleResource;
extern LCID PsDefaultSystemLocaleId;
extern LCID PsDefaultThreadLocaleId;
extern PEPROCESS PsIdleProcess;
extern BOOLEAN PsReaperActive;
extern LIST_ENTRY PsReaperListHead;
extern WORK_QUEUE_ITEM PsReaperWorkItem;



extern ULONG PsThreadHits[750];
void
PsThreadHit(
     PETHREAD Thread
    );


BOOLEAN
PsInitSystem (
     ULONG Phase,
     PLOADER_PARAMETER_BLOCK LoaderBlock
    );

NTSTATUS
PsLocateSystemDll (
    void
    );


















void
PsExitSpecialApc(
     PKAPC Apc,
     PKNORMAL_ROUTINE *NormalRoutine,
     PVOID *NormalContext,
     PVOID *SystemArgument1,
     PVOID *SystemArgument2
    );







NTSTATUS
PsCreateSystemThread(
     PHANDLE ThreadHandle,
     ULONG DesiredAccess,
     POBJECT_ATTRIBUTES ObjectAttributes ,
     HANDLE ProcessHandle ,
     PCLIENT_ID ClientId ,
     PKSTART_ROUTINE StartRoutine,
     PVOID StartContext
    );


NTSTATUS
PsTerminateSystemThread(
     NTSTATUS ExitStatus
    );



NTSTATUS
PsCreateSystemProcess(
     PHANDLE ProcessHandle,
     ULONG DesiredAccess,
     POBJECT_ATTRIBUTES ObjectAttributes 
    );

typedef
void (*PLEGO_NOTIFY_ROUTINE)(
    PKTHREAD Thread
    );

ULONG
PsSetLegoNotifyRoutine(
    PLEGO_NOTIFY_ROUTINE LegoNotifyRoutine
    );



typedef
void
(*PCREATE_PROCESS_NOTIFY_ROUTINE)(
     HANDLE ParentId,
     HANDLE ProcessId,
     BOOLEAN Create
    );

NTSTATUS
PsSetCreateProcessNotifyRoutine(
     PCREATE_PROCESS_NOTIFY_ROUTINE NotifyRoutine,
     BOOLEAN Remove
    );

typedef
void
(*PCREATE_THREAD_NOTIFY_ROUTINE)(
     HANDLE ProcessId,
     HANDLE ThreadId,
     BOOLEAN Create
    );

NTSTATUS
PsSetCreateThreadNotifyRoutine(
     PCREATE_THREAD_NOTIFY_ROUTINE NotifyRoutine
    );







NTSTATUS
PsAssignImpersonationToken(
     PETHREAD Thread,
     HANDLE Token
    );

PACCESS_TOKEN
PsReferencePrimaryToken(
     PEPROCESS Process
    );













PACCESS_TOKEN
PsReferenceImpersonationToken(
     PETHREAD Thread,
     PBOOLEAN CopyOnOpen,
     PBOOLEAN EffectiveOnly,
     PSECURITY_IMPERSONATION_LEVEL ImpersonationLevel
    );

PACCESS_TOKEN
PsReferenceEffectiveToken(
     PETHREAD Thread,
     PTOKEN_TYPE TokenType,
     PBOOLEAN EffectiveOnly,
     PSECURITY_IMPERSONATION_LEVEL ImpersonationLevel
    );
















LARGE_INTEGER
PsGetProcessExitTime(
    void
    );


























void
PsImpersonateClient(
     PETHREAD Thread,
     PACCESS_TOKEN Token,
     BOOLEAN CopyOnOpen,
     BOOLEAN EffectiveOnly,
     SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
    );

BOOLEAN
PsDisableImpersonation(
     PETHREAD Thread,
     PSE_IMPERSONATION_STATE ImpersonationState
    );

void
PsRestoreImpersonation(
     PETHREAD Thread,
     PSE_IMPERSONATION_STATE ImpersonationState
    );


void
PsRevertToSelf( void );


NTSTATUS
PsOpenTokenOfThread(
     HANDLE ThreadHandle,
     BOOLEAN OpenAsSelf,
     PACCESS_TOKEN *Token,
     PBOOLEAN CopyOnOpen,
     PBOOLEAN EffectiveOnly,
     PSECURITY_IMPERSONATION_LEVEL ImpersonationLevel
    );

NTSTATUS
PsOpenTokenOfProcess(
     HANDLE ProcessHandle,
     PACCESS_TOKEN *Token
    );





NTSTATUS
PsLookupProcessThreadByCid(
     PCLIENT_ID Cid,
     PEPROCESS *Process ,
     PETHREAD *Thread
    );

NTSTATUS
PsLookupProcessByProcessId(
     HANDLE ProcessId,
     PEPROCESS *Process
    );

NTSTATUS
PsLookupThreadByThreadId(
     HANDLE ThreadId,
     PETHREAD *Thread
    );






void
PsChargePoolQuota(
     PEPROCESS Process,
     POOL_TYPE PoolType,
     ULONG Amount
    );

void
PsReturnPoolQuota(
     PEPROCESS Process,
     POOL_TYPE PoolType,
     ULONG Amount
    );






void
PspContextToKframes(
     PKTRAP_FRAME TrapFrame,
     PKEXCEPTION_FRAME ExceptionFrame,
     PCONTEXT Context
    );

void
PspContextFromKframes(
     PKTRAP_FRAME TrapFrame,
     PKEXCEPTION_FRAME ExceptionFrame,
     PCONTEXT Context
    );

void
PsReturnSharedPoolQuota(
     PEPROCESS_QUOTA_BLOCK QuotaBlock,
     ULONG PagedAmount,
     ULONG NonPagedAmount
    );

PEPROCESS_QUOTA_BLOCK
PsChargeSharedPoolQuota(
     PEPROCESS Process,
     ULONG PagedAmount,
     ULONG NonPagedAmount
    );


typedef enum _PSLOCKPROCESSMODE {
    PsLockPollOnTimeout,
    PsLockReturnTimeout,
    PsLockWaitForever
} PSLOCKPROCESSMODE;

NTSTATUS
PsLockProcess(
     PEPROCESS Process,
     KPROCESSOR_MODE WaitMode,
     PSLOCKPROCESSMODE LockMode
    );

void
PsUnlockProcess(
     PEPROCESS Process
    );






BOOLEAN
PsForwardException (
     PEXCEPTION_RECORD ExceptionRecord,
     BOOLEAN DebugException,
     BOOLEAN SecondChance
    );

typedef
NTSTATUS
(*PKWIN32_PROCESS_CALLOUT) (
     PVOID Process,
     BOOLEAN Initialize
    );

typedef enum _PSW32THREADCALLOUTTYPE {
    PsW32ThreadCalloutInitialize,
    PsW32ThreadCalloutExit,
    PsW32ThreadCalloutDelete
} PSW32THREADCALLOUTTYPE;

typedef
NTSTATUS
(*PKWIN32_THREAD_CALLOUT) (
     PVOID Thread,
     PSW32THREADCALLOUTTYPE CalloutType
    );


void
PsEstablishWin32Callouts(
     PKWIN32_PROCESS_CALLOUT ProcessCallout,
     PKWIN32_THREAD_CALLOUT ThreadCallout,
     PKWIN32_GLOBALATOMTABLE_CALLOUT GlobalAtomTableCallout,
     PVOID BatchFlushRoutine,
     ULONG ProcessSize,
     ULONG ThreadSize
    );


NTSTATUS
PsCreateWin32Process(
     PEPROCESS Process
    );

typedef enum _PSPROCESSPRIORITYMODE {
    PsProcessPriorityBackground,
    PsProcessPriorityForeground,
    PsProcessPrioritySpinning
} PSPROCESSPRIORITYMODE;


void
PsSetProcessPriorityByClass(
     PEPROCESS Process,
     PSPROCESSPRIORITYMODE PriorityMode
    );


NTSTATUS
PsWatchWorkingSet(
     NTSTATUS Status,
     PVOID PcValue,
     PVOID Va
    );





HANDLE
PsGetCurrentProcessId( void );

HANDLE
PsGetCurrentThreadId( void );

BOOLEAN
PsGetVersion(
    PULONG MajorVersion ,
    PULONG MinorVersion ,
    PULONG BuildNumber ,
    PUNICODE_STRING CSDVersion 
    );
















































typedef enum _SECURITY_OPERATION_CODE {
    SetSecurityDescriptor,
    QuerySecurityDescriptor,
    DeleteSecurityDescriptor,
    AssignSecurityDescriptor
    } SECURITY_OPERATION_CODE, *PSECURITY_OPERATION_CODE;
















































typedef struct _SECURITY_SUBJECT_CONTEXT {
    PACCESS_TOKEN ClientToken;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    PACCESS_TOKEN PrimaryToken;
    PVOID ProcessAuditId;
    } SECURITY_SUBJECT_CONTEXT, *PSECURITY_SUBJECT_CONTEXT;












































typedef struct _INITIAL_PRIVILEGE_SET {
    ULONG PrivilegeCount;
    ULONG Control;
    LUID_AND_ATTRIBUTES Privilege[3];
    } INITIAL_PRIVILEGE_SET, * PINITIAL_PRIVILEGE_SET;









typedef struct _ACCESS_STATE {
   LUID OperationID;
   BOOLEAN SecurityEvaluated;
   BOOLEAN GenerateAudit;
   BOOLEAN GenerateOnClose;
   BOOLEAN PrivilegesAllocated;
   ULONG Flags;
   ACCESS_MASK RemainingDesiredAccess;
   ACCESS_MASK PreviouslyGrantedAccess;
   ACCESS_MASK OriginalDesiredAccess;
   SECURITY_SUBJECT_CONTEXT SubjectSecurityContext;
   PSECURITY_DESCRIPTOR SecurityDescriptor;
   PVOID AuxData;
   union {
      INITIAL_PRIVILEGE_SET InitialPrivilegeSet;
      PRIVILEGE_SET PrivilegeSet;
      } Privileges;

   BOOLEAN AuditPrivileges;
   UNICODE_STRING ObjectName;
   UNICODE_STRING ObjectTypeName;

   } ACCESS_STATE, *PACCESS_STATE;







































































typedef struct _AUX_ACCESS_DATA {
    PPRIVILEGE_SET PrivilegesUsed;
    GENERIC_MAPPING GenericMapping;
    ACCESS_MASK AccessesToAudit;
} AUX_ACCESS_DATA, *PAUX_ACCESS_DATA;

































typedef struct _SE_AUDITING_STATE {
    BOOLEAN AuditOnSuccess;
    BOOLEAN AuditOnFailure;
} SE_AUDITING_STATE, *PSE_AUDITING_STATE;




typedef struct _SE_PROCESS_AUDIT_INFO {
    PEPROCESS Process;
    PEPROCESS Parent;
} SE_PROCESS_AUDIT_INFO, *PSE_PROCESS_AUDIT_INFO;
















typedef struct _SE_EXPORTS {

    
    
    

    LUID    SeCreateTokenPrivilege;
    LUID    SeAssignPrimaryTokenPrivilege;
    LUID    SeLockMemoryPrivilege;
    LUID    SeIncreaseQuotaPrivilege;
    LUID    SeUnsolicitedInputPrivilege;
    LUID    SeTcbPrivilege;
    LUID    SeSecurityPrivilege;
    LUID    SeTakeOwnershipPrivilege;
    LUID    SeLoadDriverPrivilege;
    LUID    SeCreatePagefilePrivilege;
    LUID    SeIncreaseBasePriorityPrivilege;
    LUID    SeSystemProfilePrivilege;
    LUID    SeSystemtimePrivilege;
    LUID    SeProfileSingleProcessPrivilege;
    LUID    SeCreatePermanentPrivilege;
    LUID    SeBackupPrivilege;
    LUID    SeRestorePrivilege;
    LUID    SeShutdownPrivilege;
    LUID    SeDebugPrivilege;
    LUID    SeAuditPrivilege;
    LUID    SeSystemEnvironmentPrivilege;
    LUID    SeChangeNotifyPrivilege;
    LUID    SeRemoteShutdownPrivilege;


    
    
    


    PSID  SeNullSid;
    PSID  SeWorldSid;
    PSID  SeLocalSid;
    PSID  SeCreatorOwnerSid;
    PSID  SeCreatorGroupSid;


    
    
    


    PSID  SeNtAuthoritySid;
    PSID  SeDialupSid;
    PSID  SeNetworkSid;
    PSID  SeBatchSid;
    PSID  SeInteractiveSid;
    PSID  SeLocalSystemSid;
    PSID  SeAliasAdminsSid;
    PSID  SeAliasUsersSid;
    PSID  SeAliasGuestsSid;
    PSID  SeAliasPowerUsersSid;
    PSID  SeAliasAccountOpsSid;
    PSID  SeAliasSystemOpsSid;
    PSID  SeAliasPrintOpsSid;
    PSID  SeAliasBackupOpsSid;


} SE_EXPORTS, *PSE_EXPORTS;





























typedef NTSTATUS
(*PSE_LOGON_SESSION_TERMINATED_ROUTINE)(
     PLUID LogonId);
























































































































































































































































































BOOLEAN
SeInitSystem( void );

void
SeSetSecurityAccessMask(
     SECURITY_INFORMATION SecurityInformation,
     PACCESS_MASK DesiredAccess
    );

void
SeQuerySecurityAccessMask(
     SECURITY_INFORMATION SecurityInformation,
     PACCESS_MASK DesiredAccess
    );


NTSTATUS
SeDefaultObjectMethod (
     PVOID Object,
     SECURITY_OPERATION_CODE OperationCode,
     PSECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PULONG Length,
      PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor,
     POOL_TYPE PoolType,
     PGENERIC_MAPPING GenericMapping
    );


NTSTATUS
SeCaptureSecurityDescriptor (
     PSECURITY_DESCRIPTOR InputSecurityDescriptor,
     KPROCESSOR_MODE RequestorMode,
     POOL_TYPE PoolType,
     BOOLEAN ForceCapture,
     PSECURITY_DESCRIPTOR *OutputSecurityDescriptor
    );

void
SeReleaseSecurityDescriptor (
     PSECURITY_DESCRIPTOR CapturedSecurityDescriptor,
     KPROCESSOR_MODE RequestorMode,
     BOOLEAN ForceCapture
    );




void
SeCaptureSubjectContext (
     PSECURITY_SUBJECT_CONTEXT SubjectContext
    );


void
SeLockSubjectContext(
     PSECURITY_SUBJECT_CONTEXT SubjectContext
    );


void
SeUnlockSubjectContext(
     PSECURITY_SUBJECT_CONTEXT SubjectContext
    );


void
SeReleaseSubjectContext (
     PSECURITY_SUBJECT_CONTEXT SubjectContext
    );



NTSTATUS
SeCaptureSecurityQos (
     POBJECT_ATTRIBUTES ObjectAttributes ,
     KPROCESSOR_MODE RequestorMode,
     PBOOLEAN SecurityQosPresent,
     PSECURITY_ADVANCED_QUALITY_OF_SERVICE CapturedSecurityQos
    );

void
SeFreeCapturedSecurityQos(
     PVOID SecurityQos
    );

NTSTATUS
SeCaptureSid (
     PSID InputSid,
     KPROCESSOR_MODE RequestorMode,
     PVOID CaptureBuffer ,
     ULONG CaptureBufferLength,
     POOL_TYPE PoolType,
     BOOLEAN ForceCapture,
     PSID *CapturedSid
    );


void
SeReleaseSid (
     PSID CapturedSid,
     KPROCESSOR_MODE RequestorMode,
     BOOLEAN ForceCapture
    );


NTSTATUS
SeCaptureAcl (
     PACL InputAcl,
     KPROCESSOR_MODE RequestorMode,
     PVOID CaptureBuffer ,
     ULONG CaptureBufferLength,
     POOL_TYPE PoolType,
     BOOLEAN ForceCapture,
     PACL *CapturedAcl,
     PULONG AlignedAclSize
    );


void
SeReleaseAcl (
     PACL CapturedAcl,
     KPROCESSOR_MODE RequestorMode,
     BOOLEAN ForceCapture
    );


NTSTATUS
SeCaptureLuidAndAttributesArray (
     PLUID_AND_ATTRIBUTES InputArray,
     ULONG ArrayCount,
     KPROCESSOR_MODE RequestorMode,
     PVOID CaptureBuffer ,
     ULONG CaptureBufferLength,
     POOL_TYPE PoolType,
     BOOLEAN ForceCapture,
     PLUID_AND_ATTRIBUTES *CapturedArray,
     PULONG AlignedArraySize
    );



void
SeReleaseLuidAndAttributesArray (
     PLUID_AND_ATTRIBUTES CapturedArray,
     KPROCESSOR_MODE RequestorMode,
     BOOLEAN ForceCapture
    );



NTSTATUS
SeCaptureSidAndAttributesArray (
     PSID_AND_ATTRIBUTES InputArray,
     ULONG ArrayCount,
     KPROCESSOR_MODE RequestorMode,
     PVOID CaptureBuffer ,
     ULONG CaptureBufferLength,
     POOL_TYPE PoolType,
     BOOLEAN ForceCapture,
     PSID_AND_ATTRIBUTES *CapturedArray,
     PULONG AlignedArraySize
    );


void
SeReleaseSidAndAttributesArray (
     PSID_AND_ATTRIBUTES CapturedArray,
     KPROCESSOR_MODE RequestorMode,
     BOOLEAN ForceCapture
    );




NTSTATUS
SeAssignSecurity (
     PSECURITY_DESCRIPTOR ParentDescriptor ,
     PSECURITY_DESCRIPTOR ExplicitDescriptor,
     PSECURITY_DESCRIPTOR *NewDescriptor,
     BOOLEAN IsDirectoryObject,
     PSECURITY_SUBJECT_CONTEXT SubjectContext,
     PGENERIC_MAPPING GenericMapping,
     POOL_TYPE PoolType
    );


NTSTATUS
SeDeassignSecurity (
      PSECURITY_DESCRIPTOR *SecurityDescriptor
    );






BOOLEAN
SeAccessCheck (
     PSECURITY_DESCRIPTOR SecurityDescriptor,
     PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext,
     BOOLEAN SubjectContextLocked,
     ACCESS_MASK DesiredAccess,
     ACCESS_MASK PreviouslyGrantedAccess,
     PPRIVILEGE_SET *Privileges ,
     PGENERIC_MAPPING GenericMapping,
     KPROCESSOR_MODE AccessMode,
     PACCESS_MASK GrantedAccess,
     PNTSTATUS AccessStatus
    );

BOOLEAN
SeProxyAccessCheck (
     PUNICODE_STRING Volume,
     PUNICODE_STRING RelativePath,
     BOOLEAN ContainerObject,
     PSECURITY_DESCRIPTOR SecurityDescriptor,
     PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext,
     BOOLEAN SubjectContextLocked,
     ACCESS_MASK DesiredAccess,
     ACCESS_MASK PreviouslyGrantedAccess,
     PPRIVILEGE_SET *Privileges ,
     PGENERIC_MAPPING GenericMapping,
     KPROCESSOR_MODE AccessMode,
     PACCESS_MASK GrantedAccess,
     PNTSTATUS AccessStatus
    );




BOOLEAN
SePrivilegeCheck(
      PPRIVILEGE_SET RequiredPrivileges,
     PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext,
     KPROCESSOR_MODE AccessMode
    );


void
SeFreePrivileges(
     PPRIVILEGE_SET Privileges
    );



NTSTATUS
SePrivilegePolicyCheck(
      PACCESS_MASK RemainingDesiredAccess,
      PACCESS_MASK PreviouslyGrantedAccess,
     PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext ,
     PACCESS_TOKEN Token ,
     PPRIVILEGE_SET *PrivilegeSet,
     KPROCESSOR_MODE PreviousMode
    );

void
SeGenerateMessage (
     PSTRING ObjectName,
     PSECURITY_DESCRIPTOR SecurityDescriptor,
     PACCESS_TOKEN Token,
     ACCESS_MASK DesiredAccess,
     BOOLEAN AccessGranted,
     HANDLE AuditPort,
     HANDLE AlarmPort,
     KPROCESSOR_MODE AccessMode
    );




void
SeOpenObjectAuditAlarm (
     PUNICODE_STRING ObjectTypeName,
     PVOID Object ,
     PUNICODE_STRING AbsoluteObjectName ,
     PSECURITY_DESCRIPTOR SecurityDescriptor,
     PACCESS_STATE AccessState,
     BOOLEAN ObjectCreated,
     BOOLEAN AccessGranted,
     KPROCESSOR_MODE AccessMode,
     PBOOLEAN GenerateOnClose
    );


void
SeOpenObjectForDeleteAuditAlarm (
     PUNICODE_STRING ObjectTypeName,
     PVOID Object ,
     PUNICODE_STRING AbsoluteObjectName ,
     PSECURITY_DESCRIPTOR SecurityDescriptor,
     PACCESS_STATE AccessState,
     BOOLEAN ObjectCreated,
     BOOLEAN AccessGranted,
     KPROCESSOR_MODE AccessMode,
     PBOOLEAN GenerateOnClose
    );

void
SeDeleteObjectAuditAlarm(
     PVOID Object,
     HANDLE Handle
    );




void
SeCloseObjectAuditAlarm(
     PVOID Object,
     HANDLE Handle,
     BOOLEAN GenerateOnClose
    );

void
SeTraverseAuditAlarm(
     PLUID OperationID,
     PVOID DirectoryObject,
     PSECURITY_DESCRIPTOR SecurityDescriptor,
     PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext,
     BOOLEAN SubjectContextLocked,
     ACCESS_MASK TraverseAccess,
     PPRIVILEGE_SET Privileges ,
     BOOLEAN AccessGranted,
     KPROCESSOR_MODE AccessMode
    );

void
SeCreateInstanceAuditAlarm(
     PLUID OperationID ,
     PVOID Object,
     PSECURITY_DESCRIPTOR SecurityDescriptor,
     PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext,
     ACCESS_MASK DesiredAccess,
     PPRIVILEGE_SET Privileges ,
     BOOLEAN AccessGranted,
     KPROCESSOR_MODE AccessMode
    );

void
SeCreateObjectAuditAlarm(
     PLUID OperationID ,
     PVOID Object,
     PUNICODE_STRING ComponentName,
     PSECURITY_DESCRIPTOR SecurityDescriptor,
     PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext,
     ACCESS_MASK DesiredAccess,
     PPRIVILEGE_SET Privileges ,
     BOOLEAN AccessGranted,
     PBOOLEAN AuditPerformed,
     KPROCESSOR_MODE AccessMode
    );

void
SeObjectReferenceAuditAlarm(
     PLUID OperationID ,
     PVOID Object,
     PSECURITY_DESCRIPTOR SecurityDescriptor,
     PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext,
     ACCESS_MASK DesiredAccess,
     PPRIVILEGE_SET Privileges ,
     BOOLEAN AccessGranted,
     KPROCESSOR_MODE AccessMode
    );

void
SePrivilegeObjectAuditAlarm(
     HANDLE Handle,
     PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext,
     ACCESS_MASK DesiredAccess,
     PPRIVILEGE_SET Privileges,
     BOOLEAN AccessGranted,
     KPROCESSOR_MODE AccessMode
    );

BOOLEAN
SeCheckPrivilegedObject(
    LUID PrivilegeValue,
    HANDLE ObjectHandle,
    ACCESS_MASK DesiredAccess,
    KPROCESSOR_MODE PreviousMode
    );



BOOLEAN
SeValidSecurityDescriptor(
     ULONG Length,
     PSECURITY_DESCRIPTOR SecurityDescriptor
    );


















void
SeAuditHandleCreation(
     PACCESS_STATE AccessState,
     HANDLE Handle
    );



PACCESS_TOKEN
SeMakeSystemToken ();

void
SeGetTokenControlInformation (
     PACCESS_TOKEN Token,
     PTOKEN_CONTROL TokenControl
    );




















extern struct _OBJECT_TYPE *SepTokenObjectType;


                                     
TOKEN_TYPE                                      
SeTokenType(                                    
     PACCESS_TOKEN Token                      
    );                                          

SECURITY_IMPERSONATION_LEVEL
SeTokenImpersonationLevel(
     PACCESS_TOKEN Token
    );

NTSTATUS
SeSubProcessToken (
     PEPROCESS ParentProcess,
     PACCESS_TOKEN *ChildToken
    );

void
SeAssignPrimaryToken(
     PEPROCESS Process,
     PACCESS_TOKEN Token
    );

void
SeDeassignPrimaryToken(
     PEPROCESS Process
    );

NTSTATUS
SeExchangePrimaryToken(
     PEPROCESS Process,
     PACCESS_TOKEN NewAccessToken,
     PACCESS_TOKEN *OldAccessToken
    );

NTSTATUS
SeCopyClientToken(
     PACCESS_TOKEN ClientToken,
     SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
     KPROCESSOR_MODE RequestorMode,
     PACCESS_TOKEN *DuplicateToken
    );




NTSTATUS
SeQueryAuthenticationIdToken(
     PACCESS_TOKEN Token,
     PLUID AuthenticationId
    );


NTSTATUS
SeCreateClientSecurity (
     PETHREAD ClientThread,
     PSECURITY_QUALITY_OF_SERVICE ClientSecurityQos,
     BOOLEAN RemoteSession,
     PSECURITY_CLIENT_CONTEXT ClientContext
    );


void
SeImpersonateClient(
     PSECURITY_CLIENT_CONTEXT ClientContext,
     PETHREAD ServerThread 
    );










NTSTATUS
SeCreateAccessState(
    PACCESS_STATE AccessState,
    PAUX_ACCESS_DATA AuxData,
    ACCESS_MASK DesiredAccess,
    PGENERIC_MAPPING GenericMapping
   );

void
SeDeleteAccessState(
     PACCESS_STATE AccessState
    );

NTSTATUS
SeUpdateClientSecurity(
     PETHREAD ClientThread,
      PSECURITY_CLIENT_CONTEXT ClientContext,
     PBOOLEAN ChangesMade,
     PBOOLEAN NewToken
    );

BOOLEAN
SeRmInitPhase1(
    );




NTSTATUS
SeQuerySecurityDescriptorInfo (
     PSECURITY_INFORMATION SecurityInformation,
     PSECURITY_DESCRIPTOR SecurityDescriptor,
      PULONG Length,
     PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor
    );


NTSTATUS
SeSetSecurityDescriptorInfo (
     PVOID Object ,
     PSECURITY_INFORMATION SecurityInformation,
     PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor,
     POOL_TYPE PoolType,
     PGENERIC_MAPPING GenericMapping
    );


NTSTATUS
SeAppendPrivileges(
    PACCESS_STATE AccessState,
    PPRIVILEGE_SET Privileges
    );



NTSTATUS
SeComputeQuotaInformationSize(
     PSECURITY_DESCRIPTOR SecurityDescriptor,
     PULONG Size
    );

void
SePrivilegedServiceAuditAlarm (
     PUNICODE_STRING ServiceName,
     PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext,
     PPRIVILEGE_SET Privileges,
     BOOLEAN AccessGranted
    );

                                                     
BOOLEAN                                                         
SeSinglePrivilegeCheck(                                         
    LUID PrivilegeValue,                                        
    KPROCESSOR_MODE PreviousMode                                
    );                                                          

BOOLEAN
SeCheckAuditPrivilege (
    PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext,
    KPROCESSOR_MODE PreviousMode
   );

NTSTATUS
SeAssignWorldSecurityDescriptor(
     PSECURITY_DESCRIPTOR SecurityDescriptor,
      PULONG Length,
     PSECURITY_INFORMATION SecurityInformation
    );

BOOLEAN
SeFastTraverseCheck(
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    ACCESS_MASK TraverseAccess,
    KPROCESSOR_MODE AccessMode
    );

                                                     
BOOLEAN                                                         
SeAuditingFileEvents(                                           
     BOOLEAN AccessGranted,                                   
     PSECURITY_DESCRIPTOR SecurityDescriptor                  
    );                                                          

                                                     
BOOLEAN                                                         
SeAuditingFileOrGlobalEvents(                                   
     BOOLEAN AccessGranted,                                   
     PSECURITY_DESCRIPTOR SecurityDescriptor,                 
     PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext         
    );                                                          

void
SeAuditProcessCreation(
    PEPROCESS Process,
    PEPROCESS Parent
    );

void
SeAuditProcessExit(
    PEPROCESS Process
    );

void
SeAuditHandleDuplication(
    PVOID SourceHandle,
    PVOID NewHandle,
    PEPROCESS SourceProcess,
    PEPROCESS TargetProcess
    );



void
SeSetAccessStateGenericMapping (
    PACCESS_STATE AccessState,
    PGENERIC_MAPPING GenericMapping
    );





NTSTATUS
SeRegisterLogonSessionTerminatedRoutine(
     PSE_LOGON_SESSION_TERMINATED_ROUTINE CallbackRoutine
    );

NTSTATUS
SeUnregisterLogonSessionTerminatedRoutine(
     PSE_LOGON_SESSION_TERMINATED_ROUTINE CallbackRoutine
    );

NTSTATUS
SeMarkLogonSessionForTerminationNotification(
     PLUID LogonId
    );



NTSTATUS
SeQueryInformationToken (
     PACCESS_TOKEN Token,
     TOKEN_INFORMATION_CLASS TokenInformationClass,
     PVOID *TokenInformation
    );



































extern LUID SeSystemAuthenticationId;
extern TOKEN_SOURCE SeSystemTokenSource;





extern PSID  SeNullSid;
extern PSID  SeWorldSid;
extern PSID  SeLocalSid;
extern PSID  SeCreatorOwnerSid;
extern PSID  SeCreatorGroupSid;
extern PSID  SeCreatorOwnerServerSid;
extern PSID  SeCreatorGroupServerSid;






extern PSID SeNtAuthoritySid;

extern PSID SeDialupSid;
extern PSID SeNetworkSid;
extern PSID SeBatchSid;
extern PSID SeInteractiveSid;
extern PSID SeLocalSystemSid;
extern PSID SeAliasAdminsSid;
extern PSID SeAliasUsersSid;
extern PSID SeAliasGuestsSid;
extern PSID SeAliasPowerUsersSid;
extern PSID SeAliasAccountOpsSid;
extern PSID SeAliasSystemOpsSid;
extern PSID SeAliasPrintOpsSid;
extern PSID SeAliasBackupOpsSid;





extern PSECURITY_DESCRIPTOR SePublicDefaultSd;
extern PSECURITY_DESCRIPTOR SePublicOpenSd;
extern PSECURITY_DESCRIPTOR SeSystemDefaultSd;

extern PACL SePublicDefaultDacl;
extern PACL SePublicOpenDacl;
extern PACL SeSystemDefaultDacl;






extern LUID SeCreateTokenPrivilege;
extern LUID SeAssignPrimaryTokenPrivilege;
extern LUID SeLockMemoryPrivilege;
extern LUID SeIncreaseQuotaPrivilege;
extern LUID SeUnsolicitedInputPrivilege;
extern LUID SeTcbPrivilege;
extern LUID SeSecurityPrivilege;
extern LUID SeTakeOwnershipPrivilege;
extern LUID SeLoadDriverPrivilege;
extern LUID SeCreatePagefilePrivilege;
extern LUID SeIncreaseBasePriorityPrivilege;
extern LUID SeSystemProfilePrivilege;
extern LUID SeSystemtimePrivilege;
extern LUID SeProfileSingleProcessPrivilege;
extern LUID SeCreatePermanentPrivilege;
extern LUID SeBackupPrivilege;
extern LUID SeRestorePrivilege;
extern LUID SeShutdownPrivilege;
extern LUID SeDebugPrivilege;
extern LUID SeAuditPrivilege;
extern LUID SeSystemEnvironmentPrivilege;
extern LUID SeChangeNotifyPrivilege;
extern LUID SeRemoteShutdownPrivilege;







extern SE_AUDITING_STATE SeAuditingState[];






extern BOOLEAN SeDetailedAuditing;

extern UNICODE_STRING SeSubsystemName;

extern PSE_EXPORTS SeExports;                       






















































































































































































































typedef
void
(*PSTALL_ROUTINE) (
     ULONG Delay
    );





typedef
BOOLEAN
(*PDUMP_DRIVER_OPEN) (
     LARGE_INTEGER PartitionOffset
    );

typedef
NTSTATUS
(*PDUMP_DRIVER_WRITE) (
     PLARGE_INTEGER DiskByteOffset,
     PMDL Mdl
    );


typedef
void
(*PDUMP_DRIVER_FINISH) (
    void
    );

struct _ADAPTER_OBJECT;






typedef struct _INITIALIZATION_CONTEXT {
    ULONG Length;
    ULONG DiskSignature;
    PVOID MemoryBlock;
    PVOID CommonBuffer[2];
    PHYSICAL_ADDRESS PhysicalAddress[2];
    PSTALL_ROUTINE StallRoutine;
    PDUMP_DRIVER_OPEN OpenRoutine;
    PDUMP_DRIVER_WRITE WriteRoutine;
    PDUMP_DRIVER_FINISH FinishRoutine;
    struct _ADAPTER_OBJECT *AdapterObject;
    PVOID MappedRegisterBase;
    PVOID PortConfiguration;
} INITIALIZATION_CONTEXT, *PINITIALIZATION_CONTEXT;






typedef NTSTATUS (*PIO_QUERY_DEVICE_ROUTINE)(
     PVOID Context,
     PUNICODE_STRING PathName,
     INTERFACE_TYPE BusType,
     ULONG BusNumber,
     PKEY_VALUE_FULL_INFORMATION *BusInformation,
     CONFIGURATION_TYPE ControllerType,
     ULONG ControllerNumber,
     PKEY_VALUE_FULL_INFORMATION *ControllerInformation,
     CONFIGURATION_TYPE PeripheralType,
     ULONG PeripheralNumber,
     PKEY_VALUE_FULL_INFORMATION *PeripheralInformation
    );






typedef enum _IO_QUERY_DEVICE_DATA_FORMAT {
    IoQueryDeviceIdentifier = 0,
    IoQueryDeviceConfigurationData,
    IoQueryDeviceComponentInformation,
    IoQueryDeviceMaxData
} IO_QUERY_DEVICE_DATA_FORMAT, *PIO_QUERY_DEVICE_DATA_FORMAT;





typedef enum _CREATE_FILE_TYPE {
    CreateFileTypeNone,
    CreateFileTypeNamedPipe,
    CreateFileTypeMailslot
} CREATE_FILE_TYPE;










typedef struct _NAMED_PIPE_CREATE_PARAMETERS {
    ULONG NamedPipeType;
    ULONG ReadMode;
    ULONG CompletionMode;
    ULONG MaximumInstances;
    ULONG InboundQuota;
    ULONG OutboundQuota;
    LARGE_INTEGER DefaultTimeout;
    BOOLEAN TimeoutSpecified;
} NAMED_PIPE_CREATE_PARAMETERS, *PNAMED_PIPE_CREATE_PARAMETERS;








typedef struct _MAILSLOT_CREATE_PARAMETERS {
    ULONG MailslotQuota;
    ULONG MaximumMessageSize;
    LARGE_INTEGER ReadTimeout;
    BOOLEAN TimeoutSpecified;
} MAILSLOT_CREATE_PARAMETERS, *PMAILSLOT_CREATE_PARAMETERS;












struct _DEVICE_OBJECT;
struct _DRIVER_OBJECT;
struct _DRIVE_LAYOUT_INFORMATION;
struct _DISK_PARTITION;
struct _FILE_OBJECT;
struct _IRP;
struct _SCSI_REQUEST_BLOCK;





typedef
void
(*PIO_DPC_ROUTINE) (
     PKDPC Dpc,
     struct _DEVICE_OBJECT *DeviceObject,
     struct _IRP *Irp,
     PVOID Context
    );





typedef
void
(*PIO_TIMER_ROUTINE) (
     struct _DEVICE_OBJECT *DeviceObject,
     PVOID Context
    );





typedef
NTSTATUS
(*PDRIVER_INITIALIZE) (
     struct _DRIVER_OBJECT *DriverObject,
     PUNICODE_STRING RegistryPath
    );





typedef
void
(*PDRIVER_REINITIALIZE) (
     struct _DRIVER_OBJECT *DriverObject,
     PVOID Context,
     ULONG Count
    );





typedef
void
(*PDRIVER_CANCEL) (
     struct _DEVICE_OBJECT *DeviceObject,
     struct _IRP *Irp
    );





typedef
NTSTATUS
(*PDRIVER_DISPATCH) (
     struct _DEVICE_OBJECT *DeviceObject,
     struct _IRP *Irp
    );





typedef
void
(*PDRIVER_STARTIO) (
     struct _DEVICE_OBJECT *DeviceObject,
     struct _IRP *Irp
    );





typedef
void
(*PDRIVER_UNLOAD) (
     struct _DRIVER_OBJECT *DriverObject
    );


































typedef
NTSTATUS
(*PDRIVER_ADD_DEVICE) (
     struct _DRIVER_OBJECT *DriverObject,
      struct _DEVICE_OBJECT **PhysicalDeviceObject
    );







typedef
void
(*PDRIVER_FS_NOTIFICATION) (
     struct _DEVICE_OBJECT *DeviceObject,
     BOOLEAN FsActive
    );









typedef
BOOLEAN
(*PFAST_IO_CHECK_IF_POSSIBLE) (
     struct _FILE_OBJECT *FileObject,
     PLARGE_INTEGER FileOffset,
     ULONG Length,
     BOOLEAN Wait,
     ULONG LockKey,
     BOOLEAN CheckForReadOperation,
     PIO_STATUS_BLOCK IoStatus,
     struct _DEVICE_OBJECT *DeviceObject
    );

typedef
BOOLEAN
(*PFAST_IO_READ) (
     struct _FILE_OBJECT *FileObject,
     PLARGE_INTEGER FileOffset,
     ULONG Length,
     BOOLEAN Wait,
     ULONG LockKey,
     PVOID Buffer,
     PIO_STATUS_BLOCK IoStatus,
     struct _DEVICE_OBJECT *DeviceObject
    );

typedef
BOOLEAN
(*PFAST_IO_WRITE) (
     struct _FILE_OBJECT *FileObject,
     PLARGE_INTEGER FileOffset,
     ULONG Length,
     BOOLEAN Wait,
     ULONG LockKey,
     PVOID Buffer,
     PIO_STATUS_BLOCK IoStatus,
     struct _DEVICE_OBJECT *DeviceObject
    );





typedef
BOOLEAN
(*PFAST_IO_QUERY_BASIC_INFO) (
     struct _FILE_OBJECT *FileObject,
     BOOLEAN Wait,
     PFILE_BASIC_INFORMATION Buffer,
     PIO_STATUS_BLOCK IoStatus,
     struct _DEVICE_OBJECT *DeviceObject
    );

typedef
BOOLEAN
(*PFAST_IO_QUERY_STANDARD_INFO) (
     struct _FILE_OBJECT *FileObject,
     BOOLEAN Wait,
     PFILE_STANDARD_INFORMATION Buffer,
     PIO_STATUS_BLOCK IoStatus,
     struct _DEVICE_OBJECT *DeviceObject
    );





typedef
BOOLEAN
(*PFAST_IO_LOCK) (
     struct _FILE_OBJECT *FileObject,
     PLARGE_INTEGER FileOffset,
     PLARGE_INTEGER Length,
    PEPROCESS ProcessId,
    ULONG Key,
    BOOLEAN FailImmediately,
    BOOLEAN ExclusiveLock,
     PIO_STATUS_BLOCK IoStatus,
     struct _DEVICE_OBJECT *DeviceObject
    );

typedef
BOOLEAN
(*PFAST_IO_UNLOCK_SINGLE) (
     struct _FILE_OBJECT *FileObject,
     PLARGE_INTEGER FileOffset,
     PLARGE_INTEGER Length,
    PEPROCESS ProcessId,
    ULONG Key,
     PIO_STATUS_BLOCK IoStatus,
     struct _DEVICE_OBJECT *DeviceObject
    );

typedef
BOOLEAN
(*PFAST_IO_UNLOCK_ALL) (
     struct _FILE_OBJECT *FileObject,
    PEPROCESS ProcessId,
     PIO_STATUS_BLOCK IoStatus,
     struct _DEVICE_OBJECT *DeviceObject
    );

typedef
BOOLEAN
(*PFAST_IO_UNLOCK_ALL_BY_KEY) (
     struct _FILE_OBJECT *FileObject,
    PVOID ProcessId,
    ULONG Key,
     PIO_STATUS_BLOCK IoStatus,
     struct _DEVICE_OBJECT *DeviceObject
    );





typedef
BOOLEAN
(*PFAST_IO_DEVICE_CONTROL) (
     struct _FILE_OBJECT *FileObject,
     BOOLEAN Wait,
     PVOID InputBuffer ,
     ULONG InputBufferLength,
     PVOID OutputBuffer ,
     ULONG OutputBufferLength,
     ULONG IoControlCode,
     PIO_STATUS_BLOCK IoStatus,
     struct _DEVICE_OBJECT *DeviceObject
    );







typedef
void
(*PFAST_IO_ACQUIRE_FILE) (
     struct _FILE_OBJECT *FileObject
    );

typedef
void
(*PFAST_IO_RELEASE_FILE) (
     struct _FILE_OBJECT *FileObject
    );







typedef
void
(*PFAST_IO_DETACH_DEVICE) (
     struct _DEVICE_OBJECT *SourceDevice,
     struct _DEVICE_OBJECT *TargetDevice
    );








typedef
BOOLEAN
(*PFAST_IO_QUERY_NETWORK_OPEN_INFO) (
     struct _FILE_OBJECT *FileObject,
     BOOLEAN Wait,
     struct _FILE_NETWORK_OPEN_INFORMATION *Buffer,
     struct _IO_STATUS_BLOCK *IoStatus,
     struct _DEVICE_OBJECT *DeviceObject
    );





typedef
BOOLEAN
(*PFAST_IO_MDL_READ) (
     struct _FILE_OBJECT *FileObject,
     PLARGE_INTEGER FileOffset,
     ULONG Length,
     ULONG LockKey,
     PMDL *MdlChain,
     PIO_STATUS_BLOCK IoStatus,
     struct _DEVICE_OBJECT *DeviceObject
    );

typedef
BOOLEAN
(*PFAST_IO_MDL_READ_COMPLETE) (
     struct _FILE_OBJECT *FileObject,
     PMDL MdlChain,
     struct _DEVICE_OBJECT *DeviceObject
    );

typedef
BOOLEAN
(*PFAST_IO_PREPARE_MDL_WRITE) (
     struct _FILE_OBJECT *FileObject,
     PLARGE_INTEGER FileOffset,
     ULONG Length,
     ULONG LockKey,
     PMDL *MdlChain,
     PIO_STATUS_BLOCK IoStatus,
     struct _DEVICE_OBJECT *DeviceObject
    );

typedef
BOOLEAN
(*PFAST_IO_MDL_WRITE_COMPLETE) (
     struct _FILE_OBJECT *FileObject,
     PLARGE_INTEGER FileOffset,
     PMDL MdlChain,
     struct _DEVICE_OBJECT *DeviceObject
    );






typedef
NTSTATUS
(*PFAST_IO_ACQUIRE_FOR_MOD_WRITE) (
     struct _FILE_OBJECT *FileObject,
     PLARGE_INTEGER EndingOffset,
     struct _ERESOURCE **ResourceToRelease,
     struct _DEVICE_OBJECT *DeviceObject
             );

typedef
NTSTATUS
(*PFAST_IO_RELEASE_FOR_MOD_WRITE) (
     struct _FILE_OBJECT *FileObject,
     struct _ERESOURCE *ResourceToRelease,
     struct _DEVICE_OBJECT *DeviceObject
             );






typedef
NTSTATUS
(*PFAST_IO_ACQUIRE_FOR_CCFLUSH) (
     struct _FILE_OBJECT *FileObject,
     struct _DEVICE_OBJECT *DeviceObject
             );

typedef
NTSTATUS
(*PFAST_IO_RELEASE_FOR_CCFLUSH) (
     struct _FILE_OBJECT *FileObject,
     struct _DEVICE_OBJECT *DeviceObject
             );

typedef
BOOLEAN
(*PFAST_IO_READ_COMPRESSED) (
     struct _FILE_OBJECT *FileObject,
     PLARGE_INTEGER FileOffset,
     ULONG Length,
     ULONG LockKey,
     PVOID Buffer,
     PMDL *MdlChain,
     PIO_STATUS_BLOCK IoStatus,
     struct _COMPRESSED_DATA_INFO *CompressedDataInfo,
     ULONG CompressedDataInfoLength,
     struct _DEVICE_OBJECT *DeviceObject
    );

typedef
BOOLEAN
(*PFAST_IO_WRITE_COMPRESSED) (
     struct _FILE_OBJECT *FileObject,
     PLARGE_INTEGER FileOffset,
     ULONG Length,
     ULONG LockKey,
     PVOID Buffer,
     PMDL *MdlChain,
     PIO_STATUS_BLOCK IoStatus,
     struct _COMPRESSED_DATA_INFO *CompressedDataInfo,
     ULONG CompressedDataInfoLength,
     struct _DEVICE_OBJECT *DeviceObject
    );

typedef
BOOLEAN
(*PFAST_IO_MDL_READ_COMPLETE_COMPRESSED) (
     struct _FILE_OBJECT *FileObject,
     PMDL MdlChain,
     struct _DEVICE_OBJECT *DeviceObject
    );

typedef
BOOLEAN
(*PFAST_IO_MDL_WRITE_COMPLETE_COMPRESSED) (
     struct _FILE_OBJECT *FileObject,
     PLARGE_INTEGER FileOffset,
     PMDL MdlChain,
     struct _DEVICE_OBJECT *DeviceObject
    );

typedef
BOOLEAN
(*PFAST_IO_QUERY_OPEN) (
     struct _IRP *Irp,
     PFILE_NETWORK_OPEN_INFORMATION NetworkInformation,
     struct _DEVICE_OBJECT *DeviceObject
    );







typedef struct _FAST_IO_DISPATCH {
    ULONG SizeOfFastIoDispatch;
    PFAST_IO_CHECK_IF_POSSIBLE FastIoCheckIfPossible;
    PFAST_IO_READ FastIoRead;
    PFAST_IO_WRITE FastIoWrite;
    PFAST_IO_QUERY_BASIC_INFO FastIoQueryBasicInfo;
    PFAST_IO_QUERY_STANDARD_INFO FastIoQueryStandardInfo;
    PFAST_IO_LOCK FastIoLock;
    PFAST_IO_UNLOCK_SINGLE FastIoUnlockSingle;
    PFAST_IO_UNLOCK_ALL FastIoUnlockAll;
    PFAST_IO_UNLOCK_ALL_BY_KEY FastIoUnlockAllByKey;
    PFAST_IO_DEVICE_CONTROL FastIoDeviceControl;
    PFAST_IO_ACQUIRE_FILE AcquireFileForNtCreateSection;
    PFAST_IO_RELEASE_FILE ReleaseFileForNtCreateSection;
    PFAST_IO_DETACH_DEVICE FastIoDetachDevice;
    PFAST_IO_QUERY_NETWORK_OPEN_INFO FastIoQueryNetworkOpenInfo;
    PFAST_IO_ACQUIRE_FOR_MOD_WRITE AcquireForModWrite;
    PFAST_IO_MDL_READ MdlRead;
    PFAST_IO_MDL_READ_COMPLETE MdlReadComplete;
    PFAST_IO_PREPARE_MDL_WRITE PrepareMdlWrite;
    PFAST_IO_MDL_WRITE_COMPLETE MdlWriteComplete;
    PFAST_IO_READ_COMPRESSED FastIoReadCompressed;
    PFAST_IO_WRITE_COMPRESSED FastIoWriteCompressed;
    PFAST_IO_MDL_READ_COMPLETE_COMPRESSED MdlReadCompleteCompressed;
    PFAST_IO_MDL_WRITE_COMPLETE_COMPRESSED MdlWriteCompleteCompressed;
    PFAST_IO_QUERY_OPEN FastIoQueryOpen;
    PFAST_IO_RELEASE_FOR_MOD_WRITE ReleaseForModWrite;
    PFAST_IO_ACQUIRE_FOR_CCFLUSH AcquireForCcFlush;
    PFAST_IO_RELEASE_FOR_CCFLUSH ReleaseForCcFlush;
} FAST_IO_DISPATCH, *PFAST_IO_DISPATCH;









typedef enum _IO_ALLOCATION_ACTION {
    KeepObject = 1,
    DeallocateObject,
    DeallocateObjectKeepRegisters
} IO_ALLOCATION_ACTION, *PIO_ALLOCATION_ACTION;





typedef
IO_ALLOCATION_ACTION
(*PDRIVER_CONTROL) (
     struct _DEVICE_OBJECT *DeviceObject,
     struct _IRP *Irp,
     PVOID MapRegisterBase,
     PVOID Context
    );








typedef struct _IO_INTERRUPT_STRUCTURE {
    KINTERRUPT InterruptObject;
    PKINTERRUPT InterruptArray[32];
    KSPIN_LOCK SpinLock;
} IO_INTERRUPT_STRUCTURE, *PIO_INTERRUPT_STRUCTURE;







typedef struct _IO_SECURITY_CONTEXT {
    PSECURITY_QUALITY_OF_SERVICE SecurityQos;
    PACCESS_STATE AccessState;
    ACCESS_MASK DesiredAccess;
    ULONG FullCreateOptions;
} IO_SECURITY_CONTEXT, *PIO_SECURITY_CONTEXT;







typedef struct _IO_TIMER {
    CSHORT Type;
    CSHORT TimerFlag;
    LIST_ENTRY TimerList;
    PIO_TIMER_ROUTINE TimerRoutine;
    PVOID Context;
    struct _DEVICE_OBJECT *DeviceObject;
} IO_TIMER, *PIO_TIMER;
















typedef struct _VPB {
    CSHORT Type;
    CSHORT Size;
    USHORT Flags;
    USHORT VolumeLabelLength; 
    struct _DEVICE_OBJECT *DeviceObject;
    struct _DEVICE_OBJECT *RealDevice;
    ULONG SerialNumber;
    ULONG ReferenceCount;
    WCHAR VolumeLabel[(32 * sizeof(WCHAR)) / sizeof(WCHAR)];
} VPB, *PVPB;





typedef struct _ADAPTER_OBJECT *PADAPTER_OBJECT; 





typedef struct _WAIT_CONTEXT_BLOCK {
    KDEVICE_QUEUE_ENTRY WaitQueueEntry;
    PDRIVER_CONTROL DeviceRoutine;
    PVOID DeviceContext;
    ULONG NumberOfMapRegisters;
    PVOID DeviceObject;
    PVOID CurrentIrp;
    PKDPC BufferChainingDpc;
} WAIT_CONTEXT_BLOCK, *PWAIT_CONTEXT_BLOCK;

typedef struct _CONTROLLER_OBJECT {
    CSHORT Type;
    CSHORT Size;
    PVOID ControllerExtension;
    KDEVICE_QUEUE DeviceWaitQueue;

    ULONG Spare1;
    LARGE_INTEGER Spare2;

} CONTROLLER_OBJECT, *PCONTROLLER_OBJECT;






















typedef struct _DEVICE_OBJECT {
    CSHORT Type;
    USHORT Size;
    LONG ReferenceCount;
    struct _DRIVER_OBJECT *DriverObject;
    struct _DEVICE_OBJECT *NextDevice;
    struct _DEVICE_OBJECT *AttachedDevice;
    struct _IRP *CurrentIrp;
    PIO_TIMER Timer;
    ULONG Flags;                                
    ULONG Characteristics;                      
    PVPB Vpb;
    PVOID DeviceExtension;
    ULONG DeviceType;
    CCHAR StackSize;
    union {
        LIST_ENTRY ListEntry;
        WAIT_CONTEXT_BLOCK Wcb;
    } Queue;
    ULONG AlignmentRequirement;
    KDEVICE_QUEUE DeviceQueue;
    KDPC Dpc;

    
    
    
    

    ULONG ActiveThreadCount;
    PSECURITY_DESCRIPTOR SecurityDescriptor;
    KEVENT DeviceLock;

    USHORT SectorSize;
    USHORT Spare1;

    struct _DEVOBJ_EXTENSION  *DeviceObjectExtension;
    PVOID  Reserved;
} DEVICE_OBJECT;
typedef struct _DEVICE_OBJECT *PDEVICE_OBJECT; 









typedef struct _DEVOBJ_EXTENSION {

    
    
    

    CSHORT          Type;
    USHORT          Size;

    
    
    

    PDEVICE_OBJECT  DeviceObject;               






















































    
    
    

    ULONG ExtensionFlags;

} DEVOBJ_EXTENSION, *PDEVOBJ_EXTENSION;







typedef struct _DRIVER_EXTENSION {

    
    
    

    struct _DRIVER_OBJECT *DriverObject;

    
    
    
    
    

    PDRIVER_ADD_DEVICE AddDevice;

    
    
    
    

    ULONG Count;

    
    
    
    

    UNICODE_STRING ServiceKeyName;

} DRIVER_EXTENSION, *PDRIVER_EXTENSION;

typedef struct _DRIVER_OBJECT {
    CSHORT Type;
    CSHORT Size;

    
    
    
    
    

    PDEVICE_OBJECT DeviceObject;
    ULONG Flags;

    
    
    
    
    

    PVOID DriverStart;
    ULONG DriverSize;
    PVOID DriverSection;
    PDRIVER_EXTENSION DriverExtension;

    
    
    
    

    UNICODE_STRING DriverName;

    
    
    
    

    PUNICODE_STRING HardwareDatabase;

    
    
    
    
    
    
    
    

    PFAST_IO_DISPATCH FastIoDispatch;

    
    
    
    
    

    PDRIVER_INITIALIZE DriverInit;
    PDRIVER_STARTIO DriverStartIo;
    PDRIVER_UNLOAD DriverUnload;
    PDRIVER_DISPATCH MajorFunction[0x1b + 1];

} DRIVER_OBJECT;
typedef struct _DRIVER_OBJECT *PDRIVER_OBJECT; 










typedef struct _DEVICE_HANDLER_OBJECT {
    CSHORT Type;
    USHORT Size;

    
    
    
    

    struct _BUS_HANDLER *BusHandler;

    
    
    

    ULONG SlotNumber;



    
    
    

    
    
    

    UNICODE_STRING ServiceKeyName;
    ULONG InstanceOrdinal;




} DEVICE_HANDLER_OBJECT, *PDEVICE_HANDLER_OBJECT;








typedef struct _SECTION_OBJECT_POINTERS {
    PVOID DataSectionObject;
    PVOID SharedCacheMap;
    PVOID ImageSectionObject;
} SECTION_OBJECT_POINTERS;
typedef SECTION_OBJECT_POINTERS *PSECTION_OBJECT_POINTERS;





typedef struct _IO_COMPLETION_CONTEXT {
    PVOID Port;
    ULONG Key;
} IO_COMPLETION_CONTEXT, *PIO_COMPLETION_CONTEXT;



























typedef struct _FILE_OBJECT {
    CSHORT Type;
    CSHORT Size;
    PDEVICE_OBJECT DeviceObject;
    PVPB Vpb;
    PVOID FsContext;
    PVOID FsContext2;
    PSECTION_OBJECT_POINTERS SectionObjectPointer;
    PVOID PrivateCacheMap;
    NTSTATUS FinalStatus;
    struct _FILE_OBJECT *RelatedFileObject;
    BOOLEAN LockOperation;
    BOOLEAN DeletePending;
    BOOLEAN ReadAccess;
    BOOLEAN WriteAccess;
    BOOLEAN DeleteAccess;
    BOOLEAN SharedRead;
    BOOLEAN SharedWrite;
    BOOLEAN SharedDelete;
    ULONG Flags;
    UNICODE_STRING FileName;
    LARGE_INTEGER CurrentByteOffset;
    ULONG Waiters;
    ULONG Busy;
    PVOID LastLock;
    KEVENT Lock;
    KEVENT Event;
    PIO_COMPLETION_CONTEXT CompletionContext;
} FILE_OBJECT;
typedef struct _FILE_OBJECT *PFILE_OBJECT; 


































typedef struct _IRP {
    CSHORT Type;
    USHORT Size;

    
    
    

    
    
    
    

    PMDL MdlAddress;

    
    
    

    ULONG Flags;

    
    
    
    
    
    
    
    
    
    
    
    
    

    union {
        struct _IRP *MasterIrp;
        LONG IrpCount;
        PVOID SystemBuffer;
    } AssociatedIrp;

    
    
    
    

    LIST_ENTRY ThreadListEntry;

    
    
    

    IO_STATUS_BLOCK IoStatus;

    
    
    

    KPROCESSOR_MODE RequestorMode;

    
    
    
    

    BOOLEAN PendingReturned;

    
    
    

    CHAR StackCount;
    CHAR CurrentLocation;

    
    
    

    BOOLEAN Cancel;

    
    
    

    KIRQL CancelIrql;

    
    
    
    

    CCHAR ApcEnvironment;

    
    
    

    UCHAR AllocationFlags;

    
    
    

    PIO_STATUS_BLOCK UserIosb;
    PKEVENT UserEvent;
    union {
        struct {
            PIO_APC_ROUTINE UserApcRoutine;
            PVOID UserApcContext;
        } AsynchronousParameters;
        LARGE_INTEGER AllocationSize;
    } Overlay;

    
    
    
    

    PDRIVER_CANCEL CancelRoutine;

    
    
    
    
    
    
    

    PVOID UserBuffer;

    
    
    
    
    
    
    
    
    

    union {

        struct {

            union {

                
                
                
                

                KDEVICE_QUEUE_ENTRY DeviceQueueEntry;

                struct {

                    
                    
                    
                    
                    

                    PVOID DriverContext[4];

                } ;

            } ;

            
            
            

            PETHREAD Thread;

            
            
            
            
            

            PCHAR AuxiliaryBuffer;

            
            
            
            

            LIST_ENTRY ListEntry;

            
            
            
            
            
            

            struct _IO_STACK_LOCATION *CurrentStackLocation;

            
            
            
            
            

            PFILE_OBJECT OriginalFileObject;

        } Overlay;

        
        
        
        
        
        
        

        KAPC Apc;

        
        
        
        

        ULONG CompletionKey;

    } Tail;

} IRP, *PIRP;





typedef
NTSTATUS
(*PIO_COMPLETION_ROUTINE) (
     PDEVICE_OBJECT DeviceObject,
     PIRP Irp,
     PVOID Context
    );







































































































#pragma warning(disable:4103)

#pragma pack(push)

#pragma pack(4)






typedef struct _IO_STACK_LOCATION {
    UCHAR MajorFunction;
    UCHAR MinorFunction;
    UCHAR Flags;
    UCHAR Control;

    
    
    
    
    

    union {

        
        
        

        struct {
            PIO_SECURITY_CONTEXT SecurityContext;
            ULONG Options;
            USHORT FileAttributes;
            USHORT ShareAccess;
            ULONG EaLength;
        } Create;



        
        
        
        
        
        
        
        

        struct {
            PIO_SECURITY_CONTEXT SecurityContext;
            ULONG Options;
            USHORT Reserved;
            USHORT ShareAccess;
            PNAMED_PIPE_CREATE_PARAMETERS Parameters;
        } CreatePipe;

        
        
        
        
        
        
        
        

        struct {
            PIO_SECURITY_CONTEXT SecurityContext;
            ULONG Options;
            USHORT Reserved;
            USHORT ShareAccess;
            PMAILSLOT_CREATE_PARAMETERS Parameters;
        } CreateMailslot;



        
        
        

        struct {
            ULONG Length;
            ULONG Key;
            LARGE_INTEGER ByteOffset;
        } Read;

        
        
        

        struct {
            ULONG Length;
            ULONG Key;
            LARGE_INTEGER ByteOffset;
        } Write;



        
        
        

        struct {
            ULONG Length;
            PSTRING FileName;
            FILE_INFORMATION_CLASS FileInformationClass;
            ULONG FileIndex;
        } QueryDirectory;

        
        
        

        struct {
            ULONG Length;
            ULONG CompletionFilter;
        } NotifyDirectory;



        
        
        

        struct {
            ULONG Length;
            FILE_INFORMATION_CLASS FileInformationClass;
        } QueryFile;

        
        
        

        struct {
            ULONG Length;
            FILE_INFORMATION_CLASS FileInformationClass;
            PFILE_OBJECT FileObject;
            union {
                struct {
                    BOOLEAN ReplaceIfExists;
                    BOOLEAN AdvanceOnly;
                };
                ULONG ClusterCount;
                HANDLE DeleteHandle;
            };
        } SetFile;



        
        
        

        struct {
            ULONG Length;
            PVOID EaList;
            ULONG EaListLength;
            ULONG EaIndex;
        } QueryEa;

        
        
        

        struct {
            ULONG Length;
        } SetEa;



        
        
        

        struct {
            ULONG Length;
            FS_INFORMATION_CLASS FsInformationClass;
        } QueryVolume;



        
        
        

        struct {
            ULONG Length;
            FS_INFORMATION_CLASS FsInformationClass;
        } SetVolume;

        
        
        
        
        
        

        struct {
            ULONG OutputBufferLength;
            ULONG InputBufferLength;
            ULONG FsControlCode;
            PVOID Type3InputBuffer;
        } FileSystemControl;

        
        
        

        struct {
            PLARGE_INTEGER Length;
            ULONG Key;
            LARGE_INTEGER ByteOffset;
        } LockControl;



        
        
        
        
        



        
        
        
        
        



        
        
        
        
        
        

        struct {
            ULONG OutputBufferLength;
            ULONG InputBufferLength;
            ULONG IoControlCode;
            PVOID Type3InputBuffer;
        } DeviceIoControl;

        
        
        

        struct {
            SECURITY_INFORMATION SecurityInformation;
            ULONG Length;
        } QuerySecurity;

        
        
        

        struct {
            SECURITY_INFORMATION SecurityInformation;
            PSECURITY_DESCRIPTOR SecurityDescriptor;
        } SetSecurity;

        
        
        
        
        

        struct {
            PVPB Vpb;
            PDEVICE_OBJECT DeviceObject;
        } MountVolume;

        
        
        

        struct {
            PVPB Vpb;
            PDEVICE_OBJECT DeviceObject;
        } VerifyVolume;

        
        
        

        struct {
            struct _SCSI_REQUEST_BLOCK *Srb;
        } Scsi;





















        
        
        

        struct {
            PCM_RESOURCE_LIST AllocatedResources;
        } StartDevice;

        
        
        
        
        

        
        
        

        struct {
            PVOID Argument1;
            PVOID Argument2;
            PVOID Argument3;
            PVOID Argument4;
        } Others;

    } Parameters;

    
    
    
    

    PDEVICE_OBJECT DeviceObject;

    
    
    

    PFILE_OBJECT FileObject;

    
    
    
    

    PIO_COMPLETION_ROUTINE CompletionRoutine;

    
    
    
    

    PVOID Context;

} IO_STACK_LOCATION, *PIO_STACK_LOCATION;




























#pragma warning(disable:4103)

#pragma pack(pop)















typedef struct _SHARE_ACCESS {
    ULONG OpenCount;
    ULONG Readers;
    ULONG Writers;
    ULONG Deleters;
    ULONG SharedRead;
    ULONG SharedWrite;
    ULONG SharedDelete;
} SHARE_ACCESS, *PSHARE_ACCESS;











typedef struct _CONFIGURATION_INFORMATION {

    
    
    
    
    
    

    ULONG DiskCount;                
    ULONG FloppyCount;              
    ULONG CdRomCount;               
    ULONG TapeCount;                
    ULONG ScsiPortCount;            
    ULONG SerialCount;              
    ULONG ParallelCount;            

    
    
    
    

    BOOLEAN AtDiskPrimaryAddressClaimed;    
    BOOLEAN AtDiskSecondaryAddressClaimed;  

} CONFIGURATION_INFORMATION, *PCONFIGURATION_INFORMATION;












extern KSPIN_LOCK IoStatisticsLock;
extern ULONG IoReadOperationCount;
extern ULONG IoWriteOperationCount;
extern ULONG IoOtherOperationCount;
extern LARGE_INTEGER IoReadTransferCount;
extern LARGE_INTEGER IoWriteTransferCount;
extern LARGE_INTEGER IoOtherTransferCount;


























void
IoAcquireCancelSpinLock(
     PKIRQL Irql
    );




void
IoAcquireVpbSpinLock(
     PKIRQL Irql
    );




NTSTATUS
IoAllocateAdapterChannel(
     PADAPTER_OBJECT AdapterObject,
     PDEVICE_OBJECT DeviceObject,
     ULONG NumberOfMapRegisters,
     PDRIVER_CONTROL ExecutionRoutine,
     PVOID Context
    );


void
IoAllocateController(
     PCONTROLLER_OBJECT ControllerObject,
     PDEVICE_OBJECT DeviceObject,
     PDRIVER_CONTROL ExecutionRoutine,
     PVOID Context
    );


PVOID
IoAllocateErrorLogEntry(
     PVOID IoObject,
     UCHAR EntrySize
    );


PIRP
IoAllocateIrp(
     CCHAR StackSize,
     BOOLEAN ChargeQuota
    );


PMDL
IoAllocateMdl(
     PVOID VirtualAddress,
     ULONG Length,
     BOOLEAN SecondaryBuffer,
     BOOLEAN ChargeQuota,
      PIRP Irp 
    );

































NTSTATUS
IoAssignResources (
     PUNICODE_STRING RegistryPath,
     PUNICODE_STRING DriverClassName ,
     PDRIVER_OBJECT DriverObject,
     PDEVICE_OBJECT DeviceObject ,
     PIO_RESOURCE_REQUIREMENTS_LIST RequestedResources,
      PCM_RESOURCE_LIST *AllocatedResources
    );




NTSTATUS
IoAsynchronousPageWrite(
     PFILE_OBJECT FileObject,
     PMDL MemoryDescriptorList,
     PLARGE_INTEGER StartingOffset,
     PIO_APC_ROUTINE ApcRoutine,
     PVOID ApcContext,
     PIO_STATUS_BLOCK IoStatusBlock,
     PIRP *Irp 
    );




NTSTATUS
IoAttachDevice(
     PDEVICE_OBJECT SourceDevice,
     PUNICODE_STRING TargetDevice,
     PDEVICE_OBJECT *AttachedDevice
    );


NTSTATUS
IoAttachDeviceByPointer(
     PDEVICE_OBJECT SourceDevice,
     PDEVICE_OBJECT TargetDevice
    );

PDEVICE_OBJECT
IoAttachDeviceToDeviceStack(
     PDEVICE_OBJECT SourceDevice,
     PDEVICE_OBJECT TargetDevice
    );


PIRP
IoBuildAsynchronousFsdRequest(
     ULONG MajorFunction,
     PDEVICE_OBJECT DeviceObject,
      PVOID Buffer ,
     ULONG Length ,
     PLARGE_INTEGER StartingOffset ,
     PIO_STATUS_BLOCK IoStatusBlock 
    );


PIRP
IoBuildDeviceIoControlRequest(
     ULONG IoControlCode,
     PDEVICE_OBJECT DeviceObject,
     PVOID InputBuffer ,
     ULONG InputBufferLength,
     PVOID OutputBuffer ,
     ULONG OutputBufferLength,
     BOOLEAN InternalDeviceIoControl,
     PKEVENT Event,
     PIO_STATUS_BLOCK IoStatusBlock
    );


void
IoBuildPartialMdl(
     PMDL SourceMdl,
      PMDL TargetMdl,
     PVOID VirtualAddress,
     ULONG Length
    );


PIRP
IoBuildSynchronousFsdRequest(
     ULONG MajorFunction,
     PDEVICE_OBJECT DeviceObject,
      PVOID Buffer ,
     ULONG Length ,
     PLARGE_INTEGER StartingOffset ,
     PKEVENT Event,
     PIO_STATUS_BLOCK IoStatusBlock
    );


NTSTATUS
_fastcall
IofCallDriver(
     PDEVICE_OBJECT DeviceObject,
      PIRP Irp
    );





BOOLEAN
IoCancelIrp(
     PIRP Irp
    );




void
IoCancelThreadIo(
     PETHREAD Thread
    );


NTSTATUS
IoCheckDesiredAccess(
      PACCESS_MASK DesiredAccess,
     ACCESS_MASK GrantedAccess
    );


NTSTATUS
IoCheckEaBufferValidity(
     PFILE_FULL_EA_INFORMATION EaBuffer,
     ULONG EaLength,
     PULONG ErrorOffset
    );


NTSTATUS
IoCheckFunctionAccess(
     ACCESS_MASK GrantedAccess,
     UCHAR MajorFunction,
     UCHAR MinorFunction,
     ULONG IoControlCode,
     PFILE_INFORMATION_CLASS FileInformationClass ,
     PFS_INFORMATION_CLASS FsInformationClass 
    );




NTSTATUS
IoCheckShareAccess(
     ACCESS_MASK DesiredAccess,
     ULONG DesiredShareAccess,
      PFILE_OBJECT FileObject,
      PSHARE_ACCESS ShareAccess,
     BOOLEAN Update
    );


void
_fastcall
IofCompleteRequest(
     PIRP Irp,
     CCHAR PriorityBoost
    );





NTSTATUS
IoConnectInterrupt(
     PKINTERRUPT *InterruptObject,
     PKSERVICE_ROUTINE ServiceRoutine,
     PVOID ServiceContext,
     PKSPIN_LOCK SpinLock ,
     ULONG Vector,
     KIRQL Irql,
     KIRQL SynchronizeIrql,
     KINTERRUPT_MODE InterruptMode,
     BOOLEAN ShareVector,
     KAFFINITY ProcessorEnableMask,
     BOOLEAN FloatingSave
    );


PCONTROLLER_OBJECT
IoCreateController(
     ULONG Size
    );


NTSTATUS
IoCreateDevice(
     PDRIVER_OBJECT DriverObject,
     ULONG DeviceExtensionSize,
     PUNICODE_STRING DeviceName ,
     ULONG DeviceType,
     ULONG DeviceCharacteristics,
     BOOLEAN Exclusive,
     PDEVICE_OBJECT *DeviceObject
    );




NTSTATUS
IoCreateFile(
     PHANDLE FileHandle,
     ACCESS_MASK DesiredAccess,
     POBJECT_ATTRIBUTES ObjectAttributes,
     PIO_STATUS_BLOCK IoStatusBlock,
     PLARGE_INTEGER AllocationSize ,
     ULONG FileAttributes,
     ULONG ShareAccess,
     ULONG Disposition,
     ULONG CreateOptions,
     PVOID EaBuffer ,
     ULONG EaLength,
     CREATE_FILE_TYPE CreateFileType,
     PVOID ExtraCreateParameters ,
     ULONG Options
    );


PFILE_OBJECT
IoCreateStreamFileObject(
     PFILE_OBJECT FileObject ,
     PDEVICE_OBJECT DeviceObject 
    );




PKEVENT
IoCreateNotificationEvent(
     PUNICODE_STRING EventName,
     PHANDLE EventHandle
    );


NTSTATUS
IoCreateSymbolicLink(
     PUNICODE_STRING SymbolicLinkName,
     PUNICODE_STRING DeviceName
    );


PKEVENT
IoCreateSynchronizationEvent(
     PUNICODE_STRING EventName,
     PHANDLE EventHandle
    );


NTSTATUS
IoCreateUnprotectedSymbolicLink(
     PUNICODE_STRING SymbolicLinkName,
     PUNICODE_STRING DeviceName
    );





























void
IoDeleteController(
     PCONTROLLER_OBJECT ControllerObject
    );


void
IoDeleteDevice(
     PDEVICE_OBJECT DeviceObject
    );


NTSTATUS
IoDeleteSymbolicLink(
     PUNICODE_STRING SymbolicLinkName
    );


void
IoDetachDevice(
      PDEVICE_OBJECT TargetDevice
    );


void
IoDisconnectInterrupt(
     PKINTERRUPT InterruptObject
    );




void
IoEnqueueIrp(
     PIRP Irp
    );




BOOLEAN
IoFastQueryNetworkAttributes(
     POBJECT_ATTRIBUTES ObjectAttributes,
     ACCESS_MASK DesiredAccess,
     ULONG OpenOptions,
     PIO_STATUS_BLOCK IoStatus,
     PFILE_NETWORK_OPEN_INFORMATION Buffer
    );






void
IoFreeController(
     PCONTROLLER_OBJECT ControllerObject
    );


void
IoFreeIrp(
     PIRP Irp
    );


void
IoFreeMdl(
     PMDL Mdl
    );




PDEVICE_OBJECT
IoGetAttachedDevice(
     PDEVICE_OBJECT DeviceObject
    );


PDEVICE_OBJECT
IoGetBaseFileSystemDeviceObject(
     PFILE_OBJECT FileObject
    );

                                 
PCONFIGURATION_INFORMATION                  
IoGetConfigurationInformation( void );      































PDEVICE_OBJECT
IoGetDeviceToVerify(
     PETHREAD Thread
    );


PEPROCESS
IoGetCurrentProcess(
    void
    );




NTSTATUS
IoGetDeviceObjectPointer(
     PUNICODE_STRING ObjectName,
     ACCESS_MASK DesiredAccess,
     PFILE_OBJECT *FileObject,
     PDEVICE_OBJECT *DeviceObject
    );


PGENERIC_MAPPING
IoGetFileObjectGenericMapping(
    void
    );






































PVOID
IoGetInitialStack(
    void
    );


void
IoGetStackLimits (
     PULONG LowLimit,
     PULONG HighLimit
    );






__inline
ULONG
IoGetRemainingStackSize (
    void
    )
{
    ULONG Top;
    ULONG Bottom;

    IoGetStackLimits( &Bottom, &Top );
    return((ULONG)(&Top) - Bottom );
}



























PDEVICE_OBJECT
IoGetRelatedDeviceObject(
     PFILE_OBJECT FileObject
    );




PEPROCESS
IoGetRequestorProcess(
     PIRP Irp
    );


PIRP
IoGetTopLevelIrp(
    void
    );





































void
IoInitializeIrp(
      PIRP Irp,
     USHORT PacketSize,
     CCHAR StackSize
    );


NTSTATUS
IoInitializeTimer(
     PDEVICE_OBJECT DeviceObject,
     PIO_TIMER_ROUTINE TimerRoutine,
     PVOID Context
    );




BOOLEAN
IoInitSystem(
     PLOADER_PARAMETER_BLOCK LoaderBlock
    );

































































BOOLEAN
IoIsOperationSynchronous(
     PIRP Irp
    );


BOOLEAN
IoIsSystemThread(
     PETHREAD Thread
    );




PIRP
IoMakeAssociatedIrp(
     PIRP Irp,
     CCHAR StackSize
    );































BOOLEAN
IoPageFileCreated(
     HANDLE FileHandle
    );

                                             
NTSTATUS                                                
IoPageRead(                                             
     PFILE_OBJECT FileObject,                         
     PMDL MemoryDescriptorList,                       
     PLARGE_INTEGER StartingOffset,                   
     PKEVENT Event,                                   
     PIO_STATUS_BLOCK IoStatusBlock                  
    );                                                  

                                             
NTSTATUS                                                
IoQueryDeviceDescription(                               
     PINTERFACE_TYPE BusType ,                
     PULONG BusNumber ,                       
     PCONFIGURATION_TYPE ControllerType ,     
     PULONG ControllerNumber ,                
     PCONFIGURATION_TYPE PeripheralType ,     
     PULONG PeripheralNumber ,                
     PIO_QUERY_DEVICE_ROUTINE CalloutRoutine,         
     PVOID Context                                    
    );                                                  




NTSTATUS
IoQueryFileInformation(
     PFILE_OBJECT FileObject,
     FILE_INFORMATION_CLASS FileInformationClass,
     ULONG Length,
     PVOID FileInformation,
     PULONG ReturnedLength
    );


NTSTATUS
IoQueryVolumeInformation(
     PFILE_OBJECT FileObject,
     FS_INFORMATION_CLASS FsInformationClass,
     ULONG Length,
     PVOID FsInformation,
     PULONG ReturnedLength
    );





void
IoQueueThreadIrp(
     PIRP Irp
    );





void
IoRaiseHardError(
     PIRP Irp,
     PVPB Vpb ,
     PDEVICE_OBJECT RealDeviceObject
    );


BOOLEAN
IoRaiseInformationalHardError(
     NTSTATUS ErrorStatus,
     PUNICODE_STRING String ,
     PKTHREAD Thread 
    );


BOOLEAN
IoSetThreadHardErrorMode(
     BOOLEAN EnableHardErrors
    );


void
IoRegisterDriverReinitialization(
     PDRIVER_OBJECT DriverObject,
     PDRIVER_REINITIALIZE DriverReinitializationRoutine,
     PVOID Context
    );




void
IoRegisterFileSystem(
      PDEVICE_OBJECT DeviceObject
    );


NTSTATUS
IoRegisterFsRegistrationChange(
     PDRIVER_OBJECT DriverObject,
     PDRIVER_FS_NOTIFICATION DriverNotificationRoutine
    );




NTSTATUS
IoRegisterShutdownNotification(
     PDEVICE_OBJECT DeviceObject
    );


void
IoReleaseCancelSpinLock(
     KIRQL Irql
    );





















void
IoReleaseVpbSpinLock(
     KIRQL Irql
    );




void
IoRemoveShareAccess(
     PFILE_OBJECT FileObject,
      PSHARE_ACCESS ShareAccess
    );




NTSTATUS
IoReportHalResourceUsage(
     PUNICODE_STRING HalName,
     PCM_RESOURCE_LIST RawResourceList,
     PCM_RESOURCE_LIST TranslatedResourceList,
     ULONG ResourceListSize
    );




NTSTATUS
IoReportResourceUsage(
     PUNICODE_STRING DriverClassName ,
     PDRIVER_OBJECT DriverObject,
     PCM_RESOURCE_LIST DriverList ,
     ULONG DriverListSize ,
     PDEVICE_OBJECT DeviceObject,
     PCM_RESOURCE_LIST DeviceList ,
     ULONG DeviceListSize ,
     BOOLEAN OverrideConflict,
     PBOOLEAN ConflictDetected
    );

























































































































void
IoSetDeviceToVerify(
     PETHREAD Thread,
     PDEVICE_OBJECT DeviceObject
    );




void
IoSetHardErrorOrVerifyDevice(
     PIRP Irp,
     PDEVICE_OBJECT DeviceObject
    );




NTSTATUS
IoSetInformation(
     PFILE_OBJECT FileObject,
     FILE_INFORMATION_CLASS FileInformationClass,
     ULONG Length,
     PVOID FileInformation
    );






























void
IoSetShareAccess(
     ACCESS_MASK DesiredAccess,
     ULONG DesiredShareAccess,
      PFILE_OBJECT FileObject,
     PSHARE_ACCESS ShareAccess
    );




void
IoSetTopLevelIrp(
     PIRP Irp
    );




BOOLEAN
IoShutdownSystem(
     BOOLEAN RebootPending,
     ULONG Phase
    );





























void
IoStartNextPacket(
     PDEVICE_OBJECT DeviceObject,
     BOOLEAN Cancelable
    );


void
IoStartNextPacketByKey(
     PDEVICE_OBJECT DeviceObject,
     BOOLEAN Cancelable,
     ULONG Key
    );


void
IoStartPacket(
     PDEVICE_OBJECT DeviceObject,
     PIRP Irp,
     PULONG Key ,
     PDRIVER_CANCEL CancelFunction 
    );


void
IoStartTimer(
     PDEVICE_OBJECT DeviceObject
    );


void
IoStopTimer(
     PDEVICE_OBJECT DeviceObject
    );




NTSTATUS
IoSynchronousPageWrite(
     PFILE_OBJECT FileObject,
     PMDL MemoryDescriptorList,
     PLARGE_INTEGER StartingOffset,
     PKEVENT Event,
     PIO_STATUS_BLOCK IoStatusBlock
    );


PEPROCESS
IoThreadToProcess(
     PETHREAD Thread
    );


void
IoUnregisterFileSystem(
      PDEVICE_OBJECT DeviceObject
    );


void
IoUnregisterFsRegistrationChange(
     PDRIVER_OBJECT DriverObject,
     PDRIVER_FS_NOTIFICATION DriverNotificationRoutine
    );




void
IoUnregisterShutdownNotification(
     PDEVICE_OBJECT DeviceObject
    );


void
IoUpdateShareAccess(
     PFILE_OBJECT FileObject,
      PSHARE_ACCESS ShareAccess
    );




NTSTATUS
IoVerifyVolume(
     PDEVICE_OBJECT DeviceObject,
     BOOLEAN AllowRawMount
    );


BOOLEAN
IoWriteCrashDump(
     ULONG BugCheckCode,
     ULONG BugCheckParameter1,
     ULONG BugCheckParameter2,
     ULONG BugCheckParameter3,
     ULONG BugCheckParameter4,
     PVOID Context
    );

                                     
void                                            
IoWriteErrorLogEntry(                           
     PVOID ElEntry                            
    );                                          


































BOOLEAN
ObInitSystem( void );


NTSTATUS
ObInitProcess(
    PEPROCESS ParentProcess ,
    PEPROCESS NewProcess
    );

void
ObInitProcess2(
    PEPROCESS NewProcess
    );

void
ObKillProcess(
    BOOLEAN AcquireLock,
    PEPROCESS Process
    );






typedef struct _OBJECT_HANDLE_INFORMATION {
    ULONG HandleAttributes;
    ACCESS_MASK GrantedAccess;
} OBJECT_HANDLE_INFORMATION, *POBJECT_HANDLE_INFORMATION;





typedef struct _OBJECT_DUMP_CONTROL {
    PVOID Stream;
    ULONG Detail;
} OB_DUMP_CONTROL, *POB_DUMP_CONTROL;

typedef void (*OB_DUMP_METHOD)(
     PVOID Object,
     POB_DUMP_CONTROL Control 
    );

typedef enum _OB_OPEN_REASON {
    ObCreateHandle,
    ObOpenHandle,
    ObDuplicateHandle,
    ObInheritHandle,
    ObMaxOpenReason
} OB_OPEN_REASON;


typedef void (*OB_OPEN_METHOD)(
     OB_OPEN_REASON OpenReason,
     PEPROCESS Process ,
     PVOID Object,
     ACCESS_MASK GrantedAccess,
     ULONG HandleCount
    );

typedef void (*OB_CLOSE_METHOD)(
     PEPROCESS Process ,
     PVOID Object,
     ACCESS_MASK GrantedAccess,
     ULONG ProcessHandleCount,
     ULONG SystemHandleCount
    );

typedef void (*OB_DELETE_METHOD)(
     PVOID Object
    );

typedef NTSTATUS (*OB_PARSE_METHOD)(
     PVOID ParseObject,
     PVOID ObjectType,
      PACCESS_STATE AccessState,
     KPROCESSOR_MODE AccessMode,
     ULONG Attributes,
      PUNICODE_STRING CompleteName,
      PUNICODE_STRING RemainingName,
      PVOID Context ,
     PSECURITY_QUALITY_OF_SERVICE SecurityQos ,
     PVOID *Object
    );

typedef NTSTATUS (*OB_SECURITY_METHOD)(
     PVOID Object,
     SECURITY_OPERATION_CODE OperationCode,
     PSECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PULONG CapturedLength,
      PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor,
     POOL_TYPE PoolType,
     PGENERIC_MAPPING GenericMapping
    );

typedef NTSTATUS (*OB_QUERYNAME_METHOD)(
     PVOID Object,
     BOOLEAN HasObjectName,
     POBJECT_NAME_INFORMATION ObjectNameInfo,
     ULONG Length,
     PULONG ReturnLength
    );

























typedef struct _OBJECT_TYPE_INITIALIZER {
    USHORT Length;
    BOOLEAN UseDefaultObject;
    BOOLEAN Reserved;
    ULONG InvalidAttributes;
    GENERIC_MAPPING GenericMapping;
    ULONG ValidAccessMask;
    BOOLEAN SecurityRequired;
    BOOLEAN MaintainHandleCount;
    BOOLEAN MaintainTypeList;
    POOL_TYPE PoolType;
    ULONG DefaultPagedPoolCharge;
    ULONG DefaultNonPagedPoolCharge;
    OB_DUMP_METHOD DumpProcedure;
    OB_OPEN_METHOD OpenProcedure;
    OB_CLOSE_METHOD CloseProcedure;
    OB_DELETE_METHOD DeleteProcedure;
    OB_PARSE_METHOD ParseProcedure;
    OB_SECURITY_METHOD SecurityProcedure;
    OB_QUERYNAME_METHOD QueryNameProcedure;
} OBJECT_TYPE_INITIALIZER, *POBJECT_TYPE_INITIALIZER;



typedef struct _OBJECT_TYPE {
    ERESOURCE Mutex;
    LIST_ENTRY TypeList;
    UNICODE_STRING Name;            
    PVOID DefaultObject;
    ULONG Index;
    ULONG TotalNumberOfObjects;
    ULONG TotalNumberOfHandles;
    ULONG HighWaterNumberOfObjects;
    ULONG HighWaterNumberOfHandles;
    OBJECT_TYPE_INITIALIZER TypeInfo;

    ULONG Key;

} OBJECT_TYPE, *POBJECT_TYPE;







typedef struct _OBJECT_DIRECTORY {
    struct _OBJECT_DIRECTORY_ENTRY *HashBuckets[ 37 ];
    struct _OBJECT_DIRECTORY_ENTRY **LookupBucket;
    BOOLEAN LookupFound;
    USHORT SymbolicLinkUsageCount;
} OBJECT_DIRECTORY, *POBJECT_DIRECTORY;




typedef struct _OBJECT_DIRECTORY_ENTRY {
    struct _OBJECT_DIRECTORY_ENTRY *ChainLink;
    PVOID Object;
} OBJECT_DIRECTORY_ENTRY, *POBJECT_DIRECTORY_ENTRY;






typedef struct _OBJECT_SYMBOLIC_LINK {
    LARGE_INTEGER CreationTime;
    UNICODE_STRING LinkTarget;
    UNICODE_STRING LinkTargetRemaining;
    PVOID LinkTargetObject;
    ULONG DosDeviceDriveIndex;  
} OBJECT_SYMBOLIC_LINK, *POBJECT_SYMBOLIC_LINK;






typedef struct _OBJECT_HANDLE_COUNT_ENTRY {
    PEPROCESS Process;
    ULONG HandleCount;
} OBJECT_HANDLE_COUNT_ENTRY, *POBJECT_HANDLE_COUNT_ENTRY;

typedef struct _OBJECT_HANDLE_COUNT_DATABASE {
    ULONG CountEntries;
    OBJECT_HANDLE_COUNT_ENTRY HandleCountEntries[ 1 ];
} OBJECT_HANDLE_COUNT_DATABASE, *POBJECT_HANDLE_COUNT_DATABASE;



















typedef struct _OBJECT_CREATE_INFORMATION {
    ULONG Attributes;
    HANDLE RootDirectory;
    PVOID ParseContext;
    KPROCESSOR_MODE ProbeMode;
    ULONG PagedPoolCharge;
    ULONG NonPagedPoolCharge;
    ULONG SecurityDescriptorCharge;
    PSECURITY_DESCRIPTOR SecurityDescriptor;
    PSECURITY_QUALITY_OF_SERVICE SecurityQos;
    SECURITY_QUALITY_OF_SERVICE SecurityQualityOfService;
} OBJECT_CREATE_INFORMATION, *POBJECT_CREATE_INFORMATION;

typedef struct _OBJECT_HEADER {
    union {
        struct {
            LONG PointerCount;
            LONG HandleCount;
        };
        LIST_ENTRY Entry;
    };
    POBJECT_TYPE Type;
    UCHAR NameInfoOffset;
    UCHAR HandleInfoOffset;
    UCHAR QuotaInfoOffset;
    UCHAR Flags;

    union {
        POBJECT_CREATE_INFORMATION ObjectCreateInfo;
        PVOID QuotaBlockCharged;
    };

    PSECURITY_DESCRIPTOR SecurityDescriptor;

    QUAD Body;
} OBJECT_HEADER, *POBJECT_HEADER;

typedef struct _OBJECT_HEADER_QUOTA_INFO {
    ULONG PagedPoolCharge;
    ULONG NonPagedPoolCharge;
    ULONG SecurityDescriptorCharge;
    PEPROCESS ExclusiveProcess;
} OBJECT_HEADER_QUOTA_INFO, *POBJECT_HEADER_QUOTA_INFO;

typedef struct _OBJECT_HEADER_HANDLE_INFO {
    union {
        POBJECT_HANDLE_COUNT_DATABASE HandleCountDataBase;
        OBJECT_HANDLE_COUNT_ENTRY SingleEntry;
    };
} OBJECT_HEADER_HANDLE_INFO, *POBJECT_HEADER_HANDLE_INFO;

typedef struct _OBJECT_HEADER_NAME_INFO {
    POBJECT_DIRECTORY Directory;
    UNICODE_STRING Name;
    ULONG Reserved;
} OBJECT_HEADER_NAME_INFO, *POBJECT_HEADER_NAME_INFO;

typedef struct _OBJECT_HEADER_CREATOR_INFO {
    LIST_ENTRY TypeList;
    HANDLE CreatorUniqueProcess;
    USHORT CreatorBackTraceIndex;
    USHORT Reserved;
} OBJECT_HEADER_CREATOR_INFO, *POBJECT_HEADER_CREATOR_INFO;






























NTSTATUS
ObCreateObjectType(
     PUNICODE_STRING TypeName,
     POBJECT_TYPE_INITIALIZER ObjectTypeInitializer,
     PSECURITY_DESCRIPTOR SecurityDescriptor ,
     POBJECT_TYPE *ObjectType
    );




void
ObDeleteCapturedInsertInfo(
     PVOID Object
    );


NTSTATUS
ObCreateObject(
     KPROCESSOR_MODE ProbeMode,
     POBJECT_TYPE ObjectType,
     POBJECT_ATTRIBUTES ObjectAttributes ,
     KPROCESSOR_MODE OwnershipMode,
      PVOID ParseContext ,
     ULONG ObjectBodySize,
     ULONG PagedPoolCharge,
     ULONG NonPagedPoolCharge,
     PVOID *Object
    );



NTSTATUS
ObInsertObject(
     PVOID Object,
     PACCESS_STATE PassedAccessState ,
     ACCESS_MASK DesiredAccess ,
     ULONG ObjectPointerBias,
     PVOID *NewObject ,
     PHANDLE Handle
    );



                                                     
NTSTATUS                                                        
ObReferenceObjectByHandle(                                      
     HANDLE Handle,                                           
     ACCESS_MASK DesiredAccess,                               
     POBJECT_TYPE ObjectType ,                        
     KPROCESSOR_MODE AccessMode,                              
     PVOID *Object,                                          
     POBJECT_HANDLE_INFORMATION HandleInformation    
    );                                                          


NTSTATUS
ObOpenObjectByName(
     POBJECT_ATTRIBUTES ObjectAttributes,
     POBJECT_TYPE ObjectType,
     KPROCESSOR_MODE AccessMode,
      PACCESS_STATE PassedAccessState ,
     ACCESS_MASK DesiredAccess ,
      PVOID ParseContext ,
     PHANDLE Handle
    );


                                                     
NTSTATUS                                                        
ObOpenObjectByPointer(                                          
     PVOID Object,                                            
     ULONG HandleAttributes,                                  
     PACCESS_STATE PassedAccessState ,                
     ACCESS_MASK DesiredAccess ,                      
     POBJECT_TYPE ObjectType ,                        
     KPROCESSOR_MODE AccessMode,                              
     PHANDLE Handle                                          
    );                                                          

NTSTATUS
ObReferenceObjectByName(
     PUNICODE_STRING ObjectName,
     ULONG Attributes,
     PACCESS_STATE PassedAccessState ,
     ACCESS_MASK DesiredAccess ,
     POBJECT_TYPE ObjectType,
     KPROCESSOR_MODE AccessMode,
      PVOID ParseContext ,
     PVOID *Object
    );

                                                     
void                                                            
ObMakeTemporaryObject(                                          
     PVOID Object                                             
    );                                                          


BOOLEAN
ObFindHandleForObject(
     PEPROCESS Process,
     PVOID Object,
     POBJECT_TYPE ObjectType ,
     POBJECT_HANDLE_INFORMATION MatchCriteria ,
     PHANDLE Handle
    );


















































NTSTATUS
ObReferenceObjectByPointer(
     PVOID Object,
     ACCESS_MASK DesiredAccess,
     POBJECT_TYPE ObjectType,
     KPROCESSOR_MODE AccessMode
    );


void
_fastcall
ObfDereferenceObject(
     PVOID Object
    );



NTSTATUS
ObWaitForSingleObject(
     HANDLE Handle,
     BOOLEAN Alertable,
     PLARGE_INTEGER Timeout 
    );

                                                     
NTSTATUS                                                        
ObQueryNameString(                                              
     PVOID Object,                                            
     POBJECT_NAME_INFORMATION ObjectNameInfo,                
     ULONG Length,                                            
     PULONG ReturnLength                                     
    );                                                          
                                                                
                                                     
ULONG                                                           
ObGetObjectPointerCount(                                        
     PVOID Object                                             
    );                                                          


PUNICODE_STRING
ObGetObjectName(
     PVOID Object
    );


NTSTATUS
ObQueryTypeName(
     PVOID Object,
    PUNICODE_STRING ObjectTypeName,
     ULONG Length,
     PULONG ReturnLength
    );

NTSTATUS
ObQueryTypeInfo(
     POBJECT_TYPE ObjectType,
     POBJECT_TYPE_INFORMATION ObjectTypeInfo,
     ULONG Length,
     PULONG ReturnLength
    );

NTSTATUS
ObDumpObjectByHandle(
     HANDLE Handle,
     POB_DUMP_CONTROL Control 
    );


NTSTATUS
ObDumpObjectByPointer(
     PVOID Object,
     POB_DUMP_CONTROL Control 
    );


NTSTATUS
ObGetObjectSecurity(
     PVOID Object,
     PSECURITY_DESCRIPTOR *SecurityDescriptor,
     PBOOLEAN MemoryAllocated
    );

void
ObReleaseObjectSecurity(
     PSECURITY_DESCRIPTOR SecurityDescriptor,
     BOOLEAN MemoryAllocated
    );


NTSTATUS
ObAssignObjectSecurityDescriptor(
     PVOID Object,
     PSECURITY_DESCRIPTOR SecurityDescriptor ,
     POOL_TYPE PoolType
    );

NTSTATUS
ObValidateSecurityQuota(
     PVOID Object,
     ULONG NewSize
    );

BOOLEAN
ObCheckCreateObjectAccess(
     PVOID DirectoryObject,
     ACCESS_MASK CreateAccess,
     PACCESS_STATE AccessState ,
     PUNICODE_STRING ComponentName,
     BOOLEAN TypeMutexLocked,
     KPROCESSOR_MODE PreviousMode,
     PNTSTATUS AccessStatus
   );

BOOLEAN
ObCheckObjectAccess(
     PVOID Object,
     PACCESS_STATE AccessState,
     BOOLEAN TypeMutexLocked,
     KPROCESSOR_MODE AccessMode,
     PNTSTATUS AccessStatus
    );


NTSTATUS
ObAssignSecurity(
     PACCESS_STATE AccessState,
     PSECURITY_DESCRIPTOR ParentDescriptor ,
     PVOID Object,
     POBJECT_TYPE ObjectType
    );

NTSTATUS
ObQueryObjectAuditingByHandle(
     HANDLE Handle,
     PBOOLEAN GenerateOnClose
    );



typedef BOOLEAN (*OB_ENUM_OBJECT_TYPE_ROUTINE)(
     PVOID Object,
     PUNICODE_STRING ObjectName,
     ULONG HandleCount,
     ULONG PointerCount,
     PVOID Parameter
    );

NTSTATUS
ObEnumerateObjectsByType(
     POBJECT_TYPE ObjectType,
     OB_ENUM_OBJECT_TYPE_ROUTINE EnumerationRoutine,
     PVOID Parameter
    );

NTSTATUS
ObGetHandleInformation(
     PSYSTEM_HANDLE_INFORMATION HandleInformation,
     ULONG Length,
     PULONG ReturnLength 
    );

NTSTATUS
ObGetObjectInformation(
     PCHAR UserModeBufferAddress,
     PSYSTEM_OBJECTTYPE_INFORMATION ObjectInformation,
     ULONG Length,
     PULONG ReturnLength 
    );

NTSTATUS
ObSetSecurityDescriptorInfo(
     PVOID Object,
     PSECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor,
     POOL_TYPE PoolType,
     PGENERIC_MAPPING GenericMapping
    );

NTSTATUS
ObDeassignSecurity (
      PSECURITY_DESCRIPTOR *SecurityDescriptor
    );
































typedef struct _PHYSICAL_MEMORY_RUN {
    ULONG BasePage;
    ULONG PageCount;
} PHYSICAL_MEMORY_RUN, *PPHYSICAL_MEMORY_RUN;

typedef struct _PHYSICAL_MEMORY_DESCRIPTOR {
    ULONG NumberOfRuns;
    ULONG NumberOfPages;
    PHYSICAL_MEMORY_RUN Run[1];
} PHYSICAL_MEMORY_DESCRIPTOR, *PPHYSICAL_MEMORY_DESCRIPTOR;





extern PPHYSICAL_MEMORY_DESCRIPTOR MmPhysicalMemoryBlock;




































































































































































































































































extern POBJECT_TYPE MmSectionObjectType;





extern ULONG MmReadClusterSize;





extern ULONG MmNumberOfColors;





extern ULONG MmNumberOfPhysicalPages;






extern ULONG MmSizeOfSystemCacheInPages;





extern MMSUPPORT MmSystemCacheWs;





extern KEVENT MmWorkingSetManagerEvent;


typedef enum _MM_SYSTEM_SIZE {
    MmSmallSystem,
    MmMediumSystem,
    MmLargeSystem
} MM_SYSTEMSIZE;


MM_SYSTEMSIZE
MmQuerySystemSize(
    void
    );


BOOLEAN
MmIsThisAnNtAsSystem(
    void
    );

typedef enum _LOCK_OPERATION {
    IoReadAccess,
    IoWriteAccess,
    IoModifyAccess
} LOCK_OPERATION;







extern ULONG MmProductType;

typedef struct _MMINFO_COUNTERS {
    ULONG PageFaultCount;
    ULONG CopyOnWriteCount;
    ULONG TransitionCount;
    ULONG CacheTransitionCount;
    ULONG DemandZeroCount;
    ULONG PageReadCount;
    ULONG PageReadIoCount;
    ULONG CacheReadCount;
    ULONG CacheIoCount;
    ULONG DirtyPagesWriteCount;
    ULONG DirtyWriteIoCount;
    ULONG MappedPagesWriteCount;
    ULONG MappedWriteIoCount;
} MMINFO_COUNTERS;

typedef MMINFO_COUNTERS *PMMINFO_COUNTERS;

extern MMINFO_COUNTERS MmInfoCounters;







BOOLEAN
MmInitSystem (
     ULONG Phase,
     PLOADER_PARAMETER_BLOCK LoaderBlock,
     PPHYSICAL_MEMORY_DESCRIPTOR PhysicalMemoryBlock
    );

void
MmInitializeMemoryLimits (
     PLOADER_PARAMETER_BLOCK LoaderBlock,
     PBOOLEAN IncludedType,
     PPHYSICAL_MEMORY_DESCRIPTOR Memory
    );

void
MmFreeLoaderBlock (
     PLOADER_PARAMETER_BLOCK LoaderBlock
    );





BOOLEAN
MmShutdownSystem (
     BOOLEAN RebootPending
    );






PVOID
MiAllocatePoolPages (
     POOL_TYPE PoolType,
     ULONG SizeInBytes
    );

ULONG
MiFreePoolPages (
     PVOID StartingAddress
    );





POOL_TYPE
MmDeterminePoolType (
     PVOID VirtualAddress
    );





NTSTATUS
MmAccessFault (
     BOOLEAN StoreInstruction,
     PVOID VirtualAddress,
     KPROCESSOR_MODE PreviousMode
    );





BOOLEAN
MmCreateProcessAddressSpace (
     ULONG MinimumWorkingSetSize,
     PEPROCESS NewProcess,
     PULONG DirectoryTableBase
    );

NTSTATUS
MmInitializeProcessAddressSpace (
     PEPROCESS ProcessToInitialize,
     PEPROCESS ProcessToClone ,
     PVOID SectionToMap 
    );

void
MmDeleteProcessAddressSpace (
     PEPROCESS Process
    );

void
MmCleanProcessAddressSpace (
    void
    );

void
MmCleanUserProcessAddressSpace (
    void
    );

void
MmCleanVirtualAddressDescriptor (
    void
    );

PVOID
MmCreateKernelStack (
    BOOLEAN LargeStack
    );

void
MmDeleteKernelStack (
     PVOID PointerKernelStack,
     BOOLEAN LargeStack
    );

NTSTATUS
MmGrowKernelStack (
     PVOID CurrentStack
    );

void
MmOutPageKernelStack (
     PKTHREAD Thread
    );

void
MmInPageKernelStack (
     PKTHREAD Thread
    );

void
MmOutSwapProcess (
     PKPROCESS Process
    );

void
MmInSwapProcess (
     PKPROCESS Process
    );

PTEB
MmCreateTeb (
     PEPROCESS TargetProcess,
     PINITIAL_TEB InitialTeb,
     PCLIENT_ID ClientId
    );

PPEB
MmCreatePeb (
     PEPROCESS TargetProcess,
     PINITIAL_PEB InitialPeb
    );

void
MmDeleteTeb (
     PEPROCESS TargetProcess,
     PVOID TebBase
    );

void
MmAllowWorkingSetExpansion (
    void
    );

NTSTATUS
MmAdjustWorkingSetSize (
     ULONG WorkingSetMinimum,
     ULONG WorkingSetMaximum,
     ULONG SystemCache
    );

void
MmAdjustPageFileQuota (
     ULONG NewPageFileQuota
    );

void
MmWorkingSetManager (
    void
    );

void
MmSetMemoryPriorityProcess(
     PEPROCESS Process,
     UCHAR MemoryPriority
    );





NTSTATUS
MmLoadSystemImage (
     PUNICODE_STRING ImageFileName,
     PVOID *Section,
     PVOID *ImageBaseAddress
    );

void
MmFreeDriverInitialization (
     PVOID Section
    );

NTSTATUS
MmUnloadSystemImage (
     PVOID Section
    );


























































































































































































































typedef enum _MMLISTS {
    ZeroedPageList,
    FreePageList,
    StandbyPageList,  
    ModifiedPageList,
    ModifiedNoWritePageList,
    BadPageList,
    ActiveAndValid,
    TransitionPage
} MMLISTS;

typedef struct _MMPFNLIST {
    ULONG Total;
    MMLISTS ListName;
    ULONG Flink;
    ULONG Blink;
} MMPFNLIST;

typedef MMPFNLIST *PMMPFNLIST;

extern MMPFNLIST MmModifiedPageListHead;

extern ULONG MmThrottleTop;
extern ULONG MmThrottleBottom;







































NTSTATUS
MmCreateSection (
     PVOID *SectionObject,
     ACCESS_MASK DesiredAccess,
     POBJECT_ATTRIBUTES ObjectAttributes ,
     PLARGE_INTEGER MaximumSize,
     ULONG SectionPageProtection,
     ULONG AllocationAttributes,
     HANDLE FileHandle ,
     PFILE_OBJECT File 
    );


NTSTATUS
MmMapViewOfSection(
     PVOID SectionToMap,
     PEPROCESS Process,
      PVOID *CapturedBase,
     ULONG ZeroBits,
     ULONG CommitSize,
      PLARGE_INTEGER SectionOffset,
      PULONG CapturedViewSize,
     SECTION_INHERIT InheritDisposition,
     ULONG AllocationType,
     ULONG Protect
    );

NTSTATUS
MmUnmapViewOfSection(
     PEPROCESS Process,
     PVOID BaseAddress
     );



BOOLEAN
MmForceSectionClosed (
     PSECTION_OBJECT_POINTERS SectionObjectPointer,
     BOOLEAN DelayClose
    );



NTSTATUS
MmGetFileNameForSection (
     HANDLE Section,
     PSTRING FileName
    );

NTSTATUS
MmGetPageFileInformation(
     PVOID SystemInformation,
     ULONG SystemInformationLength,
     PULONG Length
    );

NTSTATUS
MmExtendSection (
     PVOID SectionToExtend,
      PLARGE_INTEGER NewSectionSize,
     ULONG IgnoreFileSizeChecking
    );

NTSTATUS
MmFlushVirtualMemory (
     PEPROCESS Process,
      PVOID *BaseAddress,
      PULONG RegionSize,
     PIO_STATUS_BLOCK IoStatus
    );

NTSTATUS
MmMapViewInSystemCache (
     PVOID SectionToMap,
     PVOID *CapturedBase,
      PLARGE_INTEGER SectionOffset,
      PULONG CapturedViewSize
    );

void
MmUnmapViewInSystemCache (
     PVOID BaseAddress,
     PVOID SectionToUnmap,
     ULONG AddToFront
    );

BOOLEAN
MmPurgeSection (
     PSECTION_OBJECT_POINTERS SectionObjectPointer,
     PLARGE_INTEGER Offset ,
     ULONG RegionSize,
     ULONG IgnoreCacheViews
    );

NTSTATUS
MmFlushSection (
     PSECTION_OBJECT_POINTERS SectionObjectPointer,
     PLARGE_INTEGER Offset ,
     ULONG RegionSize,
     PIO_STATUS_BLOCK IoStatus,
     ULONG AcquireFile
    );

NTSTATUS
MmGetCrashDumpInformation (
     PSYSTEM_CRASH_DUMP_INFORMATION CrashInfo
    );

NTSTATUS
MmGetCrashDumpStateInformation (
     PSYSTEM_CRASH_STATE_INFORMATION CrashInfo
    );



typedef enum _MMFLUSH_TYPE {
    MmFlushForDelete,
    MmFlushForWrite
} MMFLUSH_TYPE;


BOOLEAN
MmFlushImageSection (
     PSECTION_OBJECT_POINTERS SectionObjectPointer,
     MMFLUSH_TYPE FlushType
    );

BOOLEAN
MmCanFileBeTruncated (
     PSECTION_OBJECT_POINTERS SectionPointer,
     PLARGE_INTEGER NewFileSize
    );




BOOLEAN
MmDisableModifiedWriteOfSection (
     PSECTION_OBJECT_POINTERS SectionObjectPointer
    );

void
MmPurgeWorkingSet (
      PEPROCESS Process,
      PVOID BaseAddress,
      ULONG RegionSize
     );

BOOLEAN                                     
MmSetAddressRangeModified (                 
     PVOID Address,                       
     ULONG Length                         
    );                                      

BOOLEAN
MmCheckCachedPageState (
     PVOID Address,
     BOOLEAN SetToZero
    );

NTSTATUS
MmCopyToCachedPage (
     PVOID Address,
     PVOID UserBuffer,
     ULONG Offset,
     ULONG CountInBytes,
     BOOLEAN DontZero
    );

void
MmUnlockCachedPage (
     PVOID AddressInCache
    );

PVOID
MmDbgReadCheck (
     PVOID VirtualAddress
    );

PVOID
MmDbgWriteCheck (
     PVOID VirtualAddress
    );

PVOID
MmDbgTranslatePhysicalAddress (
     PHYSICAL_ADDRESS PhysicalAddress
    );








void
MmProbeAndLockPages (
      PMDL MemoryDescriptorList,
     KPROCESSOR_MODE AccessMode,
     LOCK_OPERATION Operation
    );


void
MmUnlockPages (
     PMDL MemoryDescriptorList
    );


void
MmBuildMdlForNonPagedPool (
      PMDL MemoryDescriptorList
    );


PVOID
MmMapLockedPages (
     PMDL MemoryDescriptorList,
     KPROCESSOR_MODE AccessMode
    );


void
MmUnmapLockedPages (
     PVOID BaseAddress,
     PMDL MemoryDescriptorList
    );



PVOID
MmMapIoSpace (
     PHYSICAL_ADDRESS PhysicalAddress,
     ULONG NumberOfBytes,
     MEMORY_CACHING_TYPE CacheType
    );


void
MmUnmapIoSpace (
     PVOID BaseAddress,
     ULONG NumberOfBytes
    );


void
MmProbeAndLockSelectedPages (
      PMDL MemoryDescriptorList,
     PFILE_SEGMENT_ELEMENT SegmentArray,
     KPROCESSOR_MODE AccessMode,
     LOCK_OPERATION Operation
    );


PVOID
MmMapVideoDisplay (
     PHYSICAL_ADDRESS PhysicalAddress,
     ULONG NumberOfBytes,
     MEMORY_CACHING_TYPE CacheType
     );


void
MmUnmapVideoDisplay (
      PVOID BaseAddress,
      ULONG NumberOfBytes
     );


PHYSICAL_ADDRESS
MmGetPhysicalAddress (
     PVOID BaseAddress
    );


PVOID
MmGetVirtualForPhysical (
     PHYSICAL_ADDRESS PhysicalAddress
    );


PVOID
MmAllocateContiguousMemory (
     ULONG NumberOfBytes,
     PHYSICAL_ADDRESS HighestAcceptableAddress
    );


void
MmFreeContiguousMemory (
     PVOID BaseAddress
    );


PVOID
MmAllocateNonCachedMemory (
     ULONG NumberOfBytes
    );


void
MmFreeNonCachedMemory (
     PVOID BaseAddress,
     ULONG NumberOfBytes
    );


BOOLEAN
MmIsAddressValid (
     PVOID VirtualAddress
    );



BOOLEAN
MmIsNonPagedSystemAddressValid (
     PVOID VirtualAddress
    );


ULONG
MmSizeOfMdl(
     PVOID Base,
     ULONG Length
    );


PMDL
MmCreateMdl(
     PMDL MemoryDescriptorList ,
     PVOID Base,
     ULONG Length
    );


PVOID
MmLockPagableDataSection(
     PVOID AddressWithinSection
    );


void
MmLockPagableSectionByHandle (
     PVOID ImageSectionHandle
    );


void
MmLockPagedPool (
     PVOID Address,
     ULONG Size
    );


void
MmUnlockPagedPool (
     PVOID Address,
     ULONG Size
    );



void
MmResetDriverPaging (
     PVOID AddressWithinSection
    );



PVOID
MmPageEntireDriver (
     PVOID AddressWithinSection
    );


void
MmUnlockPagableImageSection(
     PVOID ImageSectionHandle
    );



HANDLE
MmSecureVirtualMemory (
     PVOID Address,
     ULONG Size,
     ULONG ProbeMode
    );


void
MmUnsecureVirtualMemory (
     HANDLE SecureHandle
    );


NTSTATUS
MmMapViewInSystemSpace (
     PVOID Section,
     PVOID *MappedBase,
     PULONG ViewSize
    );


NTSTATUS
MmUnmapViewInSystemSpace (
     PVOID MappedBase
    );














































































































typedef NTSTATUS (*PMM_SNAPSHOT_POOL_PAGE)(
     PVOID Address,
     ULONG Size,
     PSYSTEM_POOL_INFORMATION PoolInformation,
     PSYSTEM_POOL_ENTRY *PoolEntryInfo,
     ULONG Length,
      PULONG RequiredLength
    );

NTSTATUS
MmSnapShotPool(
     POOL_TYPE PoolType,
     PMM_SNAPSHOT_POOL_PAGE SnapShotPoolPage,
     PSYSTEM_POOL_INFORMATION PoolInformation,
     ULONG Length,
      PULONG RequiredLength
    );



void
MmInitializeSpecialPool (
    void
    );

PVOID
MmAllocateSpecialPool (
     ULONG NumberOfBytes,
     ULONG Tag
    );

void
MmFreeSpecialPool (
     PVOID P
    );

extern ULONG MmSpecialPoolTag;
extern PVOID MmSpecialPoolStart;
extern PVOID MmSpecialPoolEnd;











BOOLEAN
MmRaisePoolQuota(
     POOL_TYPE PoolType,
     ULONG OldQuotaLimit,
     PULONG NewQuotaLimit
    );

void
MmReturnPoolQuota(
     POOL_TYPE PoolType,
     ULONG ReturnedQuota
    );





void
MmZeroPageThread (
    void
    );

NTSTATUS
MmCopyVirtualMemory(
     PEPROCESS FromProcess,
     PVOID FromAddress,
     PEPROCESS ToProcess,
     PVOID ToAddress,
     ULONG BufferSize,
     KPROCESSOR_MODE PreviousMode,
     PULONG NumberOfBytesCopied
    );

void
MmMapMemoryDumpMdl(
      PMDL MemoryDumpMdl
    );








typedef
void
(*PBANKED_SECTION_ROUTINE) (
     ULONG ReadBank,
     ULONG WriteBank,
     PVOID Context
    );



NTSTATUS
MmSetBankedSection(
     HANDLE ProcessHandle,
     PVOID VirtualAddress,
     ULONG BankLength,
     BOOLEAN ReadWriteBank,
     PBANKED_SECTION_ROUTINE BankRoutine,
     PVOID Context);



BOOLEAN
MmIsSystemAddressAccessable (
     PVOID VirtualAddress
    );

BOOLEAN
MmVerifyImageIsOkForMpUse(
     PVOID BaseAddress
    );

NTSTATUS
MmMemoryUsage (
     PVOID Buffer,
     ULONG Size,
     ULONG Type,
     PULONG Length
    );





























extern POBJECT_TYPE LpcPortObjectType;





BOOLEAN
LpcInitSystem( void );

void
LpcExitThread(
    PETHREAD Thread
    );

void
LpcDumpThread(
    PETHREAD Thread,
     POB_DUMP_CONTROL Control 
    );

NTSTATUS
LpcRequestPort(
     PVOID PortAddress,
     PPORT_MESSAGE RequestMessage
    );

NTSTATUS
LpcRequestWaitReplyPort(
     PVOID PortAddress,
     PPORT_MESSAGE RequestMessage,
     PPORT_MESSAGE ReplyMessage
    );







extern ULONG LpcCallOperationCount;
extern ULONG LpcCallBackOperationCount;
extern ULONG LpcDatagramOperationCount;




typedef struct _LPCP_NONPAGED_PORT_QUEUE {
    KSEMAPHORE Semaphore;       
                                
    struct _LPCP_PORT_OBJECT *BackPointer;
} LPCP_NONPAGED_PORT_QUEUE, *PLPCP_NONPAGED_PORT_QUEUE;

typedef struct _LPCP_PORT_QUEUE {
    PLPCP_NONPAGED_PORT_QUEUE NonPagedPortQueue;
    PKSEMAPHORE Semaphore;      
                                
    LIST_ENTRY ReceiveHead;     
} LPCP_PORT_QUEUE, *PLPCP_PORT_QUEUE;









typedef struct _LPCP_PORT_ZONE {
    KEVENT FreeEvent;           
                                
    ULONG MaxPoolUsage;
    ULONG GrowSize;
    ZONE_HEADER Zone;
} LPCP_PORT_ZONE, *PLPCP_PORT_ZONE;





typedef struct _LPCP_PORT_OBJECT {
    ULONG Length;
    ULONG Flags;
    struct _LPCP_PORT_OBJECT *ConnectionPort;
    struct _LPCP_PORT_OBJECT *ConnectedPort;
    LPCP_PORT_QUEUE MsgQueue;
    CLIENT_ID Creator;
    PVOID ClientSectionBase;
    PVOID ServerSectionBase;
    PVOID PortContext;
    ULONG MaxMessageLength;
    ULONG MaxConnectionInfoLength;
    PETHREAD ClientThread;
    SECURITY_QUALITY_OF_SERVICE SecurityQos;
    SECURITY_CLIENT_CONTEXT StaticSecurity;
    LIST_ENTRY LpcReplyChainHead;           
    LIST_ENTRY LpcDataInfoChainHead;        
} LPCP_PORT_OBJECT, *PLPCP_PORT_OBJECT;













typedef struct _LPCP_MESSAGE {
    union {
        LIST_ENTRY Entry;
        struct {
            SINGLE_LIST_ENTRY FreeEntry;
            ULONG Reserved0;
        };
    };
    USHORT Reserved1;
    USHORT ZoneIndex;
    ULONG Reserved;
    PETHREAD RepliedToThread;               
                                            
    PVOID PortContext;                      
    PORT_MESSAGE Request;
} LPCP_MESSAGE, *PLPCP_MESSAGE;














typedef struct _LPCP_CONNECTION_MESSAGE {
    PORT_VIEW ClientView;
    PLPCP_PORT_OBJECT ClientPort;
    PVOID SectionToMap;
    REMOTE_PORT_VIEW ServerView;
} LPCP_CONNECTION_MESSAGE, *PLPCP_CONNECTION_MESSAGE;




























void
DbgkCreateThread(
    PVOID StartAddress
    );

void
DbgkExitThread(
    NTSTATUS ExitStatus
    );

void
DbgkExitProcess(
    NTSTATUS ExitStatus
    );

void
DbgkMapViewOfSection(
     HANDLE SectionHandle,
     PVOID BaseAddress,
     ULONG SectionOffset,
     ULONG ViewSize
    );

void
DbgkUnMapViewOfSection(
     PVOID BaseAddress
    );

BOOLEAN
DbgkForwardException (
     PEXCEPTION_RECORD ExceptionRecord,
     BOOLEAN DebugException,
     BOOLEAN SecondChance
    );














































































typedef USHORT UPDATE_SEQUENCE_NUMBER, *PUPDATE_SEQUENCE_NUMBER;






typedef struct _MULTI_SECTOR_HEADER {

    
    
    

    UCHAR Signature[4];

    
    
    
    
    
    

    USHORT UpdateSequenceArrayOffset;

    
    
    

    USHORT UpdateSequenceArraySize;

} MULTI_SECTOR_HEADER, *PMULTI_SECTOR_HEADER;





typedef UPDATE_SEQUENCE_NUMBER UPDATE_SEQUENCE_ARRAY[1];

typedef UPDATE_SEQUENCE_ARRAY *PUPDATE_SEQUENCE_ARRAY;






typedef LARGE_INTEGER LSN, *PLSN;






extern LSN LfsZeroLsn;





typedef enum _LFS_RECORD_TYPE {

    LfsClientRecord = 1,
    LfsClientRestart

} LFS_RECORD_TYPE, *PLFS_RECORD_TYPE;





typedef enum _LFS_CONTEXT_MODE {

    LfsContextUndoNext = 1,
    LfsContextPrevious,
    LfsContextForward

} LFS_CONTEXT_MODE, *PLFS_CONTEXT_MODE;

typedef ULONG TRANSACTION_ID, *PTRANSACTION_ID;

typedef enum _TRANSACTION_STATE {

    TransactionUninitialized = 0,
    TransactionActive,
    TransactionPrepared,
    TransactionCommitted

} TRANSACTION_STATE, *PTRANSACTION_STATE;

typedef enum _LFS_INFO {

    LfsUseUsa = 1,
    LfsPackLog

} LFS_INFO, *PLFS_INFO;

typedef PVOID LFS_LOG_HANDLE, *PLFS_LOG_HANDLE;

typedef PVOID LFS_LOG_CONTEXT, *PLFS_LOG_CONTEXT;








typedef struct _LFS_WRITE_ENTRY {

    PVOID Buffer;
    ULONG ByteLength;

} LFS_WRITE_ENTRY, *PLFS_WRITE_ENTRY;






BOOLEAN
LfsInitializeLogFileService (
    );





typedef struct _LOG_FILE_INFORMATION {

    
    
    
    

    LONGLONG TotalAvailable;

    
    
    
    
    

    LONGLONG CurrentAvailable;

    
    
    
    
    
    

    LONGLONG TotalUndoCommitment;

    
    
    

    LONGLONG ClientUndoCommitment;

    
    
    
    

    LSN OldestLsn;
    LSN LastFlushedLsn;
    LSN LastLsn;

} LOG_FILE_INFORMATION, *PLOG_FILE_INFORMATION;

void
LfsInitializeLogFile (
     PFILE_OBJECT LogFile,
     USHORT MaximumClients,
     ULONG LogPageSize ,
     LONGLONG FileSize
    );

ULONG
LfsOpenLogFile (
     PFILE_OBJECT LogFile,
     UNICODE_STRING ClientName,
     USHORT MaximumClients,
     ULONG LogPageSize ,
     LONGLONG FileSize,
      PLFS_INFO LfsInfo,
     PLFS_LOG_HANDLE LogHandle
    );

void
LfsCloseLogFile (
     LFS_LOG_HANDLE LogHandle
    );

void
LfsDeleteLogHandle (
     LFS_LOG_HANDLE LogHandle
    );

void
LfsReadLogFileInformation (
     LFS_LOG_HANDLE LogHandle,
     PLOG_FILE_INFORMATION Buffer,
      PULONG Length
    );





void
LfsReadRestartArea (
     LFS_LOG_HANDLE LogHandle,
      PULONG BufferLength,
     PVOID Buffer,
     PLSN Lsn
    );

void
LfsWriteRestartArea (
     LFS_LOG_HANDLE LogHandle,
     ULONG BufferLength,
     PVOID Buffer,
     PLSN Lsn
    );

void
LfsSetBaseLsn (
     LFS_LOG_HANDLE LogHandle,
     LSN BaseLsn
    );







void
LfsResetUndoTotal (
     LFS_LOG_HANDLE LogHandle,
     ULONG NumberRecords,
     LONG ResetTotal
    );





BOOLEAN
LfsWrite (
     LFS_LOG_HANDLE LogHandle,
     ULONG NumberOfWriteEntries,
     PLFS_WRITE_ENTRY WriteEntries,
     LFS_RECORD_TYPE RecordType,
     TRANSACTION_ID *TransactionId ,
     LSN UndoNextLsn,
     LSN PreviousLsn,
     LONG UndoRequirement,
     PLSN Lsn
    );

BOOLEAN
LfsForceWrite (
     LFS_LOG_HANDLE LogHandle,
     ULONG NumberOfWriteEntries,
     PLFS_WRITE_ENTRY WriteEntries,
     LFS_RECORD_TYPE RecordType,
     TRANSACTION_ID *TransactionId ,
     LSN UndoNextLsn,
     LSN PreviousLsn,
     LONG UndoRequirement,
     PLSN Lsn
    );

void
LfsFlushToLsn (
     LFS_LOG_HANDLE LogHandle,
     LSN Lsn
    );





void
LfsReadLogRecord (
     LFS_LOG_HANDLE LogHandle,
     LSN FirstLsn,
     LFS_CONTEXT_MODE ContextMode,
     PLFS_LOG_CONTEXT Context,
     PLFS_RECORD_TYPE RecordType,
     TRANSACTION_ID *TransactionId,
     PLSN UndoNextLsn,
     PLSN PreviousLsn,
     PULONG BufferLength,
     PVOID *Buffer
    );

BOOLEAN
LfsReadNextLogRecord (
     LFS_LOG_HANDLE LogHandle,
      LFS_LOG_CONTEXT Context,
     PLFS_RECORD_TYPE RecordType,
     TRANSACTION_ID *TransactionId,
     PLSN UndoNextLsn,
     PLSN PreviousLsn,
     PLSN Lsn,
     PULONG BufferLength,
     PVOID *Buffer
    );

void
LfsTerminateLogQuery (
     LFS_LOG_HANDLE LogHandle,
     LFS_LOG_CONTEXT Context
    );

LSN
LfsQueryLastLsn (
     LFS_LOG_HANDLE LogHandle
    );








































typedef struct _PUBLIC_BCB {

    
    
    
    
    

    CSHORT NodeTypeCode;
    CSHORT NodeByteSize;

    
    
    

    ULONG MappedLength;
    LARGE_INTEGER MappedFileOffset;
} PUBLIC_BCB, *PPUBLIC_BCB;





typedef struct _CC_FILE_SIZES {

    LARGE_INTEGER AllocationSize;
    LARGE_INTEGER FileSize;
    LARGE_INTEGER ValidDataLength;

} CC_FILE_SIZES, *PCC_FILE_SIZES;






















typedef
BOOLEAN (*PACQUIRE_FOR_LAZY_WRITE) (
              PVOID Context,
              BOOLEAN Wait
             );





typedef
void (*PRELEASE_FROM_LAZY_WRITE) (
              PVOID Context
             );





typedef
BOOLEAN (*PACQUIRE_FOR_READ_AHEAD) (
              PVOID Context,
              BOOLEAN Wait
             );





typedef
void (*PRELEASE_FROM_READ_AHEAD) (
              PVOID Context
             );

typedef struct _CACHE_MANAGER_CALLBACKS {

    PACQUIRE_FOR_LAZY_WRITE AcquireForLazyWrite;
    PRELEASE_FROM_LAZY_WRITE ReleaseFromLazyWrite;
    PACQUIRE_FOR_READ_AHEAD AcquireForReadAhead;
    PRELEASE_FROM_READ_AHEAD ReleaseFromReadAhead;

} CACHE_MANAGER_CALLBACKS, *PCACHE_MANAGER_CALLBACKS;






typedef struct _CACHE_UNINITIALIZE_EVENT {
    struct _CACHE_UNINITIALIZE_EVENT *Next;
    KEVENT Event;
} CACHE_UNINITIALIZE_EVENT, *PCACHE_UNINITIALIZE_EVENT;





typedef
void (*PDIRTY_PAGE_ROUTINE) (
             PFILE_OBJECT FileObject,
             PLARGE_INTEGER FileOffset,
             ULONG Length,
             PLARGE_INTEGER OldestLsn,
             PLARGE_INTEGER NewestLsn,
             PVOID Context1,
             PVOID Context2
            );





typedef
void (*PFLUSH_TO_LSN) (
             PVOID LogHandle,
             LARGE_INTEGER Lsn
            );














extern ULONG CcThrowAway;





extern ULONG CcFastReadNoWait;
extern ULONG CcFastReadWait;
extern ULONG CcFastReadResourceMiss;
extern ULONG CcFastReadNotPossible;

extern ULONG CcFastMdlReadNoWait;
extern ULONG CcFastMdlReadWait;
extern ULONG CcFastMdlReadResourceMiss;
extern ULONG CcFastMdlReadNotPossible;

extern ULONG CcMapDataNoWait;
extern ULONG CcMapDataWait;
extern ULONG CcMapDataNoWaitMiss;
extern ULONG CcMapDataWaitMiss;

extern ULONG CcPinMappedDataCount;

extern ULONG CcPinReadNoWait;
extern ULONG CcPinReadWait;
extern ULONG CcPinReadNoWaitMiss;
extern ULONG CcPinReadWaitMiss;

extern ULONG CcCopyReadNoWait;
extern ULONG CcCopyReadWait;
extern ULONG CcCopyReadNoWaitMiss;
extern ULONG CcCopyReadWaitMiss;

extern ULONG CcMdlReadNoWait;
extern ULONG CcMdlReadWait;
extern ULONG CcMdlReadNoWaitMiss;
extern ULONG CcMdlReadWaitMiss;

extern ULONG CcReadAheadIos;

extern ULONG CcLazyWriteIos;
extern ULONG CcLazyWritePages;
extern ULONG CcDataFlushes;
extern ULONG CcDataPages;

extern PULONG CcMissCounter;






BOOLEAN
CcInitializeCacheManager (
    );






void
CcInitializeCacheMap (
     PFILE_OBJECT FileObject,
     PCC_FILE_SIZES FileSizes,
     BOOLEAN PinAccess,
     PCACHE_MANAGER_CALLBACKS Callbacks,
     PVOID LazyWriteContext
    );


BOOLEAN
CcUninitializeCacheMap (
     PFILE_OBJECT FileObject,
     PLARGE_INTEGER TruncateSize ,
     PCACHE_UNINITIALIZE_EVENT UninitializeCompleteEvent 
    );


void
CcSetFileSizes (
     PFILE_OBJECT FileObject,
     PCC_FILE_SIZES FileSizes
    );














BOOLEAN
CcPurgeCacheSection (
     PSECTION_OBJECT_POINTERS SectionObjectPointer,
     PLARGE_INTEGER FileOffset ,
     ULONG Length,
     BOOLEAN UninitializeCacheMaps
    );


void
CcSetDirtyPageThreshold (
     PFILE_OBJECT FileObject,
     ULONG DirtyPageThreshold
    );


void
CcFlushCache (
     PSECTION_OBJECT_POINTERS SectionObjectPointer,
     PLARGE_INTEGER FileOffset ,
     ULONG Length,
     PIO_STATUS_BLOCK IoStatus 
    );


void
CcZeroEndOfLastPage (
     PFILE_OBJECT FileObject
    );


BOOLEAN
CcZeroData (
     PFILE_OBJECT FileObject,
     PLARGE_INTEGER StartOffset,
     PLARGE_INTEGER EndOffset,
     BOOLEAN Wait
    );


void
CcRepinBcb (
     PVOID Bcb
    );


void
CcUnpinRepinnedBcb (
     PVOID Bcb,
     BOOLEAN WriteThrough,
     PIO_STATUS_BLOCK IoStatus
    );


PFILE_OBJECT
CcGetFileObjectFromSectionPtrs (
     PSECTION_OBJECT_POINTERS SectionObjectPointer
    );


PFILE_OBJECT
CcGetFileObjectFromBcb (
     PVOID Bcb
    );

















BOOLEAN
CcCanIWrite (
     PFILE_OBJECT FileObject,
     ULONG BytesToWrite,
     BOOLEAN Wait,
     BOOLEAN Retrying
    );

typedef
void (*PCC_POST_DEFERRED_WRITE) (
     PVOID Context1,
     PVOID Context2
    );


void
CcDeferWrite (
     PFILE_OBJECT FileObject,
     PCC_POST_DEFERRED_WRITE PostRoutine,
     PVOID Context1,
     PVOID Context2,
     ULONG BytesToWrite,
     BOOLEAN Retrying
    );







BOOLEAN
CcCopyRead (
     PFILE_OBJECT FileObject,
     PLARGE_INTEGER FileOffset,
     ULONG Length,
     BOOLEAN Wait,
     PVOID Buffer,
     PIO_STATUS_BLOCK IoStatus
    );


void
CcFastCopyRead (
     PFILE_OBJECT FileObject,
     ULONG FileOffset,
     ULONG Length,
     ULONG PageCount,
     PVOID Buffer,
     PIO_STATUS_BLOCK IoStatus
    );


BOOLEAN
CcCopyWrite (
     PFILE_OBJECT FileObject,
     PLARGE_INTEGER FileOffset,
     ULONG Length,
     BOOLEAN Wait,
     PVOID Buffer
    );


void
CcFastCopyWrite (
     PFILE_OBJECT FileObject,
     ULONG FileOffset,
     ULONG Length,
     PVOID Buffer
    );










void
CcMdlRead (
     PFILE_OBJECT FileObject,
     PLARGE_INTEGER FileOffset,
     ULONG Length,
     PMDL *MdlChain,
     PIO_STATUS_BLOCK IoStatus
    );






void
CcMdlReadComplete (
     PFILE_OBJECT FileObject,
     PMDL MdlChain
    );


void
CcMdlReadComplete2 (
     PFILE_OBJECT FileObject,
     PMDL MdlChain
    );


void
CcPrepareMdlWrite (
     PFILE_OBJECT FileObject,
     PLARGE_INTEGER FileOffset,
     ULONG Length,
     PMDL *MdlChain,
     PIO_STATUS_BLOCK IoStatus
    );






void
CcMdlWriteComplete (
     PFILE_OBJECT FileObject,
     PLARGE_INTEGER FileOffset,
     PMDL MdlChain
    );


void
CcMdlWriteComplete2 (
     PFILE_OBJECT FileObject,
     PLARGE_INTEGER FileOffset,
     PMDL MdlChain
    );



















void
CcScheduleReadAhead (
     PFILE_OBJECT FileObject,
     PLARGE_INTEGER FileOffset,
     ULONG Length
    );







void
CcSetReadAheadGranularity (
     PFILE_OBJECT FileObject,
     ULONG Granularity
    );








BOOLEAN
CcPinRead (
     PFILE_OBJECT FileObject,
     PLARGE_INTEGER FileOffset,
     ULONG Length,
     BOOLEAN Wait,
     PVOID *Bcb,
     PVOID *Buffer
    );


BOOLEAN
CcMapData (
     PFILE_OBJECT FileObject,
     PLARGE_INTEGER FileOffset,
     ULONG Length,
     BOOLEAN Wait,
     PVOID *Bcb,
     PVOID *Buffer
    );


BOOLEAN
CcPinMappedData (
     PFILE_OBJECT FileObject,
     PLARGE_INTEGER FileOffset,
     ULONG Length,
     BOOLEAN Wait,
      PVOID *Bcb
    );


BOOLEAN
CcPreparePinWrite (
     PFILE_OBJECT FileObject,
     PLARGE_INTEGER FileOffset,
     ULONG Length,
     BOOLEAN Zero,
     BOOLEAN Wait,
     PVOID *Bcb,
     PVOID *Buffer
    );


void
CcSetDirtyPinnedData (
     PVOID BcbVoid,
     PLARGE_INTEGER Lsn 
    );


void
CcUnpinData (
     PVOID Bcb
    );


void
CcSetBcbOwnerPointer (
     PVOID Bcb,
     PVOID OwnerPointer
    );


void
CcUnpinDataForThread (
     PVOID Bcb,
     ERESOURCE_THREAD ResourceThreadId
    );








void
CcSetAdditionalCacheAttributes (
     PFILE_OBJECT FileObject,
     BOOLEAN DisableReadAhead,
     BOOLEAN DisableWriteBehind
    );


void
CcSetLogHandleForFile (
     PFILE_OBJECT FileObject,
     PVOID LogHandle,
     PFLUSH_TO_LSN FlushToLsnRoutine
    );


LARGE_INTEGER
CcGetDirtyPages (
     PVOID LogHandle,
     PDIRTY_PAGE_ROUTINE DirtyPageRoutine,
     PVOID Context1,
     PVOID Context2
    );


BOOLEAN
CcIsThereDirtyData (
     PVPB Vpb
    );


LARGE_INTEGER
CcGetLsnForFileObject(
     PFILE_OBJECT FileObject,
     PLARGE_INTEGER OldestLsn 
    );







































































#pragma warning(disable:4103)

#pragma pack(push)

#pragma pack(1)





typedef struct _OEM_FONT_FILE_HEADER {
    USHORT Version;
    ULONG FileSize;
    UCHAR Copyright[60];
    USHORT Type;
    USHORT Points;
    USHORT VerticleResolution;
    USHORT HorizontalResolution;
    USHORT Ascent;
    USHORT InternalLeading;
    USHORT ExternalLeading;
    UCHAR Italic;
    UCHAR Underline;
    UCHAR StrikeOut;
    USHORT Weight;
    UCHAR CharacterSet;
    USHORT PixelWidth;
    USHORT PixelHeight;
    UCHAR Family;
    USHORT AverageWidth;
    USHORT MaximumWidth;
    UCHAR FirstCharacter;
    UCHAR LastCharacter;
    UCHAR DefaultCharacter;
    UCHAR BreakCharacter;
    USHORT WidthInBytes;
    ULONG Device;
    ULONG Face;
    ULONG BitsPointer;
    ULONG BitsOffset;
    UCHAR Filler;
    struct {
        USHORT Width;
        USHORT Offset;
    } Map[1];
} OEM_FONT_FILE_HEADER, *POEM_FONT_FILE_HEADER;



























#pragma warning(disable:4103)

#pragma pack(pop)















typedef struct _DEVICE_DESCRIPTION {
    ULONG Version;
    BOOLEAN Master;
    BOOLEAN ScatterGather;
    BOOLEAN DemandMode;
    BOOLEAN AutoInitialize;
    BOOLEAN Dma32BitAddresses;
    BOOLEAN IgnoreCount;
    BOOLEAN Reserved1;          
    BOOLEAN Reserved2;          
    ULONG BusNumber;
    ULONG DmaChannel;
    INTERFACE_TYPE  InterfaceType;
    DMA_WIDTH DmaWidth;
    DMA_SPEED DmaSpeed;
    ULONG MaximumLength;
    ULONG DmaPort;
} DEVICE_DESCRIPTION, *PDEVICE_DESCRIPTION;














typedef struct _PARTITION_DESCRIPTOR {
    UCHAR ActiveFlag;               
    UCHAR StartingTrack;            
    UCHAR StartingCylinderLsb;      
    UCHAR StartingCylinderMsb;      
    UCHAR PartitionType;            
    UCHAR EndingTrack;              
    UCHAR EndingCylinderLsb;        
    UCHAR EndingCylinderMsb;        
    UCHAR StartingSectorLsb0;       
    UCHAR StartingSectorLsb1;
    UCHAR StartingSectorMsb0;
    UCHAR StartingSectorMsb1;
    UCHAR PartitionLengthLsb0;      
    UCHAR PartitionLengthLsb1;
    UCHAR PartitionLengthMsb0;
    UCHAR PartitionLengthMsb1;
} PARTITION_DESCRIPTOR, *PPARTITION_DESCRIPTOR;








































typedef
BOOLEAN
(*PHAL_RESET_DISPLAY_PARAMETERS) (
     ULONG Columns,
     ULONG Rows
    );

__declspec(dllimport)
void
HalAcquireDisplayOwnership (
     PHAL_RESET_DISPLAY_PARAMETERS  ResetDisplayParameters
    );



__declspec(dllimport)
void
HalDisplayString (
    PUCHAR String
    );

__declspec(dllimport)
void
HalQueryDisplayParameters (
     PULONG WidthInCharacters,
     PULONG HeightInLines,
     PULONG CursorColumn,
     PULONG CursorRow
    );

__declspec(dllimport)
void
HalSetDisplayParameters (
     ULONG CursorColumn,
     ULONG CursorRow
    );

__declspec(dllimport)
BOOLEAN
HalInitSystem (
     ULONG Phase,
     PLOADER_PARAMETER_BLOCK LoaderBlock
    );

__declspec(dllimport)
void
HalProcessorIdle(
    void
    );

__declspec(dllimport)
void
HalReportResourceUsage (
    void
    );

__declspec(dllimport)
ULONG
HalSetTimeIncrement (
     ULONG DesiredIncrement
    );





__declspec(dllimport)
ARC_STATUS
HalGetEnvironmentVariable (
     PCHAR Variable,
     USHORT Length,
     PCHAR Buffer
    );

__declspec(dllimport)
ARC_STATUS
HalSetEnvironmentVariable (
     PCHAR Variable,
     PCHAR Value
    );

























































































                                                

                                                

                                                

__declspec(dllimport)
void
HalHandleNMI (
      PVOID NmiInformation
    );


                                                
__declspec(dllimport)                                        
void                                            
KeFlushWriteBuffer (                            
    void                                        
    );                                          
                                                








































__declspec(dllimport)
void
HalCalibratePerformanceCounter (
     volatile PLONG Number
    );

__declspec(dllimport)
ULONG
HalSetProfileInterval (
     ULONG Interval
    );


__declspec(dllimport)
void
HalStartProfileInterrupt (
    KPROFILE_SOURCE ProfileSource
    );

__declspec(dllimport)
void
HalStopProfileInterrupt (
    KPROFILE_SOURCE ProfileSource
    );





__declspec(dllimport)
BOOLEAN
HalQueryRealTimeClock (
     PTIME_FIELDS TimeFields
    );

__declspec(dllimport)
BOOLEAN
HalSetRealTimeClock (
     PTIME_FIELDS TimeFields
    );



__declspec(dllimport)
void
_fastcall
HalRequestSoftwareInterrupt (
    KIRQL RequestIrql
    );

ULONG
_fastcall
HalSystemVectorDispatchEntry (
    ULONG Vector,
    PKINTERRUPT_ROUTINE **FlatDispatch,
    PKINTERRUPT_ROUTINE *NoConnection
   );







__declspec(dllimport)
void
HalReturnToFirmware (
     FIRMWARE_REENTRY Routine
    );





__declspec(dllimport)
void
HalDisableSystemInterrupt (
     ULONG Vector,
     KIRQL Irql
    );

__declspec(dllimport)
BOOLEAN
HalEnableSystemInterrupt (
     ULONG Vector,
     KIRQL Irql,
     KINTERRUPT_MODE InterruptMode
    );






__declspec(dllimport)
NTSTATUS
HalAssignSlotResources (
     PUNICODE_STRING RegistryPath,
     PUNICODE_STRING DriverClassName ,
     PDRIVER_OBJECT DriverObject,
     PDEVICE_OBJECT DeviceObject ,
     INTERFACE_TYPE BusType,
     ULONG BusNumber,
     ULONG SlotNumber,
      PCM_RESOURCE_LIST *AllocatedResources
    );

__declspec(dllimport)
ULONG
HalGetInterruptVector(
     INTERFACE_TYPE  InterfaceType,
     ULONG BusNumber,
     ULONG BusInterruptLevel,
     ULONG BusInterruptVector,
     PKIRQL Irql,
     PKAFFINITY Affinity
    );

__declspec(dllimport)
ULONG
HalSetBusData(
     BUS_DATA_TYPE BusDataType,
     ULONG BusNumber,
     ULONG SlotNumber,
     PVOID Buffer,
     ULONG Length
    );

__declspec(dllimport)
ULONG
HalSetBusDataByOffset(
     BUS_DATA_TYPE BusDataType,
     ULONG BusNumber,
     ULONG SlotNumber,
     PVOID Buffer,
     ULONG Offset,
     ULONG Length
    );


__declspec(dllimport)
BOOLEAN
HalTranslateBusAddress(
     INTERFACE_TYPE  InterfaceType,
     ULONG BusNumber,
     PHYSICAL_ADDRESS BusAddress,
      PULONG AddressSpace,
     PPHYSICAL_ADDRESS TranslatedAddress
    );




















__declspec(dllimport)
NTSTATUS
HalAllocateAdapterChannel(
     PADAPTER_OBJECT AdapterObject,
     PWAIT_CONTEXT_BLOCK Wcb,
     ULONG NumberOfMapRegisters,
     PDRIVER_CONTROL ExecutionRoutine
    );


__declspec(dllimport)
PVOID
HalAllocateCommonBuffer(
     PADAPTER_OBJECT AdapterObject,
     ULONG Length,
     PPHYSICAL_ADDRESS LogicalAddress,
     BOOLEAN CacheEnabled
    );

__declspec(dllimport)
PVOID
HalAllocateCrashDumpRegisters(
     PADAPTER_OBJECT AdapterObject,
      PULONG NumberOfMapRegisters
    );

__declspec(dllimport)
void
HalFreeCommonBuffer(
     PADAPTER_OBJECT AdapterObject,
     ULONG Length,
     PHYSICAL_ADDRESS LogicalAddress,
     PVOID VirtualAddress,
     BOOLEAN CacheEnabled
    );

__declspec(dllimport)
ULONG
HalGetBusData(
     BUS_DATA_TYPE BusDataType,
     ULONG BusNumber,
     ULONG SlotNumber,
     PVOID Buffer,
     ULONG Length
    );

__declspec(dllimport)
ULONG
HalGetBusDataByOffset(
     BUS_DATA_TYPE BusDataType,
     ULONG BusNumber,
     ULONG SlotNumber,
     PVOID Buffer,
     ULONG Offset,
     ULONG Length
    );

__declspec(dllimport)
PADAPTER_OBJECT
HalGetAdapter(
     PDEVICE_DESCRIPTION DeviceDescription,
      PULONG NumberOfMapRegisters
    );




__declspec(dllimport)
NTSTATUS
HalAdjustResourceList (
      PIO_RESOURCE_REQUIREMENTS_LIST   *pResourceList
    );





__declspec(dllimport)
BOOLEAN
HalMakeBeep(
     ULONG Frequency
    );








__declspec(dllimport)
ULONG
HalReadDmaCounter(
     PADAPTER_OBJECT AdapterObject
    );


__declspec(dllimport)
void
IoAssignDriveLetters(
    PLOADER_PARAMETER_BLOCK LoaderBlock,
    PSTRING NtDeviceName,
     PUCHAR NtSystemPath,
     PSTRING NtSystemPathString
    );



__declspec(dllimport)
BOOLEAN
IoFlushAdapterBuffers(
     PADAPTER_OBJECT AdapterObject,
     PMDL Mdl,
     PVOID MapRegisterBase,
     PVOID CurrentVa,
     ULONG Length,
     BOOLEAN WriteToDevice
    );

__declspec(dllimport)
void
IoFreeAdapterChannel(
     PADAPTER_OBJECT AdapterObject
    );

__declspec(dllimport)
void
IoFreeMapRegisters(
    PADAPTER_OBJECT AdapterObject,
    PVOID MapRegisterBase,
    ULONG NumberOfMapRegisters
   );

__declspec(dllimport)
PHYSICAL_ADDRESS
IoMapTransfer(
     PADAPTER_OBJECT AdapterObject,
     PMDL Mdl,
     PVOID MapRegisterBase,
     PVOID CurrentVa,
      PULONG Length,
     BOOLEAN WriteToDevice
    );

__declspec(dllimport)
NTSTATUS
IoReadPartitionTable(
     PDEVICE_OBJECT DeviceObject,
     ULONG SectorSize,
     BOOLEAN ReturnRecognizedPartitions,
     struct _DRIVE_LAYOUT_INFORMATION **PartitionBuffer
    );

__declspec(dllimport)
NTSTATUS
IoSetPartitionInformation(
     PDEVICE_OBJECT DeviceObject,
     ULONG SectorSize,
     ULONG PartitionNumber,
     ULONG PartitionType
    );

__declspec(dllimport)
NTSTATUS
IoWritePartitionTable(
     PDEVICE_OBJECT DeviceObject,
     ULONG SectorSize,
     ULONG SectorsPerTrack,
     ULONG NumberOfHeads,
     struct _DRIVE_LAYOUT_INFORMATION *PartitionBuffer
    );







__declspec(dllimport)
BOOLEAN
HalAllProcessorsStarted (
    void
    );

__declspec(dllimport)
void
HalInitializeProcessor (
     ULONG Number
    );

__declspec(dllimport)
BOOLEAN
HalStartNextProcessor (
     PLOADER_PARAMETER_BLOCK LoaderBlock,
     PKPROCESSOR_STATE ProcessorState
    );

__declspec(dllimport)
void
HalRequestIpi (
     ULONG Mask
    );







__declspec(dllimport)
BOOLEAN
KdPortInitialize (
    PDEBUG_PARAMETERS DebugParameters,
    PLOADER_PARAMETER_BLOCK LoaderBlock,
    BOOLEAN Initialize
    );

__declspec(dllimport)
ULONG
KdPortGetByte (
     PUCHAR Input
    );

__declspec(dllimport)
ULONG
KdPortPollByte (
     PUCHAR Input
    );

__declspec(dllimport)
void
KdPortPutByte (
     UCHAR Output
    );

__declspec(dllimport)
void
KdPortRestore (
    void
    );

__declspec(dllimport)
void
KdPortSave (
    void
    );









__declspec(dllimport)
LARGE_INTEGER
KeQueryPerformanceCounter (
    PLARGE_INTEGER PerformanceFrequency 
   );






__declspec(dllimport)
void
KeStallExecutionProcessor (
     ULONG MicroSeconds
    );














typedef
void
(*PDEVICE_CONTROL_COMPLETION)(
     struct _DEVICE_CONTROL_CONTEXT     *ControlContext
    );

typedef struct _DEVICE_CONTROL_CONTEXT {
    NTSTATUS                Status;
    PDEVICE_HANDLER_OBJECT  DeviceHandler;
    PDEVICE_OBJECT          DeviceObject;
    ULONG                   ControlCode;
    PVOID                   Buffer;
    PULONG                  BufferLength;
    PVOID                   Context;
} DEVICE_CONTROL_CONTEXT, *PDEVICE_CONTROL_CONTEXT;



typedef struct _HAL_DEVICE_CONTROL {
    
    
    
    struct _BUS_HANDLER         *Handler;
    struct _BUS_HANDLER         *RootHandler;

    
    
    
    PVOID                       BusExtensionData;

    
    
    
    ULONG                       HalReserved[4];

    
    
    
    ULONG                       BusExtenderReserved[4];

    
    
    
    PDEVICE_CONTROL_COMPLETION  CompletionRoutine;
    DEVICE_CONTROL_CONTEXT      DeviceControl;

} HAL_DEVICE_CONTROL_CONTEXT, *PHAL_DEVICE_CONTROL_CONTEXT;


typedef
ULONG
(*PGETSETBUSDATA)(
     struct _BUS_HANDLER *BusHandler,
     struct _BUS_HANDLER *RootHandler,
     ULONG SlotNumber,
     PVOID Buffer,
     ULONG Offset,
     ULONG Length
    );

typedef
ULONG
(*PGETINTERRUPTVECTOR)(
     struct _BUS_HANDLER *BusHandler,
     struct _BUS_HANDLER *RootHandler,
     ULONG BusInterruptLevel,
     ULONG BusInterruptVector,
     PKIRQL Irql,
     PKAFFINITY Affinity
    );

typedef
BOOLEAN
(*PTRANSLATEBUSADDRESS)(
     struct _BUS_HANDLER *BusHandler,
     struct _BUS_HANDLER *RootHandler,
     PHYSICAL_ADDRESS BusAddress,
      PULONG AddressSpace,
     PPHYSICAL_ADDRESS TranslatedAddress
    );

typedef NTSTATUS
(*PADJUSTRESOURCELIST)(
     struct _BUS_HANDLER *BusHandler,
     struct _BUS_HANDLER *RootHandler,
      PIO_RESOURCE_REQUIREMENTS_LIST   *pResourceList
    );

typedef PDEVICE_HANDLER_OBJECT
(*PREFERENCE_DEVICE_HANDLER)(
     struct _BUS_HANDLER      *BusHandler,
     struct _BUS_HANDLER      *RootHandler,
     ULONG                    SlotNumber
    );






typedef NTSTATUS
(*PASSIGNSLOTRESOURCES)(
     struct _BUS_HANDLER      *BusHandler,
     struct _BUS_HANDLER      *RootHandler,
     PUNICODE_STRING          RegistryPath,
     PUNICODE_STRING          DriverClassName       ,
     PDRIVER_OBJECT           DriverObject,
     PDEVICE_OBJECT           DeviceObject          ,
     ULONG                    SlotNumber,
      PCM_RESOURCE_LIST   *AllocatedResources
    );

typedef
NTSTATUS
(*PQUERY_BUS_SLOTS)(
     struct _BUS_HANDLER      *BusHandler,
     struct _BUS_HANDLER      *RootHandler,
     ULONG                    BufferSize,
     PULONG                  SlotNumbers,
     PULONG                  ReturnedLength
    );

typedef ULONG
(*PGET_SET_DEVICE_DATA)(
     struct _BUS_HANDLER      *BusHandler,
     struct _BUS_HANDLER      *RootHandler,
     PDEVICE_HANDLER_OBJECT   DeviceHandler,
     ULONG                    DataType,
     PVOID                    Buffer,
     ULONG                    Offset,
     ULONG                    Length
    );

typedef
NTSTATUS
(*PDEVICE_CONTROL)(
     PHAL_DEVICE_CONTROL_CONTEXT Context
    );


typedef
NTSTATUS
(*PHIBERNATEBRESUMEBUS)(
     struct _BUS_HANDLER      *BusHandler,
     struct _BUS_HANDLER      *RootHandler
    );







typedef struct _SUPPORTED_RANGE {
    struct _SUPPORTED_RANGE     *Next;
    ULONG                       SystemAddressSpace;
    LONGLONG                    SystemBase;
    LONGLONG                    Base;
    LONGLONG                    Limit;
} SUPPORTED_RANGE, *PSUPPORTED_RANGE;

typedef struct _SUPPORTED_RANGES {
    USHORT              Version;
    BOOLEAN             Sorted;
    UCHAR               Reserved;

    ULONG               NoIO;
    SUPPORTED_RANGE     IO;

    ULONG               NoMemory;
    SUPPORTED_RANGE     Memory;

    ULONG               NoPrefetchMemory;
    SUPPORTED_RANGE     PrefetchMemory;

    ULONG               NoDma;
    SUPPORTED_RANGE     Dma;
} SUPPORTED_RANGES, *PSUPPORTED_RANGES;







typedef struct _BUS_HANDLER {
    
    
    

    ULONG                       Version;

    
    
    

    INTERFACE_TYPE              InterfaceType;
    BUS_DATA_TYPE               ConfigurationType;
    ULONG                       BusNumber;

    
    
    
    

    PDEVICE_OBJECT              DeviceObject;

    
    
    

    struct _BUS_HANDLER         *ParentHandler;

    
    
    

    PVOID                       BusData;

    
    
    

    ULONG                       DeviceControlExtensionSize;

    
    
    

    PSUPPORTED_RANGES           BusAddresses;

    
    
    

    ULONG                       Reserved[4];

    
    
    

    PGETSETBUSDATA              GetBusData;
    PGETSETBUSDATA              SetBusData;
    PADJUSTRESOURCELIST         AdjustResourceList;
    PASSIGNSLOTRESOURCES        AssignSlotResources;
    PGETINTERRUPTVECTOR         GetInterruptVector;
    PTRANSLATEBUSADDRESS        TranslateBusAddress;

    PHIBERNATEBRESUMEBUS        HibernateBus;
    PHIBERNATEBRESUMEBUS        ResumeBus;

    PVOID                       DeleteBus;              

    PQUERY_BUS_SLOTS            QueryBusSlots;
    PREFERENCE_DEVICE_HANDLER   ReferenceDeviceHandler;
    PDEVICE_CONTROL             DeviceControl;
    PGET_SET_DEVICE_DATA        GetDeviceData;
    PGET_SET_DEVICE_DATA        SetDeviceData;

} BUS_HANDLER, *PBUS_HANDLER;


void
HalpInitBusHandler (
    void
    );

typedef
NTSTATUS
(*PINSTALL_BUS_HANDLER)(
       PBUS_HANDLER   Bus
      );

typedef
NTSTATUS
(*pHalRegisterBusHandler)(
     INTERFACE_TYPE          InterfaceType,
     BUS_DATA_TYPE           AssociatedConfigurationSpace,
     ULONG                   BusNumber,
     INTERFACE_TYPE          ParentBusType,
     ULONG                   ParentBusNumber,
     ULONG                   SizeofBusExtensionData,
     PINSTALL_BUS_HANDLER    InstallBusHandlers,
     PBUS_HANDLER           *BusHandler
    );

NTSTATUS
HaliRegisterBusHandler (
     INTERFACE_TYPE          InterfaceType,
     BUS_DATA_TYPE           AssociatedConfigurationSpace,
     ULONG                   BusNumber,
     INTERFACE_TYPE          ParentBusType,
     ULONG                   ParentBusNumber,
     ULONG                   SizeofBusExtensionData,
     PINSTALL_BUS_HANDLER    InstallBusHandlers,
     PBUS_HANDLER           *BusHandler
    );


typedef
PBUS_HANDLER
(_fastcall *pHalHandlerForBus) (
     INTERFACE_TYPE InterfaceType,
     ULONG          BusNumber
    );


PBUS_HANDLER
_fastcall
HaliReferenceHandlerForBus (
     INTERFACE_TYPE InterfaceType,
     ULONG          BusNumber
    );

PBUS_HANDLER
_fastcall
HaliHandlerForBus (
     INTERFACE_TYPE InterfaceType,
     ULONG          BusNumber
    );

typedef void
(_fastcall *pHalRefernceBusHandler) (
     PBUS_HANDLER   BusHandler
    );

void
_fastcall
HaliDerefernceBusHandler (
     PBUS_HANDLER   BusHandler
    );

typedef
PBUS_HANDLER
(_fastcall *pHalHandlerForConfigSpace) (
     BUS_DATA_TYPE  ConfigSpace,
     ULONG          BusNumber
    );

PBUS_HANDLER
_fastcall
HaliHandlerForConfigSpace (
     BUS_DATA_TYPE  ConfigSpace,
     ULONG          BusNumber
    );


typedef
void
(_fastcall *pHalReferenceBusHandler) (
     PBUS_HANDLER   BusHandler
    );


void
_fastcall
HaliReferenceBusHandler (
     PBUS_HANDLER   BusHandler
    );

void
_fastcall
HaliDereferenceBusHandler (
     PBUS_HANDLER   BusHandler
    );


NTSTATUS
HaliQueryBusSlots (
     PBUS_HANDLER             BusHandler,
     ULONG                    BufferSize,
     PULONG                  SlotNumbers,
     PULONG                  ReturnedLength
    );

NTSTATUS
HaliDeviceControl (
     PDEVICE_HANDLER_OBJECT   DeviceHandler,
     PDEVICE_OBJECT           DeviceObject,
     ULONG                    ControlCode,
      PVOID                Buffer ,
      PULONG               BufferLength ,
     PVOID                    Context,
     PDEVICE_CONTROL_COMPLETION CompletionRoutine
    );

NTSTATUS
HaliCompleteDeviceControl (
     PHAL_DEVICE_CONTROL_CONTEXT Context
    );

typedef
NTSTATUS
(*pHalCompleteDeviceControl) (
     PHAL_DEVICE_CONTROL_CONTEXT Context
    );

NTSTATUS
HaliAdjustResourceListRange (
     PSUPPORTED_RANGES                    SupportedRanges,
     PSUPPORTED_RANGE                     InterruptRanges,
      PIO_RESOURCE_REQUIREMENTS_LIST   *pResourceList
    );









typedef enum _HAL_QUERY_INFORMATION_CLASS {
    HalInstalledBusInformation,
    HalProfileSourceInformation,
    HalSystemDockInformation,
    HalPowerInformation,
    HalProcessorSpeedInformation,
    HalCallbackInformation,
    HalMapRegisterInformation,
    HalMcaLogInformation,
    HalFrameBufferCachingInformation,
    HalDisplayBiosInformation
    
} HAL_QUERY_INFORMATION_CLASS, *PHAL_QUERY_INFORMATION_CLASS;


typedef enum _HAL_SET_INFORMATION_CLASS {
    HalProfileSourceInterval,
    HalProfileSourceInterruptHandler,
    HalMcaRegisterDriver
} HAL_SET_INFORMATION_CLASS, *PHAL_SET_INFORMATION_CLASS;


typedef
NTSTATUS
(*pHalQuerySystemInformation)(
     HAL_QUERY_INFORMATION_CLASS  InformationClass,
     ULONG     BufferSize,
      PVOID Buffer,
     PULONG   ReturnedLength
    );

NTSTATUS
HaliQuerySystemInformation(
     HAL_SET_INFORMATION_CLASS    InformationClass,
     ULONG     BufferSize,
      PVOID Buffer,
     PULONG   ReturnedLength
    );

typedef
NTSTATUS
(*pHalSetSystemInformation)(
     HAL_SET_INFORMATION_CLASS    InformationClass,
     ULONG     BufferSize,
     PVOID     Buffer
    );

NTSTATUS
HaliSetSystemInformation(
     HAL_SET_INFORMATION_CLASS    InformationClass,
     ULONG     BufferSize,
     PVOID     Buffer
    );

typedef
void
(_fastcall *pHalExamineMBR)(
     PDEVICE_OBJECT DeviceObject,
     ULONG SectorSize,
     ULONG MBRTypeIdentifier,
     PVOID *Buffer
    );

typedef
void
(_fastcall *pHalIoAssignDriveLetters)(
     struct _LOADER_PARAMETER_BLOCK *LoaderBlock,
     PSTRING NtDeviceName,
     PUCHAR NtSystemPath,
     PSTRING NtSystemPathString
    );

typedef
NTSTATUS
(_fastcall *pHalIoReadPartitionTable)(
     PDEVICE_OBJECT DeviceObject,
     ULONG SectorSize,
     BOOLEAN ReturnRecognizedPartitions,
     struct _DRIVE_LAYOUT_INFORMATION **PartitionBuffer
    );

typedef
NTSTATUS
(_fastcall *pHalIoSetPartitionInformation)(
     PDEVICE_OBJECT DeviceObject,
     ULONG SectorSize,
     ULONG PartitionNumber,
     ULONG PartitionType
    );

typedef
NTSTATUS
(_fastcall *pHalIoWritePartitionTable)(
     PDEVICE_OBJECT DeviceObject,
     ULONG SectorSize,
     ULONG SectorsPerTrack,
     ULONG NumberOfHeads,
     struct _DRIVE_LAYOUT_INFORMATION *PartitionBuffer
    );

typedef
NTSTATUS
(*pHalQueryBusSlots)(
     PBUS_HANDLER         BusHandler,
     ULONG                BufferSize,
     PULONG              SlotNumbers,
     PULONG              ReturnedLength
    );





















typedef struct {
    BOOLEAN     PowerSupported;
    BOOLEAN     ResumeSupported;
    BOOLEAN     LockSupported;
    BOOLEAN     EjectSupported;
    BOOLEAN     Removable;
} BCTL_DEVICE_CAPABILITIES, *PBCTL_DEVICE_CAPABILITIES;


typedef
NTSTATUS
(*pHalDeviceControl)(
     PDEVICE_HANDLER_OBJECT   DeviceHandler,
     PDEVICE_OBJECT           DeviceObject,
     ULONG                    ControlCode,
      PVOID                Buffer ,
      PULONG               BufferLength ,
     PVOID                    Context,
     PDEVICE_CONTROL_COMPLETION CompletionRoutine
    );



typedef
NTSTATUS
(*PHIBERNATE_CALLBACK)(
      void
      );

typedef
NTSTATUS
(*pHalSuspendHibernateSystem) (
     PTIME_FIELDS         ResumeTime ,
     PHIBERNATE_CALLBACK  SystemCallback 
    );

NTSTATUS
HaliSuspendHibernateSystem (
     PTIME_FIELDS         ResumeTime ,
     PHIBERNATE_CALLBACK  SystemCallback 
    );

typedef
void
(*pHalHibernateProcessor)(
    void
    );

NTSTATUS
HaliHibernateProcessor (
    void
    );



typedef struct {
    ULONG                           Version;
    pHalQuerySystemInformation      HalQuerySystemInformation;
    pHalSetSystemInformation        HalSetSystemInformation;
    pHalQueryBusSlots               HalQueryBusSlots;
    pHalDeviceControl               HalDeviceControl;
    pHalExamineMBR                  HalExamineMBR;
    pHalIoAssignDriveLetters        HalIoAssignDriveLetters;
    pHalIoReadPartitionTable        HalIoReadPartitionTable;
    pHalIoSetPartitionInformation   HalIoSetPartitionInformation;
    pHalIoWritePartitionTable       HalIoWritePartitionTable;

    pHalHandlerForBus               HalReferenceHandlerForBus;
    pHalReferenceBusHandler         HalReferenceBusHandler;
    pHalReferenceBusHandler         HalDereferenceBusHandler;

} HAL_DISPATCH, *PHAL_DISPATCH;








extern  HAL_DISPATCH    HalDispatchTable;
























typedef struct {
    ULONG                               Version;

    pHalHandlerForBus                   HalHandlerForBus;
    pHalHandlerForConfigSpace           HalHandlerForConfigSpace;
    pHalCompleteDeviceControl           HalCompleteDeviceControl;

    pHalRegisterBusHandler              HalRegisterBusHandler;


    pHalHibernateProcessor              HalHibernateProcessor;
    pHalSuspendHibernateSystem          HalSuspendHibernateSystem;
    pHalSuspendHibernateSystem          HalpSuspendHibernateSystem;


} HAL_PRIVATE_DISPATCH, *PHAL_PRIVATE_DISPATCH;









extern  HAL_PRIVATE_DISPATCH            HalPrivateDispatchTable;





















typedef struct _HAL_BUS_INFORMATION{
    INTERFACE_TYPE  BusType;
    BUS_DATA_TYPE   ConfigurationType;
    ULONG           BusNumber;
    ULONG           Reserved;
} HAL_BUS_INFORMATION, *PHAL_BUS_INFORMATION;


typedef struct _HAL_PROFILE_SOURCE_INFORMATION {
    KPROFILE_SOURCE Source;
    BOOLEAN Supported;
    ULONG Interval;
} HAL_PROFILE_SOURCE_INFORMATION, *PHAL_PROFILE_SOURCE_INFORMATION;


typedef struct _HAL_PROFILE_SOURCE_INTERVAL {
    KPROFILE_SOURCE Source;
    ULONG Interval;
} HAL_PROFILE_SOURCE_INTERVAL, *PHAL_PROFILE_SOURCE_INTERVAL;


typedef enum _HAL_DISPLAY_BIOS_INFORMATION {
    HalDisplayInt10Bios,
    HalDisplayEmulatedBios,
    HalDisplayNoBios
} HAL_DISPLAY_BIOS_INFORMATION, *PHAL_DISPLAY_BIOS_INFORMATION;


typedef struct _HAL_POWER_INFORMATION {
    ULONG   TBD;
} HAL_POWER_INFORMATION, *PHAL_POWER_INFORMATION;


typedef struct _HAL_PROCESSOR_SPEED_INFO {
    ULONG   TBD;
} HAL_PROCESSOR_SPEED_INFORMATION, *PHAL_PROCESSOR_SPEED_INFORMATION;


typedef struct _HAL_CALLBACKS {
    PCALLBACK_OBJECT  SetSystemInformation;
    PCALLBACK_OBJECT  BusCheck;
} HAL_CALLBACKS, *PHAL_CALLBACKS;









typedef union _MCI_ADDR{
    struct {
        ULONG Address;
        ULONG Reserved;
    };
    
    ULONGLONG   QuadPart;
} MCI_ADDR, *PMCI_ADDR;
    

typedef enum {
    HAL_MCE_RECORD,
    HAL_MCA_RECORD
} MCA_EXCEPTION_TYPE;






typedef struct _MCA_EXCEPTION {
    
    ULONG               VersionNumber;      
    MCA_EXCEPTION_TYPE  ExceptionType;      
    LARGE_INTEGER       TimeStamp;          
    ULONG               ProcessorNumber;
         
    union {
        struct {
            UCHAR           BankNumber;
            MCI_STATS       Status;     
            MCI_ADDR        Address;
            ULONGLONG       Misc;
        } Mca;
        
        struct {
            ULONGLONG       Address;        
            ULONGLONG       Type;           
        } Mce;
    } u;

} MCA_EXCEPTION, *PMCA_EXCEPTION;




typedef
void
(*PDRIVER_EXCPTN_CALLBACK) (
     PVOID            Context,
     PMCA_EXCEPTION   BankLog
);




typedef struct _MCA_DRIVER_INFO {
    PDRIVER_EXCPTN_CALLBACK ExceptionCallback;
    PKDEFERRED_ROUTINE      DpcCallback;
    PVOID                   DeviceContext;
} MCA_DRIVER_INFO, *PMCA_DRIVER_INFO;







































extern UNICODE_STRING CmRegistryRootName;            
extern UNICODE_STRING CmRegistryMachineName;         
extern UNICODE_STRING CmRegistryMachineHardwareName; 
extern UNICODE_STRING CmRegistryMachineHardwareDescriptionName;
                            
extern UNICODE_STRING CmRegistryMachineHardwareDescriptionSystemName;
                            
extern UNICODE_STRING CmRegistryMachineHardwareDeviceMapName;
                            
extern UNICODE_STRING CmRegistryMachineHardwareResourceMapName;
                            
extern UNICODE_STRING CmRegistryMachineHardwareOwnerMapName;
                            
extern UNICODE_STRING CmRegistryMachineSystemName;
                            
extern UNICODE_STRING CmRegistryMachineSystemCurrentControlSet;
                            
extern UNICODE_STRING CmRegistryMachineSystemCurrentControlSetEnumName;
                            
extern UNICODE_STRING CmRegistryMachineSystemCurrentControlSetEnumRootName;
                            
extern UNICODE_STRING CmRegistryMachineSystemCurrentControlSetServices;
                            
extern UNICODE_STRING CmRegistryMachineSystemCurrentControlSetHardwareProfilesCurrent;
                            
extern UNICODE_STRING CmRegistryMachineSystemCurrentControlSetControlClass;
                            
extern UNICODE_STRING CmRegistryUserName;            







extern UNICODE_STRING CmTypeName[];
extern PWSTR CmTypeString[];







extern UNICODE_STRING CmClassName[];
extern PWSTR CmClassString[];






typedef struct _BOOT_DRIVER_LIST_ENTRY {
    LIST_ENTRY Link;
    UNICODE_STRING FilePath;
    UNICODE_STRING RegistryPath;
    PLDR_DATA_TABLE_ENTRY LdrEntry;
} BOOT_DRIVER_LIST_ENTRY, *PBOOT_DRIVER_LIST_ENTRY;

PHANDLE
CmGetSystemDriverList(
    void
    );

BOOLEAN
CmInitSystem1(
     PLOADER_PARAMETER_BLOCK LoaderBlock
    );

BOOLEAN
CmInitSystem2(
    );

void
CmNotifyRunDown(
    PETHREAD    Thread
    );

void
CmShutdownSystem(
    BOOLEAN     RebootAfterShutdown
    );

void
CmBootLastKnownGood(
    ULONG ErrorLevel
    );



























typedef struct _CM_SYSTEM_CONTROL_VECTOR {
    PWSTR       KeyPath;                
                                        
    PWSTR       ValueName;              
    PVOID       Buffer;                 
    PULONG      BufferLength;           
                                        
                                        
                                        
                                        
                                        
                                        
    PULONG      Type;                   
                                        
} CM_SYSTEM_CONTROL_VECTOR, *PCM_SYSTEM_CONTROL_VECTOR;

void
CmGetSystemControlValues(
    PVOID                   SystemHiveBuffer,
    PCM_SYSTEM_CONTROL_VECTOR  ControlVector
    );

void
CmQueryRegistryQuotaInformation(
     PSYSTEM_REGISTRY_QUOTA_INFORMATION RegistryQuotaInformation
    );

void
CmSetRegistryQuotaInformation(
     PSYSTEM_REGISTRY_QUOTA_INFORMATION RegistryQuotaInformation
    );








































extern ERESOURCE  PpRegistryDeviceResource;

















































































































































BOOLEAN
PpInitSystem (
    void
    );


NTSTATUS
PpEnumerateBus(
     PPLUGPLAY_BUS_INSTANCE BusInstance ,
     PUNICODE_STRING BusDeviceInstanceName 
    );


NTSTATUS
PpDeviceRegistration(
     PUNICODE_STRING DeviceInstancePath,
     BOOLEAN Add
    );
























NTSTATUS
IoQueryDeviceEnumInfo(
     PUNICODE_STRING ServiceKeyName,
     PULONG Count
    );


NTSTATUS
IoOpenDeviceInstanceKey(
     PUNICODE_STRING ServiceKeyName,
     ULONG InstanceNumber,
     ULONG DevInstKeyType,
     ACCESS_MASK DesiredAccess,
     PHANDLE DevInstRegKey
    );
































































































BOOLEAN
PoInitSystem (
     ULONG    Phase
    );


void
PoInitializeDeviceObject (
     PDEVICE_OBJECT   DeviceObject
    );


void
PoRunDownDeviceObject (
     PDEVICE_OBJECT   DeviceObject
    );


void
PoSetPowerManagementEnable (
     BOOLEAN          Enable
    );


void
PoSystemResume (
    void
    );


















































extern POBJECT_TYPE ExEventPairObjectType;
extern POBJECT_TYPE PsProcessType;
extern POBJECT_TYPE PsThreadType;
extern POBJECT_TYPE PortObjectType;
































extern ULONG W32pServiceTable[];
extern ULONG W32pServiceLimit;
extern UCHAR W32pArgumentTable[];





extern PVOID *gpHmgrSharedHandleTable;
extern PVOID  gpHmgrSharedHandleSection;




void NtGdiFlushUserBatch(void);



typedef struct _W32THREAD {
    KSERVICE_TABLE_DESCRIPTOR ServiceDescriptorTable[2];
    PETHREAD    Thread;
    CLIENT_ID   RealClientId;
    HANDLE      GdiCachedProcessHandle;
    PVOID       pgdiDcattr;
    PVOID       pgdiBrushAttr;
} W32THREAD;
typedef W32THREAD *PW32THREAD;


























typedef USHORT W32PID;





typedef struct _PID_HANDLE_TRACK
{
    ULONG       Pid;
    LONG        HandleCount;
    struct _PID_HANDLE_TRACK *pNext;
    struct _PID_HANDLE_TRACK *pPrev;
}PID_HANDLE_TRACK,*PPID_HANDLE_TRACK;

typedef struct _W32PROCESS *PW32PROCESS;

typedef struct _W32PROCESS {
    PEPROCESS   Process;
    ULONG       W32PF_Flags;
    PKEVENT     InputIdleEvent;
    ULONG       StartCursorHideTime;
    PW32PROCESS NextStart;
    PVOID       pDCAttrList;
    PVOID       pBrushAttrList;
    W32PID      W32Pid;
    PID_HANDLE_TRACK pidHandleTrack;
} W32PROCESS;








PVOID
UserGlobalAtomTableCallout( void );

NTSTATUS
UserProcessCallout(
     PW32PROCESS Process,
     BOOLEAN Initialize);

NTSTATUS
UserThreadCallout(
     PW32THREAD Thread,
     PSW32THREADCALLOUTTYPE CalloutType);

NTSTATUS
GdiProcessCallout(
     PW32PROCESS Process,
     BOOLEAN Initialize);

NTSTATUS
GdiThreadCallout(
     PW32THREAD Thread,
     PSW32THREADCALLOUTTYPE CalloutType);

BOOLEAN
InitializeGre(void);


NTSTATUS
W32pProcessCallout(
     PW32PROCESS Process,
     BOOLEAN Initialize);


NTSTATUS
W32pThreadCallout(
     PW32THREAD Thread,
     PSW32THREADCALLOUTTYPE CalloutType);































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































typedef struct _RTL_CRITICAL_SECTION_DEBUG {
    USHORT Type;
    USHORT CreatorBackTraceIndex;
    struct _RTL_CRITICAL_SECTION *CriticalSection;
    LIST_ENTRY ProcessLocksList;
    ULONG EntryCount;
    ULONG ContentionCount;
    ULONG Spare[ 2 ];
} RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG;




typedef struct _RTL_CRITICAL_SECTION {
    PRTL_CRITICAL_SECTION_DEBUG DebugInfo;

    
    
    
    

    LONG LockCount;
    LONG RecursionCount;
    HANDLE OwningThread;        
    HANDLE LockSemaphore;
    ULONG Reserved;
} RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION;






typedef struct _RTL_RESOURCE_DEBUG {
    ULONG Reserved[ 5 ];    

    ULONG ContentionCount;
    ULONG Spare[ 2 ];
} RTL_RESOURCE_DEBUG, *PRTL_RESOURCE_DEBUG;

typedef struct _RTL_RESOURCE {

    
    
    
    

    RTL_CRITICAL_SECTION CriticalSection;

    
    
    
    

    HANDLE SharedSemaphore;
    ULONG NumberOfWaitingShared;
    HANDLE ExclusiveSemaphore;
    ULONG NumberOfWaitingExclusive;

    
    
    
    
    
    
    
    
    
    
    
    

    LONG NumberOfActive;
    HANDLE ExclusiveOwnerThread;

    ULONG Flags;        

    PRTL_RESOURCE_DEBUG DebugInfo;
} RTL_RESOURCE, *PRTL_RESOURCE;



__declspec(dllimport)
NTSTATUS
__stdcall
RtlEnterCriticalSection(
    PRTL_CRITICAL_SECTION CriticalSection
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlLeaveCriticalSection(
    PRTL_CRITICAL_SECTION CriticalSection
    );

__declspec(dllimport)
BOOLEAN
__stdcall
RtlTryEnterCriticalSection(
    PRTL_CRITICAL_SECTION CriticalSection
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlInitializeCriticalSection(
    PRTL_CRITICAL_SECTION CriticalSection
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlDeleteCriticalSection(
    PRTL_CRITICAL_SECTION CriticalSection
    );

__declspec(dllimport)
void
__stdcall
RtlInitializeResource(
    PRTL_RESOURCE Resource
    );

__declspec(dllimport)
BOOLEAN
__stdcall
RtlAcquireResourceShared(
    PRTL_RESOURCE Resource,
    BOOLEAN Wait
    );

__declspec(dllimport)
BOOLEAN
__stdcall
RtlAcquireResourceExclusive(
    PRTL_RESOURCE Resource,
    BOOLEAN Wait
    );

__declspec(dllimport)
void
__stdcall
RtlReleaseResource(
    PRTL_RESOURCE Resource
    );

__declspec(dllimport)
void
__stdcall
RtlConvertSharedToExclusive(
    PRTL_RESOURCE Resource
    );

__declspec(dllimport)
void
__stdcall
RtlConvertExclusiveToShared(
    PRTL_RESOURCE Resource
    );

__declspec(dllimport)
void
__stdcall
RtlDeleteResource (
    PRTL_RESOURCE Resource
    );





typedef struct _RTL_RELATIVE_NAME {
    STRING RelativeName;
    HANDLE ContainingDirectory;
} RTL_RELATIVE_NAME, *PRTL_RELATIVE_NAME;

typedef enum _RTL_PATH_TYPE {
    RtlPathTypeUnknown,
    RtlPathTypeUncAbsolute,
    RtlPathTypeDriveAbsolute,
    RtlPathTypeDriveRelative,
    RtlPathTypeRooted,
    RtlPathTypeRelative,
    RtlPathTypeLocalDevice,
    RtlPathTypeRootLocalDevice
} RTL_PATH_TYPE;

__declspec(dllimport)
RTL_PATH_TYPE
__stdcall
RtlDetermineDosPathNameType_U(
    PCWSTR DosFileName
    );

__declspec(dllimport)
ULONG
__stdcall
RtlIsDosDeviceName_U(
    PWSTR DosFileName
    );

__declspec(dllimport)
ULONG
__stdcall
RtlGetFullPathName_U(
    PCWSTR lpFileName,
    ULONG nBufferLength,
    PWSTR lpBuffer,
    PWSTR *lpFilePart
    );

__declspec(dllimport)
ULONG
__stdcall
RtlGetCurrentDirectory_U(
    ULONG nBufferLength,
    PWSTR lpBuffer
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlSetCurrentDirectory_U(
    PUNICODE_STRING PathName
    );

__declspec(dllimport)
ULONG
__stdcall
RtlGetLongestNtPathLength( void );

__declspec(dllimport)
BOOLEAN
__stdcall
RtlDosPathNameToNtPathName_U(
    PCWSTR DosFileName,
    PUNICODE_STRING NtFileName,
    PWSTR *FilePart ,
    PRTL_RELATIVE_NAME RelativeName 
    );

__declspec(dllimport)
ULONG
__stdcall
RtlDosSearchPath_U(
    PWSTR lpPath,
    PWSTR lpFileName,
    PWSTR lpExtension,
    ULONG nBufferLength,
    PWSTR lpBuffer,
    PWSTR *lpFilePart
    );

__declspec(dllimport)
BOOLEAN
__stdcall
RtlDoesFileExists_U(
    PCWSTR FileName
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlInitializeProfile (
    BOOLEAN KernelToo
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlStartProfile (
    void
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlStopProfile (
    void
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlAnalyzeProfile (
    void
    );









typedef struct {
    UCHAR AceType;
    UCHAR InheritFlags;
    UCHAR AceFlags;
    ACCESS_MASK Mask;
    PSID *Sid;
} RTL_ACE_DATA, *PRTL_ACE_DATA;

__declspec(dllimport)
NTSTATUS
__stdcall
RtlNewSecurityObject(
    PSECURITY_DESCRIPTOR ParentDescriptor,
    PSECURITY_DESCRIPTOR CreatorDescriptor,
    PSECURITY_DESCRIPTOR * NewDescriptor,
    BOOLEAN IsDirectoryObject,
    HANDLE Token,
    PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
NTSTATUS
__stdcall
RtlSetSecurityObject (
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR ModificationDescriptor,
    PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor,
    PGENERIC_MAPPING GenericMapping,
    HANDLE Token
    );


__declspec(dllimport)
NTSTATUS
__stdcall
RtlQuerySecurityObject (
     PSECURITY_DESCRIPTOR ObjectDescriptor,
     SECURITY_INFORMATION SecurityInformation,
     PSECURITY_DESCRIPTOR ResultantDescriptor,
     ULONG DescriptorLength,
     PULONG ReturnLength
     );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlDeleteSecurityObject (
    PSECURITY_DESCRIPTOR * ObjectDescriptor
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlNewInstanceSecurityObject(
    BOOLEAN ParentDescriptorChanged,
    BOOLEAN CreatorDescriptorChanged,
    PLUID OldClientTokenModifiedId,
    PLUID NewClientTokenModifiedId,
    PSECURITY_DESCRIPTOR ParentDescriptor,
    PSECURITY_DESCRIPTOR CreatorDescriptor,
    PSECURITY_DESCRIPTOR * NewDescriptor,
    BOOLEAN IsDirectoryObject,
    HANDLE Token,
    PGENERIC_MAPPING GenericMapping
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlCopySecurityDescriptor(
    PSECURITY_DESCRIPTOR InputSecurityDescriptor,
    PSECURITY_DESCRIPTOR *OutputSecurityDescriptor
    );





__declspec(dllimport)
NTSTATUS
__stdcall
RtlConvertUiListToApiList(
    PUNICODE_STRING UiList ,
    PUNICODE_STRING ApiList,
    BOOLEAN BlankIsDelimiter
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlCreateAndSetSD(
      PRTL_ACE_DATA AceData,
      ULONG AceCount,
      PSID OwnerSid ,
      PSID GroupSid ,
     PSECURITY_DESCRIPTOR *NewDescriptor
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlCreateUserSecurityObject(
      PRTL_ACE_DATA AceData,
      ULONG AceCount,
      PSID OwnerSid,
      PSID GroupSid,
      BOOLEAN IsDirectoryObject,
      PGENERIC_MAPPING GenericMapping,
     PSECURITY_DESCRIPTOR *NewDescriptor
    );





typedef struct _RTL_PERTHREAD_CURDIR {
    PRTL_DRIVE_LETTER_CURDIR CurrentDirectories;
    PUNICODE_STRING ImageName;
    PVOID Environment;
} RTL_PERTHREAD_CURDIR, *PRTL_PERTHREAD_CURDIR;




















__declspec(dllimport)
BOOLEAN
__stdcall
RtlLockHeap(
     PVOID HeapHandle
    );

__declspec(dllimport)
BOOLEAN
__stdcall
RtlUnlockHeap(
     PVOID HeapHandle
    );

__declspec(dllimport)
PVOID
__stdcall
RtlReAllocateHeap(
     PVOID HeapHandle,
     ULONG Flags,
     PVOID BaseAddress,
     ULONG Size
    );

__declspec(dllimport)
BOOLEAN
__stdcall
RtlGetUserInfoHeap(
     PVOID HeapHandle,
     ULONG Flags,
     PVOID BaseAddress,
     PVOID *UserValue ,
     PULONG UserFlags 
    );

__declspec(dllimport)
BOOLEAN
__stdcall
RtlSetUserValueHeap(
     PVOID HeapHandle,
     ULONG Flags,
     PVOID BaseAddress,
     PVOID UserValue
    );

__declspec(dllimport)
BOOLEAN
__stdcall
RtlSetUserFlagsHeap(
     PVOID HeapHandle,
     ULONG Flags,
     PVOID BaseAddress,
     ULONG UserFlagsReset,
     ULONG UserFlagsSet
    );

typedef struct _RTL_HEAP_TAG_INFO {
    ULONG NumberOfAllocations;
    ULONG NumberOfFrees;
    ULONG BytesAllocated;
} RTL_HEAP_TAG_INFO, *PRTL_HEAP_TAG_INFO;


__declspec(dllimport)
ULONG
__stdcall
RtlCreateTagHeap(
     PVOID HeapHandle,
     ULONG Flags,
     PWSTR TagPrefix ,
     PWSTR TagNames
    );



__declspec(dllimport)
PWSTR
__stdcall
RtlQueryTagHeap(
     PVOID HeapHandle,
     ULONG Flags,
     USHORT TagIndex,
     BOOLEAN ResetCounters,
     PRTL_HEAP_TAG_INFO TagInfo 
    );

__declspec(dllimport)
ULONG
__stdcall
RtlSizeHeap(
     PVOID HeapHandle,
     ULONG Flags,
     PVOID BaseAddress
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlExtendHeap(
     PVOID HeapHandle,
     ULONG Flags,
     PVOID Base,
     ULONG Size
    );

__declspec(dllimport)
ULONG
__stdcall
RtlCompactHeap(
     PVOID HeapHandle,
     ULONG Flags
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlZeroHeap(
     PVOID HeapHandle,
     ULONG Flags
    );

__declspec(dllimport)
BOOLEAN
__stdcall
RtlValidateHeap(
     PVOID HeapHandle,
     ULONG Flags,
     PVOID BaseAddress
    );

__declspec(dllimport)
BOOLEAN
__stdcall
RtlValidateProcessHeaps( void );

__declspec(dllimport)
ULONG
__stdcall
RtlGetProcessHeaps(
    ULONG NumberOfHeaps,
    PVOID *ProcessHeaps
    );


typedef
NTSTATUS (*PRTL_ENUM_HEAPS_ROUTINE)(
    PVOID HeapHandle,
    PVOID Parameter
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlEnumProcessHeaps(
    PRTL_ENUM_HEAPS_ROUTINE EnumRoutine,
    PVOID Parameter
    );

typedef struct _RTL_HEAP_USAGE_ENTRY {
    struct _RTL_HEAP_USAGE_ENTRY *Next;
    PVOID Address;
    ULONG Size;
    USHORT AllocatorBackTraceIndex;
    USHORT TagIndex;
} RTL_HEAP_USAGE_ENTRY, *PRTL_HEAP_USAGE_ENTRY;

typedef struct _RTL_HEAP_USAGE {
    ULONG Length;
    ULONG BytesAllocated;
    ULONG BytesCommitted;
    ULONG BytesReserved;
    ULONG BytesReservedMaximum;
    PRTL_HEAP_USAGE_ENTRY Entries;
    PRTL_HEAP_USAGE_ENTRY AddedEntries;
    PRTL_HEAP_USAGE_ENTRY RemovedEntries;
    ULONG Reserved[ 8 ];
} RTL_HEAP_USAGE, *PRTL_HEAP_USAGE;




__declspec(dllimport)
NTSTATUS
__stdcall
RtlUsageHeap(
     PVOID HeapHandle,
     ULONG Flags,
      PRTL_HEAP_USAGE Usage
    );

typedef struct _RTL_HEAP_WALK_ENTRY {
    PVOID   DataAddress;
    ULONG   DataSize;
    UCHAR   OverheadBytes;
    UCHAR   SegmentIndex;
    USHORT  Flags;
    union   {
        struct {
            ULONG Settable;
            USHORT TagIndex;
            USHORT AllocatorBackTraceIndex;
            ULONG Reserved[ 2 ];
        } Block;
        struct {
            ULONG CommittedSize;
            ULONG UnCommittedSize;
            PVOID FirstEntry;
            PVOID LastEntry;
        } Segment;
    };
} RTL_HEAP_WALK_ENTRY, *PRTL_HEAP_WALK_ENTRY;

__declspec(dllimport)
NTSTATUS
__stdcall
RtlWalkHeap(
     PVOID HeapHandle,
      PRTL_HEAP_WALK_ENTRY Entry
    );

typedef struct _RTL_HEAP_ENTRY {
    ULONG Size;
    USHORT Flags;
    USHORT AllocatorBackTraceIndex;
    union {
        struct {
            ULONG Settable;
            ULONG Tag;
        } s1;   
        struct {
            ULONG CommittedSize;
            PVOID FirstBlock;
        } s2;   
    } u;
} RTL_HEAP_ENTRY, *PRTL_HEAP_ENTRY;











typedef struct _RTL_HEAP_TAG {
    ULONG NumberOfAllocations;
    ULONG NumberOfFrees;
    ULONG BytesAllocated;
    USHORT TagIndex;
    USHORT CreatorBackTraceIndex;
    WCHAR TagName[ 24 ];
} RTL_HEAP_TAG, *PRTL_HEAP_TAG;

typedef struct _RTL_HEAP_INFORMATION {
    PVOID BaseAddress;
    ULONG Flags;
    USHORT EntryOverhead;
    USHORT CreatorBackTraceIndex;
    ULONG BytesAllocated;
    ULONG BytesCommitted;
    ULONG NumberOfTags;
    ULONG NumberOfEntries;
    ULONG NumberOfPseudoTags;
    ULONG PseudoTagGranularity;
    ULONG Reserved[ 5 ];
    PRTL_HEAP_TAG Tags;
    PRTL_HEAP_ENTRY Entries;
} RTL_HEAP_INFORMATION, *PRTL_HEAP_INFORMATION;

typedef struct _RTL_PROCESS_HEAPS {
    ULONG NumberOfHeaps;
    RTL_HEAP_INFORMATION Heaps[ 1 ];
} RTL_PROCESS_HEAPS, *PRTL_PROCESS_HEAPS;





typedef struct _RTL_DEBUG_INFORMATION {
    HANDLE SectionHandleClient;
    PVOID ViewBaseClient;
    PVOID ViewBaseTarget;
    ULONG ViewBaseDelta;
    HANDLE EventPairClient;
    HANDLE EventPairTarget;
    HANDLE TargetProcessId;
    HANDLE TargetThreadHandle;
    ULONG Flags;
    ULONG OffsetFree;
    ULONG CommitSize;
    ULONG ViewSize;
    PRTL_PROCESS_MODULES Modules;
    PRTL_PROCESS_BACKTRACES BackTraces;
    PRTL_PROCESS_HEAPS Heaps;
    PRTL_PROCESS_LOCKS Locks;
    PVOID SpecificHeap;
    HANDLE TargetProcessHandle;
    PVOID Reserved[ 6 ];
} RTL_DEBUG_INFORMATION, *PRTL_DEBUG_INFORMATION;

__declspec(dllimport)
PRTL_DEBUG_INFORMATION
__stdcall
RtlCreateQueryDebugBuffer(
     ULONG MaximumCommit ,
     BOOLEAN UseEventPair
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlDestroyQueryDebugBuffer(
     PRTL_DEBUG_INFORMATION Buffer
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlQueryProcessDebugInformation(
     HANDLE UniqueProcessId,
     ULONG Flags,
      PRTL_DEBUG_INFORMATION Buffer
    );








NTSTATUS
__stdcall
RtlQueryProcessModuleInformation(
      PRTL_DEBUG_INFORMATION Buffer
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlQueryProcessBackTraceInformation(
      PRTL_DEBUG_INFORMATION Buffer
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlQueryProcessHeapInformation(
      PRTL_DEBUG_INFORMATION Buffer
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlQueryProcessLockInformation(
      PRTL_DEBUG_INFORMATION Buffer
    );








typedef struct _RTL_HANDLE_TABLE_ENTRY {
    union {
        ULONG Flags;                                
        struct _RTL_HANDLE_TABLE_ENTRY *NextFree;   
    };
} RTL_HANDLE_TABLE_ENTRY, *PRTL_HANDLE_TABLE_ENTRY;



typedef struct _RTL_HANDLE_TABLE {
    ULONG MaximumNumberOfHandles;
    ULONG SizeOfHandleTableEntry;
    ULONG Reserved[ 2 ];
    PRTL_HANDLE_TABLE_ENTRY FreeHandles;
    PRTL_HANDLE_TABLE_ENTRY CommittedHandles;
    PRTL_HANDLE_TABLE_ENTRY UnCommittedHandles;
    PRTL_HANDLE_TABLE_ENTRY MaxReservedHandles;
} RTL_HANDLE_TABLE, *PRTL_HANDLE_TABLE;

void
RtlInitializeHandleTable(
     ULONG MaximumNumberOfHandles,
     ULONG SizeOfHandleTableEntry,
     PRTL_HANDLE_TABLE HandleTable
    );

NTSTATUS
RtlDestroyHandleTable(
      PRTL_HANDLE_TABLE HandleTable
    );

PRTL_HANDLE_TABLE_ENTRY
RtlAllocateHandle(
     PRTL_HANDLE_TABLE HandleTable,
     PULONG HandleIndex 
    );

BOOLEAN
RtlFreeHandle(
     PRTL_HANDLE_TABLE HandleTable,
     PRTL_HANDLE_TABLE_ENTRY Handle
    );

BOOLEAN
RtlIsValidHandle(
     PRTL_HANDLE_TABLE HandleTable,
     PRTL_HANDLE_TABLE_ENTRY Handle
    );

BOOLEAN
RtlIsValidIndexHandle(
     PRTL_HANDLE_TABLE HandleTable,
     ULONG HandleIndex,
     PRTL_HANDLE_TABLE_ENTRY *Handle
    );



















#pragma once































































































































































































typedef struct _RTL_ATOM_TABLE_ENTRY {
    struct _RTL_ATOM_TABLE_ENTRY *HashLink;
    USHORT HandleIndex;
    RTL_ATOM Atom;
    USHORT ReferenceCount;
    UCHAR Flags;
    UCHAR NameLength;
    WCHAR Name[ 1 ];
} RTL_ATOM_TABLE_ENTRY, *PRTL_ATOM_TABLE_ENTRY;

typedef struct _RTL_ATOM_TABLE {
    ULONG Signature;
    union {
        RTL_CRITICAL_SECTION CriticalSection;
        FAST_MUTEX FastMutex;
    };
    union {
        RTL_HANDLE_TABLE RtlHandleTable;
        PHANDLE_TABLE ExHandleTable;
    };
    ULONG NumberOfBuckets;
    PRTL_ATOM_TABLE_ENTRY Buckets[ 1 ];
} RTL_ATOM_TABLE, *PRTL_ATOM_TABLE;



typedef struct _RTL_ATOM_HANDLE_TABLE_ENTRY {
    USHORT Flags;
    USHORT LockCount;
    PRTL_ATOM_TABLE_ENTRY Atom;
} RTL_ATOM_HANDLE_TABLE_ENTRY, *PRTL_ATOM_HANDLE_TABLE_ENTRY;































































































































typedef enum _DBGKM_APINUMBER {
    DbgKmExceptionApi,
    DbgKmCreateThreadApi,
    DbgKmCreateProcessApi,
    DbgKmExitThreadApi,
    DbgKmExitProcessApi,
    DbgKmLoadDllApi,
    DbgKmUnloadDllApi,
    DbgKmMaxApiNumber
} DBGKM_APINUMBER;



typedef struct _DBGKM_EXCEPTION {
    EXCEPTION_RECORD ExceptionRecord;
    ULONG FirstChance;
} DBGKM_EXCEPTION, *PDBGKM_EXCEPTION;



typedef struct _DBGKM_CREATE_THREAD {
    ULONG SubSystemKey;
    PVOID StartAddress;
} DBGKM_CREATE_THREAD, *PDBGKM_CREATE_THREAD;

typedef struct _DBGKM_CREATE_PROCESS {
    ULONG SubSystemKey;
    HANDLE FileHandle;
    PVOID BaseOfImage;
    ULONG DebugInfoFileOffset;
    ULONG DebugInfoSize;
    DBGKM_CREATE_THREAD InitialThread;
} DBGKM_CREATE_PROCESS, *PDBGKM_CREATE_PROCESS;

typedef struct _DBGKM_EXIT_THREAD {
    NTSTATUS ExitStatus;
} DBGKM_EXIT_THREAD, *PDBGKM_EXIT_THREAD;

typedef struct _DBGKM_EXIT_PROCESS {
    NTSTATUS ExitStatus;
} DBGKM_EXIT_PROCESS, *PDBGKM_EXIT_PROCESS;

typedef struct _DBGKM_LOAD_DLL {
    HANDLE FileHandle;
    PVOID BaseOfDll;
    ULONG DebugInfoFileOffset;
    ULONG DebugInfoSize;
} DBGKM_LOAD_DLL, *PDBGKM_LOAD_DLL;

typedef struct _DBGKM_UNLOAD_DLL {
    PVOID BaseAddress;
} DBGKM_UNLOAD_DLL, *PDBGKM_UNLOAD_DLL;

typedef struct _DBGKM_APIMSG {
    PORT_MESSAGE h;
    DBGKM_APINUMBER ApiNumber;
    NTSTATUS ReturnedStatus;
    union {
        DBGKM_EXCEPTION Exception;
        DBGKM_CREATE_THREAD CreateThread;
        DBGKM_CREATE_PROCESS CreateProcessInfo;
        DBGKM_EXIT_THREAD ExitThread;
        DBGKM_EXIT_PROCESS ExitProcess;
        DBGKM_LOAD_DLL LoadDll;
        DBGKM_UNLOAD_DLL UnloadDll;
    } u;
} DBGKM_APIMSG, *PDBGKM_APIMSG;

















typedef enum _DBGSRV_APINUMBER {
    DbgSrvContinueApi,
    DbgSrvMaxApiNumber
} DBGSRV_APINUMBER;

typedef struct _DBGSRV_APIMSG {
    PORT_MESSAGE h;
    DBGSRV_APINUMBER ApiNumber;
    NTSTATUS ReturnedStatus;
    PVOID ContinueKey;
} DBGSRV_APIMSG, *PDBGSRV_APIMSG;







typedef enum _DBG_STATE {
    DbgIdle,
    DbgReplyPending,
    DbgCreateThreadStateChange,
    DbgCreateProcessStateChange,
    DbgExitThreadStateChange,
    DbgExitProcessStateChange,
    DbgExceptionStateChange,
    DbgBreakpointStateChange,
    DbgSingleStepStateChange,
    DbgLoadDllStateChange,
    DbgUnloadDllStateChange
} DBG_STATE, *PDBG_STATE;













typedef enum _DBGSS_APINUMBER {
    DbgSsExceptionApi,
    DbgSsCreateThreadApi,
    DbgSsCreateProcessApi,
    DbgSsExitThreadApi,
    DbgSsExitProcessApi,
    DbgSsLoadDllApi,
    DbgSsUnloadDllApi,
    DbgSsMaxApiNumber
} DBGSS_APINUMBER;

typedef struct _DBGSS_CREATE_PROCESS {
    CLIENT_ID DebugUiClientId;
    DBGKM_CREATE_PROCESS NewProcess;
} DBGSS_CREATE_PROCESS, *PDBGSS_CREATE_PROCESS;

typedef struct _DBGSS_APIMSG {
    PORT_MESSAGE h;
    DBGKM_APINUMBER ApiNumber;
    NTSTATUS ReturnedStatus;
    CLIENT_ID AppClientId;
    PVOID ContinueKey;
    union {
        DBGKM_EXCEPTION Exception;
        DBGKM_CREATE_THREAD CreateThread;
        DBGSS_CREATE_PROCESS CreateProcessInfo;
        DBGKM_EXIT_THREAD ExitThread;
        DBGKM_EXIT_PROCESS ExitProcess;
        DBGKM_LOAD_DLL LoadDll;
        DBGKM_UNLOAD_DLL UnloadDll;
    } u;
} DBGSS_APIMSG, *PDBGSS_APIMSG;

typedef
NTSTATUS
(*PDBGSS_UI_LOOKUP) (
	 PCLIENT_ID AppClientId,
	 PCLIENT_ID DebugUiClientId
	);

typedef
NTSTATUS
(*PDBGSS_DBGKM_APIMSG_FILTER) (
	  PDBGKM_APIMSG ApiMsg
	);

typedef
NTSTATUS
(*PDBGSS_SUBSYSTEMKEY_LOOKUP) (
	 PCLIENT_ID AppClientId,
	 PULONG SubsystemKey,
	 BOOLEAN ProcessKey
	);











typedef enum _DBGUI_APINUMBER {
    DbgUiWaitStateChangeApi,
    DbgUiContinueApi,
    DbgUiMaxApiNumber
} DBGUI_APINUMBER;

typedef struct _DBGUI_CREATE_THREAD {
	HANDLE HandleToThread;
	DBGKM_CREATE_THREAD NewThread;
} DBGUI_CREATE_THREAD, *PDBGUI_CREATE_THREAD;

typedef struct _DBGUI_CREATE_PROCESS {
	HANDLE HandleToProcess;
	HANDLE HandleToThread;
	DBGKM_CREATE_PROCESS NewProcess;
} DBGUI_CREATE_PROCESS, *PDBGUI_CREATE_PROCESS;

typedef struct _DBGUI_WAIT_STATE_CHANGE {
	DBG_STATE NewState;
	CLIENT_ID AppClientId;
	union {
		DBGKM_EXCEPTION Exception;
		DBGUI_CREATE_THREAD CreateThread;
		DBGUI_CREATE_PROCESS CreateProcessInfo;
		DBGKM_EXIT_THREAD ExitThread;
		DBGKM_EXIT_PROCESS ExitProcess;
		DBGKM_LOAD_DLL LoadDll;
		DBGKM_UNLOAD_DLL UnloadDll;
	} StateInfo;
} DBGUI_WAIT_STATE_CHANGE, *PDBGUI_WAIT_STATE_CHANGE;

typedef struct _DBGUI_CONTINUE {
	CLIENT_ID AppClientId;
	NTSTATUS ContinueStatus;
} DBGUI_CONTINUE, *PDBGUI_CONTINUE;

typedef struct _DBGUI_APIMSG {
	PORT_MESSAGE h;
	union {
		HANDLE DbgStateChangeSemaphore;
		struct {
			DBGKM_APINUMBER ApiNumber;
			NTSTATUS ReturnedStatus;
			union {
				DBGUI_CONTINUE Continue;
				DBGUI_WAIT_STATE_CHANGE WaitStateChange;
			} u;
		};
	};
} DBGUI_APIMSG, *PDBGUI_APIMSG;

typedef
void
(*PDBGSS_HANDLE_MSG_ROUTINE)(
     PDBGKM_APIMSG ApiMsg,
     HANDLE ReplyEvent 
    );





NTSTATUS
__stdcall
DbgSsInitialize(
	 HANDLE KmReplyPort,
	 PDBGSS_UI_LOOKUP UiLookUpRoutine,
	 PDBGSS_SUBSYSTEMKEY_LOOKUP SubsystemKeyLookupRoutine ,
	 PDBGSS_DBGKM_APIMSG_FILTER KmApiMsgFilter 
	);

void
__stdcall
DbgSsHandleKmApiMsg(
	 PDBGKM_APIMSG ApiMsg,
	 HANDLE ReplyEvent 
	);
    
typedef
NTSTATUS
(*PDBGSS_INITIALIZE_ROUTINE)(
     HANDLE KmReplyPort,
     PDBGSS_UI_LOOKUP UiLookUpRoutine,
     PDBGSS_SUBSYSTEMKEY_LOOKUP SubsystemKeyLookupRoutine ,
     PDBGSS_DBGKM_APIMSG_FILTER KmApiMsgFilter 
    );
	




NTSTATUS
__stdcall
DbgUiConnectToDbg( void );

NTSTATUS
__stdcall
DbgUiWaitStateChange (
     PDBGUI_WAIT_STATE_CHANGE StateChange,
     PLARGE_INTEGER Timeout 
    );

NTSTATUS
__stdcall
DbgUiContinue (
     PCLIENT_ID AppClientId,
     NTSTATUS ContinueStatus
    );





































typedef struct _KD_PACKET {
    ULONG PacketLeader;
    USHORT PacketType;
    USHORT ByteCount;
    ULONG PacketId;
    ULONG Checksum;
} KD_PACKET, *PKD_PACKET;





                                        

















































typedef struct _DBGKD_LOAD_SYMBOLS {
    ULONG PathNameLength;
    PVOID BaseOfDll;
    ULONG ProcessId;
    ULONG CheckSum;
    ULONG SizeOfImage;
    BOOLEAN UnloadSymbols;
} DBGKD_LOAD_SYMBOLS, *PDBGKD_LOAD_SYMBOLS;

typedef struct _DBGKD_WAIT_STATE_CHANGE {
    ULONG NewState;
    USHORT ProcessorLevel;
    USHORT Processor;
    ULONG NumberProcessors;
    PVOID Thread;
    PVOID ProgramCounter;
    union {
        DBGKM_EXCEPTION Exception;
        DBGKD_LOAD_SYMBOLS LoadSymbols;
    } u;
    DBGKD_CONTROL_REPORT ControlReport;
    CONTEXT Context;
} DBGKD_WAIT_STATE_CHANGE, *PDBGKD_WAIT_STATE_CHANGE;











































typedef struct _DBGKD_READ_MEMORY {
    PVOID TargetBaseAddress;
    ULONG TransferCount;
    ULONG ActualBytesRead;
} DBGKD_READ_MEMORY, *PDBGKD_READ_MEMORY;





typedef struct _DBGKD_WRITE_MEMORY {
    PVOID TargetBaseAddress;
    ULONG TransferCount;
    ULONG ActualBytesWritten;
} DBGKD_WRITE_MEMORY, *PDBGKD_WRITE_MEMORY;





typedef struct _DBGKD_GET_CONTEXT {
    ULONG ContextFlags;
} DBGKD_GET_CONTEXT, *PDBGKD_GET_CONTEXT;





typedef struct _DBGKD_SET_CONTEXT {
    ULONG ContextFlags;
} DBGKD_SET_CONTEXT, *PDBGKD_SET_CONTEXT;



typedef struct _DBGKD_WRITE_BREAKPOINT {
    PVOID BreakPointAddress;
    ULONG BreakPointHandle;
} DBGKD_WRITE_BREAKPOINT, *PDBGKD_WRITE_BREAKPOINT;

typedef struct _DBGKD_RESTORE_BREAKPOINT {
    ULONG BreakPointHandle;
} DBGKD_RESTORE_BREAKPOINT, *PDBGKD_RESTORE_BREAKPOINT;

typedef struct _DBGKD_BREAKPOINTEX {
    ULONG     BreakPointCount;
    NTSTATUS  ContinueStatus;
} DBGKD_BREAKPOINTEX, *PDBGKD_BREAKPOINTEX;

typedef struct _DBGKD_CONTINUE {
    NTSTATUS ContinueStatus;
} DBGKD_CONTINUE, *PDBGKD_CONTINUE;

typedef struct _DBGKD_CONTINUE2 {
    NTSTATUS ContinueStatus;
    DBGKD_CONTROL_SET ControlSet;
} DBGKD_CONTINUE2, *PDBGKD_CONTINUE2;

typedef struct _DBGKD_READ_WRITE_IO {
    ULONG DataSize;                     
    PVOID IoAddress;
    ULONG DataValue;
} DBGKD_READ_WRITE_IO, *PDBGKD_READ_WRITE_IO;

typedef struct _DBGKD_READ_WRITE_IO_EXTENDED {
    ULONG DataSize;                     
    ULONG InterfaceType;
    ULONG BusNumber;
    ULONG AddressSpace;
    PVOID IoAddress;
    ULONG DataValue;
} DBGKD_READ_WRITE_IO_EXTENDED, *PDBGKD_READ_WRITE_IO_EXTENDED;

typedef struct _DBGKD_READ_WRITE_MSR {
    ULONG Msr;
    ULONG DataValueLow;
    ULONG DataValueHigh;
} DBGKD_READ_WRITE_MSR, *PDBGKD_READ_WRITE_MSR;


typedef struct _DBGKD_QUERY_SPECIAL_CALLS {
    ULONG NumberOfSpecialCalls;
    
} DBGKD_QUERY_SPECIAL_CALLS, *PDBGKD_QUERY_SPECIAL_CALLS;

typedef struct _DBGKD_SET_SPECIAL_CALL {
    ULONG SpecialCall;
} DBGKD_SET_SPECIAL_CALL, *PDBGKD_SET_SPECIAL_CALL;

typedef struct _DBGKD_SET_INTERNAL_BREAKPOINT {
    ULONG BreakpointAddress;
    ULONG Flags;
} DBGKD_SET_INTERNAL_BREAKPOINT, *PDBGKD_SET_INTERNAL_BREAKPOINT;

typedef struct _DBGKD_GET_INTERNAL_BREAKPOINT {
    ULONG BreakpointAddress;
    ULONG Flags;
    ULONG Calls;
    ULONG MaxCallsPerPeriod;
    ULONG MinInstructions;
    ULONG MaxInstructions;
    ULONG TotalInstructions;
} DBGKD_GET_INTERNAL_BREAKPOINT, *PDBGKD_GET_INTERNAL_BREAKPOINT;






typedef struct _DBGKD_GET_VERSION {
    USHORT  MajorVersion;
    USHORT  MinorVersion;
    USHORT  ProtocolVersion;
    USHORT  Flags;
    ULONG   KernBase;
    ULONG   PsLoadedModuleList;
    USHORT  MachineType;

    
    
    

    
    
    
    
    
    

    USHORT  ThCallbackStack;            

    
    
    

    USHORT  NextCallback;               
    USHORT  FramePointer;               

    
    
    

    ULONG   KiCallUserMode;             

    
    
    

    ULONG   KeUserCallbackDispatcher;   

    
    
    
    
    
    
    

    ULONG   BreakpointWithStatus;       

    ULONG   Reserved4;
} DBGKD_GET_VERSION, *PDBGKD_GET_VERSION;



typedef struct _DBGKD_PAGEIN {
    ULONG   Address;
    ULONG   ContinueStatus;
} DBGKD_PAGEIN, *PDBGKD_PAGEIN;

typedef struct _DBGKD_MANIPULATE_STATE {
    ULONG ApiNumber;
    USHORT ProcessorLevel;
    USHORT Processor;
    NTSTATUS ReturnStatus;
    union {
        DBGKD_READ_MEMORY ReadMemory;
        DBGKD_WRITE_MEMORY WriteMemory;
        DBGKD_GET_CONTEXT GetContext;
        DBGKD_SET_CONTEXT SetContext;
        DBGKD_WRITE_BREAKPOINT WriteBreakPoint;
        DBGKD_RESTORE_BREAKPOINT RestoreBreakPoint;
        DBGKD_CONTINUE Continue;
        DBGKD_CONTINUE2 Continue2;
        DBGKD_READ_WRITE_IO ReadWriteIo;
        DBGKD_READ_WRITE_IO_EXTENDED ReadWriteIoExtended;
        DBGKD_QUERY_SPECIAL_CALLS QuerySpecialCalls;
        DBGKD_SET_SPECIAL_CALL SetSpecialCall;
        DBGKD_SET_INTERNAL_BREAKPOINT SetInternalBreakpoint;
        DBGKD_GET_INTERNAL_BREAKPOINT GetInternalBreakpoint;
        DBGKD_GET_VERSION GetVersion;
        DBGKD_BREAKPOINTEX BreakPointEx;
        DBGKD_PAGEIN PageIn;
        DBGKD_READ_WRITE_MSR ReadWriteMsr;
    } u;
} DBGKD_MANIPULATE_STATE, *PDBGKD_MANIPULATE_STATE;






































typedef union _DBGKD_TRACE_DATA {
    struct {
        UCHAR SymbolNumber;
        CHAR LevelChange;
        USHORT Instructions;
    } s;
    ULONG LongNumber;
} DBGKD_TRACE_DATA, *PDBGKD_TRACE_DATA;

















typedef struct _DBGKD_PRINT_STRING {
    ULONG LengthOfString;
} DBGKD_PRINT_STRING, *PDBGKD_PRINT_STRING;









typedef struct _DBGKD_GET_STRING {
    ULONG LengthOfPromptString;
    ULONG LengthOfStringRead;
} DBGKD_GET_STRING, *PDBGKD_GET_STRING;

typedef struct _DBGKD_DEBUG_IO {
    ULONG ApiNumber;
    USHORT ProcessorLevel;
    USHORT Processor;
    union {
        DBGKD_PRINT_STRING PrintString;
        DBGKD_GET_STRING GetString;
    } u;
} DBGKD_DEBUG_IO, *PDBGKD_DEBUG_IO;


void
__stdcall
DbgKdSendBreakIn(
    void
    );

PUCHAR
__stdcall
DbgKdGets(
    PUCHAR Buffer,
    USHORT Length
    );


NTSTATUS
__stdcall
DbgKdConnectAndInitialize(
     ULONG CommunicationPortNumber ,
     PSTRING BootImageName ,
     PUSHORT LogHandle
    );



NTSTATUS
__stdcall
DbgKdWaitStateChange(
     PDBGKD_WAIT_STATE_CHANGE StateChange,
     PVOID Buffer,
     ULONG BufferLength
    );

NTSTATUS
__stdcall
DbgKdContinue (
     NTSTATUS ContinueStatus
    );

NTSTATUS
__stdcall
DbgKdContinue2 (
     NTSTATUS ContinueStatus,
     DBGKD_CONTROL_SET ControlSet
    );

NTSTATUS
__stdcall
DbgKdReadVirtualMemory(
     PVOID TargetBaseAddress,
     PVOID UserInterfaceBuffer,
     ULONG TransferCount,
     PULONG ActualBytesRead 
    );

NTSTATUS
__stdcall
DbgKdWriteVirtualMemory(
     PVOID TargetBaseAddress,
     PVOID UserInterfaceBuffer,
     ULONG TransferCount,
     PULONG ActualBytesWritten 
    );

NTSTATUS
__stdcall
DbgKdReadPhysicalMemory(
     PHYSICAL_ADDRESS TargetBaseAddress,
     PVOID UserInterfaceBuffer,
     ULONG TransferCount,
     PULONG ActualBytesRead 
    );

NTSTATUS
__stdcall
DbgKdWritePhysicalMemory(
     PHYSICAL_ADDRESS TargetBaseAddress,
     PVOID UserInterfaceBuffer,
     ULONG TransferCount,
     PULONG ActualBytesWritten 
    );

NTSTATUS
__stdcall
DbgKdReadControlSpace(
     USHORT Processor,
     PVOID TargetBaseAddress,
     PVOID UserInterfaceBuffer,
     ULONG TransferCount,
     PULONG ActualBytesRead 
    );

NTSTATUS
__stdcall
DbgKdWriteControlSpace(
     USHORT Processor,
     PVOID TargetBaseAddress,
     PVOID UserInterfaceBuffer,
     ULONG TransferCount,
     PULONG ActualBytesWritten 
    );

NTSTATUS
__stdcall
DbgKdReadIoSpace(
     PVOID IoAddress,
     PVOID ReturnedData,
     ULONG DataSize
    );

NTSTATUS
__stdcall
DbgKdWriteIoSpace(
     PVOID IoAddress,
     ULONG DataValue,
     ULONG DataSize
    );

NTSTATUS
__stdcall
DbgKdReadMsr(
     ULONG MsrReg,
     PULONGLONG MsrValue
    );

NTSTATUS
__stdcall
DbgKdWriteMsr(
     ULONG MsrReg,
     ULONGLONG MsrValue
    );


NTSTATUS
__stdcall
DbgKdGetContext(
     USHORT Processor,
      PCONTEXT Context
    );

NTSTATUS
__stdcall
DbgKdSetContext(
     USHORT Processor,
     PCONTEXT Context
    );

NTSTATUS
__stdcall
DbgKdWriteBreakPoint(
     PVOID BreakPointAddress,
     PULONG BreakPointHandle
    );

NTSTATUS
__stdcall
DbgKdRestoreBreakPoint(
     ULONG BreakPointHandle
    );

NTSTATUS
__stdcall
DbgKdReboot(
    void
    );


NTSTATUS
__stdcall
DbgKdLookupSelector(
     USHORT Processor,
      PDESCRIPTOR_TABLE_ENTRY pDescriptorTableEntry
    );






































































#pragma once















#pragma pack(push,8)


































































































































struct _iobuf {
        char *_ptr;
        int   _cnt;
        char *_base;
        int   _flag;
        int   _file;
        int   _charbuf;
        int   _bufsiz;
        char *_tmpfname;
        };
typedef struct _iobuf FILE;










































































__declspec(dllimport) extern FILE * __cdecl __p__iob(void);























typedef __int64 fpos_t;







































__declspec(dllimport) int __cdecl _filbuf(FILE *);
__declspec(dllimport) int __cdecl _flsbuf(int, FILE *);




__declspec(dllimport) FILE * __cdecl _fsopen(const char *, const char *, int);


__declspec(dllimport) void __cdecl clearerr(FILE *);
__declspec(dllimport) int __cdecl fclose(FILE *);
__declspec(dllimport) int __cdecl _fcloseall(void);




__declspec(dllimport) FILE * __cdecl _fdopen(int, const char *);


__declspec(dllimport) int __cdecl feof(FILE *);
__declspec(dllimport) int __cdecl ferror(FILE *);
__declspec(dllimport) int __cdecl fflush(FILE *);
__declspec(dllimport) int __cdecl fgetc(FILE *);
__declspec(dllimport) int __cdecl _fgetchar(void);
__declspec(dllimport) int __cdecl fgetpos(FILE *, fpos_t *);
__declspec(dllimport) char * __cdecl fgets(char *, int, FILE *);




__declspec(dllimport) int __cdecl _fileno(FILE *);


__declspec(dllimport) int __cdecl _flushall(void);
__declspec(dllimport) FILE * __cdecl fopen(const char *, const char *);
__declspec(dllimport) int __cdecl fprintf(FILE *, const char *, ...);
__declspec(dllimport) int __cdecl fputc(int, FILE *);
__declspec(dllimport) int __cdecl _fputchar(int);
__declspec(dllimport) int __cdecl fputs(const char *, FILE *);
__declspec(dllimport) size_t __cdecl fread(void *, size_t, size_t, FILE *);
__declspec(dllimport) FILE * __cdecl freopen(const char *, const char *, FILE *);
__declspec(dllimport) int __cdecl fscanf(FILE *, const char *, ...);
__declspec(dllimport) int __cdecl fsetpos(FILE *, const fpos_t *);
__declspec(dllimport) int __cdecl fseek(FILE *, long, int);
__declspec(dllimport) long __cdecl ftell(FILE *);
__declspec(dllimport) size_t __cdecl fwrite(const void *, size_t, size_t, FILE *);
__declspec(dllimport) int __cdecl getc(FILE *);
__declspec(dllimport) int __cdecl getchar(void);
__declspec(dllimport) int __cdecl _getmaxstdio(void);
__declspec(dllimport) char * __cdecl gets(char *);
__declspec(dllimport) int __cdecl _getw(FILE *);
__declspec(dllimport) void __cdecl perror(const char *);
__declspec(dllimport) int __cdecl _pclose(FILE *);
__declspec(dllimport) FILE * __cdecl _popen(const char *, const char *);
__declspec(dllimport) int __cdecl printf(const char *, ...);
__declspec(dllimport) int __cdecl putc(int, FILE *);
__declspec(dllimport) int __cdecl putchar(int);
__declspec(dllimport) int __cdecl puts(const char *);
__declspec(dllimport) int __cdecl _putw(int, FILE *);
__declspec(dllimport) int __cdecl remove(const char *);
__declspec(dllimport) int __cdecl rename(const char *, const char *);
__declspec(dllimport) void __cdecl rewind(FILE *);
__declspec(dllimport) int __cdecl _rmtmp(void);
__declspec(dllimport) int __cdecl scanf(const char *, ...);
__declspec(dllimport) void __cdecl setbuf(FILE *, char *);
__declspec(dllimport) int __cdecl _setmaxstdio(int);
__declspec(dllimport) int __cdecl setvbuf(FILE *, char *, int, size_t);
__declspec(dllimport) int __cdecl _snprintf(char *, size_t, const char *, ...);
__declspec(dllimport) int __cdecl sprintf(char *, const char *, ...);
__declspec(dllimport) int __cdecl sscanf(const char *, const char *, ...);
__declspec(dllimport) char * __cdecl _tempnam(const char *, const char *);
__declspec(dllimport) FILE * __cdecl tmpfile(void);
__declspec(dllimport) char * __cdecl tmpnam(char *);
__declspec(dllimport) int __cdecl ungetc(int, FILE *);
__declspec(dllimport) int __cdecl _unlink(const char *);
__declspec(dllimport) int __cdecl vfprintf(FILE *, const char *, va_list);
__declspec(dllimport) int __cdecl vprintf(const char *, va_list);
__declspec(dllimport) int __cdecl _vsnprintf(char *, size_t, const char *, va_list);
__declspec(dllimport) int __cdecl vsprintf(char *, const char *, va_list);













__declspec(dllimport) FILE * __cdecl _wfsopen(const wchar_t *, const wchar_t *, int);


__declspec(dllimport) wint_t __cdecl fgetwc(FILE *);
__declspec(dllimport) wint_t __cdecl _fgetwchar(void);
__declspec(dllimport) wint_t __cdecl fputwc(wint_t, FILE *);
__declspec(dllimport) wint_t __cdecl _fputwchar(wint_t);
__declspec(dllimport) wint_t __cdecl getwc(FILE *);
__declspec(dllimport) wint_t __cdecl getwchar(void);
__declspec(dllimport) wint_t __cdecl putwc(wint_t, FILE *);
__declspec(dllimport) wint_t __cdecl putwchar(wint_t);
__declspec(dllimport) wint_t __cdecl ungetwc(wint_t, FILE *);

__declspec(dllimport) wchar_t * __cdecl fgetws(wchar_t *, int, FILE *);
__declspec(dllimport) int __cdecl fputws(const wchar_t *, FILE *);
__declspec(dllimport) wchar_t * __cdecl _getws(wchar_t *);
__declspec(dllimport) int __cdecl _putws(const wchar_t *);

__declspec(dllimport) int __cdecl fwprintf(FILE *, const wchar_t *, ...);
__declspec(dllimport) int __cdecl wprintf(const wchar_t *, ...);
__declspec(dllimport) int __cdecl _snwprintf(wchar_t *, size_t, const wchar_t *, ...);
__declspec(dllimport) int __cdecl swprintf(wchar_t *, const wchar_t *, ...);
__declspec(dllimport) int __cdecl vfwprintf(FILE *, const wchar_t *, va_list);
__declspec(dllimport) int __cdecl vwprintf(const wchar_t *, va_list);
__declspec(dllimport) int __cdecl _vsnwprintf(wchar_t *, size_t, const wchar_t *, va_list);
__declspec(dllimport) int __cdecl vswprintf(wchar_t *, const wchar_t *, va_list);
__declspec(dllimport) int __cdecl fwscanf(FILE *, const wchar_t *, ...);
__declspec(dllimport) int __cdecl swscanf(const wchar_t *, const wchar_t *, ...);
__declspec(dllimport) int __cdecl wscanf(const wchar_t *, ...);






__declspec(dllimport) FILE * __cdecl _wfdopen(int, const wchar_t *);
__declspec(dllimport) FILE * __cdecl _wfopen(const wchar_t *, const wchar_t *);
__declspec(dllimport) FILE * __cdecl _wfreopen(const wchar_t *, const wchar_t *, FILE *);
__declspec(dllimport) void __cdecl _wperror(const wchar_t *);
__declspec(dllimport) FILE * __cdecl _wpopen(const wchar_t *, const wchar_t *);
__declspec(dllimport) int __cdecl _wremove(const wchar_t *);
__declspec(dllimport) wchar_t * __cdecl _wtempnam(const wchar_t *, const wchar_t *);
__declspec(dllimport) wchar_t * __cdecl _wtmpnam(wchar_t *);
























































__declspec(dllimport) int __cdecl fcloseall(void);
__declspec(dllimport) FILE * __cdecl fdopen(int, const char *);
__declspec(dllimport) int __cdecl fgetchar(void);
__declspec(dllimport) int __cdecl fileno(FILE *);
__declspec(dllimport) int __cdecl flushall(void);
__declspec(dllimport) int __cdecl fputchar(int);
__declspec(dllimport) int __cdecl getw(FILE *);
__declspec(dllimport) int __cdecl putw(int, FILE *);
__declspec(dllimport) int __cdecl rmtmp(void);
__declspec(dllimport) char * __cdecl tempnam(const char *, const char *);
__declspec(dllimport) int __cdecl unlink(const char *);











#pragma pack(pop)




















#pragma once






























































































































































typedef struct _KEYBOARD_INPUT_DATA {

    
    
    
    

    USHORT UnitId;

    
    
    

    USHORT MakeCode;

    
    
    
    

    USHORT Flags;

    USHORT Reserved;

    
    
    

    ULONG ExtraInformation;

} KEYBOARD_INPUT_DATA, *PKEYBOARD_INPUT_DATA;





















typedef struct _KEYBOARD_TYPEMATIC_PARAMETERS {

    
    
    
    

    USHORT UnitId;

    
    
    

    USHORT  Rate;

    
    
    

    USHORT  Delay;

} KEYBOARD_TYPEMATIC_PARAMETERS, *PKEYBOARD_TYPEMATIC_PARAMETERS;






typedef struct _KEYBOARD_ID {
    UCHAR Type;       
    UCHAR Subtype;    
} KEYBOARD_ID, *PKEYBOARD_ID;

typedef struct _KEYBOARD_ATTRIBUTES {

    
    
    

    KEYBOARD_ID KeyboardIdentifier;

    
    
    

    USHORT KeyboardMode;

    
    
    

    USHORT NumberOfFunctionKeys;

    
    
    

    USHORT NumberOfIndicators;

    
    
    

    USHORT NumberOfKeysTotal;

    
    
    

    ULONG  InputDataQueueLength;

    
    
    

    KEYBOARD_TYPEMATIC_PARAMETERS KeyRepeatMinimum;

    
    
    

    KEYBOARD_TYPEMATIC_PARAMETERS KeyRepeatMaximum;

} KEYBOARD_ATTRIBUTES, *PKEYBOARD_ATTRIBUTES;














typedef struct _KEYBOARD_INDICATOR_PARAMETERS {

    
    
    
    

    USHORT UnitId;

    
    
    

    USHORT    LedFlags;

} KEYBOARD_INDICATOR_PARAMETERS, *PKEYBOARD_INDICATOR_PARAMETERS;






typedef struct _INDICATOR_LIST {

    
    
    

    USHORT MakeCode;

    
    
    

    USHORT IndicatorFlags;

} INDICATOR_LIST, *PINDICATOR_LIST;

typedef struct _KEYBOARD_INDICATOR_TRANSLATION {

    
    
    

    USHORT NumberOfIndicatorKeys;

    
    
    

    INDICATOR_LIST IndicatorList[1];

} KEYBOARD_INDICATOR_TRANSLATION, *PKEYBOARD_INDICATOR_TRANSLATION;














typedef struct _KEYBOARD_UNIT_ID_PARAMETER {

    
    
    
    

    USHORT UnitId;

} KEYBOARD_UNIT_ID_PARAMETER, *PKEYBOARD_UNIT_ID_PARAMETER;


























#pragma once

















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#pragma warning(disable:4001)

















#pragma once






















































































































































































#pragma once












































































































































































































































































typedef unsigned long       DWORD;
typedef int                 BOOL;
typedef unsigned char       BYTE;
typedef unsigned short      WORD;
typedef float               FLOAT;
typedef FLOAT               *PFLOAT;
typedef BOOL            *PBOOL;
typedef BOOL             *LPBOOL;
typedef BYTE            *PBYTE;
typedef BYTE             *LPBYTE;
typedef int             *PINT;
typedef int              *LPINT;
typedef WORD            *PWORD;
typedef WORD             *LPWORD;
typedef long             *LPLONG;
typedef DWORD           *PDWORD;
typedef DWORD            *LPDWORD;
typedef void             *LPVOID;
typedef const void       *LPCVOID;

typedef int                 INT;
typedef unsigned int        UINT;
typedef unsigned int        *PUINT;






typedef UINT WPARAM;
typedef LONG LPARAM;
typedef LONG LRESULT;






















struct HWND__ { int unused; }; typedef struct HWND__ *HWND;
struct HHOOK__ { int unused; }; typedef struct HHOOK__ *HHOOK;


typedef WORD                ATOM;

typedef HANDLE          *SPHANDLE;
typedef HANDLE           *LPHANDLE;
typedef HANDLE              HGLOBAL;
typedef HANDLE              HLOCAL;
typedef HANDLE              GLOBALHANDLE;
typedef HANDLE              LOCALHANDLE;
typedef int ( __stdcall *FARPROC)();
typedef int ( __stdcall *NEARPROC)();
typedef int (__stdcall *PROC)();


typedef void * HGDIOBJ;




struct HACCEL__ { int unused; }; typedef struct HACCEL__ *HACCEL;
struct HBITMAP__ { int unused; }; typedef struct HBITMAP__ *HBITMAP;
struct HBRUSH__ { int unused; }; typedef struct HBRUSH__ *HBRUSH;

struct HCOLORSPACE__ { int unused; }; typedef struct HCOLORSPACE__ *HCOLORSPACE;

struct HDC__ { int unused; }; typedef struct HDC__ *HDC;
struct HGLRC__ { int unused; }; typedef struct HGLRC__ *HGLRC;          
struct HDESK__ { int unused; }; typedef struct HDESK__ *HDESK;
struct HENHMETAFILE__ { int unused; }; typedef struct HENHMETAFILE__ *HENHMETAFILE;
struct HFONT__ { int unused; }; typedef struct HFONT__ *HFONT;
struct HICON__ { int unused; }; typedef struct HICON__ *HICON;
struct HMENU__ { int unused; }; typedef struct HMENU__ *HMENU;
struct HMETAFILE__ { int unused; }; typedef struct HMETAFILE__ *HMETAFILE;
struct HINSTANCE__ { int unused; }; typedef struct HINSTANCE__ *HINSTANCE;
typedef HINSTANCE HMODULE;      
struct HPALETTE__ { int unused; }; typedef struct HPALETTE__ *HPALETTE;
struct HPEN__ { int unused; }; typedef struct HPEN__ *HPEN;
struct HRGN__ { int unused; }; typedef struct HRGN__ *HRGN;
struct HRSRC__ { int unused; }; typedef struct HRSRC__ *HRSRC;
struct HSTR__ { int unused; }; typedef struct HSTR__ *HSTR;
struct HTASK__ { int unused; }; typedef struct HTASK__ *HTASK;
struct HWINSTA__ { int unused; }; typedef struct HWINSTA__ *HWINSTA;
struct HKL__ { int unused; }; typedef struct HKL__ *HKL;

typedef int HFILE;      
typedef HICON HCURSOR;      

typedef DWORD   COLORREF;
typedef DWORD   *LPCOLORREF;



typedef struct tagRECT
{
    LONG    left;
    LONG    top;
    LONG    right;
    LONG    bottom;
} RECT, *PRECT,  *NPRECT,  *LPRECT;

typedef const RECT * LPCRECT;

typedef struct _RECTL       
{
    LONG    left;
    LONG    top;
    LONG    right;
    LONG    bottom;
} RECTL, *PRECTL, *LPRECTL;

typedef const RECTL * LPCRECTL;

typedef struct tagPOINT
{
    LONG  x;
    LONG  y;
} POINT, *PPOINT,  *NPPOINT,  *LPPOINT;

typedef struct _POINTL      
{
    LONG  x;
    LONG  y;
} POINTL, *PPOINTL;

typedef struct tagSIZE
{
    LONG        cx;
    LONG        cy;
} SIZE, *PSIZE, *LPSIZE;

typedef SIZE               SIZEL;
typedef SIZE               *PSIZEL, *LPSIZEL;

typedef struct tagPOINTS
{
    SHORT   x;
    SHORT   y;
} POINTS, *PPOINTS, *LPPOINTS;







































































































































































































































typedef struct _OVERLAPPED {
    DWORD   Internal;
    DWORD   InternalHigh;
    DWORD   Offset;
    DWORD   OffsetHigh;
    HANDLE  hEvent;
} OVERLAPPED, *LPOVERLAPPED;

typedef struct _SECURITY_ATTRIBUTES {
    DWORD nLength;
    LPVOID lpSecurityDescriptor;
    BOOL bInheritHandle;
} SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;

typedef struct _PROCESS_INFORMATION {
    HANDLE hProcess;
    HANDLE hThread;
    DWORD dwProcessId;
    DWORD dwThreadId;
} PROCESS_INFORMATION, *PPROCESS_INFORMATION, *LPPROCESS_INFORMATION;





typedef struct _FILETIME {
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
} FILETIME, *PFILETIME, *LPFILETIME;





typedef struct _SYSTEMTIME {
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
} SYSTEMTIME, *PSYSTEMTIME, *LPSYSTEMTIME;

typedef DWORD (__stdcall *PTHREAD_START_ROUTINE)(
    LPVOID lpThreadParameter
    );
typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;


typedef void (__stdcall *PFIBER_START_ROUTINE)(
    LPVOID lpFiberParameter
    );
typedef PFIBER_START_ROUTINE LPFIBER_START_ROUTINE;


typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION PCRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;

typedef RTL_CRITICAL_SECTION_DEBUG CRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG LPCRITICAL_SECTION_DEBUG;


typedef PLDT_ENTRY LPLDT_ENTRY;












































































































typedef struct _COMMPROP {
    WORD wPacketLength;
    WORD wPacketVersion;
    DWORD dwServiceMask;
    DWORD dwReserved1;
    DWORD dwMaxTxQueue;
    DWORD dwMaxRxQueue;
    DWORD dwMaxBaud;
    DWORD dwProvSubType;
    DWORD dwProvCapabilities;
    DWORD dwSettableParams;
    DWORD dwSettableBaud;
    WORD wSettableData;
    WORD wSettableStopParity;
    DWORD dwCurrentTxQueue;
    DWORD dwCurrentRxQueue;
    DWORD dwProvSpec1;
    DWORD dwProvSpec2;
    WCHAR wcProvChar[1];
} COMMPROP,*LPCOMMPROP;







typedef struct _COMSTAT {
    DWORD fCtsHold : 1;
    DWORD fDsrHold : 1;
    DWORD fRlsdHold : 1;
    DWORD fXoffHold : 1;
    DWORD fXoffSent : 1;
    DWORD fEof : 1;
    DWORD fTxim : 1;
    DWORD fReserved : 25;
    DWORD cbInQue;
    DWORD cbOutQue;
} COMSTAT, *LPCOMSTAT;
















typedef struct _DCB {
    DWORD DCBlength;      
    DWORD BaudRate;       
    DWORD fBinary: 1;     
    DWORD fParity: 1;     
    DWORD fOutxCtsFlow:1; 
    DWORD fOutxDsrFlow:1; 
    DWORD fDtrControl:2;  
    DWORD fDsrSensitivity:1; 
    DWORD fTXContinueOnXoff: 1; 
    DWORD fOutX: 1;       
    DWORD fInX: 1;        
    DWORD fErrorChar: 1;  
    DWORD fNull: 1;       
    DWORD fRtsControl:2;  
    DWORD fAbortOnError:1; 
    DWORD fDummy2:17;     
    WORD wReserved;       
    WORD XonLim;          
    WORD XoffLim;         
    BYTE ByteSize;        
    BYTE Parity;          
    BYTE StopBits;        
    char XonChar;         
    char XoffChar;        
    char ErrorChar;       
    char EofChar;         
    char EvtChar;         
    WORD wReserved1;      
} DCB, *LPDCB;

typedef struct _COMMTIMEOUTS {
    DWORD ReadIntervalTimeout;          
    DWORD ReadTotalTimeoutMultiplier;   
    DWORD ReadTotalTimeoutConstant;     
    DWORD WriteTotalTimeoutMultiplier;  
    DWORD WriteTotalTimeoutConstant;    
} COMMTIMEOUTS,*LPCOMMTIMEOUTS;

typedef struct _COMMCONFIG {
    DWORD dwSize;               
    WORD wVersion;              
    WORD wReserved;             
    DCB dcb;                    
    DWORD dwProviderSubType;    

    DWORD dwProviderOffset;     

    DWORD dwProviderSize;       
    WCHAR wcProviderData[1];    
} COMMCONFIG,*LPCOMMCONFIG;

typedef struct _SYSTEM_INFO {
    union {
        DWORD dwOemId;          
        struct {
            WORD wProcessorArchitecture;
            WORD wReserved;
        };
    };
    DWORD dwPageSize;
    LPVOID lpMinimumApplicationAddress;
    LPVOID lpMaximumApplicationAddress;
    DWORD dwActiveProcessorMask;
    DWORD dwNumberOfProcessors;
    DWORD dwProcessorType;
    DWORD dwAllocationGranularity;
    WORD wProcessorLevel;
    WORD wProcessorRevision;
} SYSTEM_INFO, *LPSYSTEM_INFO;




































typedef struct _MEMORYSTATUS {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    DWORD dwTotalPhys;
    DWORD dwAvailPhys;
    DWORD dwTotalPageFile;
    DWORD dwAvailPageFile;
    DWORD dwTotalVirtual;
    DWORD dwAvailVirtual;
} MEMORYSTATUS, *LPMEMORYSTATUS;















































































typedef struct _EXCEPTION_DEBUG_INFO {
    EXCEPTION_RECORD ExceptionRecord;
    DWORD dwFirstChance;
} EXCEPTION_DEBUG_INFO, *LPEXCEPTION_DEBUG_INFO;

typedef struct _CREATE_THREAD_DEBUG_INFO {
    HANDLE hThread;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
} CREATE_THREAD_DEBUG_INFO, *LPCREATE_THREAD_DEBUG_INFO;

typedef struct _CREATE_PROCESS_DEBUG_INFO {
    HANDLE hFile;
    HANDLE hProcess;
    HANDLE hThread;
    LPVOID lpBaseOfImage;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
    LPVOID lpImageName;
    WORD fUnicode;
} CREATE_PROCESS_DEBUG_INFO, *LPCREATE_PROCESS_DEBUG_INFO;

typedef struct _EXIT_THREAD_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_THREAD_DEBUG_INFO, *LPEXIT_THREAD_DEBUG_INFO;

typedef struct _EXIT_PROCESS_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_PROCESS_DEBUG_INFO, *LPEXIT_PROCESS_DEBUG_INFO;

typedef struct _LOAD_DLL_DEBUG_INFO {
    HANDLE hFile;
    LPVOID lpBaseOfDll;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpImageName;
    WORD fUnicode;
} LOAD_DLL_DEBUG_INFO, *LPLOAD_DLL_DEBUG_INFO;

typedef struct _UNLOAD_DLL_DEBUG_INFO {
    LPVOID lpBaseOfDll;
} UNLOAD_DLL_DEBUG_INFO, *LPUNLOAD_DLL_DEBUG_INFO;

typedef struct _OUTPUT_DEBUG_STRING_INFO {
    LPSTR lpDebugStringData;
    WORD fUnicode;
    WORD nDebugStringLength;
} OUTPUT_DEBUG_STRING_INFO, *LPOUTPUT_DEBUG_STRING_INFO;

typedef struct _RIP_INFO {
    DWORD dwError;
    DWORD dwType;
} RIP_INFO, *LPRIP_INFO;


typedef struct _DEBUG_EVENT {
    DWORD dwDebugEventCode;
    DWORD dwProcessId;
    DWORD dwThreadId;
    union {
        EXCEPTION_DEBUG_INFO Exception;
        CREATE_THREAD_DEBUG_INFO CreateThread;
        CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
        EXIT_THREAD_DEBUG_INFO ExitThread;
        EXIT_PROCESS_DEBUG_INFO ExitProcess;
        LOAD_DLL_DEBUG_INFO LoadDll;
        UNLOAD_DLL_DEBUG_INFO UnloadDll;
        OUTPUT_DEBUG_STRING_INFO DebugString;
        RIP_INFO RipInfo;
    } u;
} DEBUG_EVENT, *LPDEBUG_EVENT;


typedef PCONTEXT LPCONTEXT;
typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD;
typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS;


























































































































































































































typedef struct _OFSTRUCT {
    BYTE cBytes;
    BYTE fFixedDisk;
    WORD nErrCode;
    WORD Reserved1;
    WORD Reserved2;
    CHAR szPathName[128];
} OFSTRUCT, *LPOFSTRUCT, *POFSTRUCT;





































































































__declspec(dllimport)
BOOL
__stdcall
FreeResource(
        HGLOBAL hResData
        );

__declspec(dllimport)
LPVOID
__stdcall
LockResource(
        HGLOBAL hResData
        );






int
__stdcall
WinMain(
    HINSTANCE hInstance,
    HINSTANCE hPrevInstance,
    LPSTR lpCmdLine,
    int nShowCmd
    );

__declspec(dllimport)
BOOL
__stdcall
FreeLibrary(
    HMODULE hLibModule
    );


__declspec(dllimport)
void
__stdcall
FreeLibraryAndExitThread(
    HMODULE hLibModule,
    DWORD dwExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
DisableThreadLibraryCalls(
    HMODULE hLibModule
    );

__declspec(dllimport)
FARPROC
__stdcall
GetProcAddress(
    HMODULE hModule,
    LPCSTR lpProcName
    );

__declspec(dllimport)
DWORD
__stdcall
GetVersion( void );

__declspec(dllimport)
HGLOBAL
__stdcall
GlobalAlloc(
    UINT uFlags,
    DWORD dwBytes
    );

__declspec(dllimport)
HGLOBAL
__stdcall
GlobalReAlloc(
    HGLOBAL hMem,
    DWORD dwBytes,
    UINT uFlags
    );

__declspec(dllimport)
DWORD
__stdcall
GlobalSize(
    HGLOBAL hMem
    );

__declspec(dllimport)
UINT
__stdcall
GlobalFlags(
    HGLOBAL hMem
    );


__declspec(dllimport)
LPVOID
__stdcall
GlobalLock(
    HGLOBAL hMem
    );


__declspec(dllimport)
HGLOBAL
__stdcall
GlobalHandle(
    LPCVOID pMem
    );


__declspec(dllimport)
BOOL
__stdcall
GlobalUnlock(
    HGLOBAL hMem
    );


__declspec(dllimport)
HGLOBAL
__stdcall
GlobalFree(
    HGLOBAL hMem
    );

__declspec(dllimport)
UINT
__stdcall
GlobalCompact(
    DWORD dwMinFree
    );

__declspec(dllimport)
void
__stdcall
GlobalFix(
    HGLOBAL hMem
    );

__declspec(dllimport)
void
__stdcall
GlobalUnfix(
    HGLOBAL hMem
    );

__declspec(dllimport)
LPVOID
__stdcall
GlobalWire(
    HGLOBAL hMem
    );

__declspec(dllimport)
BOOL
__stdcall
GlobalUnWire(
    HGLOBAL hMem
    );

__declspec(dllimport)
void
__stdcall
GlobalMemoryStatus(
    LPMEMORYSTATUS lpBuffer
    );

__declspec(dllimport)
HLOCAL
__stdcall
LocalAlloc(
    UINT uFlags,
    UINT uBytes
    );

__declspec(dllimport)
HLOCAL
__stdcall
LocalReAlloc(
    HLOCAL hMem,
    UINT uBytes,
    UINT uFlags
    );

__declspec(dllimport)
LPVOID
__stdcall
LocalLock(
    HLOCAL hMem
    );

__declspec(dllimport)
HLOCAL
__stdcall
LocalHandle(
    LPCVOID pMem
    );

__declspec(dllimport)
BOOL
__stdcall
LocalUnlock(
    HLOCAL hMem
    );

__declspec(dllimport)
UINT
__stdcall
LocalSize(
    HLOCAL hMem
    );

__declspec(dllimport)
UINT
__stdcall
LocalFlags(
    HLOCAL hMem
    );

__declspec(dllimport)
HLOCAL
__stdcall
LocalFree(
    HLOCAL hMem
    );

__declspec(dllimport)
UINT
__stdcall
LocalShrink(
    HLOCAL hMem,
    UINT cbNewSize
    );

__declspec(dllimport)
UINT
__stdcall
LocalCompact(
    UINT uMinFree
    );

__declspec(dllimport)
BOOL
__stdcall
FlushInstructionCache(
    HANDLE hProcess,
    LPCVOID lpBaseAddress,
    DWORD dwSize
    );

__declspec(dllimport)
LPVOID
__stdcall
VirtualAlloc(
    LPVOID lpAddress,
    DWORD dwSize,
    DWORD flAllocationType,
    DWORD flProtect
    );

__declspec(dllimport)
BOOL
__stdcall
VirtualFree(
    LPVOID lpAddress,
    DWORD dwSize,
    DWORD dwFreeType
    );

__declspec(dllimport)
BOOL
__stdcall
VirtualProtect(
    LPVOID lpAddress,
    DWORD dwSize,
    DWORD flNewProtect,
    PDWORD lpflOldProtect
    );

__declspec(dllimport)
DWORD
__stdcall
VirtualQuery(
    LPCVOID lpAddress,
    PMEMORY_BASIC_INFORMATION lpBuffer,
    DWORD dwLength
    );

__declspec(dllimport)
LPVOID
__stdcall
VirtualAllocEx(
    HANDLE hProcess,
    LPVOID lpAddress,
    DWORD dwSize,
    DWORD flAllocationType,
    DWORD flProtect
    );

__declspec(dllimport)
BOOL
__stdcall
VirtualFreeEx(
    HANDLE hProcess,
    LPVOID lpAddress,
    DWORD dwSize,
    DWORD dwFreeType
    );

__declspec(dllimport)
BOOL
__stdcall
VirtualProtectEx(
    HANDLE hProcess,
    LPVOID lpAddress,
    DWORD dwSize,
    DWORD flNewProtect,
    PDWORD lpflOldProtect
    );

__declspec(dllimport)
DWORD
__stdcall
VirtualQueryEx(
    HANDLE hProcess,
    LPCVOID lpAddress,
    PMEMORY_BASIC_INFORMATION lpBuffer,
    DWORD dwLength
    );

__declspec(dllimport)
HANDLE
__stdcall
HeapCreate(
    DWORD flOptions,
    DWORD dwInitialSize,
    DWORD dwMaximumSize
    );

__declspec(dllimport)
BOOL
__stdcall
HeapDestroy(
    HANDLE hHeap
    );


__declspec(dllimport)
LPVOID
__stdcall
HeapAlloc(
    HANDLE hHeap,
    DWORD dwFlags,
    DWORD dwBytes
    );

__declspec(dllimport)
LPVOID
__stdcall
HeapReAlloc(
    HANDLE hHeap,
    DWORD dwFlags,
    LPVOID lpMem,
    DWORD dwBytes
    );

__declspec(dllimport)
BOOL
__stdcall
HeapFree(
    HANDLE hHeap,
    DWORD dwFlags,
    LPVOID lpMem
    );

__declspec(dllimport)
DWORD
__stdcall
HeapSize(
    HANDLE hHeap,
    DWORD dwFlags,
    LPCVOID lpMem
    );

__declspec(dllimport)
BOOL
__stdcall
HeapValidate(
    HANDLE hHeap,
    DWORD dwFlags,
    LPCVOID lpMem
    );

__declspec(dllimport)
UINT
__stdcall
HeapCompact(
    HANDLE hHeap,
    DWORD dwFlags
    );

__declspec(dllimport)
HANDLE
__stdcall
GetProcessHeap( void );

__declspec(dllimport)
DWORD
__stdcall
GetProcessHeaps(
    DWORD NumberOfHeaps,
    PHANDLE ProcessHeaps
    );

typedef struct _PROCESS_HEAP_ENTRY {
    PVOID lpData;
    DWORD cbData;
    BYTE cbOverhead;
    BYTE iRegionIndex;
    WORD wFlags;
    union {
        struct {
            HANDLE hMem;
            DWORD dwReserved[ 3 ];
        } Block;
        struct {
            DWORD dwCommittedSize;
            DWORD dwUnCommittedSize;
            LPVOID lpFirstBlock;
            LPVOID lpLastBlock;
        } Region;
    };
} PROCESS_HEAP_ENTRY, *LPPROCESS_HEAP_ENTRY, *PPROCESS_HEAP_ENTRY;







__declspec(dllimport)
BOOL
__stdcall
HeapLock(
    HANDLE hHeap
    );

__declspec(dllimport)
BOOL
__stdcall
HeapUnlock(
    HANDLE hHeap
    );


__declspec(dllimport)
BOOL
__stdcall
HeapWalk(
    HANDLE hHeap,
    LPPROCESS_HEAP_ENTRY lpEntry
    );










__declspec(dllimport)
BOOL
__stdcall
GetBinaryTypeA(
    LPCSTR lpApplicationName,
    LPDWORD lpBinaryType
    );
__declspec(dllimport)
BOOL
__stdcall
GetBinaryTypeW(
    LPCWSTR lpApplicationName,
    LPDWORD lpBinaryType
    );






__declspec(dllimport)
DWORD
__stdcall
GetShortPathNameA(
    LPCSTR lpszLongPath,
    LPSTR  lpszShortPath,
    DWORD    cchBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
GetShortPathNameW(
    LPCWSTR lpszLongPath,
    LPWSTR  lpszShortPath,
    DWORD    cchBuffer
    );






__declspec(dllimport)
BOOL
__stdcall
GetProcessAffinityMask(
    HANDLE hProcess,
    LPDWORD lpProcessAffinityMask,
    LPDWORD lpSystemAffinityMask
    );

__declspec(dllimport)
BOOL
__stdcall
SetProcessAffinityMask(
    HANDLE hProcess,
    DWORD dwProcessAffinityMask
    );


__declspec(dllimport)
BOOL
__stdcall
GetProcessTimes(
    HANDLE hProcess,
    LPFILETIME lpCreationTime,
    LPFILETIME lpExitTime,
    LPFILETIME lpKernelTime,
    LPFILETIME lpUserTime
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessWorkingSetSize(
    HANDLE hProcess,
    LPDWORD lpMinimumWorkingSetSize,
    LPDWORD lpMaximumWorkingSetSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetProcessWorkingSetSize(
    HANDLE hProcess,
    DWORD dwMinimumWorkingSetSize,
    DWORD dwMaximumWorkingSetSize
    );

__declspec(dllimport)
HANDLE
__stdcall
OpenProcess(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    DWORD dwProcessId
    );

__declspec(dllimport)
HANDLE
__stdcall
GetCurrentProcess(
    void
    );

__declspec(dllimport)
DWORD
__stdcall
GetCurrentProcessId(
    void
    );

__declspec(dllimport)
void
__stdcall
ExitProcess(
    UINT uExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
TerminateProcess(
    HANDLE hProcess,
    UINT uExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
GetExitCodeProcess(
    HANDLE hProcess,
    LPDWORD lpExitCode
    );


__declspec(dllimport)
void
__stdcall
FatalExit(
    int ExitCode
    );

__declspec(dllimport)
LPSTR
__stdcall
GetEnvironmentStrings(
    void
    );

__declspec(dllimport)
LPWSTR
__stdcall
GetEnvironmentStringsW(
    void
    );







__declspec(dllimport)
BOOL
__stdcall
FreeEnvironmentStringsA(
    LPSTR
    );
__declspec(dllimport)
BOOL
__stdcall
FreeEnvironmentStringsW(
    LPWSTR
    );






__declspec(dllimport)
void
__stdcall
RaiseException(
    DWORD dwExceptionCode,
    DWORD dwExceptionFlags,
    DWORD nNumberOfArguments,
    const DWORD *lpArguments
    );

__declspec(dllimport)
LONG
__stdcall
UnhandledExceptionFilter(
    struct _EXCEPTION_POINTERS *ExceptionInfo
    );

typedef LONG (__stdcall *PTOP_LEVEL_EXCEPTION_FILTER)(
    struct _EXCEPTION_POINTERS *ExceptionInfo
    );
typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;

__declspec(dllimport)
LPTOP_LEVEL_EXCEPTION_FILTER
__stdcall
SetUnhandledExceptionFilter(
    LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter
    );


__declspec(dllimport)
LPVOID
__stdcall
CreateFiber(
    DWORD dwStackSize,
    LPFIBER_START_ROUTINE lpStartAddress,
    LPVOID lpParameter
    );

__declspec(dllimport)
void
__stdcall
DeleteFiber(
    LPVOID lpFiber
    );

__declspec(dllimport)
LPVOID
__stdcall
ConvertThreadToFiber(
    LPVOID lpParameter
    );

__declspec(dllimport)
void
__stdcall
SwitchToFiber(
    LPVOID lpFiber
    );

__declspec(dllimport)
BOOL
__stdcall
SwitchToThread(
    void
    );


__declspec(dllimport)
HANDLE
__stdcall
CreateThread(
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    DWORD dwStackSize,
    LPTHREAD_START_ROUTINE lpStartAddress,
    LPVOID lpParameter,
    DWORD dwCreationFlags,
    LPDWORD lpThreadId
    );

__declspec(dllimport)
HANDLE
__stdcall
CreateRemoteThread(
    HANDLE hProcess,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    DWORD dwStackSize,
    LPTHREAD_START_ROUTINE lpStartAddress,
    LPVOID lpParameter,
    DWORD dwCreationFlags,
    LPDWORD lpThreadId
    );

__declspec(dllimport)
HANDLE
__stdcall
GetCurrentThread(
    void
    );

__declspec(dllimport)
DWORD
__stdcall
GetCurrentThreadId(
    void
    );

__declspec(dllimport)
DWORD
__stdcall
SetThreadAffinityMask(
    HANDLE hThread,
    DWORD dwThreadAffinityMask
    );


__declspec(dllimport)
DWORD
__stdcall
SetThreadIdealProcessor(
    HANDLE hThread,
    DWORD dwIdealProcessor
    );


__declspec(dllimport)
BOOL
__stdcall
SetProcessPriorityBoost(
    HANDLE hProcess,
    BOOL bDisablePriorityBoost
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessPriorityBoost(
    HANDLE hProcess,
    PBOOL pDisablePriorityBoost
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadPriority(
    HANDLE hThread,
    int nPriority
    );

__declspec(dllimport)
BOOL
__stdcall
SetThreadPriorityBoost(
    HANDLE hThread,
    BOOL bDisablePriorityBoost
    );

__declspec(dllimport)
BOOL
__stdcall
GetThreadPriorityBoost(
    HANDLE hThread,
    PBOOL pDisablePriorityBoost
    );

__declspec(dllimport)
int
__stdcall
GetThreadPriority(
    HANDLE hThread
    );

__declspec(dllimport)
BOOL
__stdcall
GetThreadTimes(
    HANDLE hThread,
    LPFILETIME lpCreationTime,
    LPFILETIME lpExitTime,
    LPFILETIME lpKernelTime,
    LPFILETIME lpUserTime
    );

__declspec(dllimport)
void
__stdcall
ExitThread(
    DWORD dwExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
TerminateThread(
    HANDLE hThread,
    DWORD dwExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
GetExitCodeThread(
    HANDLE hThread,
    LPDWORD lpExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
GetThreadSelectorEntry(
    HANDLE hThread,
    DWORD dwSelector,
    LPLDT_ENTRY lpSelectorEntry
    );

__declspec(dllimport)
DWORD
__stdcall
GetLastError(
    void
    );

__declspec(dllimport)
void
__stdcall
SetLastError(
    DWORD dwErrCode
    );



__declspec(dllimport)
BOOL
__stdcall
GetOverlappedResult(
    HANDLE hFile,
    LPOVERLAPPED lpOverlapped,
    LPDWORD lpNumberOfBytesTransferred,
    BOOL bWait
    );

__declspec(dllimport)
HANDLE
__stdcall
CreateIoCompletionPort(
    HANDLE FileHandle,
    HANDLE ExistingCompletionPort,
    DWORD CompletionKey,
    DWORD NumberOfConcurrentThreads
    );

__declspec(dllimport)
BOOL
__stdcall
GetQueuedCompletionStatus(
    HANDLE CompletionPort,
    LPDWORD lpNumberOfBytesTransferred,
    LPDWORD lpCompletionKey,
    LPOVERLAPPED *lpOverlapped,
    DWORD dwMilliseconds
    );

__declspec(dllimport)
BOOL
__stdcall
PostQueuedCompletionStatus(
    HANDLE CompletionPort,
    DWORD dwNumberOfBytesTransferred,
    DWORD dwCompletionKey,
    LPOVERLAPPED lpOverlapped
    );






__declspec(dllimport)
UINT
__stdcall
SetErrorMode(
    UINT uMode
    );

__declspec(dllimport)
BOOL
__stdcall
ReadProcessMemory(
    HANDLE hProcess,
    LPCVOID lpBaseAddress,
    LPVOID lpBuffer,
    DWORD nSize,
    LPDWORD lpNumberOfBytesRead
    );

__declspec(dllimport)
BOOL
__stdcall
WriteProcessMemory(
    HANDLE hProcess,
    LPVOID lpBaseAddress,
    LPVOID lpBuffer,
    DWORD nSize,
    LPDWORD lpNumberOfBytesWritten
    );


__declspec(dllimport)
BOOL
__stdcall
GetThreadContext(
    HANDLE hThread,
    LPCONTEXT lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
SetThreadContext(
    HANDLE hThread,
    const CONTEXT *lpContext
    );


__declspec(dllimport)
DWORD
__stdcall
SuspendThread(
    HANDLE hThread
    );

__declspec(dllimport)
DWORD
__stdcall
ResumeThread(
    HANDLE hThread
    );



typedef
void
(__stdcall *PAPCFUNC)(
    DWORD dwParam
    );

__declspec(dllimport)
DWORD
__stdcall
QueueUserAPC(
    PAPCFUNC pfnAPC,
    HANDLE hThread,
    DWORD dwData
    );


__declspec(dllimport)
void
__stdcall
DebugBreak(
    void
    );

__declspec(dllimport)
BOOL
__stdcall
WaitForDebugEvent(
    LPDEBUG_EVENT lpDebugEvent,
    DWORD dwMilliseconds
    );

__declspec(dllimport)
BOOL
__stdcall
ContinueDebugEvent(
    DWORD dwProcessId,
    DWORD dwThreadId,
    DWORD dwContinueStatus
    );

__declspec(dllimport)
BOOL
__stdcall
DebugActiveProcess(
    DWORD dwProcessId
    );

__declspec(dllimport)
void
__stdcall
InitializeCriticalSection(
    LPCRITICAL_SECTION lpCriticalSection
    );

__declspec(dllimport)
void
__stdcall
EnterCriticalSection(
    LPCRITICAL_SECTION lpCriticalSection
    );

__declspec(dllimport)
void
__stdcall
LeaveCriticalSection(
    LPCRITICAL_SECTION lpCriticalSection
    );


__declspec(dllimport)
BOOL
__stdcall
TryEnterCriticalSection(
    LPCRITICAL_SECTION lpCriticalSection
    );


__declspec(dllimport)
void
__stdcall
DeleteCriticalSection(
    LPCRITICAL_SECTION lpCriticalSection
    );

__declspec(dllimport)
BOOL
__stdcall
SetEvent(
    HANDLE hEvent
    );

__declspec(dllimport)
BOOL
__stdcall
ResetEvent(
    HANDLE hEvent
    );

__declspec(dllimport)
BOOL
__stdcall
PulseEvent(
    HANDLE hEvent
    );

__declspec(dllimport)
BOOL
__stdcall
ReleaseSemaphore(
    HANDLE hSemaphore,
    LONG lReleaseCount,
    LPLONG lpPreviousCount
    );

__declspec(dllimport)
BOOL
__stdcall
ReleaseMutex(
    HANDLE hMutex
    );

__declspec(dllimport)
DWORD
__stdcall
WaitForSingleObject(
    HANDLE hHandle,
    DWORD dwMilliseconds
    );

__declspec(dllimport)
DWORD
__stdcall
WaitForMultipleObjects(
    DWORD nCount,
    const HANDLE *lpHandles,
    BOOL bWaitAll,
    DWORD dwMilliseconds
    );

__declspec(dllimport)
void
__stdcall
Sleep(
    DWORD dwMilliseconds
    );

__declspec(dllimport)
HGLOBAL
__stdcall
LoadResource(
    HMODULE hModule,
    HRSRC hResInfo
    );

__declspec(dllimport)
DWORD
__stdcall
SizeofResource(
    HMODULE hModule,
    HRSRC hResInfo
    );


__declspec(dllimport)
ATOM
__stdcall
GlobalDeleteAtom(
    ATOM nAtom
    );

__declspec(dllimport)
BOOL
__stdcall
InitAtomTable(
    DWORD nSize
    );

__declspec(dllimport)
ATOM
__stdcall
DeleteAtom(
    ATOM nAtom
    );

__declspec(dllimport)
UINT
__stdcall
SetHandleCount(
    UINT uNumber
    );

__declspec(dllimport)
DWORD
__stdcall
GetLogicalDrives(
    void
    );

__declspec(dllimport)
BOOL
__stdcall
LockFile(
    HANDLE hFile,
    DWORD dwFileOffsetLow,
    DWORD dwFileOffsetHigh,
    DWORD nNumberOfBytesToLockLow,
    DWORD nNumberOfBytesToLockHigh
    );

__declspec(dllimport)
BOOL
__stdcall
UnlockFile(
    HANDLE hFile,
    DWORD dwFileOffsetLow,
    DWORD dwFileOffsetHigh,
    DWORD nNumberOfBytesToUnlockLow,
    DWORD nNumberOfBytesToUnlockHigh
    );

__declspec(dllimport)
BOOL
__stdcall
LockFileEx(
    HANDLE hFile,
    DWORD dwFlags,
    DWORD dwReserved,
    DWORD nNumberOfBytesToLockLow,
    DWORD nNumberOfBytesToLockHigh,
    LPOVERLAPPED lpOverlapped
    );




__declspec(dllimport)
BOOL
__stdcall
UnlockFileEx(
    HANDLE hFile,
    DWORD dwReserved,
    DWORD nNumberOfBytesToUnlockLow,
    DWORD nNumberOfBytesToUnlockHigh,
    LPOVERLAPPED lpOverlapped
    );

typedef struct _BY_HANDLE_FILE_INFORMATION {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD dwVolumeSerialNumber;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD nNumberOfLinks;
    DWORD nFileIndexHigh;
    DWORD nFileIndexLow;
} BY_HANDLE_FILE_INFORMATION, *PBY_HANDLE_FILE_INFORMATION, *LPBY_HANDLE_FILE_INFORMATION;

__declspec(dllimport)
BOOL
__stdcall
GetFileInformationByHandle(
    HANDLE hFile,
    LPBY_HANDLE_FILE_INFORMATION lpFileInformation
    );

__declspec(dllimport)
DWORD
__stdcall
GetFileType(
    HANDLE hFile
    );

__declspec(dllimport)
DWORD
__stdcall
GetFileSize(
    HANDLE hFile,
    LPDWORD lpFileSizeHigh
    );

__declspec(dllimport)
HANDLE
__stdcall
GetStdHandle(
    DWORD nStdHandle
    );

__declspec(dllimport)
BOOL
__stdcall
SetStdHandle(
    DWORD nStdHandle,
    HANDLE hHandle
    );

__declspec(dllimport)
BOOL
__stdcall
WriteFile(
    HANDLE hFile,
    LPCVOID lpBuffer,
    DWORD nNumberOfBytesToWrite,
    LPDWORD lpNumberOfBytesWritten,
    LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
BOOL
__stdcall
ReadFile(
    HANDLE hFile,
    LPVOID lpBuffer,
    DWORD nNumberOfBytesToRead,
    LPDWORD lpNumberOfBytesRead,
    LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
BOOL
__stdcall
FlushFileBuffers(
    HANDLE hFile
    );

__declspec(dllimport)
BOOL
__stdcall
DeviceIoControl(
    HANDLE hDevice,
    DWORD dwIoControlCode,
    LPVOID lpInBuffer,
    DWORD nInBufferSize,
    LPVOID lpOutBuffer,
    DWORD nOutBufferSize,
    LPDWORD lpBytesReturned,
    LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
BOOL
__stdcall
SetEndOfFile(
    HANDLE hFile
    );

__declspec(dllimport)
DWORD
__stdcall
SetFilePointer(
    HANDLE hFile,
    LONG lDistanceToMove,
    PLONG lpDistanceToMoveHigh,
    DWORD dwMoveMethod
    );

__declspec(dllimport)
BOOL
__stdcall
FindClose(
    HANDLE hFindFile
    );

__declspec(dllimport)
BOOL
__stdcall
GetFileTime(
    HANDLE hFile,
    LPFILETIME lpCreationTime,
    LPFILETIME lpLastAccessTime,
    LPFILETIME lpLastWriteTime
    );

__declspec(dllimport)
BOOL
__stdcall
SetFileTime(
    HANDLE hFile,
    const FILETIME *lpCreationTime,
    const FILETIME *lpLastAccessTime,
    const FILETIME *lpLastWriteTime
    );

__declspec(dllimport)
BOOL
__stdcall
CloseHandle(
    HANDLE hObject
    );

__declspec(dllimport)
BOOL
__stdcall
DuplicateHandle(
    HANDLE hSourceProcessHandle,
    HANDLE hSourceHandle,
    HANDLE hTargetProcessHandle,
    LPHANDLE lpTargetHandle,
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    DWORD dwOptions
    );

__declspec(dllimport)
BOOL
__stdcall
GetHandleInformation(
    HANDLE hObject,
    LPDWORD lpdwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
SetHandleInformation(
    HANDLE hObject,
    DWORD dwMask,
    DWORD dwFlags
    );






__declspec(dllimport)
DWORD
__stdcall
LoadModule(
    LPCSTR lpModuleName,
    LPVOID lpParameterBlock
    );

__declspec(dllimport)
UINT
__stdcall
WinExec(
    LPCSTR lpCmdLine,
    UINT uCmdShow
    );

__declspec(dllimport)
BOOL
__stdcall
ClearCommBreak(
    HANDLE hFile
    );

__declspec(dllimport)
BOOL
__stdcall
ClearCommError(
    HANDLE hFile,
    LPDWORD lpErrors,
    LPCOMSTAT lpStat
    );

__declspec(dllimport)
BOOL
__stdcall
SetupComm(
    HANDLE hFile,
    DWORD dwInQueue,
    DWORD dwOutQueue
    );

__declspec(dllimport)
BOOL
__stdcall
EscapeCommFunction(
    HANDLE hFile,
    DWORD dwFunc
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommConfig(
    HANDLE hCommDev,
    LPCOMMCONFIG lpCC,
    LPDWORD lpdwSize
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommMask(
    HANDLE hFile,
    LPDWORD lpEvtMask
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommProperties(
    HANDLE hFile,
    LPCOMMPROP lpCommProp
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommModemStatus(
    HANDLE hFile,
    LPDWORD lpModemStat
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommState(
    HANDLE hFile,
    LPDCB lpDCB
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommTimeouts(
    HANDLE hFile,
    LPCOMMTIMEOUTS lpCommTimeouts
    );

__declspec(dllimport)
BOOL
__stdcall
PurgeComm(
    HANDLE hFile,
    DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommBreak(
    HANDLE hFile
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommConfig(
    HANDLE hCommDev,
    LPCOMMCONFIG lpCC,
    DWORD dwSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommMask(
    HANDLE hFile,
    DWORD dwEvtMask
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommState(
    HANDLE hFile,
    LPDCB lpDCB
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommTimeouts(
    HANDLE hFile,
    LPCOMMTIMEOUTS lpCommTimeouts
    );

__declspec(dllimport)
BOOL
__stdcall
TransmitCommChar(
    HANDLE hFile,
    char cChar
    );

__declspec(dllimport)
BOOL
__stdcall
WaitCommEvent(
    HANDLE hFile,
    LPDWORD lpEvtMask,
    LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
DWORD
__stdcall
SetTapePosition(
    HANDLE hDevice,
    DWORD dwPositionMethod,
    DWORD dwPartition,
    DWORD dwOffsetLow,
    DWORD dwOffsetHigh,
    BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapePosition(
    HANDLE hDevice,
    DWORD dwPositionType,
    LPDWORD lpdwPartition,
    LPDWORD lpdwOffsetLow,
    LPDWORD lpdwOffsetHigh
    );

__declspec(dllimport)
DWORD
__stdcall
PrepareTape(
    HANDLE hDevice,
    DWORD dwOperation,
    BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
EraseTape(
    HANDLE hDevice,
    DWORD dwEraseType,
    BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
CreateTapePartition(
    HANDLE hDevice,
    DWORD dwPartitionMethod,
    DWORD dwCount,
    DWORD dwSize
    );

__declspec(dllimport)
DWORD
__stdcall
WriteTapemark(
    HANDLE hDevice,
    DWORD dwTapemarkType,
    DWORD dwTapemarkCount,
    BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapeStatus(
    HANDLE hDevice
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapeParameters(
    HANDLE hDevice,
    DWORD dwOperation,
    LPDWORD lpdwSize,
    LPVOID lpTapeInformation
    );




__declspec(dllimport)
DWORD
__stdcall
SetTapeParameters(
    HANDLE hDevice,
    DWORD dwOperation,
    LPVOID lpTapeInformation
    );




__declspec(dllimport)
BOOL
__stdcall
Beep(
    DWORD dwFreq,
    DWORD dwDuration
    );

__declspec(dllimport)
int
__stdcall
MulDiv(
    int nNumber,
    int nNumerator,
    int nDenominator
    );

__declspec(dllimport)
void
__stdcall
GetSystemTime(
    LPSYSTEMTIME lpSystemTime
    );

__declspec(dllimport)
void
__stdcall
GetSystemTimeAsFileTime(
    LPFILETIME lpSystemTimeAsFileTime
    );

__declspec(dllimport)
BOOL
__stdcall
SetSystemTime(
    const SYSTEMTIME *lpSystemTime
    );

__declspec(dllimport)
void
__stdcall
GetLocalTime(
    LPSYSTEMTIME lpSystemTime
    );

__declspec(dllimport)
BOOL
__stdcall
SetLocalTime(
    const SYSTEMTIME *lpSystemTime
    );

__declspec(dllimport)
void
__stdcall
GetSystemInfo(
    LPSYSTEM_INFO lpSystemInfo
    );

__declspec(dllimport)
BOOL
__stdcall
IsProcessorFeaturePresent(
    DWORD ProcessorFeature
    );

typedef struct _TIME_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[ 32 ];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[ 32 ];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
} TIME_ZONE_INFORMATION, *PTIME_ZONE_INFORMATION, *LPTIME_ZONE_INFORMATION;

__declspec(dllimport)
BOOL
__stdcall
SystemTimeToTzSpecificLocalTime(
    LPTIME_ZONE_INFORMATION lpTimeZoneInformation,
    LPSYSTEMTIME lpUniversalTime,
    LPSYSTEMTIME lpLocalTime
    );

__declspec(dllimport)
DWORD
__stdcall
GetTimeZoneInformation(
    LPTIME_ZONE_INFORMATION lpTimeZoneInformation
    );

__declspec(dllimport)
BOOL
__stdcall
SetTimeZoneInformation(
    const TIME_ZONE_INFORMATION *lpTimeZoneInformation
    );






__declspec(dllimport)
BOOL
__stdcall
SystemTimeToFileTime(
    const SYSTEMTIME *lpSystemTime,
    LPFILETIME lpFileTime
    );

__declspec(dllimport)
BOOL
__stdcall
FileTimeToLocalFileTime(
    const FILETIME *lpFileTime,
    LPFILETIME lpLocalFileTime
    );

__declspec(dllimport)
BOOL
__stdcall
LocalFileTimeToFileTime(
    const FILETIME *lpLocalFileTime,
    LPFILETIME lpFileTime
    );

__declspec(dllimport)
BOOL
__stdcall
FileTimeToSystemTime(
    const FILETIME *lpFileTime,
    LPSYSTEMTIME lpSystemTime
    );

__declspec(dllimport)
LONG
__stdcall
CompareFileTime(
    const FILETIME *lpFileTime1,
    const FILETIME *lpFileTime2
    );

__declspec(dllimport)
BOOL
__stdcall
FileTimeToDosDateTime(
    const FILETIME *lpFileTime,
    LPWORD lpFatDate,
    LPWORD lpFatTime
    );

__declspec(dllimport)
BOOL
__stdcall
DosDateTimeToFileTime(
    WORD wFatDate,
    WORD wFatTime,
    LPFILETIME lpFileTime
    );

__declspec(dllimport)
DWORD
__stdcall
GetTickCount(
    void
    );

__declspec(dllimport)
BOOL
__stdcall
SetSystemTimeAdjustment(
    DWORD dwTimeAdjustment,
    BOOL  bTimeAdjustmentDisabled
    );

__declspec(dllimport)
BOOL
__stdcall
GetSystemTimeAdjustment(
    PDWORD lpTimeAdjustment,
    PDWORD lpTimeIncrement,
    PBOOL  lpTimeAdjustmentDisabled
    );


__declspec(dllimport)
DWORD
__stdcall
FormatMessageA(
    DWORD dwFlags,
    LPCVOID lpSource,
    DWORD dwMessageId,
    DWORD dwLanguageId,
    LPSTR lpBuffer,
    DWORD nSize,
    va_list *Arguments
    );
__declspec(dllimport)
DWORD
__stdcall
FormatMessageW(
    DWORD dwFlags,
    LPCVOID lpSource,
    DWORD dwMessageId,
    DWORD dwLanguageId,
    LPWSTR lpBuffer,
    DWORD nSize,
    va_list *Arguments
    );
















__declspec(dllimport)
BOOL
__stdcall
CreatePipe(
    PHANDLE hReadPipe,
    PHANDLE hWritePipe,
    LPSECURITY_ATTRIBUTES lpPipeAttributes,
    DWORD nSize
    );

__declspec(dllimport)
BOOL
__stdcall
ConnectNamedPipe(
    HANDLE hNamedPipe,
    LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
BOOL
__stdcall
DisconnectNamedPipe(
    HANDLE hNamedPipe
    );

__declspec(dllimport)
BOOL
__stdcall
SetNamedPipeHandleState(
    HANDLE hNamedPipe,
    LPDWORD lpMode,
    LPDWORD lpMaxCollectionCount,
    LPDWORD lpCollectDataTimeout
    );

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeInfo(
    HANDLE hNamedPipe,
    LPDWORD lpFlags,
    LPDWORD lpOutBufferSize,
    LPDWORD lpInBufferSize,
    LPDWORD lpMaxInstances
    );

__declspec(dllimport)
BOOL
__stdcall
PeekNamedPipe(
    HANDLE hNamedPipe,
    LPVOID lpBuffer,
    DWORD nBufferSize,
    LPDWORD lpBytesRead,
    LPDWORD lpTotalBytesAvail,
    LPDWORD lpBytesLeftThisMessage
    );

__declspec(dllimport)
BOOL
__stdcall
TransactNamedPipe(
    HANDLE hNamedPipe,
    LPVOID lpInBuffer,
    DWORD nInBufferSize,
    LPVOID lpOutBuffer,
    DWORD nOutBufferSize,
    LPDWORD lpBytesRead,
    LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
HANDLE
__stdcall
CreateMailslotA(
    LPCSTR lpName,
    DWORD nMaxMessageSize,
    DWORD lReadTimeout,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateMailslotW(
    LPCWSTR lpName,
    DWORD nMaxMessageSize,
    DWORD lReadTimeout,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );






__declspec(dllimport)
BOOL
__stdcall
GetMailslotInfo(
    HANDLE hMailslot,
    LPDWORD lpMaxMessageSize,
    LPDWORD lpNextSize,
    LPDWORD lpMessageCount,
    LPDWORD lpReadTimeout
    );

__declspec(dllimport)
BOOL
__stdcall
SetMailslotInfo(
    HANDLE hMailslot,
    DWORD lReadTimeout
    );

__declspec(dllimport)
LPVOID
__stdcall
MapViewOfFile(
    HANDLE hFileMappingObject,
    DWORD dwDesiredAccess,
    DWORD dwFileOffsetHigh,
    DWORD dwFileOffsetLow,
    DWORD dwNumberOfBytesToMap
    );

__declspec(dllimport)
BOOL
__stdcall
FlushViewOfFile(
    LPCVOID lpBaseAddress,
    DWORD dwNumberOfBytesToFlush
    );

__declspec(dllimport)
BOOL
__stdcall
UnmapViewOfFile(
    LPCVOID lpBaseAddress
    );






__declspec(dllimport)
int
__stdcall
lstrcmpA(
    LPCSTR lpString1,
    LPCSTR lpString2
    );
__declspec(dllimport)
int
__stdcall
lstrcmpW(
    LPCWSTR lpString1,
    LPCWSTR lpString2
    );






__declspec(dllimport)
int
__stdcall
lstrcmpiA(
    LPCSTR lpString1,
    LPCSTR lpString2
    );
__declspec(dllimport)
int
__stdcall
lstrcmpiW(
    LPCWSTR lpString1,
    LPCWSTR lpString2
    );






__declspec(dllimport)
LPSTR
__stdcall
lstrcpynA(
    LPSTR lpString1,
    LPCSTR lpString2,
    int iMaxLength
    );
__declspec(dllimport)
LPWSTR
__stdcall
lstrcpynW(
    LPWSTR lpString1,
    LPCWSTR lpString2,
    int iMaxLength
    );






__declspec(dllimport)
LPSTR
__stdcall
lstrcpyA(
    LPSTR lpString1,
    LPCSTR lpString2
    );
__declspec(dllimport)
LPWSTR
__stdcall
lstrcpyW(
    LPWSTR lpString1,
    LPCWSTR lpString2
    );






__declspec(dllimport)
LPSTR
__stdcall
lstrcatA(
    LPSTR lpString1,
    LPCSTR lpString2
    );
__declspec(dllimport)
LPWSTR
__stdcall
lstrcatW(
    LPWSTR lpString1,
    LPCWSTR lpString2
    );






__declspec(dllimport)
int
__stdcall
lstrlenA(
    LPCSTR lpString
    );
__declspec(dllimport)
int
__stdcall
lstrlenW(
    LPCWSTR lpString
    );






__declspec(dllimport)
HFILE
__stdcall
OpenFile(
    LPCSTR lpFileName,
    LPOFSTRUCT lpReOpenBuff,
    UINT uStyle
    );

__declspec(dllimport)
HFILE
__stdcall
_lopen(
    LPCSTR lpPathName,
    int iReadWrite
    );

__declspec(dllimport)
HFILE
__stdcall
_lcreat(
    LPCSTR lpPathName,
    int  iAttribute
    );

__declspec(dllimport)
UINT
__stdcall
_lread(
    HFILE hFile,
    LPVOID lpBuffer,
    UINT uBytes
    );

__declspec(dllimport)
UINT
__stdcall
_lwrite(
    HFILE hFile,
    LPCSTR lpBuffer,
    UINT uBytes
    );

__declspec(dllimport)
long
__stdcall
_hread(
    HFILE hFile,
    LPVOID lpBuffer,
    long lBytes
    );

__declspec(dllimport)
long
__stdcall
_hwrite(
    HFILE hFile,
    LPCSTR lpBuffer,
    long lBytes
    );

__declspec(dllimport)
HFILE
__stdcall
_lclose(
    HFILE hFile
    );

__declspec(dllimport)
LONG
__stdcall
_llseek(
    HFILE hFile,
    LONG lOffset,
    int iOrigin
    );

__declspec(dllimport)
BOOL
__stdcall
IsTextUnicode(
    const LPVOID lpBuffer,
    int cb,
    LPINT lpi
    );

__declspec(dllimport)
DWORD
__stdcall
TlsAlloc(
    void
    );



__declspec(dllimport)
LPVOID
__stdcall
TlsGetValue(
    DWORD dwTlsIndex
    );

__declspec(dllimport)
BOOL
__stdcall
TlsSetValue(
    DWORD dwTlsIndex,
    LPVOID lpTlsValue
    );

__declspec(dllimport)
BOOL
__stdcall
TlsFree(
    DWORD dwTlsIndex
    );

typedef
void
(__stdcall *LPOVERLAPPED_COMPLETION_ROUTINE)(
    DWORD dwErrorCode,
    DWORD dwNumberOfBytesTransfered,
    LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
DWORD
__stdcall
SleepEx(
    DWORD dwMilliseconds,
    BOOL bAlertable
    );

__declspec(dllimport)
DWORD
__stdcall
WaitForSingleObjectEx(
    HANDLE hHandle,
    DWORD dwMilliseconds,
    BOOL bAlertable
    );

__declspec(dllimport)
DWORD
__stdcall
WaitForMultipleObjectsEx(
    DWORD nCount,
    const HANDLE *lpHandles,
    BOOL bWaitAll,
    DWORD dwMilliseconds,
    BOOL bAlertable
    );


__declspec(dllimport)
DWORD
__stdcall
SignalObjectAndWait(
    HANDLE hObjectToSignal,
    HANDLE hObjectToWaitOn,
    DWORD dwMilliseconds,
    BOOL bAlertable
    );


__declspec(dllimport)
BOOL
__stdcall
ReadFileEx(
    HANDLE hFile,
    LPVOID lpBuffer,
    DWORD nNumberOfBytesToRead,
    LPOVERLAPPED lpOverlapped,
    LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );

__declspec(dllimport)
BOOL
__stdcall
WriteFileEx(
    HANDLE hFile,
    LPCVOID lpBuffer,
    DWORD nNumberOfBytesToWrite,
    LPOVERLAPPED lpOverlapped,
    LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );

__declspec(dllimport)
BOOL
__stdcall
BackupRead(
    HANDLE hFile,
    LPBYTE lpBuffer,
    DWORD nNumberOfBytesToRead,
    LPDWORD lpNumberOfBytesRead,
    BOOL bAbort,
    BOOL bProcessSecurity,
    LPVOID *lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
BackupSeek(
    HANDLE hFile,
    DWORD  dwLowBytesToSeek,
    DWORD  dwHighBytesToSeek,
    LPDWORD lpdwLowByteSeeked,
    LPDWORD lpdwHighByteSeeked,
    LPVOID *lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
BackupWrite(
    HANDLE hFile,
    LPBYTE lpBuffer,
    DWORD nNumberOfBytesToWrite,
    LPDWORD lpNumberOfBytesWritten,
    BOOL bAbort,
    BOOL bProcessSecurity,
    LPVOID *lpContext
    );




typedef struct _WIN32_STREAM_ID {
        DWORD          dwStreamId ;
        DWORD          dwStreamAttributes ;
        LARGE_INTEGER  Size ;
        DWORD          dwStreamNameSize ;
        WCHAR          cStreamName[ 1 ] ;
} WIN32_STREAM_ID, *LPWIN32_STREAM_ID ;






















__declspec(dllimport)
BOOL
__stdcall
ReadFileScatter(
    HANDLE hFile,
    FILE_SEGMENT_ELEMENT aSegmentArray[],
    DWORD nNumberOfBytesToRead,
    LPDWORD lpReserved,
    LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
BOOL
__stdcall
WriteFileGather(
    HANDLE hFile,
    FILE_SEGMENT_ELEMENT aSegmentArray[],
    DWORD nNumberOfBytesToWrite,
    LPDWORD lpReserved,
    LPOVERLAPPED lpOverlapped
    );


















typedef struct _STARTUPINFOA {
    DWORD   cb;
    LPSTR   lpReserved;
    LPSTR   lpDesktop;
    LPSTR   lpTitle;
    DWORD   dwX;
    DWORD   dwY;
    DWORD   dwXSize;
    DWORD   dwYSize;
    DWORD   dwXCountChars;
    DWORD   dwYCountChars;
    DWORD   dwFillAttribute;
    DWORD   dwFlags;
    WORD    wShowWindow;
    WORD    cbReserved2;
    LPBYTE  lpReserved2;
    HANDLE  hStdInput;
    HANDLE  hStdOutput;
    HANDLE  hStdError;
} STARTUPINFOA, *LPSTARTUPINFOA;
typedef struct _STARTUPINFOW {
    DWORD   cb;
    LPWSTR  lpReserved;
    LPWSTR  lpDesktop;
    LPWSTR  lpTitle;
    DWORD   dwX;
    DWORD   dwY;
    DWORD   dwXSize;
    DWORD   dwYSize;
    DWORD   dwXCountChars;
    DWORD   dwYCountChars;
    DWORD   dwFillAttribute;
    DWORD   dwFlags;
    WORD    wShowWindow;
    WORD    cbReserved2;
    LPBYTE  lpReserved2;
    HANDLE  hStdInput;
    HANDLE  hStdOutput;
    HANDLE  hStdError;
} STARTUPINFOW, *LPSTARTUPINFOW;




typedef STARTUPINFOA STARTUPINFO;
typedef LPSTARTUPINFOA LPSTARTUPINFO;




typedef struct _WIN32_FIND_DATAA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    CHAR   cFileName[ 260 ];
    CHAR   cAlternateFileName[ 14 ];
} WIN32_FIND_DATAA, *PWIN32_FIND_DATAA, *LPWIN32_FIND_DATAA;
typedef struct _WIN32_FIND_DATAW {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    WCHAR  cFileName[ 260 ];
    WCHAR  cAlternateFileName[ 14 ];
} WIN32_FIND_DATAW, *PWIN32_FIND_DATAW, *LPWIN32_FIND_DATAW;





typedef WIN32_FIND_DATAA WIN32_FIND_DATA;
typedef PWIN32_FIND_DATAA PWIN32_FIND_DATA;
typedef LPWIN32_FIND_DATAA LPWIN32_FIND_DATA;


typedef struct _WIN32_FILE_ATTRIBUTE_DATA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
} WIN32_FILE_ATTRIBUTE_DATA, *LPWIN32_FILE_ATTRIBUTE_DATA;

__declspec(dllimport)
HANDLE
__stdcall
CreateMutexA(
    LPSECURITY_ATTRIBUTES lpMutexAttributes,
    BOOL bInitialOwner,
    LPCSTR lpName
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateMutexW(
    LPSECURITY_ATTRIBUTES lpMutexAttributes,
    BOOL bInitialOwner,
    LPCWSTR lpName
    );






__declspec(dllimport)
HANDLE
__stdcall
OpenMutexA(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCSTR lpName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenMutexW(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCWSTR lpName
    );






__declspec(dllimport)
HANDLE
__stdcall
CreateEventA(
    LPSECURITY_ATTRIBUTES lpEventAttributes,
    BOOL bManualReset,
    BOOL bInitialState,
    LPCSTR lpName
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateEventW(
    LPSECURITY_ATTRIBUTES lpEventAttributes,
    BOOL bManualReset,
    BOOL bInitialState,
    LPCWSTR lpName
    );






__declspec(dllimport)
HANDLE
__stdcall
OpenEventA(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCSTR lpName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenEventW(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCWSTR lpName
    );






__declspec(dllimport)
HANDLE
__stdcall
CreateSemaphoreA(
    LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
    LONG lInitialCount,
    LONG lMaximumCount,
    LPCSTR lpName
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateSemaphoreW(
    LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
    LONG lInitialCount,
    LONG lMaximumCount,
    LPCWSTR lpName
    );






__declspec(dllimport)
HANDLE
__stdcall
OpenSemaphoreA(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCSTR lpName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenSemaphoreW(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCWSTR lpName
    );







typedef
void
(__stdcall *PTIMERAPCROUTINE)(
    LPVOID lpArgToCompletionRoutine,
    DWORD dwTimerLowValue,
    DWORD dwTimerHighValue
    );

__declspec(dllimport)
HANDLE
__stdcall
CreateWaitableTimerA(
    LPSECURITY_ATTRIBUTES lpTimerAttributes,
    BOOL bManualReset,
    LPCSTR lpTimerName
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateWaitableTimerW(
    LPSECURITY_ATTRIBUTES lpTimerAttributes,
    BOOL bManualReset,
    LPCWSTR lpTimerName
    );






__declspec(dllimport)
HANDLE
__stdcall
OpenWaitableTimerA(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCSTR lpTimerName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenWaitableTimerW(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCWSTR lpTimerName
    );






__declspec(dllimport)
BOOL
__stdcall
SetWaitableTimer(
    HANDLE hTimer,
    const LARGE_INTEGER *lpDueTime,
    LONG lPeriod,
    PTIMERAPCROUTINE pfnCompletionRoutine,
    LPVOID lpArgToCompletionRoutine,
    BOOL fResume
    );

__declspec(dllimport)
BOOL
__stdcall
CancelWaitableTimer(
    HANDLE hTimer
    );


__declspec(dllimport)
HANDLE
__stdcall
CreateFileMappingA(
    HANDLE hFile,
    LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
    DWORD flProtect,
    DWORD dwMaximumSizeHigh,
    DWORD dwMaximumSizeLow,
    LPCSTR lpName
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateFileMappingW(
    HANDLE hFile,
    LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
    DWORD flProtect,
    DWORD dwMaximumSizeHigh,
    DWORD dwMaximumSizeLow,
    LPCWSTR lpName
    );






__declspec(dllimport)
HANDLE
__stdcall
OpenFileMappingA(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCSTR lpName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenFileMappingW(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCWSTR lpName
    );






__declspec(dllimport)
DWORD
__stdcall
GetLogicalDriveStringsA(
    DWORD nBufferLength,
    LPSTR lpBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
GetLogicalDriveStringsW(
    DWORD nBufferLength,
    LPWSTR lpBuffer
    );






__declspec(dllimport)
HMODULE
__stdcall
LoadLibraryA(
    LPCSTR lpLibFileName
    );
__declspec(dllimport)
HMODULE
__stdcall
LoadLibraryW(
    LPCWSTR lpLibFileName
    );






__declspec(dllimport)
HMODULE
__stdcall
LoadLibraryExA(
    LPCSTR lpLibFileName,
    HANDLE hFile,
    DWORD dwFlags
    );
__declspec(dllimport)
HMODULE
__stdcall
LoadLibraryExW(
    LPCWSTR lpLibFileName,
    HANDLE hFile,
    DWORD dwFlags
    );












__declspec(dllimport)
DWORD
__stdcall
GetModuleFileNameA(
    HMODULE hModule,
    LPSTR lpFilename,
    DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetModuleFileNameW(
    HMODULE hModule,
    LPWSTR lpFilename,
    DWORD nSize
    );






__declspec(dllimport)
HMODULE
__stdcall
GetModuleHandleA(
    LPCSTR lpModuleName
    );
__declspec(dllimport)
HMODULE
__stdcall
GetModuleHandleW(
    LPCWSTR lpModuleName
    );






__declspec(dllimport)
BOOL
__stdcall
CreateProcessA(
    LPCSTR lpApplicationName,
    LPSTR lpCommandLine,
    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    BOOL bInheritHandles,
    DWORD dwCreationFlags,
    LPVOID lpEnvironment,
    LPCSTR lpCurrentDirectory,
    LPSTARTUPINFOA lpStartupInfo,
    LPPROCESS_INFORMATION lpProcessInformation
    );
__declspec(dllimport)
BOOL
__stdcall
CreateProcessW(
    LPCWSTR lpApplicationName,
    LPWSTR lpCommandLine,
    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    BOOL bInheritHandles,
    DWORD dwCreationFlags,
    LPVOID lpEnvironment,
    LPCWSTR lpCurrentDirectory,
    LPSTARTUPINFOW lpStartupInfo,
    LPPROCESS_INFORMATION lpProcessInformation
    );






__declspec(dllimport)
BOOL
__stdcall
SetProcessShutdownParameters(
    DWORD dwLevel,
    DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessShutdownParameters(
    LPDWORD lpdwLevel,
    LPDWORD lpdwFlags
    );

__declspec(dllimport)
DWORD
__stdcall
GetProcessVersion(
    DWORD ProcessId
    );

__declspec(dllimport)
void
__stdcall
FatalAppExitA(
    UINT uAction,
    LPCSTR lpMessageText
    );
__declspec(dllimport)
void
__stdcall
FatalAppExitW(
    UINT uAction,
    LPCWSTR lpMessageText
    );






__declspec(dllimport)
void
__stdcall
GetStartupInfoA(
    LPSTARTUPINFOA lpStartupInfo
    );
__declspec(dllimport)
void
__stdcall
GetStartupInfoW(
    LPSTARTUPINFOW lpStartupInfo
    );






__declspec(dllimport)
LPSTR
__stdcall
GetCommandLineA(
    void
    );
__declspec(dllimport)
LPWSTR
__stdcall
GetCommandLineW(
    void
    );






__declspec(dllimport)
DWORD
__stdcall
GetEnvironmentVariableA(
    LPCSTR lpName,
    LPSTR lpBuffer,
    DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetEnvironmentVariableW(
    LPCWSTR lpName,
    LPWSTR lpBuffer,
    DWORD nSize
    );






__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentVariableA(
    LPCSTR lpName,
    LPCSTR lpValue
    );
__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentVariableW(
    LPCWSTR lpName,
    LPCWSTR lpValue
    );






__declspec(dllimport)
DWORD
__stdcall
ExpandEnvironmentStringsA(
    LPCSTR lpSrc,
    LPSTR lpDst,
    DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
ExpandEnvironmentStringsW(
    LPCWSTR lpSrc,
    LPWSTR lpDst,
    DWORD nSize
    );






__declspec(dllimport)
void
__stdcall
OutputDebugStringA(
    LPCSTR lpOutputString
    );
__declspec(dllimport)
void
__stdcall
OutputDebugStringW(
    LPCWSTR lpOutputString
    );






__declspec(dllimport)
HRSRC
__stdcall
FindResourceA(
    HMODULE hModule,
    LPCSTR lpName,
    LPCSTR lpType
    );
__declspec(dllimport)
HRSRC
__stdcall
FindResourceW(
    HMODULE hModule,
    LPCWSTR lpName,
    LPCWSTR lpType
    );






__declspec(dllimport)
HRSRC
__stdcall
FindResourceExA(
    HMODULE hModule,
    LPCSTR lpType,
    LPCSTR lpName,
    WORD    wLanguage
    );
__declspec(dllimport)
HRSRC
__stdcall
FindResourceExW(
    HMODULE hModule,
    LPCWSTR lpType,
    LPCWSTR lpName,
    WORD    wLanguage
    );







typedef BOOL (__stdcall* ENUMRESTYPEPROC)(HMODULE hModule, LPTSTR lpType,
        LONG lParam);
typedef BOOL (__stdcall* ENUMRESNAMEPROC)(HMODULE hModule, LPCTSTR lpType,
        LPTSTR lpName, LONG lParam);
typedef BOOL (__stdcall* ENUMRESLANGPROC)(HMODULE hModule, LPCTSTR lpType,
        LPCTSTR lpName, WORD  wLanguage, LONG lParam);






__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesA(
    HMODULE hModule,
    ENUMRESTYPEPROC lpEnumFunc,
    LONG lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesW(
    HMODULE hModule,
    ENUMRESTYPEPROC lpEnumFunc,
    LONG lParam
    );







__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesA(
    HMODULE hModule,
    LPCSTR lpType,
    ENUMRESNAMEPROC lpEnumFunc,
    LONG lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesW(
    HMODULE hModule,
    LPCWSTR lpType,
    ENUMRESNAMEPROC lpEnumFunc,
    LONG lParam
    );






__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesA(
    HMODULE hModule,
    LPCSTR lpType,
    LPCSTR lpName,
    ENUMRESLANGPROC lpEnumFunc,
    LONG lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesW(
    HMODULE hModule,
    LPCWSTR lpType,
    LPCWSTR lpName,
    ENUMRESLANGPROC lpEnumFunc,
    LONG lParam
    );






__declspec(dllimport)
HANDLE
__stdcall
BeginUpdateResourceA(
    LPCSTR pFileName,
    BOOL bDeleteExistingResources
    );
__declspec(dllimport)
HANDLE
__stdcall
BeginUpdateResourceW(
    LPCWSTR pFileName,
    BOOL bDeleteExistingResources
    );






__declspec(dllimport)
BOOL
__stdcall
UpdateResourceA(
    HANDLE      hUpdate,
    LPCSTR     lpType,
    LPCSTR     lpName,
    WORD        wLanguage,
    LPVOID      lpData,
    DWORD       cbData
    );
__declspec(dllimport)
BOOL
__stdcall
UpdateResourceW(
    HANDLE      hUpdate,
    LPCWSTR     lpType,
    LPCWSTR     lpName,
    WORD        wLanguage,
    LPVOID      lpData,
    DWORD       cbData
    );






__declspec(dllimport)
BOOL
__stdcall
EndUpdateResourceA(
    HANDLE      hUpdate,
    BOOL        fDiscard
    );
__declspec(dllimport)
BOOL
__stdcall
EndUpdateResourceW(
    HANDLE      hUpdate,
    BOOL        fDiscard
    );






__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomA(
    LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomW(
    LPCWSTR lpString
    );






__declspec(dllimport)
ATOM
__stdcall
GlobalFindAtomA(
    LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
GlobalFindAtomW(
    LPCWSTR lpString
    );






__declspec(dllimport)
UINT
__stdcall
GlobalGetAtomNameA(
    ATOM nAtom,
    LPSTR lpBuffer,
    int nSize
    );
__declspec(dllimport)
UINT
__stdcall
GlobalGetAtomNameW(
    ATOM nAtom,
    LPWSTR lpBuffer,
    int nSize
    );






__declspec(dllimport)
ATOM
__stdcall
AddAtomA(
    LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
AddAtomW(
    LPCWSTR lpString
    );






__declspec(dllimport)
ATOM
__stdcall
FindAtomA(
    LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
FindAtomW(
    LPCWSTR lpString
    );






__declspec(dllimport)
UINT
__stdcall
GetAtomNameA(
    ATOM nAtom,
    LPSTR lpBuffer,
    int nSize
    );
__declspec(dllimport)
UINT
__stdcall
GetAtomNameW(
    ATOM nAtom,
    LPWSTR lpBuffer,
    int nSize
    );






__declspec(dllimport)
UINT
__stdcall
GetProfileIntA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    INT nDefault
    );
__declspec(dllimport)
UINT
__stdcall
GetProfileIntW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    INT nDefault
    );






__declspec(dllimport)
DWORD
__stdcall
GetProfileStringA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    LPCSTR lpDefault,
    LPSTR lpReturnedString,
    DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetProfileStringW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    LPCWSTR lpDefault,
    LPWSTR lpReturnedString,
    DWORD nSize
    );






__declspec(dllimport)
BOOL
__stdcall
WriteProfileStringA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    LPCSTR lpString
    );
__declspec(dllimport)
BOOL
__stdcall
WriteProfileStringW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    LPCWSTR lpString
    );






__declspec(dllimport)
DWORD
__stdcall
GetProfileSectionA(
    LPCSTR lpAppName,
    LPSTR lpReturnedString,
    DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetProfileSectionW(
    LPCWSTR lpAppName,
    LPWSTR lpReturnedString,
    DWORD nSize
    );






__declspec(dllimport)
BOOL
__stdcall
WriteProfileSectionA(
    LPCSTR lpAppName,
    LPCSTR lpString
    );
__declspec(dllimport)
BOOL
__stdcall
WriteProfileSectionW(
    LPCWSTR lpAppName,
    LPCWSTR lpString
    );






__declspec(dllimport)
UINT
__stdcall
GetPrivateProfileIntA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    INT nDefault,
    LPCSTR lpFileName
    );
__declspec(dllimport)
UINT
__stdcall
GetPrivateProfileIntW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    INT nDefault,
    LPCWSTR lpFileName
    );






__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileStringA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    LPCSTR lpDefault,
    LPSTR lpReturnedString,
    DWORD nSize,
    LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileStringW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    LPCWSTR lpDefault,
    LPWSTR lpReturnedString,
    DWORD nSize,
    LPCWSTR lpFileName
    );






__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStringA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    LPCSTR lpString,
    LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStringW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    LPCWSTR lpString,
    LPCWSTR lpFileName
    );






__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionA(
    LPCSTR lpAppName,
    LPSTR lpReturnedString,
    DWORD nSize,
    LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionW(
    LPCWSTR lpAppName,
    LPWSTR lpReturnedString,
    DWORD nSize,
    LPCWSTR lpFileName
    );






__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileSectionA(
    LPCSTR lpAppName,
    LPCSTR lpString,
    LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileSectionW(
    LPCWSTR lpAppName,
    LPCWSTR lpString,
    LPCWSTR lpFileName
    );







__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionNamesA(
    LPSTR lpszReturnBuffer,
    DWORD nSize,
    LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionNamesW(
    LPWSTR lpszReturnBuffer,
    DWORD nSize,
    LPCWSTR lpFileName
    );






__declspec(dllimport)
BOOL
__stdcall
GetPrivateProfileStructA(
    LPCSTR lpszSection,
    LPCSTR lpszKey,
    LPVOID   lpStruct,
    UINT     uSizeStruct,
    LPCSTR szFile
    );
__declspec(dllimport)
BOOL
__stdcall
GetPrivateProfileStructW(
    LPCWSTR lpszSection,
    LPCWSTR lpszKey,
    LPVOID   lpStruct,
    UINT     uSizeStruct,
    LPCWSTR szFile
    );






__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStructA(
    LPCSTR lpszSection,
    LPCSTR lpszKey,
    LPVOID   lpStruct,
    UINT     uSizeStruct,
    LPCSTR szFile
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStructW(
    LPCWSTR lpszSection,
    LPCWSTR lpszKey,
    LPVOID   lpStruct,
    UINT     uSizeStruct,
    LPCWSTR szFile
    );







__declspec(dllimport)
UINT
__stdcall
GetDriveTypeA(
    LPCSTR lpRootPathName
    );
__declspec(dllimport)
UINT
__stdcall
GetDriveTypeW(
    LPCWSTR lpRootPathName
    );






__declspec(dllimport)
UINT
__stdcall
GetSystemDirectoryA(
    LPSTR lpBuffer,
    UINT uSize
    );
__declspec(dllimport)
UINT
__stdcall
GetSystemDirectoryW(
    LPWSTR lpBuffer,
    UINT uSize
    );






__declspec(dllimport)
DWORD
__stdcall
GetTempPathA(
    DWORD nBufferLength,
    LPSTR lpBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
GetTempPathW(
    DWORD nBufferLength,
    LPWSTR lpBuffer
    );






__declspec(dllimport)
UINT
__stdcall
GetTempFileNameA(
    LPCSTR lpPathName,
    LPCSTR lpPrefixString,
    UINT uUnique,
    LPSTR lpTempFileName
    );
__declspec(dllimport)
UINT
__stdcall
GetTempFileNameW(
    LPCWSTR lpPathName,
    LPCWSTR lpPrefixString,
    UINT uUnique,
    LPWSTR lpTempFileName
    );






__declspec(dllimport)
UINT
__stdcall
GetWindowsDirectoryA(
    LPSTR lpBuffer,
    UINT uSize
    );
__declspec(dllimport)
UINT
__stdcall
GetWindowsDirectoryW(
    LPWSTR lpBuffer,
    UINT uSize
    );






__declspec(dllimport)
BOOL
__stdcall
SetCurrentDirectoryA(
    LPCSTR lpPathName
    );
__declspec(dllimport)
BOOL
__stdcall
SetCurrentDirectoryW(
    LPCWSTR lpPathName
    );






__declspec(dllimport)
DWORD
__stdcall
GetCurrentDirectoryA(
    DWORD nBufferLength,
    LPSTR lpBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
GetCurrentDirectoryW(
    DWORD nBufferLength,
    LPWSTR lpBuffer
    );






__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceA(
    LPCSTR lpRootPathName,
    LPDWORD lpSectorsPerCluster,
    LPDWORD lpBytesPerSector,
    LPDWORD lpNumberOfFreeClusters,
    LPDWORD lpTotalNumberOfClusters
    );
__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceW(
    LPCWSTR lpRootPathName,
    LPDWORD lpSectorsPerCluster,
    LPDWORD lpBytesPerSector,
    LPDWORD lpNumberOfFreeClusters,
    LPDWORD lpTotalNumberOfClusters
    );






__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceExA(
    LPCSTR lpDirectoryName,
    PULARGE_INTEGER lpFreeBytesAvailableToCaller,
    PULARGE_INTEGER lpTotalNumberOfBytes,
    PULARGE_INTEGER lpTotalNumberOfFreeBytes
    );
__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceExW(
    LPCWSTR lpDirectoryName,
    PULARGE_INTEGER lpFreeBytesAvailableToCaller,
    PULARGE_INTEGER lpTotalNumberOfBytes,
    PULARGE_INTEGER lpTotalNumberOfFreeBytes
    );






__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryA(
    LPCSTR lpPathName,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryW(
    LPCWSTR lpPathName,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );






__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryExA(
    LPCSTR lpTemplateDirectory,
    LPCSTR lpNewDirectory,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryExW(
    LPCWSTR lpTemplateDirectory,
    LPCWSTR lpNewDirectory,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );






__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryA(
    LPCSTR lpPathName
    );
__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryW(
    LPCWSTR lpPathName
    );






__declspec(dllimport)
DWORD
__stdcall
GetFullPathNameA(
    LPCSTR lpFileName,
    DWORD nBufferLength,
    LPSTR lpBuffer,
    LPSTR *lpFilePart
    );
__declspec(dllimport)
DWORD
__stdcall
GetFullPathNameW(
    LPCWSTR lpFileName,
    DWORD nBufferLength,
    LPWSTR lpBuffer,
    LPWSTR *lpFilePart
    );












__declspec(dllimport)
BOOL
__stdcall
DefineDosDeviceA(
    DWORD dwFlags,
    LPCSTR lpDeviceName,
    LPCSTR lpTargetPath
    );
__declspec(dllimport)
BOOL
__stdcall
DefineDosDeviceW(
    DWORD dwFlags,
    LPCWSTR lpDeviceName,
    LPCWSTR lpTargetPath
    );






__declspec(dllimport)
DWORD
__stdcall
QueryDosDeviceA(
    LPCSTR lpDeviceName,
    LPSTR lpTargetPath,
    DWORD ucchMax
    );
__declspec(dllimport)
DWORD
__stdcall
QueryDosDeviceW(
    LPCWSTR lpDeviceName,
    LPWSTR lpTargetPath,
    DWORD ucchMax
    );








__declspec(dllimport)
HANDLE
__stdcall
CreateFileA(
    LPCSTR lpFileName,
    DWORD dwDesiredAccess,
    DWORD dwShareMode,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    DWORD dwCreationDisposition,
    DWORD dwFlagsAndAttributes,
    HANDLE hTemplateFile
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateFileW(
    LPCWSTR lpFileName,
    DWORD dwDesiredAccess,
    DWORD dwShareMode,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    DWORD dwCreationDisposition,
    DWORD dwFlagsAndAttributes,
    HANDLE hTemplateFile
    );






__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesA(
    LPCSTR lpFileName,
    DWORD dwFileAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesW(
    LPCWSTR lpFileName,
    DWORD dwFileAttributes
    );






__declspec(dllimport)
DWORD
__stdcall
GetFileAttributesA(
    LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetFileAttributesW(
    LPCWSTR lpFileName
    );






typedef enum _GET_FILEEX_INFO_LEVELS {
    GetFileExInfoStandard,
    GetFileExMaxInfoLevel
} GET_FILEEX_INFO_LEVELS;

__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesExA(
    LPCSTR lpFileName,
    GET_FILEEX_INFO_LEVELS fInfoLevelId,
    LPVOID lpFileInformation
    );
__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesExW(
    LPCWSTR lpFileName,
    GET_FILEEX_INFO_LEVELS fInfoLevelId,
    LPVOID lpFileInformation
    );






__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeA(
    LPCSTR lpFileName,
    LPDWORD lpFileSizeHigh
    );
__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeW(
    LPCWSTR lpFileName,
    LPDWORD lpFileSizeHigh
    );






__declspec(dllimport)
BOOL
__stdcall
DeleteFileA(
    LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
DeleteFileW(
    LPCWSTR lpFileName
    );







typedef enum _FINDEX_INFO_LEVELS {
    FindExInfoStandard,
    FindExInfoMaxInfoLevel
} FINDEX_INFO_LEVELS;

typedef enum _FINDEX_SEARCH_OPS {
    FindExSearchNameMatch,
    FindExSearchLimitToDirectories,
    FindExSearchLimitToDevices,
    FindExSearchMaxSearchOp
} FINDEX_SEARCH_OPS;



__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileExA(
    LPCSTR lpFileName,
    FINDEX_INFO_LEVELS fInfoLevelId,
    LPVOID lpFindFileData,
    FINDEX_SEARCH_OPS fSearchOp,
    LPVOID lpSearchFilter,
    DWORD dwAdditionalFlags
    );
__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileExW(
    LPCWSTR lpFileName,
    FINDEX_INFO_LEVELS fInfoLevelId,
    LPVOID lpFindFileData,
    FINDEX_SEARCH_OPS fSearchOp,
    LPVOID lpSearchFilter,
    DWORD dwAdditionalFlags
    );







__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileA(
    LPCSTR lpFileName,
    LPWIN32_FIND_DATAA lpFindFileData
    );
__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileW(
    LPCWSTR lpFileName,
    LPWIN32_FIND_DATAW lpFindFileData
    );






__declspec(dllimport)
BOOL
__stdcall
FindNextFileA(
    HANDLE hFindFile,
    LPWIN32_FIND_DATAA lpFindFileData
    );
__declspec(dllimport)
BOOL
__stdcall
FindNextFileW(
    HANDLE hFindFile,
    LPWIN32_FIND_DATAW lpFindFileData
    );






__declspec(dllimport)
DWORD
__stdcall
SearchPathA(
    LPCSTR lpPath,
    LPCSTR lpFileName,
    LPCSTR lpExtension,
    DWORD nBufferLength,
    LPSTR lpBuffer,
    LPSTR *lpFilePart
    );
__declspec(dllimport)
DWORD
__stdcall
SearchPathW(
    LPCWSTR lpPath,
    LPCWSTR lpFileName,
    LPCWSTR lpExtension,
    DWORD nBufferLength,
    LPWSTR lpBuffer,
    LPWSTR *lpFilePart
    );






__declspec(dllimport)
BOOL
__stdcall
CopyFileA(
    LPCSTR lpExistingFileName,
    LPCSTR lpNewFileName,
    BOOL bFailIfExists
    );
__declspec(dllimport)
BOOL
__stdcall
CopyFileW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName,
    BOOL bFailIfExists
    );







typedef
DWORD
(__stdcall *LPPROGRESS_ROUTINE)(
    LARGE_INTEGER TotalFileSize,
    LARGE_INTEGER TotalBytesTransferred,
    LARGE_INTEGER StreamSize,
    LARGE_INTEGER StreamBytesTransferred,
    DWORD dwStreamNumber,
    DWORD dwCallbackReason,
    HANDLE hSourceFile,
    HANDLE hDestinationFile,
    LPVOID lpData 
    );

__declspec(dllimport)
BOOL
__stdcall
CopyFileExA(
    LPCSTR lpExistingFileName,
    LPCSTR lpNewFileName,
    LPPROGRESS_ROUTINE lpProgressRoutine ,
    LPVOID lpData ,
    LPBOOL pbCancel ,
    DWORD dwCopyFlags
    );
__declspec(dllimport)
BOOL
__stdcall
CopyFileExW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName,
    LPPROGRESS_ROUTINE lpProgressRoutine ,
    LPVOID lpData ,
    LPBOOL pbCancel ,
    DWORD dwCopyFlags
    );







__declspec(dllimport)
BOOL
__stdcall
MoveFileA(
    LPCSTR lpExistingFileName,
    LPCSTR lpNewFileName
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName
    );






__declspec(dllimport)
BOOL
__stdcall
MoveFileExA(
    LPCSTR lpExistingFileName,
    LPCSTR lpNewFileName,
    DWORD dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileExW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName,
    DWORD dwFlags
    );











__declspec(dllimport)
HANDLE
__stdcall
CreateNamedPipeA(
    LPCSTR lpName,
    DWORD dwOpenMode,
    DWORD dwPipeMode,
    DWORD nMaxInstances,
    DWORD nOutBufferSize,
    DWORD nInBufferSize,
    DWORD nDefaultTimeOut,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateNamedPipeW(
    LPCWSTR lpName,
    DWORD dwOpenMode,
    DWORD dwPipeMode,
    DWORD nMaxInstances,
    DWORD nOutBufferSize,
    DWORD nInBufferSize,
    DWORD nDefaultTimeOut,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );






__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeHandleStateA(
    HANDLE hNamedPipe,
    LPDWORD lpState,
    LPDWORD lpCurInstances,
    LPDWORD lpMaxCollectionCount,
    LPDWORD lpCollectDataTimeout,
    LPSTR lpUserName,
    DWORD nMaxUserNameSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeHandleStateW(
    HANDLE hNamedPipe,
    LPDWORD lpState,
    LPDWORD lpCurInstances,
    LPDWORD lpMaxCollectionCount,
    LPDWORD lpCollectDataTimeout,
    LPWSTR lpUserName,
    DWORD nMaxUserNameSize
    );






__declspec(dllimport)
BOOL
__stdcall
CallNamedPipeA(
    LPCSTR lpNamedPipeName,
    LPVOID lpInBuffer,
    DWORD nInBufferSize,
    LPVOID lpOutBuffer,
    DWORD nOutBufferSize,
    LPDWORD lpBytesRead,
    DWORD nTimeOut
    );
__declspec(dllimport)
BOOL
__stdcall
CallNamedPipeW(
    LPCWSTR lpNamedPipeName,
    LPVOID lpInBuffer,
    DWORD nInBufferSize,
    LPVOID lpOutBuffer,
    DWORD nOutBufferSize,
    LPDWORD lpBytesRead,
    DWORD nTimeOut
    );






__declspec(dllimport)
BOOL
__stdcall
WaitNamedPipeA(
    LPCSTR lpNamedPipeName,
    DWORD nTimeOut
    );
__declspec(dllimport)
BOOL
__stdcall
WaitNamedPipeW(
    LPCWSTR lpNamedPipeName,
    DWORD nTimeOut
    );






__declspec(dllimport)
BOOL
__stdcall
SetVolumeLabelA(
    LPCSTR lpRootPathName,
    LPCSTR lpVolumeName
    );
__declspec(dllimport)
BOOL
__stdcall
SetVolumeLabelW(
    LPCWSTR lpRootPathName,
    LPCWSTR lpVolumeName
    );






__declspec(dllimport)
void
__stdcall
SetFileApisToOEM( void );

__declspec(dllimport)
void
__stdcall
SetFileApisToANSI( void );

__declspec(dllimport)
BOOL
__stdcall
AreFileApisANSI( void );

__declspec(dllimport)
BOOL
__stdcall
GetVolumeInformationA(
    LPCSTR lpRootPathName,
    LPSTR lpVolumeNameBuffer,
    DWORD nVolumeNameSize,
    LPDWORD lpVolumeSerialNumber,
    LPDWORD lpMaximumComponentLength,
    LPDWORD lpFileSystemFlags,
    LPSTR lpFileSystemNameBuffer,
    DWORD nFileSystemNameSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetVolumeInformationW(
    LPCWSTR lpRootPathName,
    LPWSTR lpVolumeNameBuffer,
    DWORD nVolumeNameSize,
    LPDWORD lpVolumeSerialNumber,
    LPDWORD lpMaximumComponentLength,
    LPDWORD lpFileSystemFlags,
    LPWSTR lpFileSystemNameBuffer,
    DWORD nFileSystemNameSize
    );






__declspec(dllimport)
BOOL
__stdcall
CancelIo(
    HANDLE hFile
    );





__declspec(dllimport)
BOOL
__stdcall
ClearEventLogA (
    HANDLE hEventLog,
    LPCSTR lpBackupFileName
    );
__declspec(dllimport)
BOOL
__stdcall
ClearEventLogW (
    HANDLE hEventLog,
    LPCWSTR lpBackupFileName
    );






__declspec(dllimport)
BOOL
__stdcall
BackupEventLogA (
    HANDLE hEventLog,
    LPCSTR lpBackupFileName
    );
__declspec(dllimport)
BOOL
__stdcall
BackupEventLogW (
    HANDLE hEventLog,
    LPCWSTR lpBackupFileName
    );






__declspec(dllimport)
BOOL
__stdcall
CloseEventLog (
    HANDLE hEventLog
    );

__declspec(dllimport)
BOOL
__stdcall
DeregisterEventSource (
    HANDLE hEventLog
    );

__declspec(dllimport)
BOOL
__stdcall
NotifyChangeEventLog(
    HANDLE  hEventLog,
    HANDLE  hEvent
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumberOfEventLogRecords (
    HANDLE hEventLog,
    PDWORD NumberOfRecords
    );

__declspec(dllimport)
BOOL
__stdcall
GetOldestEventLogRecord (
    HANDLE hEventLog,
    PDWORD OldestRecord
    );

__declspec(dllimport)
HANDLE
__stdcall
OpenEventLogA (
    LPCSTR lpUNCServerName,
    LPCSTR lpSourceName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenEventLogW (
    LPCWSTR lpUNCServerName,
    LPCWSTR lpSourceName
    );






__declspec(dllimport)
HANDLE
__stdcall
RegisterEventSourceA (
    LPCSTR lpUNCServerName,
    LPCSTR lpSourceName
    );
__declspec(dllimport)
HANDLE
__stdcall
RegisterEventSourceW (
    LPCWSTR lpUNCServerName,
    LPCWSTR lpSourceName
    );






__declspec(dllimport)
HANDLE
__stdcall
OpenBackupEventLogA (
    LPCSTR lpUNCServerName,
    LPCSTR lpFileName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenBackupEventLogW (
    LPCWSTR lpUNCServerName,
    LPCWSTR lpFileName
    );






__declspec(dllimport)
BOOL
__stdcall
ReadEventLogA (
     HANDLE     hEventLog,
     DWORD      dwReadFlags,
     DWORD      dwRecordOffset,
     LPVOID     lpBuffer,
     DWORD      nNumberOfBytesToRead,
     DWORD      *pnBytesRead,
     DWORD      *pnMinNumberOfBytesNeeded
    );
__declspec(dllimport)
BOOL
__stdcall
ReadEventLogW (
     HANDLE     hEventLog,
     DWORD      dwReadFlags,
     DWORD      dwRecordOffset,
     LPVOID     lpBuffer,
     DWORD      nNumberOfBytesToRead,
     DWORD      *pnBytesRead,
     DWORD      *pnMinNumberOfBytesNeeded
    );






__declspec(dllimport)
BOOL
__stdcall
ReportEventA (
     HANDLE     hEventLog,
     WORD       wType,
     WORD       wCategory,
     DWORD      dwEventID,
     PSID       lpUserSid,
     WORD       wNumStrings,
     DWORD      dwDataSize,
     LPCSTR   *lpStrings,
     LPVOID     lpRawData
    );
__declspec(dllimport)
BOOL
__stdcall
ReportEventW (
     HANDLE     hEventLog,
     WORD       wType,
     WORD       wCategory,
     DWORD      dwEventID,
     PSID       lpUserSid,
     WORD       wNumStrings,
     DWORD      dwDataSize,
     LPCWSTR   *lpStrings,
     LPVOID     lpRawData
    );












__declspec(dllimport)
BOOL
__stdcall
DuplicateToken(
    HANDLE ExistingTokenHandle,
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
    PHANDLE DuplicateTokenHandle
    );

__declspec(dllimport)
BOOL
__stdcall
GetKernelObjectSecurity (
    HANDLE Handle,
    SECURITY_INFORMATION RequestedInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    DWORD nLength,
    LPDWORD lpnLengthNeeded
    );

__declspec(dllimport)
BOOL
__stdcall
ImpersonateNamedPipeClient(
    HANDLE hNamedPipe
    );

__declspec(dllimport)
BOOL
__stdcall
ImpersonateSelf(
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
    );


__declspec(dllimport)
BOOL
__stdcall
RevertToSelf (
    void
    );

__declspec(dllimport)
BOOL
__stdcall
SetThreadToken (
    PHANDLE Thread,
    HANDLE Token
    );

__declspec(dllimport)
BOOL
__stdcall
AccessCheck (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    HANDLE ClientToken,
    DWORD DesiredAccess,
    PGENERIC_MAPPING GenericMapping,
    PPRIVILEGE_SET PrivilegeSet,
    LPDWORD PrivilegeSetLength,
    LPDWORD GrantedAccess,
    LPBOOL AccessStatus
    );


__declspec(dllimport)
BOOL
__stdcall
OpenProcessToken (
    HANDLE ProcessHandle,
    DWORD DesiredAccess,
    PHANDLE TokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
OpenThreadToken (
    HANDLE ThreadHandle,
    DWORD DesiredAccess,
    BOOL OpenAsSelf,
    PHANDLE TokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
GetTokenInformation (
    HANDLE TokenHandle,
    TOKEN_INFORMATION_CLASS TokenInformationClass,
    LPVOID TokenInformation,
    DWORD TokenInformationLength,
    PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
SetTokenInformation (
    HANDLE TokenHandle,
    TOKEN_INFORMATION_CLASS TokenInformationClass,
    LPVOID TokenInformation,
    DWORD TokenInformationLength
    );


__declspec(dllimport)
BOOL
__stdcall
AdjustTokenPrivileges (
    HANDLE TokenHandle,
    BOOL DisableAllPrivileges,
    PTOKEN_PRIVILEGES NewState,
    DWORD BufferLength,
    PTOKEN_PRIVILEGES PreviousState,
    PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
AdjustTokenGroups (
    HANDLE TokenHandle,
    BOOL ResetToDefault,
    PTOKEN_GROUPS NewState,
    DWORD BufferLength,
    PTOKEN_GROUPS PreviousState,
    PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
PrivilegeCheck (
    HANDLE ClientToken,
    PPRIVILEGE_SET RequiredPrivileges,
    LPBOOL pfResult
    );


__declspec(dllimport)
BOOL
__stdcall
AccessCheckAndAuditAlarmA (
    LPCSTR SubsystemName,
    LPVOID HandleId,
    LPSTR ObjectTypeName,
    LPSTR ObjectName,
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    DWORD DesiredAccess,
    PGENERIC_MAPPING GenericMapping,
    BOOL ObjectCreation,
    LPDWORD GrantedAccess,
    LPBOOL AccessStatus,
    LPBOOL pfGenerateOnClose
    );
__declspec(dllimport)
BOOL
__stdcall
AccessCheckAndAuditAlarmW (
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    LPWSTR ObjectTypeName,
    LPWSTR ObjectName,
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    DWORD DesiredAccess,
    PGENERIC_MAPPING GenericMapping,
    BOOL ObjectCreation,
    LPDWORD GrantedAccess,
    LPBOOL AccessStatus,
    LPBOOL pfGenerateOnClose
    );







__declspec(dllimport)
BOOL
__stdcall
ObjectOpenAuditAlarmA (
    LPCSTR SubsystemName,
    LPVOID HandleId,
    LPSTR ObjectTypeName,
    LPSTR ObjectName,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    HANDLE ClientToken,
    DWORD DesiredAccess,
    DWORD GrantedAccess,
    PPRIVILEGE_SET Privileges,
    BOOL ObjectCreation,
    BOOL AccessGranted,
    LPBOOL GenerateOnClose
    );
__declspec(dllimport)
BOOL
__stdcall
ObjectOpenAuditAlarmW (
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    LPWSTR ObjectTypeName,
    LPWSTR ObjectName,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    HANDLE ClientToken,
    DWORD DesiredAccess,
    DWORD GrantedAccess,
    PPRIVILEGE_SET Privileges,
    BOOL ObjectCreation,
    BOOL AccessGranted,
    LPBOOL GenerateOnClose
    );







__declspec(dllimport)
BOOL
__stdcall
ObjectPrivilegeAuditAlarmA (
    LPCSTR SubsystemName,
    LPVOID HandleId,
    HANDLE ClientToken,
    DWORD DesiredAccess,
    PPRIVILEGE_SET Privileges,
    BOOL AccessGranted
    );
__declspec(dllimport)
BOOL
__stdcall
ObjectPrivilegeAuditAlarmW (
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    HANDLE ClientToken,
    DWORD DesiredAccess,
    PPRIVILEGE_SET Privileges,
    BOOL AccessGranted
    );







__declspec(dllimport)
BOOL
__stdcall
ObjectCloseAuditAlarmA (
    LPCSTR SubsystemName,
    LPVOID HandleId,
    BOOL GenerateOnClose
    );
__declspec(dllimport)
BOOL
__stdcall
ObjectCloseAuditAlarmW (
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    BOOL GenerateOnClose
    );







__declspec(dllimport)
BOOL
__stdcall
ObjectDeleteAuditAlarmA (
    LPCSTR SubsystemName,
    LPVOID HandleId,
    BOOL GenerateOnClose
    );
__declspec(dllimport)
BOOL
__stdcall
ObjectDeleteAuditAlarmW (
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    BOOL GenerateOnClose
    );







__declspec(dllimport)
BOOL
__stdcall
PrivilegedServiceAuditAlarmA (
    LPCSTR SubsystemName,
    LPCSTR ServiceName,
    HANDLE ClientToken,
    PPRIVILEGE_SET Privileges,
    BOOL AccessGranted
    );
__declspec(dllimport)
BOOL
__stdcall
PrivilegedServiceAuditAlarmW (
    LPCWSTR SubsystemName,
    LPCWSTR ServiceName,
    HANDLE ClientToken,
    PPRIVILEGE_SET Privileges,
    BOOL AccessGranted
    );







__declspec(dllimport)
BOOL
__stdcall
IsValidSid (
    PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
EqualSid (
    PSID pSid1,
    PSID pSid2
    );


__declspec(dllimport)
BOOL
__stdcall
EqualPrefixSid (
    PSID pSid1,
    PSID pSid2
    );


__declspec(dllimport)
DWORD
__stdcall
GetSidLengthRequired (
    UCHAR nSubAuthorityCount
    );


__declspec(dllimport)
BOOL
__stdcall
AllocateAndInitializeSid (
    PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
    BYTE nSubAuthorityCount,
    DWORD nSubAuthority0,
    DWORD nSubAuthority1,
    DWORD nSubAuthority2,
    DWORD nSubAuthority3,
    DWORD nSubAuthority4,
    DWORD nSubAuthority5,
    DWORD nSubAuthority6,
    DWORD nSubAuthority7,
    PSID *pSid
    );

__declspec(dllimport)
PVOID
__stdcall
FreeSid(
    PSID pSid
    );

__declspec(dllimport)
BOOL
__stdcall
InitializeSid (
    PSID Sid,
    PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
    BYTE nSubAuthorityCount
    );


__declspec(dllimport)
PSID_IDENTIFIER_AUTHORITY
__stdcall
GetSidIdentifierAuthority (
    PSID pSid
    );


__declspec(dllimport)
PDWORD
__stdcall
GetSidSubAuthority (
    PSID pSid,
    DWORD nSubAuthority
    );


__declspec(dllimport)
PUCHAR
__stdcall
GetSidSubAuthorityCount (
    PSID pSid
    );


__declspec(dllimport)
DWORD
__stdcall
GetLengthSid (
    PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
CopySid (
    DWORD nDestinationSidLength,
    PSID pDestinationSid,
    PSID pSourceSid
    );


__declspec(dllimport)
BOOL
__stdcall
AreAllAccessesGranted (
    DWORD GrantedAccess,
    DWORD DesiredAccess
    );


__declspec(dllimport)
BOOL
__stdcall
AreAnyAccessesGranted (
    DWORD GrantedAccess,
    DWORD DesiredAccess
    );


__declspec(dllimport)
void
__stdcall
MapGenericMask (
    PDWORD AccessMask,
    PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
IsValidAcl (
    PACL pAcl
    );


__declspec(dllimport)
BOOL
__stdcall
InitializeAcl (
    PACL pAcl,
    DWORD nAclLength,
    DWORD dwAclRevision
    );


__declspec(dllimport)
BOOL
__stdcall
GetAclInformation (
    PACL pAcl,
    LPVOID pAclInformation,
    DWORD nAclInformationLength,
    ACL_INFORMATION_CLASS dwAclInformationClass
    );


__declspec(dllimport)
BOOL
__stdcall
SetAclInformation (
    PACL pAcl,
    LPVOID pAclInformation,
    DWORD nAclInformationLength,
    ACL_INFORMATION_CLASS dwAclInformationClass
    );


__declspec(dllimport)
BOOL
__stdcall
AddAce (
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD dwStartingAceIndex,
    LPVOID pAceList,
    DWORD nAceListLength
    );


__declspec(dllimport)
BOOL
__stdcall
DeleteAce (
    PACL pAcl,
    DWORD dwAceIndex
    );


__declspec(dllimport)
BOOL
__stdcall
GetAce (
    PACL pAcl,
    DWORD dwAceIndex,
    LPVOID *pAce
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessAllowedAce (
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD AccessMask,
    PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessDeniedAce (
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD AccessMask,
    PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAuditAccessAce(
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD dwAccessMask,
    PSID pSid,
    BOOL bAuditSuccess,
    BOOL bAuditFailure
    );


__declspec(dllimport)
BOOL
__stdcall
FindFirstFreeAce (
    PACL pAcl,
    LPVOID *pAce
    );


__declspec(dllimport)
BOOL
__stdcall
InitializeSecurityDescriptor (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    DWORD dwRevision
    );


__declspec(dllimport)
BOOL
__stdcall
IsValidSecurityDescriptor (
    PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


__declspec(dllimport)
DWORD
__stdcall
GetSecurityDescriptorLength (
    PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorControl (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    PSECURITY_DESCRIPTOR_CONTROL pControl,
    LPDWORD lpdwRevision
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorDacl (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    BOOL bDaclPresent,
    PACL pDacl,
    BOOL bDaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorDacl (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    LPBOOL lpbDaclPresent,
    PACL *pDacl,
    LPBOOL lpbDaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorSacl (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    BOOL bSaclPresent,
    PACL pSacl,
    BOOL bSaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorSacl (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    LPBOOL lpbSaclPresent,
    PACL *pSacl,
    LPBOOL lpbSaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorOwner (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    PSID pOwner,
    BOOL bOwnerDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorOwner (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    PSID *pOwner,
    LPBOOL lpbOwnerDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorGroup (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    PSID pGroup,
    BOOL bGroupDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorGroup (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    PSID *pGroup,
    LPBOOL lpbGroupDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
CreatePrivateObjectSecurity (
    PSECURITY_DESCRIPTOR ParentDescriptor,
    PSECURITY_DESCRIPTOR CreatorDescriptor,
    PSECURITY_DESCRIPTOR * NewDescriptor,
    BOOL IsDirectoryObject,
    HANDLE Token,
    PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
SetPrivateObjectSecurity (
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR ModificationDescriptor,
    PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor,
    PGENERIC_MAPPING GenericMapping,
    HANDLE Token
    );


__declspec(dllimport)
BOOL
__stdcall
GetPrivateObjectSecurity (
    PSECURITY_DESCRIPTOR ObjectDescriptor,
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR ResultantDescriptor,
    DWORD DescriptorLength,
    PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
DestroyPrivateObjectSecurity (
    PSECURITY_DESCRIPTOR * ObjectDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
MakeSelfRelativeSD (
    PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
    PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
    LPDWORD lpdwBufferLength
    );


__declspec(dllimport)
BOOL
__stdcall
MakeAbsoluteSD (
    PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
    PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
    LPDWORD lpdwAbsoluteSecurityDescriptorSize,
    PACL pDacl,
    LPDWORD lpdwDaclSize,
    PACL pSacl,
    LPDWORD lpdwSaclSize,
    PSID pOwner,
    LPDWORD lpdwOwnerSize,
    PSID pPrimaryGroup,
    LPDWORD lpdwPrimaryGroupSize
    );


__declspec(dllimport)
BOOL
__stdcall
SetFileSecurityA (
    LPCSTR lpFileName,
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor
    );
__declspec(dllimport)
BOOL
__stdcall
SetFileSecurityW (
    LPCWSTR lpFileName,
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor
    );







__declspec(dllimport)
BOOL
__stdcall
GetFileSecurityA (
    LPCSTR lpFileName,
    SECURITY_INFORMATION RequestedInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    DWORD nLength,
    LPDWORD lpnLengthNeeded
    );
__declspec(dllimport)
BOOL
__stdcall
GetFileSecurityW (
    LPCWSTR lpFileName,
    SECURITY_INFORMATION RequestedInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    DWORD nLength,
    LPDWORD lpnLengthNeeded
    );







__declspec(dllimport)
BOOL
__stdcall
SetKernelObjectSecurity (
    HANDLE Handle,
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR SecurityDescriptor
    );



__declspec(dllimport)
HANDLE
__stdcall
FindFirstChangeNotificationA(
    LPCSTR lpPathName,
    BOOL bWatchSubtree,
    DWORD dwNotifyFilter
    );
__declspec(dllimport)
HANDLE
__stdcall
FindFirstChangeNotificationW(
    LPCWSTR lpPathName,
    BOOL bWatchSubtree,
    DWORD dwNotifyFilter
    );






__declspec(dllimport)
BOOL
__stdcall
FindNextChangeNotification(
    HANDLE hChangeHandle
    );

__declspec(dllimport)
BOOL
__stdcall
FindCloseChangeNotification(
    HANDLE hChangeHandle
    );


__declspec(dllimport)
BOOL
__stdcall
ReadDirectoryChangesW(
    HANDLE hDirectory,
    LPVOID lpBuffer,
    DWORD nBufferLength,
    BOOL bWatchSubtree,
    DWORD dwNotifyFilter,
    LPDWORD lpBytesReturned,
    LPOVERLAPPED lpOverlapped,
    LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );


__declspec(dllimport)
BOOL
__stdcall
VirtualLock(
    LPVOID lpAddress,
    DWORD dwSize
    );

__declspec(dllimport)
BOOL
__stdcall
VirtualUnlock(
    LPVOID lpAddress,
    DWORD dwSize
    );

__declspec(dllimport)
LPVOID
__stdcall
MapViewOfFileEx(
    HANDLE hFileMappingObject,
    DWORD dwDesiredAccess,
    DWORD dwFileOffsetHigh,
    DWORD dwFileOffsetLow,
    DWORD dwNumberOfBytesToMap,
    LPVOID lpBaseAddress
    );

__declspec(dllimport)
BOOL
__stdcall
SetPriorityClass(
    HANDLE hProcess,
    DWORD dwPriorityClass
    );

__declspec(dllimport)
DWORD
__stdcall
GetPriorityClass(
    HANDLE hProcess
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadReadPtr(
    const void *lp,
    UINT ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadWritePtr(
    LPVOID lp,
    UINT ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadHugeReadPtr(
    const void *lp,
    UINT ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadHugeWritePtr(
    LPVOID lp,
    UINT ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadCodePtr(
    FARPROC lpfn
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadStringPtrA(
    LPCSTR lpsz,
    UINT ucchMax
    );
__declspec(dllimport)
BOOL
__stdcall
IsBadStringPtrW(
    LPCWSTR lpsz,
    UINT ucchMax
    );






__declspec(dllimport)
BOOL
__stdcall
LookupAccountSidA(
    LPCSTR lpSystemName,
    PSID Sid,
    LPSTR Name,
    LPDWORD cbName,
    LPSTR ReferencedDomainName,
    LPDWORD cbReferencedDomainName,
    PSID_NAME_USE peUse
    );
__declspec(dllimport)
BOOL
__stdcall
LookupAccountSidW(
    LPCWSTR lpSystemName,
    PSID Sid,
    LPWSTR Name,
    LPDWORD cbName,
    LPWSTR ReferencedDomainName,
    LPDWORD cbReferencedDomainName,
    PSID_NAME_USE peUse
    );






__declspec(dllimport)
BOOL
__stdcall
LookupAccountNameA(
    LPCSTR lpSystemName,
    LPCSTR lpAccountName,
    PSID Sid,
    LPDWORD cbSid,
    LPSTR ReferencedDomainName,
    LPDWORD cbReferencedDomainName,
    PSID_NAME_USE peUse
    );
__declspec(dllimport)
BOOL
__stdcall
LookupAccountNameW(
    LPCWSTR lpSystemName,
    LPCWSTR lpAccountName,
    PSID Sid,
    LPDWORD cbSid,
    LPWSTR ReferencedDomainName,
    LPDWORD cbReferencedDomainName,
    PSID_NAME_USE peUse
    );






__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeValueA(
    LPCSTR lpSystemName,
    LPCSTR lpName,
    PLUID   lpLuid
    );
__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeValueW(
    LPCWSTR lpSystemName,
    LPCWSTR lpName,
    PLUID   lpLuid
    );






__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeNameA(
    LPCSTR lpSystemName,
    PLUID   lpLuid,
    LPSTR lpName,
    LPDWORD cbName
    );
__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeNameW(
    LPCWSTR lpSystemName,
    PLUID   lpLuid,
    LPWSTR lpName,
    LPDWORD cbName
    );






__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeDisplayNameA(
    LPCSTR lpSystemName,
    LPCSTR lpName,
    LPSTR lpDisplayName,
    LPDWORD cbDisplayName,
    LPDWORD lpLanguageId
    );
__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeDisplayNameW(
    LPCWSTR lpSystemName,
    LPCWSTR lpName,
    LPWSTR lpDisplayName,
    LPDWORD cbDisplayName,
    LPDWORD lpLanguageId
    );






__declspec(dllimport)
BOOL
__stdcall
AllocateLocallyUniqueId(
    PLUID Luid
    );

__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBA(
    LPCSTR lpDef,
    LPDCB lpDCB
    );
__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBW(
    LPCWSTR lpDef,
    LPDCB lpDCB
    );






__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBAndTimeoutsA(
    LPCSTR lpDef,
    LPDCB lpDCB,
    LPCOMMTIMEOUTS lpCommTimeouts
    );
__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBAndTimeoutsW(
    LPCWSTR lpDef,
    LPDCB lpDCB,
    LPCOMMTIMEOUTS lpCommTimeouts
    );






__declspec(dllimport)
BOOL
__stdcall
CommConfigDialogA(
    LPCSTR lpszName,
    HWND hWnd,
    LPCOMMCONFIG lpCC
    );
__declspec(dllimport)
BOOL
__stdcall
CommConfigDialogW(
    LPCWSTR lpszName,
    HWND hWnd,
    LPCOMMCONFIG lpCC
    );






__declspec(dllimport)
BOOL
__stdcall
GetDefaultCommConfigA(
    LPCSTR lpszName,
    LPCOMMCONFIG lpCC,
    LPDWORD lpdwSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetDefaultCommConfigW(
    LPCWSTR lpszName,
    LPCOMMCONFIG lpCC,
    LPDWORD lpdwSize
    );






__declspec(dllimport)
BOOL
__stdcall
SetDefaultCommConfigA(
    LPCSTR lpszName,
    LPCOMMCONFIG lpCC,
    DWORD dwSize
    );
__declspec(dllimport)
BOOL
__stdcall
SetDefaultCommConfigW(
    LPCWSTR lpszName,
    LPCOMMCONFIG lpCC,
    DWORD dwSize
    );








__declspec(dllimport)
BOOL
__stdcall
GetComputerNameA (
    LPSTR lpBuffer,
    LPDWORD nSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetComputerNameW (
    LPWSTR lpBuffer,
    LPDWORD nSize
    );






__declspec(dllimport)
BOOL
__stdcall
SetComputerNameA (
    LPCSTR lpComputerName
    );
__declspec(dllimport)
BOOL
__stdcall
SetComputerNameW (
    LPCWSTR lpComputerName
    );






__declspec(dllimport)
BOOL
__stdcall
GetUserNameA (
    LPSTR lpBuffer,
    LPDWORD nSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetUserNameW (
    LPWSTR lpBuffer,
    LPDWORD nSize
    );























__declspec(dllimport)
BOOL
__stdcall
LogonUserA (
    LPSTR lpszUsername,
    LPSTR lpszDomain,
    LPSTR lpszPassword,
    DWORD dwLogonType,
    DWORD dwLogonProvider,
    PHANDLE phToken
    );
__declspec(dllimport)
BOOL
__stdcall
LogonUserW (
    LPWSTR lpszUsername,
    LPWSTR lpszDomain,
    LPWSTR lpszPassword,
    DWORD dwLogonType,
    DWORD dwLogonProvider,
    PHANDLE phToken
    );






__declspec(dllimport)
BOOL
__stdcall
ImpersonateLoggedOnUser(
    HANDLE  hToken
    );

__declspec(dllimport)
BOOL
__stdcall
CreateProcessAsUserA (
    HANDLE hToken,
    LPCSTR lpApplicationName,
    LPSTR lpCommandLine,
    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    BOOL bInheritHandles,
    DWORD dwCreationFlags,
    LPVOID lpEnvironment,
    LPCSTR lpCurrentDirectory,
    LPSTARTUPINFOA lpStartupInfo,
    LPPROCESS_INFORMATION lpProcessInformation
    );
__declspec(dllimport)
BOOL
__stdcall
CreateProcessAsUserW (
    HANDLE hToken,
    LPCWSTR lpApplicationName,
    LPWSTR lpCommandLine,
    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    BOOL bInheritHandles,
    DWORD dwCreationFlags,
    LPVOID lpEnvironment,
    LPCWSTR lpCurrentDirectory,
    LPSTARTUPINFOW lpStartupInfo,
    LPPROCESS_INFORMATION lpProcessInformation
    );






__declspec(dllimport)
BOOL
__stdcall
DuplicateTokenEx(
    HANDLE hExistingToken,
    DWORD dwDesiredAccess,
    LPSECURITY_ATTRIBUTES lpTokenAttributes,
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
    TOKEN_TYPE TokenType,
    PHANDLE phNewToken);
















typedef struct tagHW_PROFILE_INFOA {
    DWORD  dwDockInfo;
    CHAR   szHwProfileGuid[39];
    CHAR   szHwProfileName[80];
} HW_PROFILE_INFOA, *LPHW_PROFILE_INFOA;
typedef struct tagHW_PROFILE_INFOW {
    DWORD  dwDockInfo;
    WCHAR  szHwProfileGuid[39];
    WCHAR  szHwProfileName[80];
} HW_PROFILE_INFOW, *LPHW_PROFILE_INFOW;




typedef HW_PROFILE_INFOA HW_PROFILE_INFO;
typedef LPHW_PROFILE_INFOA LPHW_PROFILE_INFO;



__declspec(dllimport)
BOOL
__stdcall
GetCurrentHwProfileA (
     LPHW_PROFILE_INFOA  lpHwProfileInfo
    );
__declspec(dllimport)
BOOL
__stdcall
GetCurrentHwProfileW (
     LPHW_PROFILE_INFOW  lpHwProfileInfo
    );











__declspec(dllimport)
BOOL
__stdcall
QueryPerformanceCounter(
    LARGE_INTEGER *lpPerformanceCount
    );

__declspec(dllimport)
BOOL
__stdcall
QueryPerformanceFrequency(
    LARGE_INTEGER *lpFrequency
    );

typedef struct _OSVERSIONINFOA {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR   szCSDVersion[ 128 ];       
} OSVERSIONINFOA, *POSVERSIONINFOA, *LPOSVERSIONINFOA;
typedef struct _OSVERSIONINFOW {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR  szCSDVersion[ 128 ];       
} OSVERSIONINFOW, *POSVERSIONINFOW, *LPOSVERSIONINFOW;





typedef OSVERSIONINFOA OSVERSIONINFO;
typedef POSVERSIONINFOA POSVERSIONINFO;
typedef LPOSVERSIONINFOA LPOSVERSIONINFO;











__declspec(dllimport)
BOOL
__stdcall
GetVersionExA(
    LPOSVERSIONINFOA lpVersionInformation
    );
__declspec(dllimport)
BOOL
__stdcall
GetVersionExW(
    LPOSVERSIONINFOW lpVersionInformation
    );

















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































 
 
 
 
 























































































































































































































































































































































































































































































































































typedef struct _SYSTEM_POWER_STATUS {
    BYTE ACLineStatus;
    BYTE BatteryFlag;
    BYTE BatteryLifePercent;
    BYTE Reserved1;
    DWORD BatteryLifeTime;
    DWORD BatteryFullLifeTime;
}   SYSTEM_POWER_STATUS, *LPSYSTEM_POWER_STATUS;

BOOL
__stdcall
GetSystemPowerStatus(
    LPSYSTEM_POWER_STATUS lpSystemPowerStatus
    );

BOOL
__stdcall
SetSystemPowerState(
    BOOL fSuspend,
    BOOL fForce
    );
















typedef struct _WIN_CERTIFICATE {
    DWORD       dwLength;
    WORD        wRevision;
    WORD        wCertificateType;   
    BYTE        bCertificate[1];
} WIN_CERTIFICATE, *LPWIN_CERTIFICATE;






















BOOL
__stdcall
WinSubmitCertificate(
    LPWIN_CERTIFICATE lpCertificate
    );









LONG
__stdcall
WinVerifyTrust(
    HWND    hwnd,
    GUID *  ActionID,
    LPVOID  ActionData
    );


BOOL
__stdcall
WinLoadTrustProvider(
    GUID * ActionID
    );












typedef LPVOID WIN_TRUST_SUBJECT;





typedef struct _WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT {

    HANDLE            hClientToken;
    GUID *            SubjectType;
    WIN_TRUST_SUBJECT Subject;

} WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT, *LPWIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT ;


typedef struct _WIN_TRUST_ACTDATA_SUBJECT_ONLY {

    GUID *            SubjectType;
    WIN_TRUST_SUBJECT Subject;

} WIN_TRUST_ACTDATA_SUBJECT_ONLY, *LPWIN_TRUST_ACTDATA_SUBJECT_ONLY;



















































typedef struct _WIN_TRUST_SUBJECT_FILE {

    HANDLE  hFile;
    LPCWSTR lpPath;

} WIN_TRUST_SUBJECT_FILE, *LPWIN_TRUST_SUBJECT_FILE;












































typedef struct _WIN_TRUST_SUBJECT_FILE_AND_DISPLAY {

    HANDLE  hFile;              
    LPCWSTR lpPath;             
    LPCWSTR lpDisplayName;      
                                

} WIN_TRUST_SUBJECT_FILE_AND_DISPLAY, *LPWIN_TRUST_SUBJECT_FILE_AND_DISPLAY;

























































































typedef struct _WIN_SPUB_TRUSTED_PUBLISHER_DATA {

    HANDLE            hClientToken;
    LPWIN_CERTIFICATE lpCertificate;

} WIN_SPUB_TRUSTED_PUBLISHER_DATA, *LPWIN_SPUB_TRUSTED_PUBLISHER_DATA;





















































































































































































































































































































































































typedef struct  tagXFORM
  {
    FLOAT   eM11;
    FLOAT   eM12;
    FLOAT   eM21;
    FLOAT   eM22;
    FLOAT   eDx;
    FLOAT   eDy;
  } XFORM, *PXFORM,  *LPXFORM;


typedef struct tagBITMAP
  {
    LONG        bmType;
    LONG        bmWidth;
    LONG        bmHeight;
    LONG        bmWidthBytes;
    WORD        bmPlanes;
    WORD        bmBitsPixel;
    LPVOID      bmBits;
  } BITMAP, *PBITMAP,  *NPBITMAP,  *LPBITMAP;

























#pragma warning(disable:4103)

#pragma pack(push)

#pragma pack(1)





typedef struct tagRGBTRIPLE {
        BYTE    rgbtBlue;
        BYTE    rgbtGreen;
        BYTE    rgbtRed;
} RGBTRIPLE;



























#pragma warning(disable:4103)

#pragma pack(pop)









typedef struct tagRGBQUAD {
        BYTE    rgbBlue;
        BYTE    rgbGreen;
        BYTE    rgbRed;
        BYTE    rgbReserved;
} RGBQUAD;
typedef RGBQUAD * LPRGBQUAD;





typedef LONG   LCSCSTYPE;




typedef LONG    LCSGAMUTMATCH;
















typedef long            FXPT16DOT16,  *LPFXPT16DOT16;
typedef long            FXPT2DOT30,  *LPFXPT2DOT30;





typedef struct tagCIEXYZ
{
        FXPT2DOT30 ciexyzX;
        FXPT2DOT30 ciexyzY;
        FXPT2DOT30 ciexyzZ;
} CIEXYZ;
typedef CIEXYZ   *LPCIEXYZ;

typedef struct tagICEXYZTRIPLE
{
        CIEXYZ  ciexyzRed;
        CIEXYZ  ciexyzGreen;
        CIEXYZ  ciexyzBlue;
} CIEXYZTRIPLE;
typedef CIEXYZTRIPLE     *LPCIEXYZTRIPLE;






typedef struct tagLOGCOLORSPACEA {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    CHAR   lcsFilename[260];
} LOGCOLORSPACEA, *LPLOGCOLORSPACEA;
typedef struct tagLOGCOLORSPACEW {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    WCHAR  lcsFilename[260];
} LOGCOLORSPACEW, *LPLOGCOLORSPACEW;




typedef LOGCOLORSPACEA LOGCOLORSPACE;
typedef LPLOGCOLORSPACEA LPLOGCOLORSPACE;






typedef struct tagBITMAPCOREHEADER {
        DWORD   bcSize;                 
        WORD    bcWidth;
        WORD    bcHeight;
        WORD    bcPlanes;
        WORD    bcBitCount;
} BITMAPCOREHEADER,  *LPBITMAPCOREHEADER, *PBITMAPCOREHEADER;


typedef struct tagBITMAPINFOHEADER{
        DWORD      biSize;
        LONG       biWidth;
        LONG       biHeight;
        WORD       biPlanes;
        WORD       biBitCount;
        DWORD      biCompression;
        DWORD      biSizeImage;
        LONG       biXPelsPerMeter;
        LONG       biYPelsPerMeter;
        DWORD      biClrUsed;
        DWORD      biClrImportant;
} BITMAPINFOHEADER,  *LPBITMAPINFOHEADER, *PBITMAPINFOHEADER;



typedef struct {
        DWORD        bV4Size;
        LONG         bV4Width;
        LONG         bV4Height;
        WORD         bV4Planes;
        WORD         bV4BitCount;
        DWORD        bV4V4Compression;
        DWORD        bV4SizeImage;
        LONG         bV4XPelsPerMeter;
        LONG         bV4YPelsPerMeter;
        DWORD        bV4ClrUsed;
        DWORD        bV4ClrImportant;
        DWORD        bV4RedMask;
        DWORD        bV4GreenMask;
        DWORD        bV4BlueMask;
        DWORD        bV4AlphaMask;
        DWORD        bV4CSType;
        CIEXYZTRIPLE bV4Endpoints;
        DWORD        bV4GammaRed;
        DWORD        bV4GammaGreen;
        DWORD        bV4GammaBlue;
} BITMAPV4HEADER,  *LPBITMAPV4HEADER, *PBITMAPV4HEADER;








typedef struct tagBITMAPINFO {
    BITMAPINFOHEADER    bmiHeader;
    RGBQUAD             bmiColors[1];
} BITMAPINFO,  *LPBITMAPINFO, *PBITMAPINFO;

typedef struct tagBITMAPCOREINFO {
    BITMAPCOREHEADER    bmciHeader;
    RGBTRIPLE           bmciColors[1];
} BITMAPCOREINFO,  *LPBITMAPCOREINFO, *PBITMAPCOREINFO;

























#pragma warning(disable:4103)

#pragma pack(push)

#pragma pack(2)





typedef struct tagBITMAPFILEHEADER {
        WORD    bfType;
        DWORD   bfSize;
        WORD    bfReserved1;
        WORD    bfReserved2;
        DWORD   bfOffBits;
} BITMAPFILEHEADER,  *LPBITMAPFILEHEADER, *PBITMAPFILEHEADER;



























#pragma warning(disable:4103)

#pragma pack(pop)













typedef struct tagFONTSIGNATURE
{
    DWORD fsUsb[4];
    DWORD fsCsb[2];
} FONTSIGNATURE, *PFONTSIGNATURE, *LPFONTSIGNATURE;

typedef struct tagCHARSETINFO
{
    UINT ciCharset;
    UINT ciACP;
    FONTSIGNATURE fs;
} CHARSETINFO, *PCHARSETINFO,  *NPCHARSETINFO,  *LPCHARSETINFO;





typedef struct tagLOCALESIGNATURE
{
    DWORD lsUsb[4];
    DWORD lsCsbDefault[2];
    DWORD lsCsbSupported[2];
} LOCALESIGNATURE, *PLOCALESIGNATURE, *LPLOCALESIGNATURE;






typedef struct tagHANDLETABLE
  {
    HGDIOBJ     objectHandle[1];
  } HANDLETABLE, *PHANDLETABLE,  *LPHANDLETABLE;

typedef struct tagMETARECORD
  {
    DWORD       rdSize;
    WORD        rdFunction;
    WORD        rdParm[1];
  } METARECORD;
typedef struct tagMETARECORD  *PMETARECORD;
typedef struct tagMETARECORD   *LPMETARECORD;

typedef struct tagMETAFILEPICT
  {
    LONG        mm;
    LONG        xExt;
    LONG        yExt;
    HMETAFILE   hMF;
  } METAFILEPICT,  *LPMETAFILEPICT;

























#pragma warning(disable:4103)

#pragma pack(push)

#pragma pack(2)





typedef struct tagMETAHEADER
{
    WORD        mtType;
    WORD        mtHeaderSize;
    WORD        mtVersion;
    DWORD       mtSize;
    WORD        mtNoObjects;
    DWORD       mtMaxRecord;
    WORD        mtNoParameters;
} METAHEADER;
typedef struct tagMETAHEADER  *PMETAHEADER;
typedef struct tagMETAHEADER   *LPMETAHEADER;




























#pragma warning(disable:4103)

#pragma pack(pop)










typedef struct tagENHMETARECORD
{
    DWORD   iType;              
    DWORD   nSize;              
    DWORD   dParm[1];           
} ENHMETARECORD, *PENHMETARECORD, *LPENHMETARECORD;

typedef struct tagENHMETAHEADER
{
    DWORD   iType;              
    DWORD   nSize;              
                                
    RECTL   rclBounds;          
    RECTL   rclFrame;           
    DWORD   dSignature;         
    DWORD   nVersion;           
    DWORD   nBytes;             
    DWORD   nRecords;           
    WORD    nHandles;           
                                
    WORD    sReserved;          
    DWORD   nDescription;       
                                
    DWORD   offDescription;     
                                
    DWORD   nPalEntries;        
    SIZEL   szlDevice;          
    SIZEL   szlMillimeters;     
    DWORD   cbPixelFormat;      
                                
    DWORD   offPixelFormat;     
                                
    DWORD   bOpenGL;            
                                
} ENHMETAHEADER, *PENHMETAHEADER, *LPENHMETAHEADER;

















    typedef BYTE BCHAR;



typedef struct tagTEXTMETRICA
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    BYTE        tmFirstChar;
    BYTE        tmLastChar;
    BYTE        tmDefaultChar;
    BYTE        tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
} TEXTMETRICA, *PTEXTMETRICA,  *NPTEXTMETRICA,  *LPTEXTMETRICA;
typedef struct tagTEXTMETRICW
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    WCHAR       tmFirstChar;
    WCHAR       tmLastChar;
    WCHAR       tmDefaultChar;
    WCHAR       tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
} TEXTMETRICW, *PTEXTMETRICW,  *NPTEXTMETRICW,  *LPTEXTMETRICW;






typedef TEXTMETRICA TEXTMETRIC;
typedef PTEXTMETRICA PTEXTMETRIC;
typedef NPTEXTMETRICA NPTEXTMETRIC;
typedef LPTEXTMETRICA LPTEXTMETRIC;































#pragma warning(disable:4103)

#pragma pack(push)

#pragma pack(4)





typedef struct tagNEWTEXTMETRICA
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    BYTE        tmFirstChar;
    BYTE        tmLastChar;
    BYTE        tmDefaultChar;
    BYTE        tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
    DWORD   ntmFlags;
    UINT    ntmSizeEM;
    UINT    ntmCellHeight;
    UINT    ntmAvgWidth;
} NEWTEXTMETRICA, *PNEWTEXTMETRICA,  *NPNEWTEXTMETRICA,  *LPNEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    WCHAR       tmFirstChar;
    WCHAR       tmLastChar;
    WCHAR       tmDefaultChar;
    WCHAR       tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
    DWORD   ntmFlags;
    UINT    ntmSizeEM;
    UINT    ntmCellHeight;
    UINT    ntmAvgWidth;
} NEWTEXTMETRICW, *PNEWTEXTMETRICW,  *NPNEWTEXTMETRICW,  *LPNEWTEXTMETRICW;






typedef NEWTEXTMETRICA NEWTEXTMETRIC;
typedef PNEWTEXTMETRICA PNEWTEXTMETRIC;
typedef NPNEWTEXTMETRICA NPNEWTEXTMETRIC;
typedef LPNEWTEXTMETRICA LPNEWTEXTMETRIC;




























#pragma warning(disable:4103)

#pragma pack(pop)










typedef struct tagNEWTEXTMETRICEXA
{
    NEWTEXTMETRICA  ntmTm;
    FONTSIGNATURE   ntmFontSig;
}NEWTEXTMETRICEXA;
typedef struct tagNEWTEXTMETRICEXW
{
    NEWTEXTMETRICW  ntmTm;
    FONTSIGNATURE   ntmFontSig;
}NEWTEXTMETRICEXW;



typedef NEWTEXTMETRICEXA NEWTEXTMETRICEX;







typedef struct tagPELARRAY
  {
    LONG        paXCount;
    LONG        paYCount;
    LONG        paXExt;
    LONG        paYExt;
    BYTE        paRGBs;
  } PELARRAY, *PPELARRAY,  *NPPELARRAY,  *LPPELARRAY;


typedef struct tagLOGBRUSH
  {
    UINT        lbStyle;
    COLORREF    lbColor;
    LONG        lbHatch;
  } LOGBRUSH, *PLOGBRUSH,  *NPLOGBRUSH,  *LPLOGBRUSH;

typedef LOGBRUSH            PATTERN;
typedef PATTERN             *PPATTERN;
typedef PATTERN         *NPPATTERN;
typedef PATTERN          *LPPATTERN;


typedef struct tagLOGPEN
  {
    UINT        lopnStyle;
    POINT       lopnWidth;
    COLORREF    lopnColor;
  } LOGPEN, *PLOGPEN,  *NPLOGPEN,  *LPLOGPEN;

typedef struct tagEXTLOGPEN {
    DWORD       elpPenStyle;
    DWORD       elpWidth;
    UINT        elpBrushStyle;
    COLORREF    elpColor;
    LONG        elpHatch;
    DWORD       elpNumEntries;
    DWORD       elpStyleEntry[1];
} EXTLOGPEN, *PEXTLOGPEN,  *NPEXTLOGPEN,  *LPEXTLOGPEN;

typedef struct tagPALETTEENTRY {
    BYTE        peRed;
    BYTE        peGreen;
    BYTE        peBlue;
    BYTE        peFlags;
} PALETTEENTRY, *PPALETTEENTRY,  *LPPALETTEENTRY;


typedef struct tagLOGPALETTE {
    WORD        palVersion;
    WORD        palNumEntries;
    PALETTEENTRY        palPalEntry[1];
} LOGPALETTE, *PLOGPALETTE,  *NPLOGPALETTE,  *LPLOGPALETTE;





typedef struct tagLOGFONTA
{
    LONG      lfHeight;
    LONG      lfWidth;
    LONG      lfEscapement;
    LONG      lfOrientation;
    LONG      lfWeight;
    BYTE      lfItalic;
    BYTE      lfUnderline;
    BYTE      lfStrikeOut;
    BYTE      lfCharSet;
    BYTE      lfOutPrecision;
    BYTE      lfClipPrecision;
    BYTE      lfQuality;
    BYTE      lfPitchAndFamily;
    CHAR      lfFaceName[32];
} LOGFONTA, *PLOGFONTA,  *NPLOGFONTA,  *LPLOGFONTA;
typedef struct tagLOGFONTW
{
    LONG      lfHeight;
    LONG      lfWidth;
    LONG      lfEscapement;
    LONG      lfOrientation;
    LONG      lfWeight;
    BYTE      lfItalic;
    BYTE      lfUnderline;
    BYTE      lfStrikeOut;
    BYTE      lfCharSet;
    BYTE      lfOutPrecision;
    BYTE      lfClipPrecision;
    BYTE      lfQuality;
    BYTE      lfPitchAndFamily;
    WCHAR     lfFaceName[32];
} LOGFONTW, *PLOGFONTW,  *NPLOGFONTW,  *LPLOGFONTW;






typedef LOGFONTA LOGFONT;
typedef PLOGFONTA PLOGFONT;
typedef NPLOGFONTA NPLOGFONT;
typedef LPLOGFONTA LPLOGFONT;





typedef struct tagENUMLOGFONTA
{
    LOGFONTA elfLogFont;
    BYTE     elfFullName[64];
    BYTE     elfStyle[32];
} ENUMLOGFONTA, * LPENUMLOGFONTA;

typedef struct tagENUMLOGFONTW
{
    LOGFONTW elfLogFont;
    WCHAR    elfFullName[64];
    WCHAR    elfStyle[32];
} ENUMLOGFONTW, * LPENUMLOGFONTW;




typedef ENUMLOGFONTA ENUMLOGFONT;
typedef LPENUMLOGFONTA LPENUMLOGFONT;



typedef struct tagENUMLOGFONTEXA
{
    LOGFONTA    elfLogFont;
    BYTE        elfFullName[64];
    BYTE        elfStyle[32];
    BYTE        elfScript[32];
} ENUMLOGFONTEXA,  *LPENUMLOGFONTEXA;
typedef struct tagENUMLOGFONTEXW
{
    LOGFONTW    elfLogFont;
    WCHAR       elfFullName[64];
    WCHAR       elfStyle[32];
    WCHAR       elfScript[32];
} ENUMLOGFONTEXW,  *LPENUMLOGFONTEXW;




typedef ENUMLOGFONTEXA ENUMLOGFONTEX;
typedef LPENUMLOGFONTEXA LPENUMLOGFONTEX;
















































































                                    

                                    

                                    



































typedef struct tagPANOSE
{
    BYTE    bFamilyType;
    BYTE    bSerifStyle;
    BYTE    bWeight;
    BYTE    bProportion;
    BYTE    bContrast;
    BYTE    bStrokeVariation;
    BYTE    bArmStyle;
    BYTE    bLetterform;
    BYTE    bMidline;
    BYTE    bXHeight;
} PANOSE, * LPPANOSE;

















































































































typedef struct tagEXTLOGFONTA {
    LOGFONTA    elfLogFont;
    BYTE        elfFullName[64];
    BYTE        elfStyle[32];
    DWORD       elfVersion;     
    DWORD       elfStyleSize;
    DWORD       elfMatch;
    DWORD       elfReserved;
    BYTE        elfVendorId[4];
    DWORD       elfCulture;     
    PANOSE      elfPanose;
} EXTLOGFONTA, *PEXTLOGFONTA,  *NPEXTLOGFONTA,  *LPEXTLOGFONTA;
typedef struct tagEXTLOGFONTW {
    LOGFONTW    elfLogFont;
    WCHAR       elfFullName[64];
    WCHAR       elfStyle[32];
    DWORD       elfVersion;     
    DWORD       elfStyleSize;
    DWORD       elfMatch;
    DWORD       elfReserved;
    BYTE        elfVendorId[4];
    DWORD       elfCulture;     
    PANOSE      elfPanose;
} EXTLOGFONTW, *PEXTLOGFONTW,  *NPEXTLOGFONTW,  *LPEXTLOGFONTW;






typedef EXTLOGFONTA EXTLOGFONT;
typedef PEXTLOGFONTA PEXTLOGFONT;
typedef NPEXTLOGFONTA NPEXTLOGFONT;
typedef LPEXTLOGFONTA LPEXTLOGFONT;


























































































































































































                             

                             

                             

























































































































typedef struct _devicemodeA {
    BYTE   dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    short dmOrientation;
    short dmPaperSize;
    short dmPaperLength;
    short dmPaperWidth;
    short dmScale;
    short dmCopies;
    short dmDefaultSource;
    short dmPrintQuality;
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    BYTE   dmFormName[32];
    WORD   dmLogPixels;
    DWORD  dmBitsPerPel;
    DWORD  dmPelsWidth;
    DWORD  dmPelsHeight;
    DWORD  dmDisplayFlags;
    DWORD  dmDisplayFrequency;
    DWORD  dmICMMethod;
    DWORD  dmICMIntent;
    DWORD  dmMediaType;
    DWORD  dmDitherType;
    DWORD  dmICCManufacturer;
    DWORD  dmICCModel;
    DWORD  dmPanningWidth;
    DWORD  dmPanningHeight;
} DEVMODEA, *PDEVMODEA, *NPDEVMODEA, *LPDEVMODEA;
typedef struct _devicemodeW {
    WCHAR  dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    short dmOrientation;
    short dmPaperSize;
    short dmPaperLength;
    short dmPaperWidth;
    short dmScale;
    short dmCopies;
    short dmDefaultSource;
    short dmPrintQuality;
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    WCHAR  dmFormName[32];
    WORD   dmLogPixels;
    DWORD  dmBitsPerPel;
    DWORD  dmPelsWidth;
    DWORD  dmPelsHeight;
    DWORD  dmDisplayFlags;
    DWORD  dmDisplayFrequency;
    DWORD  dmICMMethod;
    DWORD  dmICMIntent;
    DWORD  dmMediaType;
    DWORD  dmDitherType;
    DWORD  dmICCManufacturer;
    DWORD  dmICCModel;
    DWORD  dmPanningWidth;
    DWORD  dmPanningHeight;
} DEVMODEW, *PDEVMODEW, *NPDEVMODEW, *LPDEVMODEW;






typedef DEVMODEA DEVMODE;
typedef PDEVMODEA PDEVMODE;
typedef NPDEVMODEA NPDEVMODE;
typedef LPDEVMODEA LPDEVMODE;


















































































































































































































typedef struct _RGNDATAHEADER {
    DWORD   dwSize;
    DWORD   iType;
    DWORD   nCount;
    DWORD   nRgnSize;
    RECT    rcBound;
} RGNDATAHEADER, *PRGNDATAHEADER;

typedef struct _RGNDATA {
    RGNDATAHEADER   rdh;
    char            Buffer[1];
} RGNDATA, *PRGNDATA,  *NPRGNDATA,  *LPRGNDATA;


typedef struct _ABC {
    int     abcA;
    UINT    abcB;
    int     abcC;
} ABC, *PABC,  *NPABC,  *LPABC;

typedef struct _ABCFLOAT {
    FLOAT   abcfA;
    FLOAT   abcfB;
    FLOAT   abcfC;
} ABCFLOAT, *PABCFLOAT,  *NPABCFLOAT,  *LPABCFLOAT;



typedef struct _OUTLINETEXTMETRICA {
    UINT    otmSize;
    TEXTMETRICA otmTextMetrics;
    BYTE    otmFiller;
    PANOSE  otmPanoseNumber;
    UINT    otmfsSelection;
    UINT    otmfsType;
     int    otmsCharSlopeRise;
     int    otmsCharSlopeRun;
     int    otmItalicAngle;
    UINT    otmEMSquare;
     int    otmAscent;
     int    otmDescent;
    UINT    otmLineGap;
    UINT    otmsCapEmHeight;
    UINT    otmsXHeight;
    RECT    otmrcFontBox;
     int    otmMacAscent;
     int    otmMacDescent;
    UINT    otmMacLineGap;
    UINT    otmusMinimumPPEM;
    POINT   otmptSubscriptSize;
    POINT   otmptSubscriptOffset;
    POINT   otmptSuperscriptSize;
    POINT   otmptSuperscriptOffset;
    UINT    otmsStrikeoutSize;
     int    otmsStrikeoutPosition;
     int    otmsUnderscoreSize;
     int    otmsUnderscorePosition;
    PSTR    otmpFamilyName;
    PSTR    otmpFaceName;
    PSTR    otmpStyleName;
    PSTR    otmpFullName;
} OUTLINETEXTMETRICA, *POUTLINETEXTMETRICA,  *NPOUTLINETEXTMETRICA,  *LPOUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICW {
    UINT    otmSize;
    TEXTMETRICW otmTextMetrics;
    BYTE    otmFiller;
    PANOSE  otmPanoseNumber;
    UINT    otmfsSelection;
    UINT    otmfsType;
     int    otmsCharSlopeRise;
     int    otmsCharSlopeRun;
     int    otmItalicAngle;
    UINT    otmEMSquare;
     int    otmAscent;
     int    otmDescent;
    UINT    otmLineGap;
    UINT    otmsCapEmHeight;
    UINT    otmsXHeight;
    RECT    otmrcFontBox;
     int    otmMacAscent;
     int    otmMacDescent;
    UINT    otmMacLineGap;
    UINT    otmusMinimumPPEM;
    POINT   otmptSubscriptSize;
    POINT   otmptSubscriptOffset;
    POINT   otmptSuperscriptSize;
    POINT   otmptSuperscriptOffset;
    UINT    otmsStrikeoutSize;
     int    otmsStrikeoutPosition;
     int    otmsUnderscoreSize;
     int    otmsUnderscorePosition;
    PSTR    otmpFamilyName;
    PSTR    otmpFaceName;
    PSTR    otmpStyleName;
    PSTR    otmpFullName;
} OUTLINETEXTMETRICW, *POUTLINETEXTMETRICW,  *NPOUTLINETEXTMETRICW,  *LPOUTLINETEXTMETRICW;






typedef OUTLINETEXTMETRICA OUTLINETEXTMETRIC;
typedef POUTLINETEXTMETRICA POUTLINETEXTMETRIC;
typedef NPOUTLINETEXTMETRICA NPOUTLINETEXTMETRIC;
typedef LPOUTLINETEXTMETRICA LPOUTLINETEXTMETRIC;





typedef struct tagPOLYTEXTA
{
    int       x;
    int       y;
    UINT      n;
    LPCSTR    lpstr;
    UINT      uiFlags;
    RECT      rcl;
    int      *pdx;
} POLYTEXTA, *PPOLYTEXTA,  *NPPOLYTEXTA,  *LPPOLYTEXTA;
typedef struct tagPOLYTEXTW
{
    int       x;
    int       y;
    UINT      n;
    LPCWSTR   lpstr;
    UINT      uiFlags;
    RECT      rcl;
    int      *pdx;
} POLYTEXTW, *PPOLYTEXTW,  *NPPOLYTEXTW,  *LPPOLYTEXTW;






typedef POLYTEXTA POLYTEXT;
typedef PPOLYTEXTA PPOLYTEXT;
typedef NPPOLYTEXTA NPPOLYTEXT;
typedef LPPOLYTEXTA LPPOLYTEXT;


typedef struct _FIXED {
    WORD    fract;
    short   value;
} FIXED;


typedef struct _MAT2 {
     FIXED  eM11;
     FIXED  eM12;
     FIXED  eM21;
     FIXED  eM22;
} MAT2,  *LPMAT2;



typedef struct _GLYPHMETRICS {
    UINT    gmBlackBoxX;
    UINT    gmBlackBoxY;
    POINT   gmptGlyphOrigin;
    short   gmCellIncX;
    short   gmCellIncY;
} GLYPHMETRICS,  *LPGLYPHMETRICS;



















typedef struct tagPOINTFX
{
    FIXED x;
    FIXED y;
} POINTFX, * LPPOINTFX;

typedef struct tagTTPOLYCURVE
{
    WORD    wType;
    WORD    cpfx;
    POINTFX apfx[1];
} TTPOLYCURVE, * LPTTPOLYCURVE;

typedef struct tagTTPOLYGONHEADER
{
    DWORD   cb;
    DWORD   dwType;
    POINTFX pfxStart;
} TTPOLYGONHEADER, * LPTTPOLYGONHEADER;













































typedef struct tagGCP_RESULTSA
    {
    DWORD   lStructSize;
    LPSTR     lpOutString;
    UINT  *lpOrder;
    int   *lpDx;
    int   *lpCaretPos;
    LPSTR   lpClass;
    LPWSTR  lpGlyphs;
    UINT    nGlyphs;
    int     nMaxFit;
    } GCP_RESULTSA, * LPGCP_RESULTSA;
typedef struct tagGCP_RESULTSW
    {
    DWORD   lStructSize;
    LPWSTR    lpOutString;
    UINT  *lpOrder;
    int   *lpDx;
    int   *lpCaretPos;
    LPSTR   lpClass;
    LPWSTR  lpGlyphs;
    UINT    nGlyphs;
    int     nMaxFit;
    } GCP_RESULTSW, * LPGCP_RESULTSW;




typedef GCP_RESULTSA GCP_RESULTS;
typedef LPGCP_RESULTSA LPGCP_RESULTS;



typedef struct _RASTERIZER_STATUS {
    short   nSize;
    short   wFlags;
    short   nLanguageID;
} RASTERIZER_STATUS,  *LPRASTERIZER_STATUS;






typedef struct tagPIXELFORMATDESCRIPTOR
{
    WORD  nSize;
    WORD  nVersion;
    DWORD dwFlags;
    BYTE  iPixelType;
    BYTE  cColorBits;
    BYTE  cRedBits;
    BYTE  cRedShift;
    BYTE  cGreenBits;
    BYTE  cGreenShift;
    BYTE  cBlueBits;
    BYTE  cBlueShift;
    BYTE  cAlphaBits;
    BYTE  cAlphaShift;
    BYTE  cAccumBits;
    BYTE  cAccumRedBits;
    BYTE  cAccumGreenBits;
    BYTE  cAccumBlueBits;
    BYTE  cAccumAlphaBits;
    BYTE  cDepthBits;
    BYTE  cStencilBits;
    BYTE  cAuxBuffers;
    BYTE  iLayerType;
    BYTE  bReserved;
    DWORD dwLayerMask;
    DWORD dwVisibleMask;
    DWORD dwDamageMask;
} PIXELFORMATDESCRIPTOR, *PPIXELFORMATDESCRIPTOR,  *LPPIXELFORMATDESCRIPTOR;
































typedef int (__stdcall* OLDFONTENUMPROCA)(const LOGFONTA *, const TEXTMETRICA *, DWORD, LPARAM);
typedef int (__stdcall* OLDFONTENUMPROCW)(const LOGFONTW *, const TEXTMETRICW *, DWORD, LPARAM);















typedef OLDFONTENUMPROCA    FONTENUMPROCA;
typedef OLDFONTENUMPROCW    FONTENUMPROCW;



typedef FONTENUMPROCA FONTENUMPROC;


typedef int (__stdcall* GOBJENUMPROC)(LPVOID, LPARAM);
typedef void (__stdcall* LINEDDAPROC)(int, int, LPARAM);













__declspec(dllimport) int __stdcall AddFontResourceA(LPCSTR);
__declspec(dllimport) int __stdcall AddFontResourceW(LPCWSTR);






__declspec(dllimport) BOOL  __stdcall AnimatePalette(HPALETTE, UINT, UINT, const PALETTEENTRY *);
__declspec(dllimport) BOOL  __stdcall Arc(HDC, int, int, int, int, int, int, int, int);
__declspec(dllimport) BOOL  __stdcall BitBlt(HDC, int, int, int, int, HDC, int, int, DWORD);
__declspec(dllimport) BOOL  __stdcall CancelDC(HDC);
__declspec(dllimport) BOOL  __stdcall Chord(HDC, int, int, int, int, int, int, int, int);
__declspec(dllimport) int   __stdcall ChoosePixelFormat(HDC, const PIXELFORMATDESCRIPTOR *);
__declspec(dllimport) HMETAFILE  __stdcall CloseMetaFile(HDC);
__declspec(dllimport) int     __stdcall CombineRgn(HRGN, HRGN, HRGN, int);
__declspec(dllimport) HMETAFILE __stdcall CopyMetaFileA(HMETAFILE, LPCSTR);
__declspec(dllimport) HMETAFILE __stdcall CopyMetaFileW(HMETAFILE, LPCWSTR);





__declspec(dllimport) HBITMAP __stdcall CreateBitmap(int, int, UINT, UINT, const void *);
__declspec(dllimport) HBITMAP __stdcall CreateBitmapIndirect(const BITMAP *);
__declspec(dllimport) HBRUSH  __stdcall CreateBrushIndirect(const LOGBRUSH *);
__declspec(dllimport) HBITMAP __stdcall CreateCompatibleBitmap(HDC, int, int);
__declspec(dllimport) HBITMAP __stdcall CreateDiscardableBitmap(HDC, int, int);
__declspec(dllimport) HDC     __stdcall CreateCompatibleDC(HDC);
__declspec(dllimport) HDC     __stdcall CreateDCA(LPCSTR, LPCSTR , LPCSTR , const DEVMODEA *);
__declspec(dllimport) HDC     __stdcall CreateDCW(LPCWSTR, LPCWSTR , LPCWSTR , const DEVMODEW *);





__declspec(dllimport) HBITMAP __stdcall CreateDIBitmap(HDC, const BITMAPINFOHEADER *, DWORD, const void *, const BITMAPINFO *, UINT);
__declspec(dllimport) HBRUSH  __stdcall CreateDIBPatternBrush(HGLOBAL, UINT);
__declspec(dllimport) HBRUSH  __stdcall CreateDIBPatternBrushPt(const void *, UINT);
__declspec(dllimport) HRGN    __stdcall CreateEllipticRgn(int, int, int, int);
__declspec(dllimport) HRGN    __stdcall CreateEllipticRgnIndirect(const RECT *);
__declspec(dllimport) HFONT   __stdcall CreateFontIndirectA(const LOGFONTA *);
__declspec(dllimport) HFONT   __stdcall CreateFontIndirectW(const LOGFONTW *);





__declspec(dllimport) HFONT   __stdcall CreateFontA(int, int, int, int, int, DWORD,
                             DWORD, DWORD, DWORD, DWORD, DWORD,
                             DWORD, DWORD, LPCSTR);
__declspec(dllimport) HFONT   __stdcall CreateFontW(int, int, int, int, int, DWORD,
                             DWORD, DWORD, DWORD, DWORD, DWORD,
                             DWORD, DWORD, LPCWSTR);






__declspec(dllimport) HBRUSH  __stdcall CreateHatchBrush(int, COLORREF);
__declspec(dllimport) HDC     __stdcall CreateICA(LPCSTR, LPCSTR , LPCSTR , const DEVMODEA *);
__declspec(dllimport) HDC     __stdcall CreateICW(LPCWSTR, LPCWSTR , LPCWSTR , const DEVMODEW *);





__declspec(dllimport) HDC     __stdcall CreateMetaFileA(LPCSTR);
__declspec(dllimport) HDC     __stdcall CreateMetaFileW(LPCWSTR);





__declspec(dllimport) HPALETTE __stdcall CreatePalette(const LOGPALETTE *);
__declspec(dllimport) HPEN    __stdcall CreatePen(int, int, COLORREF);
__declspec(dllimport) HPEN    __stdcall CreatePenIndirect(const LOGPEN *);
__declspec(dllimport) HRGN    __stdcall CreatePolyPolygonRgn(const POINT *, const INT *, int, int);
__declspec(dllimport) HBRUSH  __stdcall CreatePatternBrush(HBITMAP);
__declspec(dllimport) HRGN    __stdcall CreateRectRgn(int, int, int, int);
__declspec(dllimport) HRGN    __stdcall CreateRectRgnIndirect(const RECT *);
__declspec(dllimport) HRGN    __stdcall CreateRoundRectRgn(int, int, int, int, int, int);
__declspec(dllimport) BOOL    __stdcall CreateScalableFontResourceA(DWORD, LPCSTR, LPCSTR, LPCSTR);
__declspec(dllimport) BOOL    __stdcall CreateScalableFontResourceW(DWORD, LPCWSTR, LPCWSTR, LPCWSTR);





__declspec(dllimport) HBRUSH  __stdcall CreateSolidBrush(COLORREF);

__declspec(dllimport) BOOL __stdcall DeleteDC(HDC);
__declspec(dllimport) BOOL __stdcall DeleteMetaFile(HMETAFILE);
__declspec(dllimport) BOOL __stdcall DeleteObject(HGDIOBJ);
__declspec(dllimport) int  __stdcall DescribePixelFormat(HDC, int, UINT, LPPIXELFORMATDESCRIPTOR);





typedef UINT   (__stdcall* LPFNDEVMODE)(HWND, HMODULE, LPDEVMODE, LPSTR, LPSTR, LPDEVMODE, LPSTR, UINT);

typedef DWORD  (__stdcall* LPFNDEVCAPS)(LPSTR, LPSTR, UINT, LPSTR, LPDEVMODE);
























































__declspec(dllimport) int  __stdcall DeviceCapabilitiesA(LPCSTR, LPCSTR, WORD,
                                LPSTR, const DEVMODEA *);
__declspec(dllimport) int  __stdcall DeviceCapabilitiesW(LPCWSTR, LPCWSTR, WORD,
                                LPWSTR, const DEVMODEW *);






__declspec(dllimport) int  __stdcall DrawEscape(HDC, int, int, LPCSTR);
__declspec(dllimport) BOOL __stdcall Ellipse(HDC, int, int, int, int);


__declspec(dllimport) int  __stdcall EnumFontFamiliesExA(HDC, LPLOGFONTA,FONTENUMPROCA, LPARAM,DWORD);
__declspec(dllimport) int  __stdcall EnumFontFamiliesExW(HDC, LPLOGFONTW,FONTENUMPROCW, LPARAM,DWORD);







__declspec(dllimport) int  __stdcall EnumFontFamiliesA(HDC, LPCSTR, FONTENUMPROCA, LPARAM);
__declspec(dllimport) int  __stdcall EnumFontFamiliesW(HDC, LPCWSTR, FONTENUMPROCW, LPARAM);





__declspec(dllimport) int  __stdcall EnumFontsA(HDC, LPCSTR,  FONTENUMPROCA, LPARAM);
__declspec(dllimport) int  __stdcall EnumFontsW(HDC, LPCWSTR,  FONTENUMPROCW, LPARAM);







__declspec(dllimport) int  __stdcall EnumObjects(HDC, int, GOBJENUMPROC, LPARAM);





__declspec(dllimport) BOOL __stdcall EqualRgn(HRGN, HRGN);
__declspec(dllimport) int  __stdcall Escape(HDC, int, int, LPCSTR, LPVOID);
__declspec(dllimport) int  __stdcall ExtEscape(HDC, int, int, LPCSTR, int, LPSTR);
__declspec(dllimport) int  __stdcall ExcludeClipRect(HDC, int, int, int, int);
__declspec(dllimport) HRGN __stdcall ExtCreateRegion(const XFORM *, DWORD, const RGNDATA *);
__declspec(dllimport) BOOL  __stdcall ExtFloodFill(HDC, int, int, COLORREF, UINT);
__declspec(dllimport) BOOL   __stdcall FillRgn(HDC, HRGN, HBRUSH);
__declspec(dllimport) BOOL   __stdcall FloodFill(HDC, int, int, COLORREF);
__declspec(dllimport) BOOL   __stdcall FrameRgn(HDC, HRGN, HBRUSH, int, int);
__declspec(dllimport) int   __stdcall GetROP2(HDC);
__declspec(dllimport) BOOL  __stdcall GetAspectRatioFilterEx(HDC, LPSIZE);
__declspec(dllimport) COLORREF __stdcall GetBkColor(HDC);
__declspec(dllimport) int   __stdcall GetBkMode(HDC);
__declspec(dllimport) LONG  __stdcall GetBitmapBits(HBITMAP, LONG, LPVOID);
__declspec(dllimport) BOOL  __stdcall GetBitmapDimensionEx(HBITMAP, LPSIZE);
__declspec(dllimport) UINT  __stdcall GetBoundsRect(HDC, LPRECT, UINT);

__declspec(dllimport) BOOL  __stdcall GetBrushOrgEx(HDC, LPPOINT);

__declspec(dllimport) BOOL  __stdcall GetCharWidthA(HDC, UINT, UINT, LPINT);
__declspec(dllimport) BOOL  __stdcall GetCharWidthW(HDC, UINT, UINT, LPINT);





__declspec(dllimport) BOOL  __stdcall GetCharWidth32A(HDC, UINT, UINT, LPINT);
__declspec(dllimport) BOOL  __stdcall GetCharWidth32W(HDC, UINT, UINT, LPINT);





__declspec(dllimport) BOOL  __stdcall GetCharWidthFloatA(HDC, UINT, UINT, PFLOAT);
__declspec(dllimport) BOOL  __stdcall GetCharWidthFloatW(HDC, UINT, UINT, PFLOAT);






__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsA(HDC, UINT, UINT, LPABC);
__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsW(HDC, UINT, UINT, LPABC);





__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsFloatA(HDC, UINT, UINT, LPABCFLOAT);
__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsFloatW(HDC, UINT, UINT, LPABCFLOAT);






__declspec(dllimport) int   __stdcall GetClipBox(HDC, LPRECT);
__declspec(dllimport) int   __stdcall GetClipRgn(HDC, HRGN);
__declspec(dllimport) int   __stdcall GetMetaRgn(HDC, HRGN);
__declspec(dllimport) HGDIOBJ __stdcall GetCurrentObject(HDC, UINT);
__declspec(dllimport) BOOL  __stdcall GetCurrentPositionEx(HDC, LPPOINT);
__declspec(dllimport) int   __stdcall GetDeviceCaps(HDC, int);
__declspec(dllimport) int   __stdcall GetDIBits(HDC, HBITMAP, UINT, UINT, LPVOID, LPBITMAPINFO, UINT);
__declspec(dllimport) DWORD __stdcall GetFontData(HDC, DWORD, DWORD, LPVOID, DWORD);
__declspec(dllimport) DWORD __stdcall GetGlyphOutlineA(HDC, UINT, UINT, LPGLYPHMETRICS, DWORD, LPVOID, const MAT2 *);
__declspec(dllimport) DWORD __stdcall GetGlyphOutlineW(HDC, UINT, UINT, LPGLYPHMETRICS, DWORD, LPVOID, const MAT2 *);





__declspec(dllimport) int   __stdcall GetGraphicsMode(HDC);
__declspec(dllimport) int   __stdcall GetMapMode(HDC);
__declspec(dllimport) UINT  __stdcall GetMetaFileBitsEx(HMETAFILE, UINT, LPVOID);
__declspec(dllimport) HMETAFILE   __stdcall GetMetaFileA(LPCSTR);
__declspec(dllimport) HMETAFILE   __stdcall GetMetaFileW(LPCWSTR);





__declspec(dllimport) COLORREF __stdcall GetNearestColor(HDC, COLORREF);
__declspec(dllimport) UINT  __stdcall GetNearestPaletteIndex(HPALETTE, COLORREF);
__declspec(dllimport) DWORD __stdcall GetObjectType(HGDIOBJ h);



__declspec(dllimport) UINT __stdcall GetOutlineTextMetricsA(HDC, UINT, LPOUTLINETEXTMETRICA);
__declspec(dllimport) UINT __stdcall GetOutlineTextMetricsW(HDC, UINT, LPOUTLINETEXTMETRICW);








__declspec(dllimport) UINT  __stdcall GetPaletteEntries(HPALETTE, UINT, UINT, LPPALETTEENTRY);
__declspec(dllimport) COLORREF __stdcall GetPixel(HDC, int, int);
__declspec(dllimport) int   __stdcall GetPixelFormat(HDC);
__declspec(dllimport) int   __stdcall GetPolyFillMode(HDC);
__declspec(dllimport) BOOL  __stdcall GetRasterizerCaps(LPRASTERIZER_STATUS, UINT);
__declspec(dllimport) DWORD __stdcall GetRegionData(HRGN, DWORD, LPRGNDATA);
__declspec(dllimport) int   __stdcall GetRgnBox(HRGN, LPRECT);
__declspec(dllimport) HGDIOBJ __stdcall GetStockObject(int);
__declspec(dllimport) int   __stdcall GetStretchBltMode(HDC);
__declspec(dllimport) UINT  __stdcall GetSystemPaletteEntries(HDC, UINT, UINT, LPPALETTEENTRY);
__declspec(dllimport) UINT  __stdcall GetSystemPaletteUse(HDC);
__declspec(dllimport) int   __stdcall GetTextCharacterExtra(HDC);
__declspec(dllimport) UINT  __stdcall GetTextAlign(HDC);
__declspec(dllimport) COLORREF __stdcall GetTextColor(HDC);

__declspec(dllimport) BOOL  __stdcall GetTextExtentPointA(
                    HDC,
                    LPCSTR,
                    int,
                    LPSIZE
                    );
__declspec(dllimport) BOOL  __stdcall GetTextExtentPointW(
                    HDC,
                    LPCWSTR,
                    int,
                    LPSIZE
                    );






__declspec(dllimport) BOOL  __stdcall GetTextExtentPoint32A(
                    HDC,
                    LPCSTR,
                    int,
                    LPSIZE
                    );
__declspec(dllimport) BOOL  __stdcall GetTextExtentPoint32W(
                    HDC,
                    LPCWSTR,
                    int,
                    LPSIZE
                    );






__declspec(dllimport) BOOL  __stdcall GetTextExtentExPointA(
                    HDC,
                    LPCSTR,
                    int,
                    int,
                    LPINT,
                    LPINT,
                    LPSIZE
                    );
__declspec(dllimport) BOOL  __stdcall GetTextExtentExPointW(
                    HDC,
                    LPCWSTR,
                    int,
                    int,
                    LPINT,
                    LPINT,
                    LPSIZE
                    );







__declspec(dllimport) int __stdcall GetTextCharset(HDC hdc);
__declspec(dllimport) int __stdcall GetTextCharsetInfo(HDC hdc, LPFONTSIGNATURE lpSig, DWORD dwFlags);
__declspec(dllimport) BOOL __stdcall TranslateCharsetInfo( DWORD  *lpSrc, LPCHARSETINFO lpCs, DWORD dwFlags);
__declspec(dllimport) DWORD __stdcall GetFontLanguageInfo( HDC );
__declspec(dllimport) DWORD __stdcall GetCharacterPlacementA(HDC, LPCSTR, int, int, LPGCP_RESULTSA, DWORD);
__declspec(dllimport) DWORD __stdcall GetCharacterPlacementW(HDC, LPCWSTR, int, int, LPGCP_RESULTSW, DWORD);







__declspec(dllimport) BOOL  __stdcall GetViewportExtEx(HDC, LPSIZE);
__declspec(dllimport) BOOL  __stdcall GetViewportOrgEx(HDC, LPPOINT);
__declspec(dllimport) BOOL  __stdcall GetWindowExtEx(HDC, LPSIZE);
__declspec(dllimport) BOOL  __stdcall GetWindowOrgEx(HDC, LPPOINT);

__declspec(dllimport) int  __stdcall IntersectClipRect(HDC, int, int, int, int);
__declspec(dllimport) BOOL __stdcall InvertRgn(HDC, HRGN);
__declspec(dllimport) BOOL __stdcall LineDDA(int, int, int, int, LINEDDAPROC, LPARAM);
__declspec(dllimport) BOOL __stdcall LineTo(HDC, int, int);
__declspec(dllimport) BOOL __stdcall MaskBlt(HDC, int, int, int, int,
              HDC, int, int, HBITMAP, int, int, DWORD);
__declspec(dllimport) BOOL __stdcall PlgBlt(HDC, const POINT *, HDC, int, int, int,
                     int, HBITMAP, int, int);

__declspec(dllimport) int  __stdcall OffsetClipRgn(HDC, int, int);
__declspec(dllimport) int  __stdcall OffsetRgn(HRGN, int, int);
__declspec(dllimport) BOOL __stdcall PatBlt(HDC, int, int, int, int, DWORD);
__declspec(dllimport) BOOL __stdcall Pie(HDC, int, int, int, int, int, int, int, int);
__declspec(dllimport) BOOL __stdcall PlayMetaFile(HDC, HMETAFILE);
__declspec(dllimport) BOOL __stdcall PaintRgn(HDC, HRGN);
__declspec(dllimport) BOOL __stdcall PolyPolygon(HDC, const POINT *, const INT *, int);
__declspec(dllimport) BOOL __stdcall PtInRegion(HRGN, int, int);
__declspec(dllimport) BOOL __stdcall PtVisible(HDC, int, int);
__declspec(dllimport) BOOL __stdcall RectInRegion(HRGN, const RECT *);
__declspec(dllimport) BOOL __stdcall RectVisible(HDC, const RECT *);
__declspec(dllimport) BOOL __stdcall Rectangle(HDC, int, int, int, int);
__declspec(dllimport) BOOL __stdcall RestoreDC(HDC, int);
__declspec(dllimport) HDC  __stdcall ResetDCA(HDC, const DEVMODEA *);
__declspec(dllimport) HDC  __stdcall ResetDCW(HDC, const DEVMODEW *);





__declspec(dllimport) UINT __stdcall RealizePalette(HDC);
__declspec(dllimport) BOOL __stdcall RemoveFontResourceA(LPCSTR);
__declspec(dllimport) BOOL __stdcall RemoveFontResourceW(LPCWSTR);





__declspec(dllimport) BOOL  __stdcall RoundRect(HDC, int, int, int, int, int, int);
__declspec(dllimport) BOOL __stdcall ResizePalette(HPALETTE, UINT);

__declspec(dllimport) int  __stdcall SaveDC(HDC);
__declspec(dllimport) int  __stdcall SelectClipRgn(HDC, HRGN);
__declspec(dllimport) int  __stdcall ExtSelectClipRgn(HDC, HRGN, int);
__declspec(dllimport) int  __stdcall SetMetaRgn(HDC);
__declspec(dllimport) HGDIOBJ __stdcall SelectObject(HDC, HGDIOBJ);
__declspec(dllimport) HPALETTE __stdcall SelectPalette(HDC, HPALETTE, BOOL);
__declspec(dllimport) COLORREF __stdcall SetBkColor(HDC, COLORREF);
__declspec(dllimport) int   __stdcall SetBkMode(HDC, int);
__declspec(dllimport) LONG  __stdcall SetBitmapBits(HBITMAP, DWORD, const void *);

__declspec(dllimport) UINT  __stdcall SetBoundsRect(HDC, const RECT *, UINT);
__declspec(dllimport) int   __stdcall SetDIBits(HDC, HBITMAP, UINT, UINT, const void *, const BITMAPINFO *, UINT);
__declspec(dllimport) int   __stdcall SetDIBitsToDevice(HDC, int, int, DWORD, DWORD, int,
        int, UINT, UINT, const void *, const BITMAPINFO *, UINT);
__declspec(dllimport) DWORD __stdcall SetMapperFlags(HDC, DWORD);
__declspec(dllimport) int   __stdcall SetGraphicsMode(HDC hdc, int iMode);
__declspec(dllimport) int   __stdcall SetMapMode(HDC, int);
__declspec(dllimport) HMETAFILE   __stdcall SetMetaFileBitsEx(UINT, const BYTE *);
__declspec(dllimport) UINT  __stdcall SetPaletteEntries(HPALETTE, UINT, UINT, const PALETTEENTRY *);
__declspec(dllimport) COLORREF __stdcall SetPixel(HDC, int, int, COLORREF);
__declspec(dllimport) BOOL   __stdcall SetPixelV(HDC, int, int, COLORREF);
__declspec(dllimport) BOOL  __stdcall SetPixelFormat(HDC, int, const PIXELFORMATDESCRIPTOR *);
__declspec(dllimport) int   __stdcall SetPolyFillMode(HDC, int);
__declspec(dllimport) BOOL   __stdcall StretchBlt(HDC, int, int, int, int, HDC, int, int, int, int, DWORD);
__declspec(dllimport) BOOL   __stdcall SetRectRgn(HRGN, int, int, int, int);
__declspec(dllimport) int   __stdcall StretchDIBits(HDC, int, int, int, int, int, int, int, int, const
        void *, const BITMAPINFO *, UINT, DWORD);
__declspec(dllimport) int   __stdcall SetROP2(HDC, int);
__declspec(dllimport) int   __stdcall SetStretchBltMode(HDC, int);
__declspec(dllimport) UINT  __stdcall SetSystemPaletteUse(HDC, UINT);
__declspec(dllimport) int   __stdcall SetTextCharacterExtra(HDC, int);
__declspec(dllimport) COLORREF __stdcall SetTextColor(HDC, COLORREF);
__declspec(dllimport) UINT  __stdcall SetTextAlign(HDC, UINT);
__declspec(dllimport) BOOL  __stdcall SetTextJustification(HDC, int, int);
__declspec(dllimport) BOOL  __stdcall UpdateColors(HDC);



__declspec(dllimport) BOOL  __stdcall PlayMetaFileRecord(HDC, LPHANDLETABLE, LPMETARECORD, UINT);
typedef int (__stdcall* MFENUMPROC)(HDC, HANDLETABLE *, METARECORD *, int, LPARAM);
__declspec(dllimport) BOOL  __stdcall EnumMetaFile(HDC, HMETAFILE, MFENUMPROC, LPARAM);

typedef int (__stdcall* ENHMFENUMPROC)(HDC, HANDLETABLE *, const ENHMETARECORD *, int, LPARAM);



__declspec(dllimport) HENHMETAFILE __stdcall CloseEnhMetaFile(HDC);
__declspec(dllimport) HENHMETAFILE __stdcall CopyEnhMetaFileA(HENHMETAFILE, LPCSTR);
__declspec(dllimport) HENHMETAFILE __stdcall CopyEnhMetaFileW(HENHMETAFILE, LPCWSTR);





__declspec(dllimport) HDC   __stdcall CreateEnhMetaFileA(HDC, LPCSTR, const RECT *, LPCSTR);
__declspec(dllimport) HDC   __stdcall CreateEnhMetaFileW(HDC, LPCWSTR, const RECT *, LPCWSTR);





__declspec(dllimport) BOOL  __stdcall DeleteEnhMetaFile(HENHMETAFILE);
__declspec(dllimport) BOOL  __stdcall EnumEnhMetaFile(HDC, HENHMETAFILE, ENHMFENUMPROC,
        LPVOID, const RECT *);
__declspec(dllimport) HENHMETAFILE  __stdcall GetEnhMetaFileA(LPCSTR);
__declspec(dllimport) HENHMETAFILE  __stdcall GetEnhMetaFileW(LPCWSTR);





__declspec(dllimport) UINT  __stdcall GetEnhMetaFileBits(HENHMETAFILE, UINT, LPBYTE);
__declspec(dllimport) UINT  __stdcall GetEnhMetaFileDescriptionA(HENHMETAFILE, UINT, LPSTR );
__declspec(dllimport) UINT  __stdcall GetEnhMetaFileDescriptionW(HENHMETAFILE, UINT, LPWSTR );





__declspec(dllimport) UINT  __stdcall GetEnhMetaFileHeader(HENHMETAFILE, UINT, LPENHMETAHEADER );
__declspec(dllimport) UINT  __stdcall GetEnhMetaFilePaletteEntries(HENHMETAFILE, UINT, LPPALETTEENTRY );
__declspec(dllimport) UINT  __stdcall GetEnhMetaFilePixelFormat(HENHMETAFILE, UINT,
                                                 PIXELFORMATDESCRIPTOR *);
__declspec(dllimport) UINT  __stdcall GetWinMetaFileBits(HENHMETAFILE, UINT, LPBYTE, INT, HDC);
__declspec(dllimport) BOOL  __stdcall PlayEnhMetaFile(HDC, HENHMETAFILE, const RECT *);
__declspec(dllimport) BOOL  __stdcall PlayEnhMetaFileRecord(HDC, LPHANDLETABLE, const ENHMETARECORD *, UINT);
__declspec(dllimport) HENHMETAFILE  __stdcall SetEnhMetaFileBits(UINT, const BYTE *);
__declspec(dllimport) HENHMETAFILE  __stdcall SetWinMetaFileBits(UINT, const BYTE *, HDC, const METAFILEPICT *);
__declspec(dllimport) BOOL  __stdcall GdiComment(HDC, UINT, const BYTE *);





__declspec(dllimport) BOOL __stdcall GetTextMetricsA(HDC, LPTEXTMETRICA);
__declspec(dllimport) BOOL __stdcall GetTextMetricsW(HDC, LPTEXTMETRICW);










typedef struct tagDIBSECTION {
    BITMAP              dsBm;
    BITMAPINFOHEADER    dsBmih;
    DWORD               dsBitfields[3];
    HANDLE              dshSection;
    DWORD               dsOffset;
} DIBSECTION,  *LPDIBSECTION, *PDIBSECTION;

__declspec(dllimport) BOOL __stdcall AngleArc(HDC, int, int, DWORD, FLOAT, FLOAT);
__declspec(dllimport) BOOL __stdcall PolyPolyline(HDC, const POINT *, const DWORD *, DWORD);
__declspec(dllimport) BOOL __stdcall GetWorldTransform(HDC, LPXFORM);
__declspec(dllimport) BOOL __stdcall SetWorldTransform(HDC, const XFORM *);
__declspec(dllimport) BOOL __stdcall ModifyWorldTransform(HDC, const XFORM *, DWORD);
__declspec(dllimport) BOOL __stdcall CombineTransform(LPXFORM, const XFORM *, const XFORM *);
__declspec(dllimport) HBITMAP __stdcall CreateDIBSection(HDC, const BITMAPINFO *, UINT, void **, HANDLE, DWORD);
__declspec(dllimport) UINT __stdcall GetDIBColorTable(HDC, UINT, UINT, RGBQUAD *);
__declspec(dllimport) UINT __stdcall SetDIBColorTable(HDC, UINT, UINT, const RGBQUAD *);




































typedef struct  tagCOLORADJUSTMENT {
    WORD   caSize;
    WORD   caFlags;
    WORD   caIlluminantIndex;
    WORD   caRedGamma;
    WORD   caGreenGamma;
    WORD   caBlueGamma;
    WORD   caReferenceBlack;
    WORD   caReferenceWhite;
    SHORT  caContrast;
    SHORT  caBrightness;
    SHORT  caColorfulness;
    SHORT  caRedGreenTint;
} COLORADJUSTMENT, *PCOLORADJUSTMENT,  *LPCOLORADJUSTMENT;

__declspec(dllimport) BOOL __stdcall SetColorAdjustment(HDC, const COLORADJUSTMENT *);
__declspec(dllimport) BOOL __stdcall GetColorAdjustment(HDC, LPCOLORADJUSTMENT);
__declspec(dllimport) HPALETTE __stdcall CreateHalftonePalette(HDC);


typedef BOOL (__stdcall* ABORTPROC)(HDC, int);




typedef struct _DOCINFOA {
    int     cbSize;
    LPCSTR   lpszDocName;
    LPCSTR   lpszOutput;

    LPCSTR   lpszDatatype;
    DWORD    fwType;

} DOCINFOA, *LPDOCINFOA;
typedef struct _DOCINFOW {
    int     cbSize;
    LPCWSTR  lpszDocName;
    LPCWSTR  lpszOutput;

    LPCWSTR  lpszDatatype;
    DWORD    fwType;

} DOCINFOW, *LPDOCINFOW;




typedef DOCINFOA DOCINFO;
typedef LPDOCINFOA LPDOCINFO;






__declspec(dllimport) int __stdcall StartDocA(HDC, const DOCINFOA *);
__declspec(dllimport) int __stdcall StartDocW(HDC, const DOCINFOW *);





__declspec(dllimport) int __stdcall EndDoc(HDC);
__declspec(dllimport) int __stdcall StartPage(HDC);
__declspec(dllimport) int __stdcall EndPage(HDC);
__declspec(dllimport) int __stdcall AbortDoc(HDC);
__declspec(dllimport) int __stdcall SetAbortProc(HDC, ABORTPROC);

__declspec(dllimport) BOOL __stdcall AbortPath(HDC);
__declspec(dllimport) BOOL __stdcall ArcTo(HDC, int, int, int, int, int, int,int, int);
__declspec(dllimport) BOOL __stdcall BeginPath(HDC);
__declspec(dllimport) BOOL __stdcall CloseFigure(HDC);
__declspec(dllimport) BOOL __stdcall EndPath(HDC);
__declspec(dllimport) BOOL __stdcall FillPath(HDC);
__declspec(dllimport) BOOL __stdcall FlattenPath(HDC);
__declspec(dllimport) int  __stdcall GetPath(HDC, LPPOINT, LPBYTE, int);
__declspec(dllimport) HRGN __stdcall PathToRegion(HDC);
__declspec(dllimport) BOOL __stdcall PolyDraw(HDC, const POINT *, const BYTE *, int);
__declspec(dllimport) BOOL __stdcall SelectClipPath(HDC, int);
__declspec(dllimport) int  __stdcall SetArcDirection(HDC, int);
__declspec(dllimport) BOOL __stdcall SetMiterLimit(HDC, FLOAT, PFLOAT);
__declspec(dllimport) BOOL __stdcall StrokeAndFillPath(HDC);
__declspec(dllimport) BOOL __stdcall StrokePath(HDC);
__declspec(dllimport) BOOL __stdcall WidenPath(HDC);
__declspec(dllimport) HPEN __stdcall ExtCreatePen(DWORD, DWORD, const LOGBRUSH *, DWORD, const DWORD *);
__declspec(dllimport) BOOL __stdcall GetMiterLimit(HDC, PFLOAT);
__declspec(dllimport) int  __stdcall GetArcDirection(HDC);

__declspec(dllimport) int   __stdcall GetObjectA(HGDIOBJ, int, LPVOID);
__declspec(dllimport) int   __stdcall GetObjectW(HGDIOBJ, int, LPVOID);





__declspec(dllimport) BOOL  __stdcall MoveToEx(HDC, int, int, LPPOINT);
__declspec(dllimport) BOOL  __stdcall TextOutA(HDC, int, int, LPCSTR, int);
__declspec(dllimport) BOOL  __stdcall TextOutW(HDC, int, int, LPCWSTR, int);





__declspec(dllimport) BOOL  __stdcall ExtTextOutA(HDC, int, int, UINT, const RECT *,LPCSTR, UINT, const INT *);
__declspec(dllimport) BOOL  __stdcall ExtTextOutW(HDC, int, int, UINT, const RECT *,LPCWSTR, UINT, const INT *);





__declspec(dllimport) BOOL  __stdcall PolyTextOutA(HDC, const POLYTEXTA *, int);
__declspec(dllimport) BOOL  __stdcall PolyTextOutW(HDC, const POLYTEXTW *, int);






__declspec(dllimport) HRGN  __stdcall CreatePolygonRgn(const POINT *, int, int);
__declspec(dllimport) BOOL  __stdcall DPtoLP(HDC, LPPOINT, int);
__declspec(dllimport) BOOL  __stdcall LPtoDP(HDC, LPPOINT, int);
__declspec(dllimport) BOOL  __stdcall Polygon(HDC, const POINT *, int);
__declspec(dllimport) BOOL  __stdcall Polyline(HDC, const POINT *, int);

__declspec(dllimport) BOOL  __stdcall PolyBezier(HDC, const POINT *, DWORD);
__declspec(dllimport) BOOL  __stdcall PolyBezierTo(HDC, const POINT *, DWORD);
__declspec(dllimport) BOOL  __stdcall PolylineTo(HDC, const POINT *, DWORD);

__declspec(dllimport) BOOL  __stdcall SetViewportExtEx(HDC, int, int, LPSIZE);
__declspec(dllimport) BOOL  __stdcall SetViewportOrgEx(HDC, int, int, LPPOINT);
__declspec(dllimport) BOOL  __stdcall SetWindowExtEx(HDC, int, int, LPSIZE);
__declspec(dllimport) BOOL  __stdcall SetWindowOrgEx(HDC, int, int, LPPOINT);

__declspec(dllimport) BOOL  __stdcall OffsetViewportOrgEx(HDC, int, int, LPPOINT);
__declspec(dllimport) BOOL  __stdcall OffsetWindowOrgEx(HDC, int, int, LPPOINT);
__declspec(dllimport) BOOL  __stdcall ScaleViewportExtEx(HDC, int, int, int, int, LPSIZE);
__declspec(dllimport) BOOL  __stdcall ScaleWindowExtEx(HDC, int, int, int, int, LPSIZE);
__declspec(dllimport) BOOL  __stdcall SetBitmapDimensionEx(HBITMAP, int, int, LPSIZE);
__declspec(dllimport) BOOL  __stdcall SetBrushOrgEx(HDC, int, int, LPPOINT);

__declspec(dllimport) int   __stdcall GetTextFaceA(HDC, int, LPSTR);
__declspec(dllimport) int   __stdcall GetTextFaceW(HDC, int, LPWSTR);








typedef struct tagKERNINGPAIR {
   WORD wFirst;
   WORD wSecond;
   int  iKernAmount;
} KERNINGPAIR, *LPKERNINGPAIR;

__declspec(dllimport) DWORD __stdcall GetKerningPairsA(HDC, DWORD, LPKERNINGPAIR);
__declspec(dllimport) DWORD __stdcall GetKerningPairsW(HDC, DWORD, LPKERNINGPAIR);






__declspec(dllimport) BOOL  __stdcall GetDCOrgEx(HDC,LPPOINT);
__declspec(dllimport) BOOL  __stdcall FixBrushOrgEx(HDC,int,int,LPPOINT);
__declspec(dllimport) BOOL  __stdcall UnrealizeObject(HGDIOBJ);

__declspec(dllimport) BOOL  __stdcall GdiFlush();
__declspec(dllimport) DWORD __stdcall GdiSetBatchLimit(DWORD);
__declspec(dllimport) DWORD __stdcall GdiGetBatchLimit();







int __stdcall SetICMMode(HDC, int);
BOOL __stdcall CheckColorsInGamut(HDC,LPVOID,LPVOID,DWORD);
HANDLE __stdcall GetColorSpace(HDC);
BOOL __stdcall GetLogColorSpaceA(HCOLORSPACE,LPLOGCOLORSPACEA,DWORD);
BOOL __stdcall GetLogColorSpaceW(HCOLORSPACE,LPLOGCOLORSPACEW,DWORD);





HCOLORSPACE __stdcall CreateColorSpaceA(LPLOGCOLORSPACEA);
HCOLORSPACE __stdcall CreateColorSpaceW(LPLOGCOLORSPACEW);





BOOL __stdcall SetColorSpace(HDC,HCOLORSPACE);
BOOL __stdcall DeleteColorSpace(HCOLORSPACE);
BOOL __stdcall GetICMProfileA(HDC,DWORD,LPSTR);
BOOL __stdcall GetICMProfileW(HDC,DWORD,LPWSTR);





BOOL __stdcall SetICMProfileA(HDC,LPSTR);
BOOL __stdcall SetICMProfileW(HDC,LPWSTR);





BOOL __stdcall GetDeviceGammaRamp(HDC,LPVOID);
BOOL __stdcall SetDeviceGammaRamp(HDC,LPVOID);
BOOL __stdcall ColorMatchToTarget(HDC,HDC,DWORD);
typedef int (__stdcall* ICMENUMPROCA)(LPSTR, LPARAM);
typedef int (__stdcall* ICMENUMPROCW)(LPWSTR, LPARAM);





int __stdcall EnumICMProfilesA(HDC,ICMENUMPROCA,LPARAM);
int __stdcall EnumICMProfilesW(HDC,ICMENUMPROCW,LPARAM);











































































































































typedef struct tagEMR
{
    DWORD   iType;              
    DWORD   nSize;              
                                
} EMR, *PEMR;



typedef struct tagEMRTEXT
{
    POINTL  ptlReference;
    DWORD   nChars;
    DWORD   offString;          
    DWORD   fOptions;
    RECTL   rcl;
    DWORD   offDx;              
                                
} EMRTEXT, *PEMRTEXT;



typedef struct tagABORTPATH
{
    EMR     emr;
} EMRABORTPATH,      *PEMRABORTPATH,
  EMRBEGINPATH,      *PEMRBEGINPATH,
  EMRENDPATH,        *PEMRENDPATH,
  EMRCLOSEFIGURE,    *PEMRCLOSEFIGURE,
  EMRFLATTENPATH,    *PEMRFLATTENPATH,
  EMRWIDENPATH,      *PEMRWIDENPATH,
  EMRSETMETARGN,     *PEMRSETMETARGN,
  EMRSAVEDC,         *PEMRSAVEDC,
  EMRREALIZEPALETTE, *PEMRREALIZEPALETTE;

typedef struct tagEMRSELECTCLIPPATH
{
    EMR     emr;
    DWORD   iMode;
} EMRSELECTCLIPPATH,    *PEMRSELECTCLIPPATH,
  EMRSETBKMODE,         *PEMRSETBKMODE,
  EMRSETMAPMODE,        *PEMRSETMAPMODE,
  EMRSETPOLYFILLMODE,   *PEMRSETPOLYFILLMODE,
  EMRSETROP2,           *PEMRSETROP2,
  EMRSETSTRETCHBLTMODE, *PEMRSETSTRETCHBLTMODE,
  EMRSETICMMODE,        *PEMRSETICMMODE,
  EMRSETTEXTALIGN,      *PEMRSETTEXTALIGN;

typedef struct tagEMRSETMITERLIMIT
{
    EMR     emr;
    FLOAT   eMiterLimit;
} EMRSETMITERLIMIT, *PEMRSETMITERLIMIT;

typedef struct tagEMRRESTOREDC
{
    EMR     emr;
    LONG    iRelative;          
} EMRRESTOREDC, *PEMRRESTOREDC;

typedef struct tagEMRSETARCDIRECTION
{
    EMR     emr;
    DWORD   iArcDirection;      
                                
} EMRSETARCDIRECTION, *PEMRSETARCDIRECTION;

typedef struct tagEMRSETMAPPERFLAGS
{
    EMR     emr;
    DWORD   dwFlags;
} EMRSETMAPPERFLAGS, *PEMRSETMAPPERFLAGS;

typedef struct tagEMRSETTEXTCOLOR
{
    EMR     emr;
    COLORREF crColor;
} EMRSETBKCOLOR,   *PEMRSETBKCOLOR,
  EMRSETTEXTCOLOR, *PEMRSETTEXTCOLOR;

typedef struct tagEMRSELECTOBJECT
{
    EMR     emr;
    DWORD   ihObject;           
} EMRSELECTOBJECT, *PEMRSELECTOBJECT,
  EMRDELETEOBJECT, *PEMRDELETEOBJECT;


typedef struct tagEMRSELECTCOLORSPACE
{
    EMR     emr;
    DWORD   ihCS;               
} EMRSELECTCOLORSPACE, *PEMRSELECTCOLORSPACE,
  EMRDELETECOLORSPACE, *PEMRDELETECOLORSPACE;


typedef struct tagEMRSELECTPALETTE
{
    EMR     emr;
    DWORD   ihPal;              
} EMRSELECTPALETTE, *PEMRSELECTPALETTE;

typedef struct tagEMRRESIZEPALETTE
{
    EMR     emr;
    DWORD   ihPal;              
    DWORD   cEntries;
} EMRRESIZEPALETTE, *PEMRRESIZEPALETTE;

typedef struct tagEMRSETPALETTEENTRIES
{
    EMR     emr;
    DWORD   ihPal;              
    DWORD   iStart;
    DWORD   cEntries;
    PALETTEENTRY aPalEntries[1];
} EMRSETPALETTEENTRIES, *PEMRSETPALETTEENTRIES;

typedef struct tagEMRSETCOLORADJUSTMENT
{
    EMR     emr;
    COLORADJUSTMENT ColorAdjustment;
} EMRSETCOLORADJUSTMENT, *PEMRSETCOLORADJUSTMENT;

typedef struct tagEMRGDICOMMENT
{
    EMR     emr;
    DWORD   cbData;             
    BYTE    Data[1];
} EMRGDICOMMENT, *PEMRGDICOMMENT;

typedef struct tagEMREOF
{
    EMR     emr;
    DWORD   nPalEntries;        
    DWORD   offPalEntries;      
    DWORD   nSizeLast;          
                                
                                
} EMREOF, *PEMREOF;

typedef struct tagEMRLINETO
{
    EMR     emr;
    POINTL  ptl;
} EMRLINETO,   *PEMRLINETO,
  EMRMOVETOEX, *PEMRMOVETOEX;

typedef struct tagEMROFFSETCLIPRGN
{
    EMR     emr;
    POINTL  ptlOffset;
} EMROFFSETCLIPRGN, *PEMROFFSETCLIPRGN;

typedef struct tagEMRFILLPATH
{
    EMR     emr;
    RECTL   rclBounds;          
} EMRFILLPATH,          *PEMRFILLPATH,
  EMRSTROKEANDFILLPATH, *PEMRSTROKEANDFILLPATH,
  EMRSTROKEPATH,        *PEMRSTROKEPATH;

typedef struct tagEMREXCLUDECLIPRECT
{
    EMR     emr;
    RECTL   rclClip;
} EMREXCLUDECLIPRECT,   *PEMREXCLUDECLIPRECT,
  EMRINTERSECTCLIPRECT, *PEMRINTERSECTCLIPRECT;

typedef struct tagEMRSETVIEWPORTORGEX
{
    EMR     emr;
    POINTL  ptlOrigin;
} EMRSETVIEWPORTORGEX, *PEMRSETVIEWPORTORGEX,
  EMRSETWINDOWORGEX,   *PEMRSETWINDOWORGEX,
  EMRSETBRUSHORGEX,    *PEMRSETBRUSHORGEX;

typedef struct tagEMRSETVIEWPORTEXTEX
{
    EMR     emr;
    SIZEL   szlExtent;
} EMRSETVIEWPORTEXTEX, *PEMRSETVIEWPORTEXTEX,
  EMRSETWINDOWEXTEX,   *PEMRSETWINDOWEXTEX;

typedef struct tagEMRSCALEVIEWPORTEXTEX
{
    EMR     emr;
    LONG    xNum;
    LONG    xDenom;
    LONG    yNum;
    LONG    yDenom;
} EMRSCALEVIEWPORTEXTEX, *PEMRSCALEVIEWPORTEXTEX,
  EMRSCALEWINDOWEXTEX,   *PEMRSCALEWINDOWEXTEX;

typedef struct tagEMRSETWORLDTRANSFORM
{
    EMR     emr;
    XFORM   xform;
} EMRSETWORLDTRANSFORM, *PEMRSETWORLDTRANSFORM;

typedef struct tagEMRMODIFYWORLDTRANSFORM
{
    EMR     emr;
    XFORM   xform;
    DWORD   iMode;
} EMRMODIFYWORLDTRANSFORM, *PEMRMODIFYWORLDTRANSFORM;

typedef struct tagEMRSETPIXELV
{
    EMR     emr;
    POINTL  ptlPixel;
    COLORREF crColor;
} EMRSETPIXELV, *PEMRSETPIXELV;

typedef struct tagEMREXTFLOODFILL
{
    EMR     emr;
    POINTL  ptlStart;
    COLORREF crColor;
    DWORD   iMode;
} EMREXTFLOODFILL, *PEMREXTFLOODFILL;

typedef struct tagEMRELLIPSE
{
    EMR     emr;
    RECTL   rclBox;             
} EMRELLIPSE,  *PEMRELLIPSE,
  EMRRECTANGLE, *PEMRRECTANGLE;

typedef struct tagEMRROUNDRECT
{
    EMR     emr;
    RECTL   rclBox;             
    SIZEL   szlCorner;
} EMRROUNDRECT, *PEMRROUNDRECT;

typedef struct tagEMRARC
{
    EMR     emr;
    RECTL   rclBox;             
    POINTL  ptlStart;
    POINTL  ptlEnd;
} EMRARC,   *PEMRARC,
  EMRARCTO, *PEMRARCTO,
  EMRCHORD, *PEMRCHORD,
  EMRPIE,   *PEMRPIE;

typedef struct tagEMRANGLEARC
{
    EMR     emr;
    POINTL  ptlCenter;
    DWORD   nRadius;
    FLOAT   eStartAngle;
    FLOAT   eSweepAngle;
} EMRANGLEARC, *PEMRANGLEARC;

typedef struct tagEMRPOLYLINE
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cptl;
    POINTL  aptl[1];
} EMRPOLYLINE,     *PEMRPOLYLINE,
  EMRPOLYBEZIER,   *PEMRPOLYBEZIER,
  EMRPOLYGON,      *PEMRPOLYGON,
  EMRPOLYBEZIERTO, *PEMRPOLYBEZIERTO,
  EMRPOLYLINETO,   *PEMRPOLYLINETO;

typedef struct tagEMRPOLYLINE16
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cpts;
    POINTS  apts[1];
} EMRPOLYLINE16,     *PEMRPOLYLINE16,
  EMRPOLYBEZIER16,   *PEMRPOLYBEZIER16,
  EMRPOLYGON16,      *PEMRPOLYGON16,
  EMRPOLYBEZIERTO16, *PEMRPOLYBEZIERTO16,
  EMRPOLYLINETO16,   *PEMRPOLYLINETO16;

typedef struct tagEMRPOLYDRAW
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cptl;               
    POINTL  aptl[1];            
    BYTE    abTypes[1];         
} EMRPOLYDRAW, *PEMRPOLYDRAW;

typedef struct tagEMRPOLYDRAW16
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cpts;               
    POINTS  apts[1];            
    BYTE    abTypes[1];         
} EMRPOLYDRAW16, *PEMRPOLYDRAW16;

typedef struct tagEMRPOLYPOLYLINE
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   nPolys;             
    DWORD   cptl;               
    DWORD   aPolyCounts[1];     
    POINTL  aptl[1];            
} EMRPOLYPOLYLINE, *PEMRPOLYPOLYLINE,
  EMRPOLYPOLYGON,  *PEMRPOLYPOLYGON;

typedef struct tagEMRPOLYPOLYLINE16
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   nPolys;             
    DWORD   cpts;               
    DWORD   aPolyCounts[1];     
    POINTS  apts[1];            
} EMRPOLYPOLYLINE16, *PEMRPOLYPOLYLINE16,
  EMRPOLYPOLYGON16,  *PEMRPOLYPOLYGON16;

typedef struct tagEMRINVERTRGN
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbRgnData;          
    BYTE    RgnData[1];
} EMRINVERTRGN, *PEMRINVERTRGN,
  EMRPAINTRGN,  *PEMRPAINTRGN;

typedef struct tagEMRFILLRGN
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbRgnData;          
    DWORD   ihBrush;            
    BYTE    RgnData[1];
} EMRFILLRGN, *PEMRFILLRGN;

typedef struct tagEMRFRAMERGN
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbRgnData;          
    DWORD   ihBrush;            
    SIZEL   szlStroke;
    BYTE    RgnData[1];
} EMRFRAMERGN, *PEMRFRAMERGN;

typedef struct tagEMREXTSELECTCLIPRGN
{
    EMR     emr;
    DWORD   cbRgnData;          
    DWORD   iMode;
    BYTE    RgnData[1];
} EMREXTSELECTCLIPRGN, *PEMREXTSELECTCLIPRGN;

typedef struct tagEMREXTTEXTOUTA
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   iGraphicsMode;      
    FLOAT   exScale;            
    FLOAT   eyScale;            
    EMRTEXT emrtext;            
                                
} EMREXTTEXTOUTA, *PEMREXTTEXTOUTA,
  EMREXTTEXTOUTW, *PEMREXTTEXTOUTW;

typedef struct tagEMRPOLYTEXTOUTA
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   iGraphicsMode;      
    FLOAT   exScale;            
    FLOAT   eyScale;            
    LONG    cStrings;
    EMRTEXT aemrtext[1];        
                                
} EMRPOLYTEXTOUTA, *PEMRPOLYTEXTOUTA,
  EMRPOLYTEXTOUTW, *PEMRPOLYTEXTOUTW;

typedef struct tagEMRBITBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
} EMRBITBLT, *PEMRBITBLT;

typedef struct tagEMRSTRETCHBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    cxSrc;
    LONG    cySrc;
} EMRSTRETCHBLT, *PEMRSTRETCHBLT;

typedef struct tagEMRMASKBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    xMask;
    LONG    yMask;
    DWORD   iUsageMask;         
    DWORD   offBmiMask;         
    DWORD   cbBmiMask;          
    DWORD   offBitsMask;        
    DWORD   cbBitsMask;         
} EMRMASKBLT, *PEMRMASKBLT;

typedef struct tagEMRPLGBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    POINTL  aptlDest[3];
    LONG    xSrc;
    LONG    ySrc;
    LONG    cxSrc;
    LONG    cySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    xMask;
    LONG    yMask;
    DWORD   iUsageMask;         
    DWORD   offBmiMask;         
    DWORD   cbBmiMask;          
    DWORD   offBitsMask;        
    DWORD   cbBitsMask;         
} EMRPLGBLT, *PEMRPLGBLT;

typedef struct tagEMRSETDIBITSTODEVICE
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    xSrc;
    LONG    ySrc;
    LONG    cxSrc;
    LONG    cySrc;
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    DWORD   iUsageSrc;          
    DWORD   iStartScan;
    DWORD   cScans;
} EMRSETDIBITSTODEVICE, *PEMRSETDIBITSTODEVICE;

typedef struct tagEMRSTRETCHDIBITS
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    xSrc;
    LONG    ySrc;
    LONG    cxSrc;
    LONG    cySrc;
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    DWORD   iUsageSrc;          
    DWORD   dwRop;
    LONG    cxDest;
    LONG    cyDest;
} EMRSTRETCHDIBITS, *PEMRSTRETCHDIBITS;

typedef struct tagEMREXTCREATEFONTINDIRECTW
{
    EMR     emr;
    DWORD   ihFont;             
    EXTLOGFONTW elfw;
} EMREXTCREATEFONTINDIRECTW, *PEMREXTCREATEFONTINDIRECTW;

typedef struct tagEMRCREATEPALETTE
{
    EMR     emr;
    DWORD   ihPal;              
    LOGPALETTE lgpl;            
                                
} EMRCREATEPALETTE, *PEMRCREATEPALETTE;



typedef struct tagEMRCREATECOLORSPACE
{
    EMR             emr;
    DWORD           ihCS;       
    LOGCOLORSPACEW  lcs;
} EMRCREATECOLORSPACE, *PEMRCREATECOLORSPACE;



typedef struct tagEMRCREATEPEN
{
    EMR     emr;
    DWORD   ihPen;              
    LOGPEN  lopn;
} EMRCREATEPEN, *PEMRCREATEPEN;

typedef struct tagEMREXTCREATEPEN
{
    EMR     emr;
    DWORD   ihPen;              
    DWORD   offBmi;             
    DWORD   cbBmi;              
                                
                                
    DWORD   offBits;            
    DWORD   cbBits;             
    EXTLOGPEN elp;              
} EMREXTCREATEPEN, *PEMREXTCREATEPEN;

typedef struct tagEMRCREATEBRUSHINDIRECT
{
    EMR     emr;
    DWORD   ihBrush;            
    LOGBRUSH lb;                
                                
} EMRCREATEBRUSHINDIRECT, *PEMRCREATEBRUSHINDIRECT;

typedef struct tagEMRCREATEMONOBRUSH
{
    EMR     emr;
    DWORD   ihBrush;            
    DWORD   iUsage;             
    DWORD   offBmi;             
    DWORD   cbBmi;              
    DWORD   offBits;            
    DWORD   cbBits;             
} EMRCREATEMONOBRUSH, *PEMRCREATEMONOBRUSH;

typedef struct tagEMRCREATEDIBPATTERNBRUSHPT
{
    EMR     emr;
    DWORD   ihBrush;            
    DWORD   iUsage;             
    DWORD   offBmi;             
    DWORD   cbBmi;              
                                
                                
    DWORD   offBits;            
    DWORD   cbBits;             
} EMRCREATEDIBPATTERNBRUSHPT, *PEMRCREATEDIBPATTERNBRUSHPT;

typedef struct tagEMRFORMAT
{
    DWORD   dSignature;         
    DWORD   nVersion;           
    DWORD   cbData;             
    DWORD   offData;            
                                
} EMRFORMAT, *PEMRFORMAT;

typedef struct tagEMRGLSRECORD
{
    EMR     emr;
    DWORD   cbData;             
    BYTE    Data[1];
} EMRGLSRECORD, *PEMRGLSRECORD;

typedef struct tagEMRGLSBOUNDEDRECORD
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbData;             
    BYTE    Data[1];
} EMRGLSBOUNDEDRECORD, *PEMRGLSBOUNDEDRECORD;

typedef struct tagEMRPIXELFORMAT
{
    EMR     emr;
    PIXELFORMATDESCRIPTOR pfd;
} EMRPIXELFORMAT, *PEMRPIXELFORMAT;













__declspec(dllimport) BOOL  __stdcall wglCopyContext(HGLRC, HGLRC, UINT);
__declspec(dllimport) HGLRC __stdcall wglCreateContext(HDC);
__declspec(dllimport) HGLRC __stdcall wglCreateLayerContext(HDC, int);
__declspec(dllimport) BOOL  __stdcall wglDeleteContext(HGLRC);
__declspec(dllimport) HGLRC __stdcall wglGetCurrentContext(void);
__declspec(dllimport) HDC   __stdcall wglGetCurrentDC(void);
__declspec(dllimport) PROC  __stdcall wglGetProcAddress(LPCSTR);
__declspec(dllimport) BOOL  __stdcall wglMakeCurrent(HDC, HGLRC);
__declspec(dllimport) BOOL  __stdcall wglShareLists(HGLRC, HGLRC);
__declspec(dllimport) BOOL  __stdcall wglUseFontBitmapsA(HDC, DWORD, DWORD, DWORD);
__declspec(dllimport) BOOL  __stdcall wglUseFontBitmapsW(HDC, DWORD, DWORD, DWORD);





__declspec(dllimport) BOOL  __stdcall SwapBuffers(HDC);

typedef struct _POINTFLOAT {
    FLOAT   x;
    FLOAT   y;
} POINTFLOAT, *PPOINTFLOAT;

typedef struct _GLYPHMETRICSFLOAT {
    FLOAT       gmfBlackBoxX;
    FLOAT       gmfBlackBoxY;
    POINTFLOAT  gmfptGlyphOrigin;
    FLOAT       gmfCellIncX;
    FLOAT       gmfCellIncY;
} GLYPHMETRICSFLOAT, *PGLYPHMETRICSFLOAT,  *LPGLYPHMETRICSFLOAT;



__declspec(dllimport) BOOL  __stdcall wglUseFontOutlinesA(HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);
__declspec(dllimport) BOOL  __stdcall wglUseFontOutlinesW(HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);







typedef struct tagLAYERPLANEDESCRIPTOR { 
    WORD  nSize;
    WORD  nVersion;
    DWORD dwFlags;
    BYTE  iPixelType;
    BYTE  cColorBits;
    BYTE  cRedBits;
    BYTE  cRedShift;
    BYTE  cGreenBits;
    BYTE  cGreenShift;
    BYTE  cBlueBits;
    BYTE  cBlueShift;
    BYTE  cAlphaBits;
    BYTE  cAlphaShift;
    BYTE  cAccumBits;
    BYTE  cAccumRedBits;
    BYTE  cAccumGreenBits;
    BYTE  cAccumBlueBits;
    BYTE  cAccumAlphaBits;
    BYTE  cDepthBits;
    BYTE  cStencilBits;
    BYTE  cAuxBuffers;
    BYTE  iLayerPlane;
    BYTE  bReserved;
    COLORREF crTransparent;
} LAYERPLANEDESCRIPTOR, *PLAYERPLANEDESCRIPTOR,  *LPLAYERPLANEDESCRIPTOR;

















































__declspec(dllimport) BOOL __stdcall wglDescribeLayerPlane(HDC, int, int, UINT,
                                            LPLAYERPLANEDESCRIPTOR);
__declspec(dllimport) int  __stdcall wglSetLayerPaletteEntries(HDC, int, int, int,
                                                const COLORREF *);
__declspec(dllimport) int  __stdcall wglGetLayerPaletteEntries(HDC, int, int, int,
                                                COLORREF *);
__declspec(dllimport) BOOL __stdcall wglRealizeLayerPalette(HDC, int, BOOL);
__declspec(dllimport) BOOL __stdcall wglSwapLayerBuffers(HDC, UINT);




























































#pragma once























































































































































typedef HANDLE HDWP;
typedef void MENUTEMPLATEA;
typedef void MENUTEMPLATEW;



typedef MENUTEMPLATEA MENUTEMPLATE;

typedef PVOID LPMENUTEMPLATEA;
typedef PVOID LPMENUTEMPLATEW;



typedef LPMENUTEMPLATEA LPMENUTEMPLATE;


typedef LRESULT (__stdcall* WNDPROC)(HWND, UINT, WPARAM, LPARAM);



typedef BOOL (__stdcall* DLGPROC)(HWND, UINT, WPARAM, LPARAM);
typedef void (__stdcall* TIMERPROC)(HWND, UINT, UINT, DWORD);
typedef BOOL (__stdcall* GRAYSTRINGPROC)(HDC, LPARAM, int);
typedef BOOL (__stdcall* WNDENUMPROC)(HWND, LPARAM);
typedef LRESULT (__stdcall* HOOKPROC)(int code, WPARAM wParam, LPARAM lParam);
typedef void (__stdcall* SENDASYNCPROC)(HWND, UINT, DWORD, LRESULT);

typedef BOOL (__stdcall* PROPENUMPROCA)(HWND, LPCSTR, HANDLE);
typedef BOOL (__stdcall* PROPENUMPROCW)(HWND, LPCWSTR, HANDLE);

typedef BOOL (__stdcall* PROPENUMPROCEXA)(HWND, LPSTR, HANDLE, DWORD);
typedef BOOL (__stdcall* PROPENUMPROCEXW)(HWND, LPWSTR, HANDLE, DWORD);

typedef int (__stdcall* EDITWORDBREAKPROCA)(LPSTR lpch, int ichCurrent, int cch, int code);
typedef int (__stdcall* EDITWORDBREAKPROCW)(LPWSTR lpch, int ichCurrent, int cch, int code);


typedef BOOL (__stdcall* DRAWSTATEPROC)(HDC hdc, LPARAM lData, WPARAM wData, int cx, int cy);





























typedef PROPENUMPROCA        PROPENUMPROC;
typedef PROPENUMPROCEXA      PROPENUMPROCEX;
typedef EDITWORDBREAKPROCA   EDITWORDBREAKPROC;




typedef BOOL (__stdcall* NAMEENUMPROCA)(LPSTR, LPARAM);
typedef BOOL (__stdcall* NAMEENUMPROCW)(LPWSTR, LPARAM);

typedef NAMEENUMPROCA   WINSTAENUMPROCA;
typedef NAMEENUMPROCA   DESKTOPENUMPROCA;
typedef NAMEENUMPROCW   WINSTAENUMPROCW;
typedef NAMEENUMPROCW   DESKTOPENUMPROCW;
















typedef WINSTAENUMPROCA     WINSTAENUMPROC;
typedef DESKTOPENUMPROCA    DESKTOPENUMPROC;










































int
__stdcall
wvsprintfA(
    LPSTR,
    LPCSTR,
    va_list arglist);

int
__stdcall
wvsprintfW(
    LPWSTR,
    LPCWSTR,
    va_list arglist);






 int __cdecl wsprintfA(LPSTR, LPCSTR, ...);
 int __cdecl wsprintfW(LPWSTR, LPCWSTR, ...);

















































































































































































































































































typedef struct tagCBT_CREATEWNDA
{
    struct tagCREATESTRUCTA *lpcs;
    HWND           hwndInsertAfter;
} CBT_CREATEWNDA, *LPCBT_CREATEWNDA;



typedef struct tagCBT_CREATEWNDW
{
    struct tagCREATESTRUCTW *lpcs;
    HWND           hwndInsertAfter;
} CBT_CREATEWNDW, *LPCBT_CREATEWNDW;




typedef CBT_CREATEWNDA CBT_CREATEWND;
typedef LPCBT_CREATEWNDA LPCBT_CREATEWND;





typedef struct tagCBTACTIVATESTRUCT
{
    BOOL    fMouse;
    HWND    hWndActive;
} CBTACTIVATESTRUCT, *LPCBTACTIVATESTRUCT;


































typedef struct tagEVENTMSG {
    UINT    message;
    UINT    paramL;
    UINT    paramH;
    DWORD    time;
    HWND     hwnd;
} EVENTMSG, *PEVENTMSGMSG,  *NPEVENTMSGMSG,  *LPEVENTMSGMSG;

typedef struct tagEVENTMSG *PEVENTMSG,  *NPEVENTMSG,  *LPEVENTMSG;




typedef struct tagCWPSTRUCT {
    LPARAM  lParam;
    WPARAM  wParam;
    UINT    message;
    HWND    hwnd;
} CWPSTRUCT, *PCWPSTRUCT,  *NPCWPSTRUCT,  *LPCWPSTRUCT;





typedef struct tagCWPRETSTRUCT {
    LRESULT lResult;
    LPARAM  lParam;
    WPARAM  wParam;
    UINT    message;
    HWND    hwnd;
} CWPRETSTRUCT, *PCWPRETSTRUCT,  *NPCWPRETSTRUCT,  *LPCWPRETSTRUCT;





typedef struct tagDEBUGHOOKINFO
{
    DWORD   idThread;
    DWORD   idThreadInstaller;
    LPARAM  lParam;
    WPARAM  wParam;
    int     code;
} DEBUGHOOKINFO, *PDEBUGHOOKINFO,  *NPDEBUGHOOKINFO, * LPDEBUGHOOKINFO;




typedef struct tagMOUSEHOOKSTRUCT {
    POINT   pt;
    HWND    hwnd;
    UINT    wHitTestCode;
    DWORD   dwExtraInfo;
} MOUSEHOOKSTRUCT,  *LPMOUSEHOOKSTRUCT, *PMOUSEHOOKSTRUCT;




typedef struct tagHARDWAREHOOKSTRUCT {
    HWND    hwnd;
    UINT    message;
    WPARAM  wParam;
    LPARAM  lParam;
} HARDWAREHOOKSTRUCT,  *LPHARDWAREHOOKSTRUCT, *PHARDWAREHOOKSTRUCT;

























HKL
__stdcall
LoadKeyboardLayoutA(
    LPCSTR pwszKLID,
    UINT Flags);

HKL
__stdcall
LoadKeyboardLayoutW(
    LPCWSTR pwszKLID,
    UINT Flags);









HKL
__stdcall
ActivateKeyboardLayout(
    HKL hkl,
    UINT Flags);











int
__stdcall
ToUnicodeEx(
    UINT wVirtKey,
    UINT wScanCode,
    PBYTE lpKeyState,
    LPWSTR pwszBuff,
    int cchBuff,
    UINT wFlags,
    HKL dwhkl);



BOOL
__stdcall
UnloadKeyboardLayout(
    HKL hkl);


BOOL
__stdcall
GetKeyboardLayoutNameA(
    LPSTR pwszKLID);

BOOL
__stdcall
GetKeyboardLayoutNameW(
    LPWSTR pwszKLID);








int
__stdcall
GetKeyboardLayoutList(
        int nBuff,
        HKL  *lpList);


HKL
__stdcall
GetKeyboardLayout(
    DWORD dwLayout
);

























HDESK
__stdcall
CreateDesktopA(
    LPSTR lpszDesktop,
    LPSTR lpszDevice,
    LPDEVMODEA pDevmode,
    DWORD dwFlags,
    DWORD dwDesiredAccess,
    LPSECURITY_ATTRIBUTES lpsa);

HDESK
__stdcall
CreateDesktopW(
    LPWSTR lpszDesktop,
    LPWSTR lpszDevice,
    LPDEVMODEW pDevmode,
    DWORD dwFlags,
    DWORD dwDesiredAccess,
    LPSECURITY_ATTRIBUTES lpsa);










HDESK
__stdcall
OpenDesktopA(
    LPSTR lpszDesktop,
    DWORD dwFlags,
    BOOL fInherit,
    DWORD dwDesiredAccess);

HDESK
__stdcall
OpenDesktopW(
    LPWSTR lpszDesktop,
    DWORD dwFlags,
    BOOL fInherit,
    DWORD dwDesiredAccess);







HDESK
__stdcall
OpenInputDesktop(
    DWORD dwFlags,
    BOOL fInherit,
    DWORD dwDesiredAccess);


BOOL
__stdcall
EnumDesktopsA(
    HWINSTA hwinsta,
    DESKTOPENUMPROCA lpEnumFunc,
    LPARAM lParam);

BOOL
__stdcall
EnumDesktopsW(
    HWINSTA hwinsta,
    DESKTOPENUMPROCW lpEnumFunc,
    LPARAM lParam);







BOOL
__stdcall
EnumDesktopWindows(
    HDESK hDesktop,
    WNDENUMPROC lpfn,
    LPARAM lParam);


BOOL
__stdcall
SwitchDesktop(
    HDESK hDesktop);


BOOL
__stdcall
SetThreadDesktop(
    HDESK hDesktop);


BOOL
__stdcall
CloseDesktop(
    HDESK hDesktop);


HDESK
__stdcall
GetThreadDesktop(
    DWORD dwThreadId);























HWINSTA
__stdcall
CreateWindowStationA(
    LPSTR lpwinsta,
    DWORD dwReserved,
    DWORD dwDesiredAccess,
    LPSECURITY_ATTRIBUTES lpsa);

HWINSTA
__stdcall
CreateWindowStationW(
    LPWSTR lpwinsta,
    DWORD dwReserved,
    DWORD dwDesiredAccess,
    LPSECURITY_ATTRIBUTES lpsa);







HWINSTA
__stdcall
OpenWindowStationA(
    LPSTR lpszWinSta,
    BOOL fInherit,
    DWORD dwDesiredAccess);

HWINSTA
__stdcall
OpenWindowStationW(
    LPWSTR lpszWinSta,
    BOOL fInherit,
    DWORD dwDesiredAccess);







BOOL
__stdcall
EnumWindowStationsA(
    WINSTAENUMPROCA lpEnumFunc,
    LPARAM lParam);

BOOL
__stdcall
EnumWindowStationsW(
    WINSTAENUMPROCW lpEnumFunc,
    LPARAM lParam);







BOOL
__stdcall
CloseWindowStation(
    HWINSTA hWinSta);


BOOL
__stdcall
SetProcessWindowStation(
    HWINSTA hWinSta);


HWINSTA
__stdcall
GetProcessWindowStation(
    void);





BOOL
__stdcall
SetUserObjectSecurity(
    HANDLE hObj,
    PSECURITY_INFORMATION pSIRequested,
    PSECURITY_DESCRIPTOR pSID);


BOOL
__stdcall
GetUserObjectSecurity(
    HANDLE hObj,
    PSECURITY_INFORMATION pSIRequested,
    PSECURITY_DESCRIPTOR pSID,
    DWORD nLength,
    LPDWORD lpnLengthNeeded);






typedef struct tagUSEROBJECTFLAGS {
    BOOL fInherit;
    BOOL fReserved;
    DWORD dwFlags;
} USEROBJECTFLAGS, *PUSEROBJECTFLAGS;


BOOL
__stdcall
GetUserObjectInformationA(
    HANDLE hObj,
    int nIndex,
    PVOID pvInfo,
    DWORD nLength,
    LPDWORD lpnLengthNeeded);

BOOL
__stdcall
GetUserObjectInformationW(
    HANDLE hObj,
    int nIndex,
    PVOID pvInfo,
    DWORD nLength,
    LPDWORD lpnLengthNeeded);







BOOL
__stdcall
SetUserObjectInformationA(
    HANDLE hObj,
    int nIndex,
    PVOID pvInfo,
    DWORD nLength);

BOOL
__stdcall
SetUserObjectInformationW(
    HANDLE hObj,
    int nIndex,
    PVOID pvInfo,
    DWORD nLength);









typedef struct tagWNDCLASSEXA {
    UINT        cbSize;
    
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCSTR      lpszMenuName;
    LPCSTR      lpszClassName;
    
    HICON       hIconSm;
} WNDCLASSEXA, *PWNDCLASSEXA,  *NPWNDCLASSEXA,  *LPWNDCLASSEXA;
typedef struct tagWNDCLASSEXW {
    UINT        cbSize;
    
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCWSTR     lpszMenuName;
    LPCWSTR     lpszClassName;
    
    HICON       hIconSm;
} WNDCLASSEXW, *PWNDCLASSEXW,  *NPWNDCLASSEXW,  *LPWNDCLASSEXW;






typedef WNDCLASSEXA WNDCLASSEX;
typedef PWNDCLASSEXA PWNDCLASSEX;
typedef NPWNDCLASSEXA NPWNDCLASSEX;
typedef LPWNDCLASSEXA LPWNDCLASSEX;



typedef struct tagWNDCLASSA {
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCSTR      lpszMenuName;
    LPCSTR      lpszClassName;
} WNDCLASSA, *PWNDCLASSA,  *NPWNDCLASSA,  *LPWNDCLASSA;
typedef struct tagWNDCLASSW {
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCWSTR     lpszMenuName;
    LPCWSTR     lpszClassName;
} WNDCLASSW, *PWNDCLASSW,  *NPWNDCLASSW,  *LPWNDCLASSW;






typedef WNDCLASSA WNDCLASS;
typedef PWNDCLASSA PWNDCLASS;
typedef NPWNDCLASSA NPWNDCLASS;
typedef LPWNDCLASSA LPWNDCLASS;









typedef struct tagMSG {
    HWND        hwnd;
    UINT        message;
    WPARAM      wParam;
    LPARAM      lParam;
    DWORD       time;
    POINT       pt;
} MSG, *PMSG,  *NPMSG,  *LPMSG;









































































































typedef struct tagMINMAXINFO {
    POINT ptReserved;
    POINT ptMaxSize;
    POINT ptMaxPosition;
    POINT ptMinTrackSize;
    POINT ptMaxTrackSize;
} MINMAXINFO, *PMINMAXINFO, *LPMINMAXINFO;









































typedef struct tagCOPYDATASTRUCT {
    DWORD dwData;
    DWORD cbData;
    PVOID lpData;
} COPYDATASTRUCT, *PCOPYDATASTRUCT;


























































































































typedef struct tagMDINEXTMENU
{
    HMENU   hmenuIn;
    HMENU   hmenuNext;
    HWND    hwndNext;
} MDINEXTMENU, * PMDINEXTMENU,  * LPMDINEXTMENU;


















































































































































































UINT
__stdcall
RegisterWindowMessageA(
    LPCSTR lpString);

UINT
__stdcall
RegisterWindowMessageW(
    LPCWSTR lpString);






























typedef struct tagWINDOWPOS {
    HWND    hwnd;
    HWND    hwndInsertAfter;
    int     x;
    int     y;
    int     cx;
    int     cy;
    UINT    flags;
} WINDOWPOS, *LPWINDOWPOS, *PWINDOWPOS;




typedef struct tagNCCALCSIZE_PARAMS {
    RECT       rgrc[3];
    PWINDOWPOS lppos;
} NCCALCSIZE_PARAMS, *LPNCCALCSIZE_PARAMS;









































typedef struct tagTRACKMOUSEEVENT {
    DWORD cbSize;
    DWORD dwFlags;
    HWND  hwndTrack;
    DWORD dwHoverTime;
} TRACKMOUSEEVENT, *LPTRACKMOUSEEVENT;


BOOL
__stdcall
TrackMouseEvent(
    LPTRACKMOUSEEVENT lpEventTrack);














































































































































































 BOOL __stdcall DrawEdge(HDC hdc, LPRECT qrc, UINT edge, UINT grfFlags);









































 BOOL    __stdcall DrawFrameControl(HDC, LPRECT, UINT, UINT);









 BOOL    __stdcall DrawCaption(HWND, HDC, const RECT *, UINT);






 BOOL    __stdcall DrawAnimatedRects(HWND hwnd, int idAni, const RECT * lprcFrom, const RECT * lprcTo);





























































typedef struct tagACCEL {
    BYTE   fVirt;               
    WORD   key;
    WORD   cmd;
} ACCEL, *LPACCEL;

typedef struct tagPAINTSTRUCT {
    HDC         hdc;
    BOOL        fErase;
    RECT        rcPaint;
    BOOL        fRestore;
    BOOL        fIncUpdate;
    BYTE        rgbReserved[32];
} PAINTSTRUCT, *PPAINTSTRUCT, *NPPAINTSTRUCT, *LPPAINTSTRUCT;

typedef struct tagCREATESTRUCTA {
    LPVOID      lpCreateParams;
    HINSTANCE   hInstance;
    HMENU       hMenu;
    HWND        hwndParent;
    int         cy;
    int         cx;
    int         y;
    int         x;
    LONG        style;
    LPCSTR      lpszName;
    LPCSTR      lpszClass;
    DWORD       dwExStyle;
} CREATESTRUCTA, *LPCREATESTRUCTA;
typedef struct tagCREATESTRUCTW {
    LPVOID      lpCreateParams;
    HINSTANCE   hInstance;
    HMENU       hMenu;
    HWND        hwndParent;
    int         cy;
    int         cx;
    int         y;
    int         x;
    LONG        style;
    LPCWSTR     lpszName;
    LPCWSTR     lpszClass;
    DWORD       dwExStyle;
} CREATESTRUCTW, *LPCREATESTRUCTW;




typedef CREATESTRUCTA CREATESTRUCT;
typedef LPCREATESTRUCTA LPCREATESTRUCT;


typedef struct tagWINDOWPLACEMENT {
    UINT  length;
    UINT  flags;
    UINT  showCmd;
    POINT ptMinPosition;
    POINT ptMaxPosition;
    RECT  rcNormalPosition;
} WINDOWPLACEMENT;
typedef WINDOWPLACEMENT *PWINDOWPLACEMENT, *LPWINDOWPLACEMENT;




typedef struct tagNMHDR
{
    HWND  hwndFrom;
    UINT  idFrom;
    UINT  code;         
}   NMHDR;
typedef NMHDR  * LPNMHDR;

typedef struct tagSTYLESTRUCT
{
    DWORD   styleOld;
    DWORD   styleNew;
} STYLESTRUCT, * LPSTYLESTRUCT;





































typedef struct tagMEASUREITEMSTRUCT {
    UINT       CtlType;
    UINT       CtlID;
    UINT       itemID;
    UINT       itemWidth;
    UINT       itemHeight;
    DWORD      itemData;
} MEASUREITEMSTRUCT,  *PMEASUREITEMSTRUCT,  *LPMEASUREITEMSTRUCT;






typedef struct tagDRAWITEMSTRUCT {
    UINT        CtlType;
    UINT        CtlID;
    UINT        itemID;
    UINT        itemAction;
    UINT        itemState;
    HWND        hwndItem;
    HDC         hDC;
    RECT        rcItem;
    DWORD       itemData;
} DRAWITEMSTRUCT,  *PDRAWITEMSTRUCT,  *LPDRAWITEMSTRUCT;




typedef struct tagDELETEITEMSTRUCT {
    UINT       CtlType;
    UINT       CtlID;
    UINT       itemID;
    HWND       hwndItem;
    UINT       itemData;
} DELETEITEMSTRUCT,  *PDELETEITEMSTRUCT,  *LPDELETEITEMSTRUCT;




typedef struct tagCOMPAREITEMSTRUCT {
    UINT        CtlType;
    UINT        CtlID;
    HWND        hwndItem;
    UINT        itemID1;
    DWORD       itemData1;
    UINT        itemID2;
    DWORD       itemData2;
    DWORD       dwLocaleId;
} COMPAREITEMSTRUCT,  *PCOMPAREITEMSTRUCT,  *LPCOMPAREITEMSTRUCT;








BOOL
__stdcall
GetMessageA(
    LPMSG lpMsg,
    HWND hWnd ,
    UINT wMsgFilterMin,
    UINT wMsgFilterMax);

BOOL
__stdcall
GetMessageW(
    LPMSG lpMsg,
    HWND hWnd ,
    UINT wMsgFilterMin,
    UINT wMsgFilterMax);







BOOL
__stdcall
TranslateMessage(
    const MSG *lpMsg);


LONG
__stdcall
DispatchMessageA(
    const MSG *lpMsg);

LONG
__stdcall
DispatchMessageW(
    const MSG *lpMsg);








BOOL
__stdcall
SetMessageQueue(
    int cMessagesMax);


BOOL
__stdcall
PeekMessageA(
    LPMSG lpMsg,
    HWND hWnd ,
    UINT wMsgFilterMin,
    UINT wMsgFilterMax,
    UINT wRemoveMsg);

BOOL
__stdcall
PeekMessageW(
    LPMSG lpMsg,
    HWND hWnd ,
    UINT wMsgFilterMin,
    UINT wMsgFilterMax,
    UINT wRemoveMsg);
















BOOL
__stdcall
RegisterHotKey(
    HWND hWnd ,
    int id,
    UINT fsModifiers,
    UINT vk);


BOOL
__stdcall
UnregisterHotKey(
    HWND hWnd,
    int id);





































BOOL
__stdcall
ExitWindowsEx(
    UINT uFlags,
    DWORD dwReserved);


BOOL
__stdcall
SwapMouseButton(
    BOOL fSwap);


DWORD
__stdcall
GetMessagePos(
    void);


LONG
__stdcall
GetMessageTime(
    void);


LONG
__stdcall
GetMessageExtraInfo(
    void);



LPARAM
__stdcall
SetMessageExtraInfo(
    LPARAM lParam);



LRESULT
__stdcall
SendMessageA(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);

LRESULT
__stdcall
SendMessageW(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);







LRESULT
__stdcall
SendMessageTimeoutA(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam,
    UINT fuFlags,
    UINT uTimeout,
    LPDWORD lpdwResult);

LRESULT
__stdcall
SendMessageTimeoutW(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam,
    UINT fuFlags,
    UINT uTimeout,
    LPDWORD lpdwResult);







BOOL
__stdcall
SendNotifyMessageA(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);

BOOL
__stdcall
SendNotifyMessageW(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);







BOOL
__stdcall
SendMessageCallbackA(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam,
    SENDASYNCPROC lpResultCallBack,
    DWORD dwData);

BOOL
__stdcall
SendMessageCallbackW(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam,
    SENDASYNCPROC lpResultCallBack,
    DWORD dwData);







 long  __stdcall  BroadcastSystemMessageA(DWORD, LPDWORD, UINT, WPARAM, LPARAM);
 long  __stdcall  BroadcastSystemMessageW(DWORD, LPDWORD, UINT, WPARAM, LPARAM);






















typedef struct tagBROADCASTSYSMSG
{
    UINT    uiMessage;
    WPARAM  wParam;
    LPARAM  lParam;
} BROADCASTSYSMSG;
typedef BROADCASTSYSMSG   *LPBROADCASTSYSMSG;





BOOL
__stdcall
PostMessageA(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);

BOOL
__stdcall
PostMessageW(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);







BOOL
__stdcall
PostThreadMessageA(
    DWORD idThread,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);

BOOL
__stdcall
PostThreadMessageW(
    DWORD idThread,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);






















BOOL
__stdcall
AttachThreadInput(
    DWORD idAttach,
    DWORD idAttachTo,
    BOOL fAttach);



BOOL
__stdcall
ReplyMessage(
    LRESULT lResult);


BOOL
__stdcall
WaitMessage(
    void);


DWORD
__stdcall
WaitForInputIdle(
    HANDLE hProcess,
    DWORD dwMilliseconds);


LRESULT
__stdcall
DefWindowProcA(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);

LRESULT
__stdcall
DefWindowProcW(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);







void
__stdcall
PostQuitMessage(
    int nExitCode);




LRESULT
__stdcall
CallWindowProcA(
    WNDPROC lpPrevWndFunc,
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);

LRESULT
__stdcall
CallWindowProcW(
    WNDPROC lpPrevWndFunc,
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);



































BOOL
__stdcall
InSendMessage(
    void);


UINT
__stdcall
GetDoubleClickTime(
    void);


BOOL
__stdcall
SetDoubleClickTime(
    UINT);


ATOM
__stdcall
RegisterClassA(
    const WNDCLASSA *lpWndClass);

ATOM
__stdcall
RegisterClassW(
    const WNDCLASSW *lpWndClass);







BOOL
__stdcall
UnregisterClassA(
    LPCSTR lpClassName,
    HINSTANCE hInstance);

BOOL
__stdcall
UnregisterClassW(
    LPCWSTR lpClassName,
    HINSTANCE hInstance);







BOOL
__stdcall
GetClassInfoA(
    HINSTANCE hInstance ,
    LPCSTR lpClassName,
    LPWNDCLASSA lpWndClass);

BOOL
__stdcall
GetClassInfoW(
    HINSTANCE hInstance ,
    LPCWSTR lpClassName,
    LPWNDCLASSW lpWndClass);








ATOM
__stdcall
RegisterClassExA(const WNDCLASSEXA *);

ATOM
__stdcall
RegisterClassExW(const WNDCLASSEXW *);







BOOL
__stdcall
GetClassInfoExA(HINSTANCE, LPCSTR, LPWNDCLASSEXA);

BOOL
__stdcall
GetClassInfoExW(HINSTANCE, LPCWSTR, LPWNDCLASSEXW);
















HWND
__stdcall
CreateWindowExA(
    DWORD dwExStyle,
    LPCSTR lpClassName,
    LPCSTR lpWindowName,
    DWORD dwStyle,
    int X,
    int Y,
    int nWidth,
    int nHeight,
    HWND hWndParent ,
    HMENU hMenu,
    HINSTANCE hInstance,
    LPVOID lpParam);

HWND
__stdcall
CreateWindowExW(
    DWORD dwExStyle,
    LPCWSTR lpClassName,
    LPCWSTR lpWindowName,
    DWORD dwStyle,
    int X,
    int Y,
    int nWidth,
    int nHeight,
    HWND hWndParent ,
    HMENU hMenu,
    HINSTANCE hInstance,
    LPVOID lpParam);





















BOOL
__stdcall
IsWindow(
    HWND hWnd);


BOOL
__stdcall
IsMenu(
    HMENU hMenu);


BOOL
__stdcall
IsChild(
    HWND hWndParent,
    HWND hWnd);


BOOL
__stdcall
DestroyWindow(
    HWND hWnd);


BOOL
__stdcall
ShowWindow(
    HWND hWnd,
    int nCmdShow);



BOOL
__stdcall
ShowWindowAsync(
    HWND hWnd,
    int nCmdShow);



BOOL
__stdcall
FlashWindow(
    HWND hWnd,
    BOOL bInvert);


BOOL
__stdcall
ShowOwnedPopups(
    HWND hWnd,
    BOOL fShow);


BOOL
__stdcall
OpenIcon(
    HWND hWnd);


BOOL
__stdcall
CloseWindow(
    HWND hWnd);


BOOL
__stdcall
MoveWindow(
    HWND hWnd,
    int X,
    int Y,
    int nWidth,
    int nHeight,
    BOOL bRepaint);


BOOL
__stdcall
SetWindowPos(
    HWND hWnd,
    HWND hWndInsertAfter ,
    int X,
    int Y,
    int cx,
    int cy,
    UINT uFlags);


BOOL
__stdcall
GetWindowPlacement(
    HWND hWnd,
    WINDOWPLACEMENT *lpwndpl);


BOOL
__stdcall
SetWindowPlacement(
    HWND hWnd,
    const WINDOWPLACEMENT *lpwndpl);





HDWP
__stdcall
BeginDeferWindowPos(
    int nNumWindows);


HDWP
__stdcall
DeferWindowPos(
    HDWP hWinPosInfo,
    HWND hWnd,
    HWND hWndInsertAfter ,
    int x,
    int y,
    int cx,
    int cy,
    UINT uFlags);


BOOL
__stdcall
EndDeferWindowPos(
    HDWP hWinPosInfo);




BOOL
__stdcall
IsWindowVisible(
    HWND hWnd);


BOOL
__stdcall
IsIconic(
    HWND hWnd);


BOOL
__stdcall
AnyPopup(
    void);


BOOL
__stdcall
BringWindowToTop(
    HWND hWnd);


BOOL
__stdcall
IsZoomed(
    HWND hWnd);






























































#pragma warning(disable:4103)

#pragma pack(push)

#pragma pack(2)









typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    WORD cdit;
    short x;
    short y;
    short cx;
    short cy;
} DLGTEMPLATE;
typedef DLGTEMPLATE *LPDLGTEMPLATEA;
typedef DLGTEMPLATE *LPDLGTEMPLATEW;



typedef LPDLGTEMPLATEA LPDLGTEMPLATE;

typedef const DLGTEMPLATE *LPCDLGTEMPLATEA;
typedef const DLGTEMPLATE *LPCDLGTEMPLATEW;



typedef LPCDLGTEMPLATEA LPCDLGTEMPLATE;





typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    short x;
    short y;
    short cx;
    short cy;
    WORD id;
} DLGITEMTEMPLATE;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEW;



typedef PDLGITEMTEMPLATEA PDLGITEMTEMPLATE;

typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW;



typedef LPDLGITEMTEMPLATEA LPDLGITEMTEMPLATE;






























#pragma warning(disable:4103)

#pragma pack(pop)










HWND
__stdcall
CreateDialogParamA(
    HINSTANCE hInstance,
    LPCSTR lpTemplateName,
    HWND hWndParent ,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);

HWND
__stdcall
CreateDialogParamW(
    HINSTANCE hInstance,
    LPCWSTR lpTemplateName,
    HWND hWndParent ,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);







HWND
__stdcall
CreateDialogIndirectParamA(
    HINSTANCE hInstance,
    LPCDLGTEMPLATEA lpTemplate,
    HWND hWndParent,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);

HWND
__stdcall
CreateDialogIndirectParamW(
    HINSTANCE hInstance,
    LPCDLGTEMPLATEW lpTemplate,
    HWND hWndParent,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);



























int
__stdcall
DialogBoxParamA(
    HINSTANCE hInstance,
    LPCSTR lpTemplateName,
    HWND hWndParent ,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);

int
__stdcall
DialogBoxParamW(
    HINSTANCE hInstance,
    LPCWSTR lpTemplateName,
    HWND hWndParent ,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);







int
__stdcall
DialogBoxIndirectParamA(
    HINSTANCE hInstance,
    LPCDLGTEMPLATEA hDialogTemplate,
    HWND hWndParent ,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);

int
__stdcall
DialogBoxIndirectParamW(
    HINSTANCE hInstance,
    LPCDLGTEMPLATEW hDialogTemplate,
    HWND hWndParent ,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);



























BOOL
__stdcall
EndDialog(
    HWND hDlg,
    int nResult);


HWND
__stdcall
GetDlgItem(
    HWND hDlg,
    int nIDDlgItem);


BOOL
__stdcall
SetDlgItemInt(
    HWND hDlg,
    int nIDDlgItem,
    UINT uValue,
    BOOL bSigned);


UINT
__stdcall
GetDlgItemInt(
    HWND hDlg,
    int nIDDlgItem,
    BOOL *lpTranslated,
    BOOL bSigned);


BOOL
__stdcall
SetDlgItemTextA(
    HWND hDlg,
    int nIDDlgItem,
    LPCSTR lpString);

BOOL
__stdcall
SetDlgItemTextW(
    HWND hDlg,
    int nIDDlgItem,
    LPCWSTR lpString);







UINT
__stdcall
GetDlgItemTextA(
    HWND hDlg,
    int nIDDlgItem,
    LPSTR lpString,
    int nMaxCount);

UINT
__stdcall
GetDlgItemTextW(
    HWND hDlg,
    int nIDDlgItem,
    LPWSTR lpString,
    int nMaxCount);







BOOL
__stdcall
CheckDlgButton(
    HWND hDlg,
    int nIDButton,
    UINT uCheck);


BOOL
__stdcall
CheckRadioButton(
    HWND hDlg,
    int nIDFirstButton,
    int nIDLastButton,
    int nIDCheckButton);


UINT
__stdcall
IsDlgButtonChecked(
    HWND hDlg,
    int nIDButton);


LONG
__stdcall
SendDlgItemMessageA(
    HWND hDlg,
    int nIDDlgItem,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);

LONG
__stdcall
SendDlgItemMessageW(
    HWND hDlg,
    int nIDDlgItem,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);







HWND
__stdcall
GetNextDlgGroupItem(
    HWND hDlg,
    HWND hCtl,
    BOOL bPrevious);


HWND
__stdcall
GetNextDlgTabItem(
    HWND hDlg,
    HWND hCtl,
    BOOL bPrevious);


int
__stdcall
GetDlgCtrlID(
    HWND hWnd);


long
__stdcall
GetDialogBaseUnits(void);


LRESULT
__stdcall
DefDlgProcA(
    HWND hDlg,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);

LRESULT
__stdcall
DefDlgProcW(
    HWND hDlg,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
















BOOL
__stdcall
CallMsgFilterA(
    LPMSG lpMsg,
    int nCode);

BOOL
__stdcall
CallMsgFilterW(
    LPMSG lpMsg,
    int nCode);















BOOL
__stdcall
OpenClipboard(
    HWND hWndNewOwner);


BOOL
__stdcall
CloseClipboard(
    void);


HWND
__stdcall
GetClipboardOwner(
    void);


HWND
__stdcall
SetClipboardViewer(
    HWND hWndNewViewer);


HWND
__stdcall
GetClipboardViewer(
    void);


BOOL
__stdcall
ChangeClipboardChain(
    HWND hWndRemove,
    HWND hWndNewNext);


HANDLE
__stdcall
SetClipboardData(
    UINT uFormat,
    HANDLE hMem);


HANDLE
__stdcall
    GetClipboardData(
    UINT uFormat);


UINT
__stdcall
RegisterClipboardFormatA(
    LPCSTR lpszFormat);

UINT
__stdcall
RegisterClipboardFormatW(
    LPCWSTR lpszFormat);







int
__stdcall
CountClipboardFormats(
    void);


UINT
__stdcall
EnumClipboardFormats(
    UINT format);


int
__stdcall
GetClipboardFormatNameA(
    UINT format,
    LPSTR lpszFormatName,
    int cchMaxCount);

int
__stdcall
GetClipboardFormatNameW(
    UINT format,
    LPWSTR lpszFormatName,
    int cchMaxCount);







BOOL
__stdcall
EmptyClipboard(
    void);


BOOL
__stdcall
IsClipboardFormatAvailable(
    UINT format);


int
__stdcall
GetPriorityClipboardFormat(
    UINT *paFormatPriorityList,
    int cFormats);


HWND
__stdcall
GetOpenClipboardWindow(
    void);








BOOL
__stdcall
CharToOemA(
    LPCSTR lpszSrc,
    LPSTR lpszDst);

BOOL
__stdcall
CharToOemW(
    LPCWSTR lpszSrc,
    LPSTR lpszDst);







BOOL
__stdcall
OemToCharA(
    LPCSTR lpszSrc,
    LPSTR lpszDst);

BOOL
__stdcall
OemToCharW(
    LPCSTR lpszSrc,
    LPWSTR lpszDst);







BOOL
__stdcall
CharToOemBuffA(
    LPCSTR lpszSrc,
    LPSTR lpszDst,
    DWORD cchDstLength);

BOOL
__stdcall
CharToOemBuffW(
    LPCWSTR lpszSrc,
    LPSTR lpszDst,
    DWORD cchDstLength);







BOOL
__stdcall
OemToCharBuffA(
    LPCSTR lpszSrc,
    LPSTR lpszDst,
    DWORD cchDstLength);

BOOL
__stdcall
OemToCharBuffW(
    LPCSTR lpszSrc,
    LPWSTR lpszDst,
    DWORD cchDstLength);







LPSTR
__stdcall
CharUpperA(
    LPSTR lpsz);

LPWSTR
__stdcall
CharUpperW(
    LPWSTR lpsz);







DWORD
__stdcall
CharUpperBuffA(
    LPSTR lpsz,
    DWORD cchLength);

DWORD
__stdcall
CharUpperBuffW(
    LPWSTR lpsz,
    DWORD cchLength);







LPSTR
__stdcall
CharLowerA(
    LPSTR lpsz);

LPWSTR
__stdcall
CharLowerW(
    LPWSTR lpsz);







DWORD
__stdcall
CharLowerBuffA(
    LPSTR lpsz,
    DWORD cchLength);

DWORD
__stdcall
CharLowerBuffW(
    LPWSTR lpsz,
    DWORD cchLength);







LPSTR
__stdcall
CharNextA(
    LPCSTR lpsz);

LPWSTR
__stdcall
CharNextW(
    LPCWSTR lpsz);







LPSTR
__stdcall
CharPrevA(
    LPCSTR lpszStart,
    LPCSTR lpszCurrent);

LPWSTR
__stdcall
CharPrevW(
    LPCWSTR lpszStart,
    LPCWSTR lpszCurrent);








LPSTR
__stdcall
CharNextExA(
     WORD CodePage,
     LPCSTR lpCurrentChar,
     DWORD dwFlags);


LPSTR
__stdcall
CharPrevExA(
     WORD CodePage,
     LPCSTR lpStart,
     LPCSTR lpCurrentChar,
     DWORD dwFlags);






















BOOL
__stdcall
IsCharAlphaA(
    CHAR ch);

BOOL
__stdcall
IsCharAlphaW(
    WCHAR ch);







BOOL
__stdcall
IsCharAlphaNumericA(
    CHAR ch);

BOOL
__stdcall
IsCharAlphaNumericW(
    WCHAR ch);







BOOL
__stdcall
IsCharUpperA(
    CHAR ch);

BOOL
__stdcall
IsCharUpperW(
    WCHAR ch);







BOOL
__stdcall
IsCharLowerA(
    CHAR ch);

BOOL
__stdcall
IsCharLowerW(
    WCHAR ch);









HWND
__stdcall
SetFocus(
    HWND hWnd);


HWND
__stdcall
GetActiveWindow(
    void);


HWND
__stdcall
GetFocus(
    void);


UINT
__stdcall
GetKBCodePage(
    void);


SHORT
__stdcall
GetKeyState(
    int nVirtKey);


SHORT
__stdcall
GetAsyncKeyState(
    int vKey);


BOOL
__stdcall
GetKeyboardState(
    PBYTE lpKeyState);


BOOL
__stdcall
SetKeyboardState(
    LPBYTE lpKeyState);


int
__stdcall
GetKeyNameTextA(
    LONG lParam,
    LPSTR lpString,
    int nSize
    );

int
__stdcall
GetKeyNameTextW(
    LONG lParam,
    LPWSTR lpString,
    int nSize
    );







int
__stdcall
GetKeyboardType(
    int nTypeFlag);


int
__stdcall
ToAscii(
    UINT uVirtKey,
    UINT uScanCode,
    PBYTE lpKeyState,
    LPWORD lpChar,
    UINT uFlags);



int
__stdcall
ToAsciiEx(
    UINT uVirtKey,
    UINT uScanCode,
    PBYTE lpKeyState,
    LPWORD lpChar,
    UINT uFlags,
    HKL dwhkl);



int
__stdcall
ToUnicode(
    UINT wVirtKey,
    UINT wScanCode,
    PBYTE lpKeyState,
    LPWSTR pwszBuff,
    int cchBuff,
    UINT wFlags);


DWORD
__stdcall
OemKeyScan(
    WORD wOemChar);


SHORT
__stdcall
VkKeyScanA(
    CHAR ch);

SHORT
__stdcall
VkKeyScanW(
    WCHAR ch);








SHORT
__stdcall VkKeyScanExA(
    CHAR  ch,
    HKL   dwhkl);

SHORT
__stdcall VkKeyScanExW(
    WCHAR  ch,
    HKL   dwhkl);










void
__stdcall
keybd_event(
    BYTE bVk,
    BYTE bScan,
    DWORD dwFlags,
    DWORD dwExtraInfo);












void
__stdcall
mouse_event(
    DWORD dwFlags,
    DWORD dx,
    DWORD dy,
    DWORD dwData,
    DWORD dwExtraInfo);


UINT
__stdcall
MapVirtualKeyA(
    UINT uCode,
    UINT uMapType);

UINT
__stdcall
MapVirtualKeyW(
    UINT uCode,
    UINT uMapType);








UINT
__stdcall
MapVirtualKeyExA(
    UINT uCode,
    UINT uMapType,
    HKL dwhkl);

UINT
__stdcall
MapVirtualKeyExW(
    UINT uCode,
    UINT uMapType,
    HKL dwhkl);








BOOL
__stdcall
GetInputState(
    void);


DWORD
__stdcall
GetQueueStatus(
    UINT flags);


HWND
__stdcall
GetCapture(
    void);


HWND
__stdcall
SetCapture(
    HWND hWnd);


BOOL
__stdcall
ReleaseCapture(
    void);


DWORD
__stdcall
MsgWaitForMultipleObjects(
    DWORD nCount,
    LPHANDLE pHandles,
    BOOL fWaitAll,
    DWORD dwMilliseconds,
    DWORD dwWakeMask);


DWORD
__stdcall
MsgWaitForMultipleObjectsEx(
    DWORD nCount,
    LPHANDLE pHandles,
    DWORD dwMilliseconds,
    DWORD dwWakeMask,
    DWORD dwFlags);












































UINT
__stdcall
SetTimer(
    HWND hWnd ,
    UINT nIDEvent,
    UINT uElapse,
    TIMERPROC lpTimerFunc);


BOOL
__stdcall
KillTimer(
    HWND hWnd,
    UINT uIDEvent);


BOOL
__stdcall
IsWindowUnicode(
    HWND hWnd);


BOOL
__stdcall
EnableWindow(
    HWND hWnd,
    BOOL bEnable);


BOOL
__stdcall
IsWindowEnabled(
    HWND hWnd);


HACCEL
__stdcall
LoadAcceleratorsA(
    HINSTANCE hInstance,
    LPCSTR lpTableName);

HACCEL
__stdcall
LoadAcceleratorsW(
    HINSTANCE hInstance,
    LPCWSTR lpTableName);







HACCEL
__stdcall
CreateAcceleratorTableA(
    LPACCEL, int);

HACCEL
__stdcall
CreateAcceleratorTableW(
    LPACCEL, int);







BOOL
__stdcall
DestroyAcceleratorTable(
    HACCEL hAccel);


int
__stdcall
CopyAcceleratorTableA(
    HACCEL hAccelSrc,
    LPACCEL lpAccelDst,
    int cAccelEntries);

int
__stdcall
CopyAcceleratorTableW(
    HACCEL hAccelSrc,
    LPACCEL lpAccelDst,
    int cAccelEntries);









int
__stdcall
TranslateAcceleratorA(
    HWND hWnd,
    HACCEL hAccTable,
    LPMSG lpMsg);

int
__stdcall
TranslateAcceleratorW(
    HWND hWnd,
    HACCEL hAccTable,
    LPMSG lpMsg);











































































































int
__stdcall
GetSystemMetrics(
    int nIndex);






HMENU
__stdcall
LoadMenuA(
    HINSTANCE hInstance,
    LPCSTR lpMenuName);

HMENU
__stdcall
LoadMenuW(
    HINSTANCE hInstance,
    LPCWSTR lpMenuName);







HMENU
__stdcall
LoadMenuIndirectA(
    const MENUTEMPLATEA *lpMenuTemplate);

HMENU
__stdcall
LoadMenuIndirectW(
    const MENUTEMPLATEW *lpMenuTemplate);







HMENU
__stdcall
GetMenu(
    HWND hWnd);


BOOL
__stdcall
SetMenu(
    HWND hWnd,
    HMENU hMenu);


BOOL
__stdcall
ChangeMenuA(
    HMENU hMenu,
    UINT cmd,
    LPCSTR lpszNewItem,
    UINT cmdInsert,
    UINT flags);

BOOL
__stdcall
ChangeMenuW(
    HMENU hMenu,
    UINT cmd,
    LPCWSTR lpszNewItem,
    UINT cmdInsert,
    UINT flags);







BOOL
__stdcall
HiliteMenuItem(
    HWND hWnd,
    HMENU hMenu,
    UINT uIDHiliteItem,
    UINT uHilite);


int
__stdcall
GetMenuStringA(
    HMENU hMenu,
    UINT uIDItem,
    LPSTR lpString,
    int nMaxCount,
    UINT uFlag);

int
__stdcall
GetMenuStringW(
    HMENU hMenu,
    UINT uIDItem,
    LPWSTR lpString,
    int nMaxCount,
    UINT uFlag);







UINT
__stdcall
GetMenuState(
    HMENU hMenu,
    UINT uId,
    UINT uFlags);


BOOL
__stdcall
DrawMenuBar(
    HWND hWnd);



HMENU
__stdcall
GetSystemMenu(
    HWND hWnd,
    BOOL bRevert);




HMENU
__stdcall
CreateMenu(
    void);


HMENU
__stdcall
CreatePopupMenu(
    void);


BOOL
__stdcall
DestroyMenu(
    HMENU hMenu);


DWORD
__stdcall
CheckMenuItem(
    HMENU hMenu,
    UINT uIDCheckItem,
    UINT uCheck);


BOOL
__stdcall
EnableMenuItem(
    HMENU hMenu,
    UINT uIDEnableItem,
    UINT uEnable);


HMENU
__stdcall
GetSubMenu(
    HMENU hMenu,
    int nPos);


UINT
__stdcall
GetMenuItemID(
    HMENU hMenu,
    int nPos);


int
__stdcall
GetMenuItemCount(
    HMENU hMenu);


BOOL
__stdcall
InsertMenuA(
    HMENU hMenu,
    UINT uPosition,
    UINT uFlags,
    UINT uIDNewItem,
    LPCSTR lpNewItem
    );

BOOL
__stdcall
InsertMenuW(
    HMENU hMenu,
    UINT uPosition,
    UINT uFlags,
    UINT uIDNewItem,
    LPCWSTR lpNewItem
    );







BOOL
__stdcall
AppendMenuA(
    HMENU hMenu,
    UINT uFlags,
    UINT uIDNewItem,
    LPCSTR lpNewItem
    );

BOOL
__stdcall
AppendMenuW(
    HMENU hMenu,
    UINT uFlags,
    UINT uIDNewItem,
    LPCWSTR lpNewItem
    );







BOOL
__stdcall
ModifyMenuA(
    HMENU hMnu,
    UINT uPosition,
    UINT uFlags,
    UINT uIDNewItem,
    LPCSTR lpNewItem
    );

BOOL
__stdcall
ModifyMenuW(
    HMENU hMnu,
    UINT uPosition,
    UINT uFlags,
    UINT uIDNewItem,
    LPCWSTR lpNewItem
    );







BOOL
__stdcall RemoveMenu(
    HMENU hMenu,
    UINT uPosition,
    UINT uFlags);


BOOL
__stdcall
DeleteMenu(
    HMENU hMenu,
    UINT uPosition,
    UINT uFlags);


BOOL
__stdcall
SetMenuItemBitmaps(
    HMENU hMenu,
    UINT uPosition,
    UINT uFlags,
    HBITMAP hBitmapUnchecked,
    HBITMAP hBitmapChecked);


LONG
__stdcall
GetMenuCheckMarkDimensions(
    void);


BOOL
__stdcall
TrackPopupMenu(
    HMENU hMenu,
    UINT uFlags,
    int x,
    int y,
    int nReserved,
    HWND hWnd,
    const RECT *prcRect);








typedef struct tagTPMPARAMS
{
    UINT    cbSize;     
    RECT    rcExclude;  
}   TPMPARAMS;
typedef TPMPARAMS  *LPTPMPARAMS;

 BOOL    __stdcall TrackPopupMenuEx(HMENU, UINT, int, int, HWND, LPTPMPARAMS);














typedef struct tagMENUITEMINFOA
{
    UINT    cbSize;
    UINT    fMask;
    UINT    fType;          
    UINT    fState;         
    UINT    wID;            
    HMENU   hSubMenu;       
    HBITMAP hbmpChecked;    
    HBITMAP hbmpUnchecked;  
    DWORD   dwItemData;     
    LPSTR   dwTypeData;     
    UINT    cch;            
}   MENUITEMINFOA,  *LPMENUITEMINFOA;
typedef struct tagMENUITEMINFOW
{
    UINT    cbSize;
    UINT    fMask;
    UINT    fType;          
    UINT    fState;         
    UINT    wID;            
    HMENU   hSubMenu;       
    HBITMAP hbmpChecked;    
    HBITMAP hbmpUnchecked;  
    DWORD   dwItemData;     
    LPWSTR  dwTypeData;     
    UINT    cch;            
}   MENUITEMINFOW,  *LPMENUITEMINFOW;




typedef MENUITEMINFOA MENUITEMINFO;
typedef LPMENUITEMINFOA LPMENUITEMINFO;

typedef MENUITEMINFOA const  *LPCMENUITEMINFOA;
typedef MENUITEMINFOW const  *LPCMENUITEMINFOW;



typedef LPCMENUITEMINFOA LPCMENUITEMINFO;



BOOL
__stdcall
InsertMenuItemA(
    HMENU,
    UINT,
    BOOL,
    LPCMENUITEMINFOA
    );

BOOL
__stdcall
InsertMenuItemW(
    HMENU,
    UINT,
    BOOL,
    LPCMENUITEMINFOW
    );







BOOL
__stdcall
GetMenuItemInfoA(
    HMENU,
    UINT,
    BOOL,
    LPMENUITEMINFOA
    );

BOOL
__stdcall
GetMenuItemInfoW(
    HMENU,
    UINT,
    BOOL,
    LPMENUITEMINFOW
    );







BOOL
__stdcall
SetMenuItemInfoA(
    HMENU,
    UINT,
    BOOL,
    LPCMENUITEMINFOA
    );

BOOL
__stdcall
SetMenuItemInfoW(
    HMENU,
    UINT,
    BOOL,
    LPCMENUITEMINFOW
    );










 UINT    __stdcall GetMenuDefaultItem(HMENU hMenu, UINT fByPos, UINT gmdiFlags);
 BOOL    __stdcall SetMenuDefaultItem(HMENU hMenu, UINT uItem, UINT fByPos);

 BOOL    __stdcall GetMenuItemRect(HWND hWnd, HMENU hMenu, UINT uItem, LPRECT lprcItem);
 int     __stdcall MenuItemFromPoint(HWND hWnd, HMENU hMenu, POINT ptScreen);






























typedef struct tagDROPSTRUCT
{
    HWND    hwndSource;
    HWND    hwndSink;
    DWORD   wFmt;
    DWORD   dwData;
    POINT   ptDrop;
    DWORD   dwControlData;
} DROPSTRUCT, *PDROPSTRUCT, *LPDROPSTRUCT;












DWORD
__stdcall
DragObject(HWND, HWND, UINT, DWORD, HCURSOR);


BOOL
__stdcall
DragDetect(HWND, POINT);



BOOL
__stdcall
DrawIcon(
    HDC hDC,
    int X,
    int Y,
    HICON hIcon);
































typedef struct tagDRAWTEXTPARAMS
{
    UINT    cbSize;
    int     iTabLength;
    int     iLeftMargin;
    int     iRightMargin;
    UINT    uiLengthDrawn;
} DRAWTEXTPARAMS,  *LPDRAWTEXTPARAMS;







int
__stdcall
DrawTextA(
    HDC hDC,
    LPCSTR lpString,
    int nCount,
    LPRECT lpRect,
    UINT uFormat);

int
__stdcall
DrawTextW(
    HDC hDC,
    LPCWSTR lpString,
    int nCount,
    LPRECT lpRect,
    UINT uFormat);









int
__stdcall
DrawTextExA(HDC, LPSTR, int, LPRECT, UINT, LPDRAWTEXTPARAMS);

int
__stdcall
DrawTextExW(HDC, LPWSTR, int, LPRECT, UINT, LPDRAWTEXTPARAMS);










BOOL
__stdcall
GrayStringA(
    HDC hDC,
    HBRUSH hBrush,
    GRAYSTRINGPROC lpOutputFunc,
    LPARAM lpData,
    int nCount,
    int X,
    int Y,
    int nWidth,
    int nHeight);

BOOL
__stdcall
GrayStringW(
    HDC hDC,
    HBRUSH hBrush,
    GRAYSTRINGPROC lpOutputFunc,
    LPARAM lpData,
    int nCount,
    int X,
    int Y,
    int nWidth,
    int nHeight);






















 BOOL __stdcall DrawStateA(HDC, HBRUSH, DRAWSTATEPROC, LPARAM, WPARAM, int, int, int, int, UINT);
 BOOL __stdcall DrawStateW(HDC, HBRUSH, DRAWSTATEPROC, LPARAM, WPARAM, int, int, int, int, UINT);









LONG
__stdcall
TabbedTextOutA(
    HDC hDC,
    int X,
    int Y,
    LPCSTR lpString,
    int nCount,
    int nTabPositions,
    LPINT lpnTabStopPositions,
    int nTabOrigin);

LONG
__stdcall
TabbedTextOutW(
    HDC hDC,
    int X,
    int Y,
    LPCWSTR lpString,
    int nCount,
    int nTabPositions,
    LPINT lpnTabStopPositions,
    int nTabOrigin);







DWORD
__stdcall
GetTabbedTextExtentA(
    HDC hDC,
    LPCSTR lpString,
    int nCount,
    int nTabPositions,
    LPINT lpnTabStopPositions);

DWORD
__stdcall
GetTabbedTextExtentW(
    HDC hDC,
    LPCWSTR lpString,
    int nCount,
    int nTabPositions,
    LPINT lpnTabStopPositions);







BOOL
__stdcall
UpdateWindow(
    HWND hWnd);


HWND
__stdcall
SetActiveWindow(
    HWND hWnd);


HWND
__stdcall
GetForegroundWindow(
    void);


 BOOL __stdcall PaintDesktop(HDC hdc);




BOOL
__stdcall
SetForegroundWindow(
    HWND hWnd);


HWND
__stdcall
WindowFromDC(
    HDC hDC);


HDC
__stdcall
GetDC(
    HWND hWnd);


HDC
__stdcall
GetDCEx(
    HWND hWnd ,
    HRGN hrgnClip,
    DWORD flags);

























HDC
__stdcall
GetWindowDC(
    HWND hWnd);


int
__stdcall
ReleaseDC(
    HWND hWnd,
    HDC hDC);


HDC
__stdcall
BeginPaint(
    HWND hWnd,
    LPPAINTSTRUCT lpPaint);


BOOL
__stdcall
EndPaint(
    HWND hWnd,
    const PAINTSTRUCT *lpPaint);


BOOL
__stdcall
GetUpdateRect(
    HWND hWnd,
    LPRECT lpRect,
    BOOL bErase);


int
__stdcall
GetUpdateRgn(
    HWND hWnd,
    HRGN hRgn,
    BOOL bErase);


int
__stdcall
SetWindowRgn(
    HWND hWnd,
    HRGN hRgn,
    BOOL bRedraw);


int
__stdcall
GetWindowRgn(
    HWND hWnd,
    HRGN hRgn);


int
__stdcall
ExcludeUpdateRgn(
    HDC hDC,
    HWND hWnd);


BOOL
__stdcall
InvalidateRect(
    HWND hWnd ,
    const RECT *lpRect,
    BOOL bErase);


BOOL
__stdcall
ValidateRect(
    HWND hWnd ,
    const RECT *lpRect);


BOOL
__stdcall
InvalidateRgn(
    HWND hWnd,
    HRGN hRgn,
    BOOL bErase);


BOOL
__stdcall
ValidateRgn(
    HWND hWnd,
    HRGN hRgn);



BOOL
__stdcall
RedrawWindow(
    HWND hWnd,
    const RECT *lprcUpdate,
    HRGN hrgnUpdate,
    UINT flags);




























BOOL
__stdcall
LockWindowUpdate(
    HWND hWndLock);


BOOL
__stdcall
ScrollWindow(
    HWND hWnd,
    int XAmount,
    int YAmount,
    const RECT *lpRect,
    const RECT *lpClipRect);


BOOL
__stdcall
ScrollDC(
    HDC hDC,
    int dx,
    int dy,
    const RECT *lprcScroll,
    const RECT *lprcClip ,
    HRGN hrgnUpdate,
    LPRECT lprcUpdate);


int
__stdcall
ScrollWindowEx(
    HWND hWnd,
    int dx,
    int dy,
    const RECT *prcScroll,
    const RECT *prcClip ,
    HRGN hrgnUpdate,
    LPRECT prcUpdate,
    UINT flags);










int
__stdcall
SetScrollPos(
    HWND hWnd,
    int nBar,
    int nPos,
    BOOL bRedraw);


int
__stdcall
GetScrollPos(
    HWND hWnd,
    int nBar);


BOOL
__stdcall
SetScrollRange(
    HWND hWnd,
    int nBar,
    int nMinPos,
    int nMaxPos,
    BOOL bRedraw);


BOOL
__stdcall
GetScrollRange(
    HWND hWnd,
    int nBar,
    LPINT lpMinPos,
    LPINT lpMaxPos);


BOOL
__stdcall
ShowScrollBar(
    HWND hWnd,
    int wBar,
    BOOL bShow);


BOOL
__stdcall
EnableScrollBar(
    HWND hWnd,
    UINT wSBflags,
    UINT wArrows);





















BOOL
__stdcall
SetPropA(
    HWND hWnd,
    LPCSTR lpString,
    HANDLE hData);

BOOL
__stdcall
SetPropW(
    HWND hWnd,
    LPCWSTR lpString,
    HANDLE hData);







HANDLE
__stdcall
GetPropA(
    HWND hWnd,
    LPCSTR lpString);

HANDLE
__stdcall
GetPropW(
    HWND hWnd,
    LPCWSTR lpString);







HANDLE
__stdcall
RemovePropA(
    HWND hWnd,
    LPCSTR lpString);

HANDLE
__stdcall
RemovePropW(
    HWND hWnd,
    LPCWSTR lpString);







int
__stdcall
EnumPropsExA(
    HWND hWnd,
    PROPENUMPROCEXA lpEnumFunc,
    LPARAM lParam);

int
__stdcall
EnumPropsExW(
    HWND hWnd,
    PROPENUMPROCEXW lpEnumFunc,
    LPARAM lParam);







int
__stdcall
EnumPropsA(
    HWND hWnd,
    PROPENUMPROCA lpEnumFunc);

int
__stdcall
EnumPropsW(
    HWND hWnd,
    PROPENUMPROCW lpEnumFunc);







BOOL
__stdcall
SetWindowTextA(
    HWND hWnd,
    LPCSTR lpString);

BOOL
__stdcall
SetWindowTextW(
    HWND hWnd,
    LPCWSTR lpString);







int
__stdcall
GetWindowTextA(
    HWND hWnd,
    LPSTR lpString,
    int nMaxCount);

int
__stdcall
GetWindowTextW(
    HWND hWnd,
    LPWSTR lpString,
    int nMaxCount);





    

UINT
__stdcall
GetWindowModuleFileNameA(
	HWND hWnd,
	LPSTR lpString,
	UINT cchFileNameMax);    

UINT
__stdcall
GetWindowModuleFileNameW(
	HWND hWnd,
	LPWSTR lpString,
	UINT cchFileNameMax);    








int
__stdcall
GetWindowTextLengthA(
    HWND hWnd);

int
__stdcall
GetWindowTextLengthW(
    HWND hWnd);







BOOL
__stdcall
GetClientRect(
    HWND hWnd,
    LPRECT lpRect);


BOOL
__stdcall
GetWindowRect(
    HWND hWnd,
    LPRECT lpRect);


BOOL
__stdcall
AdjustWindowRect(
    LPRECT lpRect,
    DWORD dwStyle,
    BOOL bMenu);


BOOL
__stdcall
AdjustWindowRectEx(
    LPRECT lpRect,
    DWORD dwStyle,
    BOOL bMenu,
    DWORD dwExStyle);




typedef struct tagHELPINFO      
{
    UINT    cbSize;             
    int     iContextType;       
    int     iCtrlId;            
    HANDLE  hItemHandle;        
    DWORD   dwContextId;        
    POINT   MousePos;           
}  HELPINFO,  *LPHELPINFO;

 BOOL  __stdcall  SetWindowContextHelpId(HWND, DWORD);
 DWORD __stdcall  GetWindowContextHelpId(HWND);
 BOOL  __stdcall  SetMenuContextHelpId(HMENU, DWORD);
 DWORD __stdcall  GetMenuContextHelpId(HMENU);











































































int
__stdcall
MessageBoxA(
    HWND hWnd ,
    LPCSTR lpText,
    LPCSTR lpCaption,
    UINT uType);

int
__stdcall
MessageBoxW(
    HWND hWnd ,
    LPCWSTR lpText,
    LPCWSTR lpCaption,
    UINT uType);







int
__stdcall
MessageBoxExA(
    HWND hWnd ,
    LPCSTR lpText,
    LPCSTR lpCaption,
    UINT uType,
    WORD wLanguageId);

int
__stdcall
MessageBoxExW(
    HWND hWnd ,
    LPCWSTR lpText,
    LPCWSTR lpCaption,
    UINT uType,
    WORD wLanguageId);








typedef void (__stdcall *MSGBOXCALLBACK)(LPHELPINFO lpHelpInfo);

typedef struct tagMSGBOXPARAMSA
{
    UINT        cbSize;
    HWND        hwndOwner;
    HINSTANCE   hInstance;
    LPCSTR      lpszText;
    LPCSTR      lpszCaption;
    DWORD       dwStyle;
    LPCSTR      lpszIcon;
    DWORD       dwContextHelpId;
    MSGBOXCALLBACK      lpfnMsgBoxCallback;
    DWORD   dwLanguageId;
} MSGBOXPARAMSA, *PMSGBOXPARAMSA, *LPMSGBOXPARAMSA;
typedef struct tagMSGBOXPARAMSW
{
    UINT        cbSize;
    HWND        hwndOwner;
    HINSTANCE   hInstance;
    LPCWSTR     lpszText;
    LPCWSTR     lpszCaption;
    DWORD       dwStyle;
    LPCWSTR     lpszIcon;
    DWORD       dwContextHelpId;
    MSGBOXCALLBACK      lpfnMsgBoxCallback;
    DWORD   dwLanguageId;
} MSGBOXPARAMSW, *PMSGBOXPARAMSW, *LPMSGBOXPARAMSW;





typedef MSGBOXPARAMSA MSGBOXPARAMS;
typedef PMSGBOXPARAMSA PMSGBOXPARAMS;
typedef LPMSGBOXPARAMSA LPMSGBOXPARAMS;



 int     __stdcall MessageBoxIndirectA(LPMSGBOXPARAMSA);
 int     __stdcall MessageBoxIndirectW(LPMSGBOXPARAMSW);










BOOL
__stdcall
MessageBeep(
    UINT uType);




int
__stdcall
ShowCursor(
    BOOL bShow);


BOOL
__stdcall
SetCursorPos(
    int X,
    int Y);


HCURSOR
__stdcall
SetCursor(
    HCURSOR hCursor);


BOOL
__stdcall
GetCursorPos(
    LPPOINT lpPoint);


BOOL
__stdcall
ClipCursor(
    const RECT *lpRect);


BOOL
__stdcall
GetClipCursor(
    LPRECT lpRect);


HCURSOR
__stdcall
GetCursor(
    void);


BOOL
__stdcall
CreateCaret(
    HWND hWnd,
    HBITMAP hBitmap ,
    int nWidth,
    int nHeight);


UINT
__stdcall
GetCaretBlinkTime(
    void);


BOOL
__stdcall
SetCaretBlinkTime(
    UINT uMSeconds);


BOOL
__stdcall
DestroyCaret(
    void);


BOOL
__stdcall
HideCaret(
    HWND hWnd);


BOOL
__stdcall
ShowCaret(
    HWND hWnd);


BOOL
__stdcall
SetCaretPos(
    int X,
    int Y);


BOOL
__stdcall
GetCaretPos(
    LPPOINT lpPoint);


BOOL
__stdcall
ClientToScreen(
    HWND hWnd,
    LPPOINT lpPoint);


BOOL
__stdcall
ScreenToClient(
    HWND hWnd,
    LPPOINT lpPoint);


int
__stdcall
MapWindowPoints(
    HWND hWndFrom,
    HWND hWndTo,
    LPPOINT lpPoints,
    UINT cPoints);


HWND
__stdcall
WindowFromPoint(
    POINT Point);


HWND
__stdcall
ChildWindowFromPoint(
    HWND hWndParent,
    POINT Point);







 HWND    __stdcall ChildWindowFromPointEx(HWND, POINT, UINT);






















































DWORD
__stdcall
GetSysColor(
    int nIndex);



HBRUSH
__stdcall
GetSysColorBrush(
    int nIndex);





BOOL
__stdcall
SetSysColors(
    int cElements,
    const INT * lpaElements,
    const COLORREF * lpaRgbValues);




BOOL
__stdcall
DrawFocusRect(
    HDC hDC,
    const RECT * lprc);


int
__stdcall
FillRect(
    HDC hDC,
    const RECT *lprc,
    HBRUSH hbr);


int
__stdcall
FrameRect(
    HDC hDC,
    const RECT *lprc,
    HBRUSH hbr);


BOOL
__stdcall
InvertRect(
    HDC hDC,
    const RECT *lprc);


BOOL
__stdcall
SetRect(
    LPRECT lprc,
    int xLeft,
    int yTop,
    int xRight,
    int yBottom);


BOOL
__stdcall
    SetRectEmpty(
    LPRECT lprc);


BOOL
__stdcall
CopyRect(
    LPRECT lprcDst,
    const RECT *lprcSrc);


BOOL
__stdcall
InflateRect(
    LPRECT lprc,
    int dx,
    int dy);


BOOL
__stdcall
IntersectRect(
    LPRECT lprcDst,
    const RECT *lprcSrc1,
    const RECT *lprcSrc2);


BOOL
__stdcall
UnionRect(
    LPRECT lprcDst,
    const RECT *lprcSrc1,
    const RECT *lprcSrc2);


BOOL
__stdcall
SubtractRect(
    LPRECT lprcDst,
    const RECT *lprcSrc1,
    const RECT *lprcSrc2);


BOOL
__stdcall
OffsetRect(
    LPRECT lprc,
    int dx,
    int dy);


BOOL
__stdcall
IsRectEmpty(
    const RECT *lprc);


BOOL
__stdcall
EqualRect(
    const RECT *lprc1,
    const RECT *lprc2);


BOOL
__stdcall
PtInRect(
    const RECT *lprc,
    POINT pt);




WORD
__stdcall
GetWindowWord(
    HWND hWnd,
    int nIndex);


WORD
__stdcall
SetWindowWord(
    HWND hWnd,
    int nIndex,
    WORD wNewWord);


LONG
__stdcall
GetWindowLongA(
    HWND hWnd,
    int nIndex);

LONG
__stdcall
GetWindowLongW(
    HWND hWnd,
    int nIndex);







LONG
__stdcall
SetWindowLongA(
    HWND hWnd,
    int nIndex,
    LONG dwNewLong);

LONG
__stdcall
SetWindowLongW(
    HWND hWnd,
    int nIndex,
    LONG dwNewLong);







WORD
__stdcall
GetClassWord(
    HWND hWnd,
    int nIndex);


WORD
__stdcall
SetClassWord(
    HWND hWnd,
    int nIndex,
    WORD wNewWord);


DWORD
__stdcall
GetClassLongA(
    HWND hWnd,
    int nIndex);

DWORD
__stdcall
GetClassLongW(
    HWND hWnd,
    int nIndex);







DWORD
__stdcall
SetClassLongA(
    HWND hWnd,
    int nIndex,
    LONG dwNewLong);

DWORD
__stdcall
SetClassLongW(
    HWND hWnd,
    int nIndex,
    LONG dwNewLong);









HWND
__stdcall
GetDesktopWindow(
    void);



HWND
__stdcall
GetParent(
    HWND hWnd);


HWND
__stdcall
SetParent(
    HWND hWndChild,
    HWND hWndNewParent);


BOOL
__stdcall
EnumChildWindows(
    HWND hWndParent,
    WNDENUMPROC lpEnumFunc,
    LPARAM lParam);


HWND
__stdcall
FindWindowA(
    LPCSTR lpClassName ,
    LPCSTR lpWindowName);

HWND
__stdcall
FindWindowW(
    LPCWSTR lpClassName ,
    LPCWSTR lpWindowName);







 HWND    __stdcall FindWindowExA(HWND, HWND, LPCSTR, LPCSTR);
 HWND    __stdcall FindWindowExW(HWND, HWND, LPCWSTR, LPCWSTR);










BOOL
__stdcall
EnumWindows(
    WNDENUMPROC lpEnumFunc,
    LPARAM lParam);


BOOL
__stdcall
EnumThreadWindows(
    DWORD dwThreadId,
    WNDENUMPROC lpfn,
    LPARAM lParam);




int
__stdcall
GetClassNameA(
    HWND hWnd,
    LPSTR lpClassName,
    int nMaxCount);

int
__stdcall
GetClassNameW(
    HWND hWnd,
    LPWSTR lpClassName,
    int nMaxCount);







HWND
__stdcall
GetTopWindow(
    HWND hWnd);






DWORD
__stdcall
GetWindowThreadProcessId(
    HWND hWnd,
    LPDWORD lpdwProcessId);





HWND
__stdcall
GetLastActivePopup(
    HWND hWnd);













HWND
__stdcall
GetWindow(
    HWND hWnd,
    UINT uCmd);








HHOOK
__stdcall
SetWindowsHookA(
    int nFilterType,
    HOOKPROC pfnFilterProc);

HHOOK
__stdcall
SetWindowsHookW(
    int nFilterType,
    HOOKPROC pfnFilterProc);





























BOOL
__stdcall
UnhookWindowsHook(
    int nCode,
    HOOKPROC pfnFilterProc);


HHOOK
__stdcall
SetWindowsHookExA(
    int idHook,
    HOOKPROC lpfn,
    HINSTANCE hmod,
    DWORD dwThreadId);

HHOOK
__stdcall
SetWindowsHookExW(
    int idHook,
    HOOKPROC lpfn,
    HINSTANCE hmod,
    DWORD dwThreadId);







BOOL
__stdcall
UnhookWindowsHookEx(
    HHOOK hhk);


LRESULT
__stdcall
CallNextHookEx(
    HHOOK hhk,
    int nCode,
    WPARAM wParam,
    LPARAM lParam);

































































































BOOL
__stdcall
CheckMenuRadioItem(HMENU, UINT, UINT, UINT, UINT);







typedef struct {
    WORD versionNumber;
    WORD offset;
} MENUITEMTEMPLATEHEADER, *PMENUITEMTEMPLATEHEADER;

typedef struct {        
    WORD mtOption;
    WORD mtID;
    WCHAR mtString[1];
} MENUITEMTEMPLATE, *PMENUITEMTEMPLATE;














































HBITMAP
__stdcall
LoadBitmapA(
    HINSTANCE hInstance,
    LPCSTR lpBitmapName);

HBITMAP
__stdcall
LoadBitmapW(
    HINSTANCE hInstance,
    LPCWSTR lpBitmapName);







HCURSOR
__stdcall
LoadCursorA(
    HINSTANCE hInstance,
    LPCSTR lpCursorName);

HCURSOR
__stdcall
LoadCursorW(
    HINSTANCE hInstance,
    LPCWSTR lpCursorName);







HCURSOR
__stdcall
LoadCursorFromFileA(
    LPCSTR    lpFileName);

HCURSOR
__stdcall
LoadCursorFromFileW(
    LPCWSTR    lpFileName);







HCURSOR
__stdcall
CreateCursor(
    HINSTANCE hInst,
    int xHotSpot,
    int yHotSpot,
    int nWidth,
    int nHeight,
    const void *pvANDPlane,
    const void *pvXORPlane);


BOOL
__stdcall
DestroyCursor(
    HCURSOR hCursor);

























BOOL
__stdcall
SetSystemCursor(
    HCURSOR hcur,
    DWORD   id);

typedef struct _ICONINFO {
    BOOL    fIcon;
    DWORD   xHotspot;
    DWORD   yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
} ICONINFO;
typedef ICONINFO *PICONINFO;


HICON
__stdcall
LoadIconA(
    HINSTANCE hInstance,
    LPCSTR lpIconName);

HICON
__stdcall
LoadIconW(
    HINSTANCE hInstance,
    LPCWSTR lpIconName);








HICON
__stdcall
CreateIcon(
    HINSTANCE hInstance,
    int nWidth,
    int nHeight,
    BYTE cPlanes,
    BYTE cBitsPixel,
    const BYTE *lpbANDbits,
    const BYTE *lpbXORbits);


BOOL
__stdcall
DestroyIcon(
    HICON hIcon);


int
__stdcall
LookupIconIdFromDirectory(
    PBYTE presbits,
    BOOL fIcon);



int
__stdcall
LookupIconIdFromDirectoryEx(
    PBYTE presbits,
    BOOL  fIcon,
    int   cxDesired,
    int   cyDesired,
    UINT  Flags);



HICON
__stdcall
CreateIconFromResource(
    PBYTE presbits,
    DWORD dwResSize,
    BOOL fIcon,
    DWORD dwVer);



HICON
__stdcall
CreateIconFromResourceEx(
    PBYTE presbits,
    DWORD dwResSize,
    BOOL  fIcon,
    DWORD dwVer,
    int   cxDesired,
    int   cyDesired,
    UINT  Flags);


typedef struct tagCURSORSHAPE
{
    int     xHotSpot;
    int     yHotSpot;
    int     cx;
    int     cy;
    int     cbWidth;
    BYTE    Planes;
    BYTE    BitsPixel;
} CURSORSHAPE,  *LPCURSORSHAPE;























HANDLE
__stdcall
LoadImageA(
    HINSTANCE,
    LPCSTR,
    UINT,
    int,
    int,
    UINT);

HANDLE
__stdcall
LoadImageW(
    HINSTANCE,
    LPCWSTR,
    UINT,
    int,
    int,
    UINT);







HANDLE
__stdcall
CopyImage(
    HANDLE,
    UINT,
    int,
    int,
    UINT);








 BOOL __stdcall DrawIconEx(HDC hdc, int xLeft, int yTop,
              HICON hIcon, int cxWidth, int cyWidth,
              UINT istepIfAniCur, HBRUSH hbrFlickerFreeDraw, UINT diFlags);



HICON
__stdcall
CreateIconIndirect(
    PICONINFO piconinfo);


HICON
__stdcall
CopyIcon(
    HICON hIcon);


BOOL
__stdcall
GetIconInfo(
    HICON hIcon,
    PICONINFO piconinfo);































































































































int
__stdcall
LoadStringA(
    HINSTANCE hInstance,
    UINT uID,
    LPSTR lpBuffer,
    int nBufferMax);

int
__stdcall
LoadStringW(
    HINSTANCE hInstance,
    UINT uID,
    LPWSTR lpBuffer,
    int nBufferMax);




























































































































































































































































































BOOL
__stdcall
IsDialogMessageA(
    HWND hDlg,
    LPMSG lpMsg);

BOOL
__stdcall
IsDialogMessageW(
    HWND hDlg,
    LPMSG lpMsg);









BOOL
__stdcall
MapDialogRect(
    HWND hDlg,
    LPRECT lpRect);


int
__stdcall
DlgDirListA(
    HWND hDlg,
    LPSTR lpPathSpec,
    int nIDListBox,
    int nIDStaticPath,
    UINT uFileType);

int
__stdcall
DlgDirListW(
    HWND hDlg,
    LPWSTR lpPathSpec,
    int nIDListBox,
    int nIDStaticPath,
    UINT uFileType);





















BOOL
__stdcall
DlgDirSelectExA(
    HWND hDlg,
    LPSTR lpString,
    int nCount,
    int nIDListBox);

BOOL
__stdcall
DlgDirSelectExW(
    HWND hDlg,
    LPWSTR lpString,
    int nCount,
    int nIDListBox);







int
__stdcall
DlgDirListComboBoxA(
    HWND hDlg,
    LPSTR lpPathSpec,
    int nIDComboBox,
    int nIDStaticPath,
    UINT uFiletype);

int
__stdcall
DlgDirListComboBoxW(
    HWND hDlg,
    LPWSTR lpPathSpec,
    int nIDComboBox,
    int nIDStaticPath,
    UINT uFiletype);







BOOL
__stdcall
DlgDirSelectComboBoxExA(
    HWND hDlg,
    LPSTR lpString,
    int nCount,
    int nIDComboBox);

BOOL
__stdcall
DlgDirSelectComboBoxExW(
    HWND hDlg,
    LPWSTR lpString,
    int nCount,
    int nIDComboBox);



























































































                                  



















































































































































































































































typedef struct tagSCROLLINFO
{
    UINT    cbSize;
    UINT    fMask;
    int     nMin;
    int     nMax;
    UINT    nPage;
    int     nPos;
    int     nTrackPos;
}   SCROLLINFO,  *LPSCROLLINFO;
typedef SCROLLINFO const  *LPCSCROLLINFO;

 int     __stdcall SetScrollInfo(HWND, int, LPCSCROLLINFO, BOOL);
 BOOL    __stdcall GetScrollInfo(HWND, int, LPSCROLLINFO);


















typedef struct tagMDICREATESTRUCTA {
    LPCSTR   szClass;
    LPCSTR   szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;        
} MDICREATESTRUCTA, *LPMDICREATESTRUCTA;
typedef struct tagMDICREATESTRUCTW {
    LPCWSTR  szClass;
    LPCWSTR  szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;        
} MDICREATESTRUCTW, *LPMDICREATESTRUCTW;




typedef MDICREATESTRUCTA MDICREATESTRUCT;
typedef LPMDICREATESTRUCTA LPMDICREATESTRUCT;


typedef struct tagCLIENTCREATESTRUCT {
    HANDLE hWindowMenu;
    UINT idFirstChild;
} CLIENTCREATESTRUCT, *LPCLIENTCREATESTRUCT;


LRESULT
__stdcall
DefFrameProcA(
    HWND hWnd,
    HWND hWndMDIClient ,
    UINT uMsg,
    WPARAM wParam,
    LPARAM lParam);

LRESULT
__stdcall
DefFrameProcW(
    HWND hWnd,
    HWND hWndMDIClient ,
    UINT uMsg,
    WPARAM wParam,
    LPARAM lParam);







LRESULT
__stdcall
DefMDIChildProcA(
    HWND hWnd,
    UINT uMsg,
    WPARAM wParam,
    LPARAM lParam);

LRESULT
__stdcall
DefMDIChildProcW(
    HWND hWnd,
    UINT uMsg,
    WPARAM wParam,
    LPARAM lParam);









BOOL
__stdcall
TranslateMDISysAccel(
    HWND hWndClient,
    LPMSG lpMsg);




UINT
__stdcall
ArrangeIconicWindows(
    HWND hWnd);


HWND
__stdcall
CreateMDIWindowA(
    LPSTR lpClassName,
    LPSTR lpWindowName,
    DWORD dwStyle,
    int X,
    int Y,
    int nWidth,
    int nHeight,
    HWND hWndParent,
    HINSTANCE hInstance,
    LPARAM lParam
    );

HWND
__stdcall
CreateMDIWindowW(
    LPWSTR lpClassName,
    LPWSTR lpWindowName,
    DWORD dwStyle,
    int X,
    int Y,
    int nWidth,
    int nHeight,
    HWND hWndParent,
    HINSTANCE hInstance,
    LPARAM lParam
    );







 WORD    __stdcall TileWindows(HWND hwndParent, UINT wHow, const RECT * lpRect, UINT cKids, const HWND  * lpKids);
 WORD    __stdcall CascadeWindows(HWND hwndParent, UINT wHow, const RECT * lpRect, UINT cKids,  const HWND  * lpKids);









typedef DWORD HELPPOLY;
typedef struct tagMULTIKEYHELPA {
    DWORD  mkSize;
    CHAR   mkKeylist;
    CHAR   szKeyphrase[1];
} MULTIKEYHELPA, *PMULTIKEYHELPA, *LPMULTIKEYHELPA;
typedef struct tagMULTIKEYHELPW {
    DWORD  mkSize;
    WCHAR  mkKeylist;
    WCHAR  szKeyphrase[1];
} MULTIKEYHELPW, *PMULTIKEYHELPW, *LPMULTIKEYHELPW;





typedef MULTIKEYHELPA MULTIKEYHELP;
typedef PMULTIKEYHELPA PMULTIKEYHELP;
typedef LPMULTIKEYHELPA LPMULTIKEYHELP;


typedef struct tagHELPWININFOA {
    int  wStructSize;
    int  x;
    int  y;
    int  dx;
    int  dy;
    int  wMax;
    CHAR   rgchMember[2];
} HELPWININFOA, *PHELPWININFOA, *LPHELPWININFOA;
typedef struct tagHELPWININFOW {
    int  wStructSize;
    int  x;
    int  y;
    int  dx;
    int  dy;
    int  wMax;
    WCHAR  rgchMember[2];
} HELPWININFOW, *PHELPWININFOW, *LPHELPWININFOW;





typedef HELPWININFOA HELPWININFO;
typedef PHELPWININFOA PHELPWININFO;
typedef LPHELPWININFOA LPHELPWININFO;













































BOOL
__stdcall
WinHelpA(
    HWND hWndMain,
    LPCSTR lpszHelp,
    UINT uCommand,
    DWORD dwData
    );

BOOL
__stdcall
WinHelpW(
    HWND hWndMain,
    LPCWSTR lpszHelp,
    UINT uCommand,
    DWORD dwData
    );








































































































































typedef struct tagNONCLIENTMETRICSA
{
    UINT    cbSize;
    int     iBorderWidth;
    int     iScrollWidth;
    int     iScrollHeight;
    int     iCaptionWidth;
    int     iCaptionHeight;
    LOGFONTA lfCaptionFont;
    int     iSmCaptionWidth;
    int     iSmCaptionHeight;
    LOGFONTA lfSmCaptionFont;
    int     iMenuWidth;
    int     iMenuHeight;
    LOGFONTA lfMenuFont;
    LOGFONTA lfStatusFont;
    LOGFONTA lfMessageFont;
}   NONCLIENTMETRICSA, *PNONCLIENTMETRICSA, * LPNONCLIENTMETRICSA;
typedef struct tagNONCLIENTMETRICSW
{
    UINT    cbSize;
    int     iBorderWidth;
    int     iScrollWidth;
    int     iScrollHeight;
    int     iCaptionWidth;
    int     iCaptionHeight;
    LOGFONTW lfCaptionFont;
    int     iSmCaptionWidth;
    int     iSmCaptionHeight;
    LOGFONTW lfSmCaptionFont;
    int     iMenuWidth;
    int     iMenuHeight;
    LOGFONTW lfMenuFont;
    LOGFONTW lfStatusFont;
    LOGFONTW lfMessageFont;
}   NONCLIENTMETRICSW, *PNONCLIENTMETRICSW, * LPNONCLIENTMETRICSW;





typedef NONCLIENTMETRICSA NONCLIENTMETRICS;
typedef PNONCLIENTMETRICSA PNONCLIENTMETRICS;
typedef LPNONCLIENTMETRICSA LPNONCLIENTMETRICS;



















typedef struct tagMINIMIZEDMETRICS
{
    UINT    cbSize;
    int     iWidth;
    int     iHorzGap;
    int     iVertGap;
    int     iArrange;
}   MINIMIZEDMETRICS, *PMINIMIZEDMETRICS, *LPMINIMIZEDMETRICS;



typedef struct tagICONMETRICSA
{
    UINT    cbSize;
    int     iHorzSpacing;
    int     iVertSpacing;
    int     iTitleWrap;
    LOGFONTA lfFont;
}   ICONMETRICSA, *PICONMETRICSA, *LPICONMETRICSA;
typedef struct tagICONMETRICSW
{
    UINT    cbSize;
    int     iHorzSpacing;
    int     iVertSpacing;
    int     iTitleWrap;
    LOGFONTW lfFont;
}   ICONMETRICSW, *PICONMETRICSW, *LPICONMETRICSW;





typedef ICONMETRICSA ICONMETRICS;
typedef PICONMETRICSA PICONMETRICS;
typedef LPICONMETRICSA LPICONMETRICS;




typedef struct tagANIMATIONINFO
{
    UINT    cbSize;
    int     iMinAnimate;
}   ANIMATIONINFO, *LPANIMATIONINFO;

typedef struct tagSERIALKEYSA
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPSTR     lpszActivePort;
    LPSTR     lpszPort;
    UINT    iBaudRate;
    UINT    iPortState;
    UINT    iActive;
}   SERIALKEYSA, *LPSERIALKEYSA;
typedef struct tagSERIALKEYSW
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPWSTR    lpszActivePort;
    LPWSTR    lpszPort;
    UINT    iBaudRate;
    UINT    iPortState;
    UINT    iActive;
}   SERIALKEYSW, *LPSERIALKEYSW;




typedef SERIALKEYSA SERIALKEYS;
typedef LPSERIALKEYSA LPSERIALKEYS;








typedef struct tagHIGHCONTRASTA
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPSTR   lpszDefaultScheme;
}   HIGHCONTRASTA, *LPHIGHCONTRASTA;
typedef struct tagHIGHCONTRASTW
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPWSTR  lpszDefaultScheme;
}   HIGHCONTRASTW, *LPHIGHCONTRASTW;




typedef HIGHCONTRASTA HIGHCONTRAST;
typedef LPHIGHCONTRASTA LPHIGHCONTRAST;


































LONG
__stdcall
ChangeDisplaySettingsA(
    LPDEVMODEA  lpDevMode,
    DWORD       dwFlags);

LONG
__stdcall
ChangeDisplaySettingsW(
    LPDEVMODEW  lpDevMode,
    DWORD       dwFlags);







LONG
__stdcall
ChangeDisplaySettingsExA(
    LPCSTR    lpszDeviceName,
    LPDEVMODEA  lpDevMode,
    HWND        hwnd,
    DWORD       dwflags,
    LPVOID      lParam);

LONG
__stdcall
ChangeDisplaySettingsExW(
    LPCWSTR    lpszDeviceName,
    LPDEVMODEW  lpDevMode,
    HWND        hwnd,
    DWORD       dwflags,
    LPVOID      lParam);










BOOL
__stdcall
EnumDisplaySettingsA(
    LPCSTR lpszDeviceName,
    DWORD iModeNum,
    LPDEVMODEA lpDevMode);

BOOL
__stdcall
EnumDisplaySettingsW(
    LPCWSTR lpszDeviceName,
    DWORD iModeNum,
    LPDEVMODEW lpDevMode);












BOOL
__stdcall
SystemParametersInfoA(
    UINT uiAction,
    UINT uiParam,
    PVOID pvParam,
    UINT fWinIni);

BOOL
__stdcall
SystemParametersInfoW(
    UINT uiAction,
    UINT uiParam,
    PVOID pvParam,
    UINT fWinIni);











typedef struct tagFILTERKEYS
{
    UINT  cbSize;
    DWORD dwFlags;
    DWORD iWaitMSec;            
    DWORD iDelayMSec;           
    DWORD iRepeatMSec;          
    DWORD iBounceMSec;          
} FILTERKEYS, *LPFILTERKEYS;












typedef struct tagSTICKYKEYS
{
    UINT  cbSize;
    DWORD dwFlags;
} STICKYKEYS, *LPSTICKYKEYS;














typedef struct tagMOUSEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iMaxSpeed;
    DWORD iTimeToMaxSpeed;
    DWORD iCtrlSpeed;
    DWORD dwReserved1;
    DWORD dwReserved2;
} MOUSEKEYS, *LPMOUSEKEYS;













typedef struct tagACCESSTIMEOUT
{
    UINT  cbSize;
    DWORD dwFlags;
    DWORD iTimeOutMSec;
} ACCESSTIMEOUT, *LPACCESSTIMEOUT;
























typedef struct tagSOUNDSENTRYA
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPSTR   lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYA, *LPSOUNDSENTRYA;
typedef struct tagSOUNDSENTRYW
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPWSTR  lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYW, *LPSOUNDSENTRYW;




typedef SOUNDSENTRYA SOUNDSENTRY;
typedef LPSOUNDSENTRYA LPSOUNDSENTRY;









typedef struct tagTOGGLEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
} TOGGLEKEYS, *LPTOGGLEKEYS;



















void
__stdcall
SetDebugErrorLevel(
    DWORD dwLevel
    );










void
__stdcall
SetLastErrorEx(
    DWORD dwErrCode,
    DWORD dwType
    );













































































































































































































































































































































































































































































































typedef DWORD LCTYPE;




typedef DWORD CALTYPE;




typedef DWORD CALID;






typedef struct _cpinfo {
    UINT    MaxCharSize;                    
    BYTE    DefaultChar[2];   
    BYTE    LeadByte[12];        
} CPINFO, *LPCPINFO;






typedef struct _numberfmtA {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPSTR   lpDecimalSep;              
    LPSTR   lpThousandSep;             
    UINT    NegativeOrder;             
} NUMBERFMTA, *LPNUMBERFMTA;
typedef struct _numberfmtW {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPWSTR  lpDecimalSep;              
    LPWSTR  lpThousandSep;             
    UINT    NegativeOrder;             
} NUMBERFMTW, *LPNUMBERFMTW;




typedef NUMBERFMTA NUMBERFMT;
typedef LPNUMBERFMTA LPNUMBERFMT;







typedef struct _currencyfmtA {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPSTR   lpDecimalSep;              
    LPSTR   lpThousandSep;             
    UINT    NegativeOrder;             
    UINT    PositiveOrder;             
    LPSTR   lpCurrencySymbol;          
} CURRENCYFMTA, *LPCURRENCYFMTA;
typedef struct _currencyfmtW {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPWSTR  lpDecimalSep;              
    LPWSTR  lpThousandSep;             
    UINT    NegativeOrder;             
    UINT    PositiveOrder;             
    LPWSTR  lpCurrencySymbol;          
} CURRENCYFMTW, *LPCURRENCYFMTW;




typedef CURRENCYFMTA CURRENCYFMT;
typedef LPCURRENCYFMTA LPCURRENCYFMT;










typedef BOOL (__stdcall* LOCALE_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CODEPAGE_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* TIMEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCA)(LPSTR);

typedef BOOL (__stdcall* LOCALE_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CODEPAGE_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* TIMEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCW)(LPWSTR);























































__declspec(dllimport)
BOOL
__stdcall
IsValidCodePage(
    UINT  CodePage);

__declspec(dllimport)
UINT
__stdcall
GetACP(void);

__declspec(dllimport)
UINT
__stdcall
GetOEMCP(void);

__declspec(dllimport)
BOOL
__stdcall
GetCPInfo(
    UINT      CodePage,
    LPCPINFO  lpCPInfo);

__declspec(dllimport)
BOOL
__stdcall
IsDBCSLeadByte(
    BYTE  TestChar);

__declspec(dllimport)
BOOL
__stdcall
IsDBCSLeadByteEx(
    UINT  CodePage,
    BYTE  TestChar);

__declspec(dllimport)
int
__stdcall
MultiByteToWideChar(
    UINT     CodePage,
    DWORD    dwFlags,
    LPCSTR   lpMultiByteStr,
    int      cchMultiByte,
    LPWSTR   lpWideCharStr,
    int      cchWideChar);

__declspec(dllimport)
int
__stdcall
WideCharToMultiByte(
    UINT     CodePage,
    DWORD    dwFlags,
    LPCWSTR  lpWideCharStr,
    int      cchWideChar,
    LPSTR    lpMultiByteStr,
    int      cchMultiByte,
    LPCSTR   lpDefaultChar,
    LPBOOL   lpUsedDefaultChar);






__declspec(dllimport)
int
__stdcall
CompareStringA(
    LCID     Locale,
    DWORD    dwCmpFlags,
    LPCSTR lpString1,
    int      cchCount1,
    LPCSTR lpString2,
    int      cchCount2);
__declspec(dllimport)
int
__stdcall
CompareStringW(
    LCID     Locale,
    DWORD    dwCmpFlags,
    LPCWSTR lpString1,
    int      cchCount1,
    LPCWSTR lpString2,
    int      cchCount2);






__declspec(dllimport)
int
__stdcall
LCMapStringA(
    LCID     Locale,
    DWORD    dwMapFlags,
    LPCSTR lpSrcStr,
    int      cchSrc,
    LPSTR  lpDestStr,
    int      cchDest);
__declspec(dllimport)
int
__stdcall
LCMapStringW(
    LCID     Locale,
    DWORD    dwMapFlags,
    LPCWSTR lpSrcStr,
    int      cchSrc,
    LPWSTR  lpDestStr,
    int      cchDest);






__declspec(dllimport)
int
__stdcall
GetLocaleInfoA(
    LCID     Locale,
    LCTYPE   LCType,
    LPSTR  lpLCData,
    int      cchData);
__declspec(dllimport)
int
__stdcall
GetLocaleInfoW(
    LCID     Locale,
    LCTYPE   LCType,
    LPWSTR  lpLCData,
    int      cchData);






__declspec(dllimport)
BOOL
__stdcall
SetLocaleInfoA(
    LCID     Locale,
    LCTYPE   LCType,
    LPCSTR lpLCData);
__declspec(dllimport)
BOOL
__stdcall
SetLocaleInfoW(
    LCID     Locale,
    LCTYPE   LCType,
    LPCWSTR lpLCData);






__declspec(dllimport)
int
__stdcall
GetTimeFormatA(
    LCID     Locale,
    DWORD    dwFlags,
    const SYSTEMTIME *lpTime,
    LPCSTR lpFormat,
    LPSTR  lpTimeStr,
    int      cchTime);
__declspec(dllimport)
int
__stdcall
GetTimeFormatW(
    LCID     Locale,
    DWORD    dwFlags,
    const SYSTEMTIME *lpTime,
    LPCWSTR lpFormat,
    LPWSTR  lpTimeStr,
    int      cchTime);






__declspec(dllimport)
int
__stdcall
GetDateFormatA(
    LCID     Locale,
    DWORD    dwFlags,
    const SYSTEMTIME *lpDate,
    LPCSTR lpFormat,
    LPSTR  lpDateStr,
    int      cchDate);
__declspec(dllimport)
int
__stdcall
GetDateFormatW(
    LCID     Locale,
    DWORD    dwFlags,
    const SYSTEMTIME *lpDate,
    LPCWSTR lpFormat,
    LPWSTR  lpDateStr,
    int      cchDate);






__declspec(dllimport)
int
__stdcall
GetNumberFormatA(
    LCID     Locale,
    DWORD    dwFlags,
    LPCSTR lpValue,
    const NUMBERFMTA *lpFormat,
    LPSTR  lpNumberStr,
    int      cchNumber);
__declspec(dllimport)
int
__stdcall
GetNumberFormatW(
    LCID     Locale,
    DWORD    dwFlags,
    LPCWSTR lpValue,
    const NUMBERFMTW *lpFormat,
    LPWSTR  lpNumberStr,
    int      cchNumber);






__declspec(dllimport)
int
__stdcall
GetCurrencyFormatA(
    LCID     Locale,
    DWORD    dwFlags,
    LPCSTR lpValue,
    const CURRENCYFMTA *lpFormat,
    LPSTR  lpCurrencyStr,
    int      cchCurrency);
__declspec(dllimport)
int
__stdcall
GetCurrencyFormatW(
    LCID     Locale,
    DWORD    dwFlags,
    LPCWSTR lpValue,
    const CURRENCYFMTW *lpFormat,
    LPWSTR  lpCurrencyStr,
    int      cchCurrency);






__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoA(
    CALINFO_ENUMPROCA lpCalInfoEnumProc,
    LCID              Locale,
    CALID             Calendar,
    CALTYPE           CalType);
__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoW(
    CALINFO_ENUMPROCW lpCalInfoEnumProc,
    LCID              Locale,
    CALID             Calendar,
    CALTYPE           CalType);






__declspec(dllimport)
BOOL
__stdcall
EnumTimeFormatsA(
    TIMEFMT_ENUMPROCA lpTimeFmtEnumProc,
    LCID              Locale,
    DWORD             dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumTimeFormatsW(
    TIMEFMT_ENUMPROCW lpTimeFmtEnumProc,
    LCID              Locale,
    DWORD             dwFlags);






__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsA(
    DATEFMT_ENUMPROCA lpDateFmtEnumProc,
    LCID              Locale,
    DWORD             dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsW(
    DATEFMT_ENUMPROCW lpDateFmtEnumProc,
    LCID              Locale,
    DWORD             dwFlags);






__declspec(dllimport)
BOOL
__stdcall
IsValidLocale(
    LCID   Locale,
    DWORD  dwFlags);

__declspec(dllimport)
LCID
__stdcall
ConvertDefaultLocale(
    LCID   Locale);

__declspec(dllimport)
LCID
__stdcall
GetThreadLocale(void);

__declspec(dllimport)
BOOL
__stdcall
SetThreadLocale(
    LCID  Locale
    );

__declspec(dllimport)
LANGID
__stdcall
GetSystemDefaultLangID(void);

__declspec(dllimport)
LANGID
__stdcall
GetUserDefaultLangID(void);

__declspec(dllimport)
LCID
__stdcall
GetSystemDefaultLCID(void);

__declspec(dllimport)
LCID
__stdcall
GetUserDefaultLCID(void);





__declspec(dllimport)
BOOL
__stdcall
GetStringTypeExA(
    LCID     Locale,
    DWORD    dwInfoType,
    LPCSTR lpSrcStr,
    int      cchSrc,
    LPWORD   lpCharType);
__declspec(dllimport)
BOOL
__stdcall
GetStringTypeExW(
    LCID     Locale,
    DWORD    dwInfoType,
    LPCWSTR lpSrcStr,
    int      cchSrc,
    LPWORD   lpCharType);

















__declspec(dllimport)
BOOL
__stdcall
GetStringTypeA(
    LCID     Locale,
    DWORD    dwInfoType,
    LPCSTR   lpSrcStr,
    int      cchSrc,
    LPWORD   lpCharType);

__declspec(dllimport)
BOOL
__stdcall
GetStringTypeW(
    DWORD    dwInfoType,
    LPCWSTR  lpSrcStr,
    int      cchSrc,
    LPWORD   lpCharType);


__declspec(dllimport)
int
__stdcall
FoldStringA(
    DWORD    dwMapFlags,
    LPCSTR lpSrcStr,
    int      cchSrc,
    LPSTR  lpDestStr,
    int      cchDest);
__declspec(dllimport)
int
__stdcall
FoldStringW(
    DWORD    dwMapFlags,
    LPCWSTR lpSrcStr,
    int      cchSrc,
    LPWSTR  lpDestStr,
    int      cchDest);






__declspec(dllimport)
BOOL
__stdcall
EnumSystemLocalesA(
    LOCALE_ENUMPROCA lpLocaleEnumProc,
    DWORD            dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumSystemLocalesW(
    LOCALE_ENUMPROCW lpLocaleEnumProc,
    DWORD            dwFlags);






__declspec(dllimport)
BOOL
__stdcall
EnumSystemCodePagesA(
    CODEPAGE_ENUMPROCA lpCodePageEnumProc,
    DWORD              dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumSystemCodePagesW(
    CODEPAGE_ENUMPROCW lpCodePageEnumProc,
    DWORD              dwFlags);














































typedef struct _COORD {
    SHORT X;
    SHORT Y;
} COORD, *PCOORD;

typedef struct _SMALL_RECT {
    SHORT Left;
    SHORT Top;
    SHORT Right;
    SHORT Bottom;
} SMALL_RECT, *PSMALL_RECT;

typedef struct _KEY_EVENT_RECORD {
    BOOL bKeyDown;
    WORD wRepeatCount;
    WORD wVirtualKeyCode;
    WORD wVirtualScanCode;
    union {
        WCHAR UnicodeChar;
        CHAR   AsciiChar;
    } uChar;
    DWORD dwControlKeyState;
} KEY_EVENT_RECORD, *PKEY_EVENT_RECORD;















typedef struct _MOUSE_EVENT_RECORD {
    COORD dwMousePosition;
    DWORD dwButtonState;
    DWORD dwControlKeyState;
    DWORD dwEventFlags;
} MOUSE_EVENT_RECORD, *PMOUSE_EVENT_RECORD;


















typedef struct _WINDOW_BUFFER_SIZE_RECORD {
    COORD dwSize;
} WINDOW_BUFFER_SIZE_RECORD, *PWINDOW_BUFFER_SIZE_RECORD;

typedef struct _MENU_EVENT_RECORD {
    UINT dwCommandId;
} MENU_EVENT_RECORD, *PMENU_EVENT_RECORD;

typedef struct _FOCUS_EVENT_RECORD {
    BOOL bSetFocus;
} FOCUS_EVENT_RECORD, *PFOCUS_EVENT_RECORD;

typedef struct _INPUT_RECORD {
    WORD EventType;
    union {
        KEY_EVENT_RECORD KeyEvent;
        MOUSE_EVENT_RECORD MouseEvent;
        WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
        MENU_EVENT_RECORD MenuEvent;
        FOCUS_EVENT_RECORD FocusEvent;
    } Event;
} INPUT_RECORD, *PINPUT_RECORD;











typedef struct _CHAR_INFO {
    union {
        WCHAR UnicodeChar;
        CHAR   AsciiChar;
    } Char;
    WORD Attributes;
} CHAR_INFO, *PCHAR_INFO;















typedef struct _CONSOLE_SCREEN_BUFFER_INFO {
    COORD dwSize;
    COORD dwCursorPosition;
    WORD  wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
} CONSOLE_SCREEN_BUFFER_INFO, *PCONSOLE_SCREEN_BUFFER_INFO;

typedef struct _CONSOLE_CURSOR_INFO {
    DWORD  dwSize;
    BOOL   bVisible;
} CONSOLE_CURSOR_INFO, *PCONSOLE_CURSOR_INFO;





typedef
BOOL
(__stdcall *PHANDLER_ROUTINE)(
    DWORD CtrlType
    );






























__declspec(dllimport)
BOOL
__stdcall
PeekConsoleInputA(
    HANDLE hConsoleInput,
    PINPUT_RECORD lpBuffer,
    DWORD nLength,
    LPDWORD lpNumberOfEventsRead
    );
__declspec(dllimport)
BOOL
__stdcall
PeekConsoleInputW(
    HANDLE hConsoleInput,
    PINPUT_RECORD lpBuffer,
    DWORD nLength,
    LPDWORD lpNumberOfEventsRead
    );






__declspec(dllimport)
BOOL
__stdcall
ReadConsoleInputA(
    HANDLE hConsoleInput,
    PINPUT_RECORD lpBuffer,
    DWORD nLength,
    LPDWORD lpNumberOfEventsRead
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleInputW(
    HANDLE hConsoleInput,
    PINPUT_RECORD lpBuffer,
    DWORD nLength,
    LPDWORD lpNumberOfEventsRead
    );






__declspec(dllimport)
BOOL
__stdcall
WriteConsoleInputA(
    HANDLE hConsoleInput,
    const INPUT_RECORD *lpBuffer,
    DWORD nLength,
    LPDWORD lpNumberOfEventsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleInputW(
    HANDLE hConsoleInput,
    const INPUT_RECORD *lpBuffer,
    DWORD nLength,
    LPDWORD lpNumberOfEventsWritten
    );






__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputA(
    HANDLE hConsoleOutput,
    PCHAR_INFO lpBuffer,
    COORD dwBufferSize,
    COORD dwBufferCoord,
    PSMALL_RECT lpReadRegion
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputW(
    HANDLE hConsoleOutput,
    PCHAR_INFO lpBuffer,
    COORD dwBufferSize,
    COORD dwBufferCoord,
    PSMALL_RECT lpReadRegion
    );






__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputA(
    HANDLE hConsoleOutput,
    const CHAR_INFO *lpBuffer,
    COORD dwBufferSize,
    COORD dwBufferCoord,
    PSMALL_RECT lpWriteRegion
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputW(
    HANDLE hConsoleOutput,
    const CHAR_INFO *lpBuffer,
    COORD dwBufferSize,
    COORD dwBufferCoord,
    PSMALL_RECT lpWriteRegion
    );






__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputCharacterA(
    HANDLE hConsoleOutput,
    LPSTR lpCharacter,
    DWORD nLength,
    COORD dwReadCoord,
    LPDWORD lpNumberOfCharsRead
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputCharacterW(
    HANDLE hConsoleOutput,
    LPWSTR lpCharacter,
    DWORD nLength,
    COORD dwReadCoord,
    LPDWORD lpNumberOfCharsRead
    );






__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputAttribute(
    HANDLE hConsoleOutput,
    LPWORD lpAttribute,
    DWORD nLength,
    COORD dwReadCoord,
    LPDWORD lpNumberOfAttrsRead
    );

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputCharacterA(
    HANDLE hConsoleOutput,
    LPCSTR lpCharacter,
    DWORD nLength,
    COORD dwWriteCoord,
    LPDWORD lpNumberOfCharsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputCharacterW(
    HANDLE hConsoleOutput,
    LPCWSTR lpCharacter,
    DWORD nLength,
    COORD dwWriteCoord,
    LPDWORD lpNumberOfCharsWritten
    );






__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputAttribute(
    HANDLE hConsoleOutput,
    const WORD *lpAttribute,
    DWORD nLength,
    COORD dwWriteCoord,
    LPDWORD lpNumberOfAttrsWritten
    );

__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputCharacterA(
    HANDLE hConsoleOutput,
    CHAR  cCharacter,
    DWORD  nLength,
    COORD  dwWriteCoord,
    LPDWORD lpNumberOfCharsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputCharacterW(
    HANDLE hConsoleOutput,
    WCHAR  cCharacter,
    DWORD  nLength,
    COORD  dwWriteCoord,
    LPDWORD lpNumberOfCharsWritten
    );






__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputAttribute(
    HANDLE hConsoleOutput,
    WORD   wAttribute,
    DWORD  nLength,
    COORD  dwWriteCoord,
    LPDWORD lpNumberOfAttrsWritten
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleMode(
    HANDLE hConsoleHandle,
    LPDWORD lpMode
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumberOfConsoleInputEvents(
    HANDLE hConsoleInput,
    LPDWORD lpNumberOfEvents
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleScreenBufferInfo(
    HANDLE hConsoleOutput,
    PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo
    );

__declspec(dllimport)
COORD
__stdcall
GetLargestConsoleWindowSize(
    HANDLE hConsoleOutput
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleCursorInfo(
    HANDLE hConsoleOutput,
    PCONSOLE_CURSOR_INFO lpConsoleCursorInfo
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumberOfConsoleMouseButtons(
    LPDWORD lpNumberOfMouseButtons
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleMode(
    HANDLE hConsoleHandle,
    DWORD dwMode
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleActiveScreenBuffer(
    HANDLE hConsoleOutput
    );

__declspec(dllimport)
BOOL
__stdcall
FlushConsoleInputBuffer(
    HANDLE hConsoleInput
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleScreenBufferSize(
    HANDLE hConsoleOutput,
    COORD dwSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCursorPosition(
    HANDLE hConsoleOutput,
    COORD dwCursorPosition
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCursorInfo(
    HANDLE hConsoleOutput,
    const CONSOLE_CURSOR_INFO *lpConsoleCursorInfo
    );

__declspec(dllimport)
BOOL
__stdcall
ScrollConsoleScreenBufferA(
    HANDLE hConsoleOutput,
    const SMALL_RECT *lpScrollRectangle,
    const SMALL_RECT *lpClipRectangle,
    COORD dwDestinationOrigin,
    const CHAR_INFO *lpFill
    );
__declspec(dllimport)
BOOL
__stdcall
ScrollConsoleScreenBufferW(
    HANDLE hConsoleOutput,
    const SMALL_RECT *lpScrollRectangle,
    const SMALL_RECT *lpClipRectangle,
    COORD dwDestinationOrigin,
    const CHAR_INFO *lpFill
    );






__declspec(dllimport)
BOOL
__stdcall
SetConsoleWindowInfo(
    HANDLE hConsoleOutput,
    BOOL bAbsolute,
    const SMALL_RECT *lpConsoleWindow
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleTextAttribute(
    HANDLE hConsoleOutput,
    WORD wAttributes
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCtrlHandler(
    PHANDLER_ROUTINE HandlerRoutine,
    BOOL Add
    );

__declspec(dllimport)
BOOL
__stdcall
GenerateConsoleCtrlEvent(
    DWORD dwCtrlEvent,
    DWORD dwProcessGroupId
    );

__declspec(dllimport)
BOOL
__stdcall
AllocConsole( void );

__declspec(dllimport)
BOOL
__stdcall
FreeConsole( void );


__declspec(dllimport)
DWORD
__stdcall
GetConsoleTitleA(
    LPSTR lpConsoleTitle,
    DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetConsoleTitleW(
    LPWSTR lpConsoleTitle,
    DWORD nSize
    );






__declspec(dllimport)
BOOL
__stdcall
SetConsoleTitleA(
    LPCSTR lpConsoleTitle
    );
__declspec(dllimport)
BOOL
__stdcall
SetConsoleTitleW(
    LPCWSTR lpConsoleTitle
    );






__declspec(dllimport)
BOOL
__stdcall
ReadConsoleA(
    HANDLE hConsoleInput,
    LPVOID lpBuffer,
    DWORD nNumberOfCharsToRead,
    LPDWORD lpNumberOfCharsRead,
    LPVOID lpReserved
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleW(
    HANDLE hConsoleInput,
    LPVOID lpBuffer,
    DWORD nNumberOfCharsToRead,
    LPDWORD lpNumberOfCharsRead,
    LPVOID lpReserved
    );






__declspec(dllimport)
BOOL
__stdcall
WriteConsoleA(
    HANDLE hConsoleOutput,
    const void *lpBuffer,
    DWORD nNumberOfCharsToWrite,
    LPDWORD lpNumberOfCharsWritten,
    LPVOID lpReserved
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleW(
    HANDLE hConsoleOutput,
    const void *lpBuffer,
    DWORD nNumberOfCharsToWrite,
    LPDWORD lpNumberOfCharsWritten,
    LPVOID lpReserved
    );








__declspec(dllimport)
HANDLE
__stdcall
CreateConsoleScreenBuffer(
    DWORD dwDesiredAccess,
    DWORD dwShareMode,
    const SECURITY_ATTRIBUTES *lpSecurityAttributes,
    DWORD dwFlags,
    LPVOID lpScreenBufferData
    );

__declspec(dllimport)
UINT
__stdcall
GetConsoleCP( void );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCP(
    UINT wCodePageID
    );

__declspec(dllimport)
UINT
__stdcall
GetConsoleOutputCP( void );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleOutputCP(
    UINT wCodePageID
    );



































































































































typedef struct tagVS_FIXEDFILEINFO
{
    DWORD   dwSignature;            
    DWORD   dwStrucVersion;         
    DWORD   dwFileVersionMS;        
    DWORD   dwFileVersionLS;        
    DWORD   dwProductVersionMS;     
    DWORD   dwProductVersionLS;     
    DWORD   dwFileFlagsMask;        
    DWORD   dwFileFlags;            
    DWORD   dwFileOS;               
    DWORD   dwFileType;             
    DWORD   dwFileSubtype;          
    DWORD   dwFileDateMS;           
    DWORD   dwFileDateLS;           
} VS_FIXEDFILEINFO;



DWORD
__stdcall
VerFindFileA(
        DWORD uFlags,
        LPSTR szFileName,
        LPSTR szWinDir,
        LPSTR szAppDir,
        LPSTR szCurDir,
        PUINT lpuCurDirLen,
        LPSTR szDestDir,
        PUINT lpuDestDirLen
        );
DWORD
__stdcall
VerFindFileW(
        DWORD uFlags,
        LPWSTR szFileName,
        LPWSTR szWinDir,
        LPWSTR szAppDir,
        LPWSTR szCurDir,
        PUINT lpuCurDirLen,
        LPWSTR szDestDir,
        PUINT lpuDestDirLen
        );






DWORD
__stdcall
VerInstallFileA(
        DWORD uFlags,
        LPSTR szSrcFileName,
        LPSTR szDestFileName,
        LPSTR szSrcDir,
        LPSTR szDestDir,
        LPSTR szCurDir,
        LPSTR szTmpFile,
        PUINT lpuTmpFileLen
        );
DWORD
__stdcall
VerInstallFileW(
        DWORD uFlags,
        LPWSTR szSrcFileName,
        LPWSTR szDestFileName,
        LPWSTR szSrcDir,
        LPWSTR szDestDir,
        LPWSTR szCurDir,
        LPWSTR szTmpFile,
        PUINT lpuTmpFileLen
        );







DWORD
__stdcall
GetFileVersionInfoSizeA(
        LPSTR lptstrFilename, 
        LPDWORD lpdwHandle
        );                      

DWORD
__stdcall
GetFileVersionInfoSizeW(
        LPWSTR lptstrFilename, 
        LPDWORD lpdwHandle
        );                      







BOOL
__stdcall
GetFileVersionInfoA(
        LPSTR lptstrFilename, 
        DWORD dwHandle,         
        DWORD dwLen,            
        LPVOID lpData
        );                      

BOOL
__stdcall
GetFileVersionInfoW(
        LPWSTR lptstrFilename, 
        DWORD dwHandle,         
        DWORD dwLen,            
        LPVOID lpData
        );                      






DWORD
__stdcall
VerLanguageNameA(
        DWORD wLang,
        LPSTR szLang,
        DWORD nSize
        );
DWORD
__stdcall
VerLanguageNameW(
        DWORD wLang,
        LPWSTR szLang,
        DWORD nSize
        );






BOOL
__stdcall
VerQueryValueA(
        const LPVOID pBlock,
        LPSTR lpSubBlock,
        LPVOID * lplpBuffer,
        PUINT puLen
        );
BOOL
__stdcall
VerQueryValueW(
        const LPVOID pBlock,
        LPWSTR lpSubBlock,
        LPVOID * lplpBuffer,
        PUINT puLen
        );














































typedef ACCESS_MASK REGSAM;





struct HKEY__ { int unused; }; typedef struct HKEY__ *HKEY;
typedef HKEY *PHKEY;



















struct val_context {
    int valuelen;       
    LPVOID value_context;   
    LPVOID val_buff_ptr;    
};

typedef struct val_context  *PVALCONTEXT;

typedef struct pvalueA {           
    LPSTR   pv_valuename;          
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
}PVALUEA,  *PPVALUEA;
typedef struct pvalueW {           
    LPWSTR  pv_valuename;          
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
}PVALUEW,  *PPVALUEW;




typedef PVALUEA PVALUE;
typedef PPVALUEA PPVALUE;


typedef
DWORD _cdecl
QUERYHANDLER (LPVOID keycontext, PVALCONTEXT val_list, DWORD num_vals,
          LPVOID outputbuffer, DWORD  *total_outlen, DWORD input_blen);

typedef QUERYHANDLER  *PQUERYHANDLER;

typedef struct provider_info {
    PQUERYHANDLER pi_R0_1val;
    PQUERYHANDLER pi_R0_allvals;
    PQUERYHANDLER pi_R3_1val;
    PQUERYHANDLER pi_R3_allvals;
    DWORD pi_flags;    
    LPVOID pi_key_context;
}REG_PROVIDER;

typedef struct provider_info  *PPROVIDER;

typedef struct value_entA {
    LPSTR   ve_valuename;
    DWORD ve_valuelen;
    DWORD ve_valueptr;
    DWORD ve_type;
}VALENTA,  *PVALENTA;
typedef struct value_entW {
    LPWSTR  ve_valuename;
    DWORD ve_valuelen;
    DWORD ve_valueptr;
    DWORD ve_type;
}VALENTW,  *PVALENTW;




typedef VALENTA VALENT;
typedef PVALENTA PVALENT;



















__declspec(dllimport)
LONG
__stdcall
RegCloseKey (
    HKEY hKey
    );

__declspec(dllimport)
LONG
__stdcall
RegConnectRegistryA (
    LPSTR lpMachineName,
    HKEY hKey,
    PHKEY phkResult
    );
__declspec(dllimport)
LONG
__stdcall
RegConnectRegistryW (
    LPWSTR lpMachineName,
    HKEY hKey,
    PHKEY phkResult
    );






__declspec(dllimport)
LONG
__stdcall
RegCreateKeyA (
    HKEY hKey,
    LPCSTR lpSubKey,
    PHKEY phkResult
    );
__declspec(dllimport)
LONG
__stdcall
RegCreateKeyW (
    HKEY hKey,
    LPCWSTR lpSubKey,
    PHKEY phkResult
    );






__declspec(dllimport)
LONG
__stdcall
RegCreateKeyExA (
    HKEY hKey,
    LPCSTR lpSubKey,
    DWORD Reserved,
    LPSTR lpClass,
    DWORD dwOptions,
    REGSAM samDesired,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    PHKEY phkResult,
    LPDWORD lpdwDisposition
    );
__declspec(dllimport)
LONG
__stdcall
RegCreateKeyExW (
    HKEY hKey,
    LPCWSTR lpSubKey,
    DWORD Reserved,
    LPWSTR lpClass,
    DWORD dwOptions,
    REGSAM samDesired,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    PHKEY phkResult,
    LPDWORD lpdwDisposition
    );






__declspec(dllimport)
LONG
__stdcall
RegDeleteKeyA (
    HKEY hKey,
    LPCSTR lpSubKey
    );
__declspec(dllimport)
LONG
__stdcall
RegDeleteKeyW (
    HKEY hKey,
    LPCWSTR lpSubKey
    );






__declspec(dllimport)
LONG
__stdcall
RegDeleteValueA (
    HKEY hKey,
    LPCSTR lpValueName
    );
__declspec(dllimport)
LONG
__stdcall
RegDeleteValueW (
    HKEY hKey,
    LPCWSTR lpValueName
    );






__declspec(dllimport)
LONG
__stdcall
RegEnumKeyA (
    HKEY hKey,
    DWORD dwIndex,
    LPSTR lpName,
    DWORD cbName
    );
__declspec(dllimport)
LONG
__stdcall
RegEnumKeyW (
    HKEY hKey,
    DWORD dwIndex,
    LPWSTR lpName,
    DWORD cbName
    );






__declspec(dllimport)
LONG
__stdcall
RegEnumKeyExA (
    HKEY hKey,
    DWORD dwIndex,
    LPSTR lpName,
    LPDWORD lpcbName,
    LPDWORD lpReserved,
    LPSTR lpClass,
    LPDWORD lpcbClass,
    PFILETIME lpftLastWriteTime
    );
__declspec(dllimport)
LONG
__stdcall
RegEnumKeyExW (
    HKEY hKey,
    DWORD dwIndex,
    LPWSTR lpName,
    LPDWORD lpcbName,
    LPDWORD lpReserved,
    LPWSTR lpClass,
    LPDWORD lpcbClass,
    PFILETIME lpftLastWriteTime
    );






__declspec(dllimport)
LONG
__stdcall
RegEnumValueA (
    HKEY hKey,
    DWORD dwIndex,
    LPSTR lpValueName,
    LPDWORD lpcbValueName,
    LPDWORD lpReserved,
    LPDWORD lpType,
    LPBYTE lpData,
    LPDWORD lpcbData
    );
__declspec(dllimport)
LONG
__stdcall
RegEnumValueW (
    HKEY hKey,
    DWORD dwIndex,
    LPWSTR lpValueName,
    LPDWORD lpcbValueName,
    LPDWORD lpReserved,
    LPDWORD lpType,
    LPBYTE lpData,
    LPDWORD lpcbData
    );






__declspec(dllimport)
LONG
__stdcall
RegFlushKey (
    HKEY hKey
    );

__declspec(dllimport)
LONG
__stdcall
RegGetKeySecurity (
    HKEY hKey,
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    LPDWORD lpcbSecurityDescriptor
    );

__declspec(dllimport)
LONG
__stdcall
RegLoadKeyA (
    HKEY    hKey,
    LPCSTR  lpSubKey,
    LPCSTR  lpFile
    );
__declspec(dllimport)
LONG
__stdcall
RegLoadKeyW (
    HKEY    hKey,
    LPCWSTR  lpSubKey,
    LPCWSTR  lpFile
    );






__declspec(dllimport)
LONG
__stdcall
RegNotifyChangeKeyValue (
    HKEY hKey,
    BOOL bWatchSubtree,
    DWORD dwNotifyFilter,
    HANDLE hEvent,
    BOOL fAsynchronus
    );

__declspec(dllimport)
LONG
__stdcall
RegOpenKeyA (
    HKEY hKey,
    LPCSTR lpSubKey,
    PHKEY phkResult
    );
__declspec(dllimport)
LONG
__stdcall
RegOpenKeyW (
    HKEY hKey,
    LPCWSTR lpSubKey,
    PHKEY phkResult
    );






__declspec(dllimport)
LONG
__stdcall
RegOpenKeyExA (
    HKEY hKey,
    LPCSTR lpSubKey,
    DWORD ulOptions,
    REGSAM samDesired,
    PHKEY phkResult
    );
__declspec(dllimport)
LONG
__stdcall
RegOpenKeyExW (
    HKEY hKey,
    LPCWSTR lpSubKey,
    DWORD ulOptions,
    REGSAM samDesired,
    PHKEY phkResult
    );






__declspec(dllimport)
LONG
__stdcall
RegQueryInfoKeyA (
    HKEY hKey,
    LPSTR lpClass,
    LPDWORD lpcbClass,
    LPDWORD lpReserved,
    LPDWORD lpcSubKeys,
    LPDWORD lpcbMaxSubKeyLen,
    LPDWORD lpcbMaxClassLen,
    LPDWORD lpcValues,
    LPDWORD lpcbMaxValueNameLen,
    LPDWORD lpcbMaxValueLen,
    LPDWORD lpcbSecurityDescriptor,
    PFILETIME lpftLastWriteTime
    );
__declspec(dllimport)
LONG
__stdcall
RegQueryInfoKeyW (
    HKEY hKey,
    LPWSTR lpClass,
    LPDWORD lpcbClass,
    LPDWORD lpReserved,
    LPDWORD lpcSubKeys,
    LPDWORD lpcbMaxSubKeyLen,
    LPDWORD lpcbMaxClassLen,
    LPDWORD lpcValues,
    LPDWORD lpcbMaxValueNameLen,
    LPDWORD lpcbMaxValueLen,
    LPDWORD lpcbSecurityDescriptor,
    PFILETIME lpftLastWriteTime
    );






__declspec(dllimport)
LONG
__stdcall
RegQueryValueA (
    HKEY hKey,
    LPCSTR lpSubKey,
    LPSTR lpValue,
    PLONG   lpcbValue
    );
__declspec(dllimport)
LONG
__stdcall
RegQueryValueW (
    HKEY hKey,
    LPCWSTR lpSubKey,
    LPWSTR lpValue,
    PLONG   lpcbValue
    );







__declspec(dllimport)
LONG
__stdcall
RegQueryMultipleValuesA (
    HKEY hKey,
    PVALENTA val_list,
    DWORD num_vals,
    LPSTR lpValueBuf,
    LPDWORD ldwTotsize
    );
__declspec(dllimport)
LONG
__stdcall
RegQueryMultipleValuesW (
    HKEY hKey,
    PVALENTW val_list,
    DWORD num_vals,
    LPWSTR lpValueBuf,
    LPDWORD ldwTotsize
    );







__declspec(dllimport)
LONG
__stdcall
RegQueryValueExA (
    HKEY hKey,
    LPCSTR lpValueName,
    LPDWORD lpReserved,
    LPDWORD lpType,
    LPBYTE lpData,
    LPDWORD lpcbData
    );
__declspec(dllimport)
LONG
__stdcall
RegQueryValueExW (
    HKEY hKey,
    LPCWSTR lpValueName,
    LPDWORD lpReserved,
    LPDWORD lpType,
    LPBYTE lpData,
    LPDWORD lpcbData
    );






__declspec(dllimport)
LONG
__stdcall
RegReplaceKeyA (
    HKEY     hKey,
    LPCSTR  lpSubKey,
    LPCSTR  lpNewFile,
    LPCSTR  lpOldFile
    );
__declspec(dllimport)
LONG
__stdcall
RegReplaceKeyW (
    HKEY     hKey,
    LPCWSTR  lpSubKey,
    LPCWSTR  lpNewFile,
    LPCWSTR  lpOldFile
    );






__declspec(dllimport)
LONG
__stdcall
RegRestoreKeyA (
    HKEY hKey,
    LPCSTR lpFile,
    DWORD   dwFlags
    );
__declspec(dllimport)
LONG
__stdcall
RegRestoreKeyW (
    HKEY hKey,
    LPCWSTR lpFile,
    DWORD   dwFlags
    );






__declspec(dllimport)
LONG
__stdcall
RegSaveKeyA (
    HKEY hKey,
    LPCSTR lpFile,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
LONG
__stdcall
RegSaveKeyW (
    HKEY hKey,
    LPCWSTR lpFile,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );






__declspec(dllimport)
LONG
__stdcall
RegSetKeySecurity (
    HKEY hKey,
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor
    );

__declspec(dllimport)
LONG
__stdcall
RegSetValueA (
    HKEY hKey,
    LPCSTR lpSubKey,
    DWORD dwType,
    LPCSTR lpData,
    DWORD cbData
    );
__declspec(dllimport)
LONG
__stdcall
RegSetValueW (
    HKEY hKey,
    LPCWSTR lpSubKey,
    DWORD dwType,
    LPCWSTR lpData,
    DWORD cbData
    );







__declspec(dllimport)
LONG
__stdcall
RegSetValueExA (
    HKEY hKey,
    LPCSTR lpValueName,
    DWORD Reserved,
    DWORD dwType,
    const BYTE* lpData,
    DWORD cbData
    );
__declspec(dllimport)
LONG
__stdcall
RegSetValueExW (
    HKEY hKey,
    LPCWSTR lpValueName,
    DWORD Reserved,
    DWORD dwType,
    const BYTE* lpData,
    DWORD cbData
    );






__declspec(dllimport)
LONG
__stdcall
RegUnLoadKeyA (
    HKEY    hKey,
    LPCSTR lpSubKey
    );
__declspec(dllimport)
LONG
__stdcall
RegUnLoadKeyW (
    HKEY    hKey,
    LPCWSTR lpSubKey
    );










__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownA(
    LPSTR lpMachineName,
    LPSTR lpMessage,
    DWORD dwTimeout,
    BOOL bForceAppsClosed,
    BOOL bRebootAfterShutdown
    );
__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownW(
    LPWSTR lpMachineName,
    LPWSTR lpMessage,
    DWORD dwTimeout,
    BOOL bForceAppsClosed,
    BOOL bRebootAfterShutdown
    );







__declspec(dllimport)
BOOL
__stdcall
AbortSystemShutdownA(
    LPSTR lpMachineName
    );
__declspec(dllimport)
BOOL
__stdcall
AbortSystemShutdownW(
    LPWSTR lpMachineName
    );
























































































































typedef struct  _NETRESOURCEA {
    DWORD    dwScope;
    DWORD    dwType;
    DWORD    dwDisplayType;
    DWORD    dwUsage;
    LPSTR    lpLocalName;
    LPSTR    lpRemoteName;
    LPSTR    lpComment ;
    LPSTR    lpProvider;
}NETRESOURCEA, *LPNETRESOURCEA;
typedef struct  _NETRESOURCEW {
    DWORD    dwScope;
    DWORD    dwType;
    DWORD    dwDisplayType;
    DWORD    dwUsage;
    LPWSTR   lpLocalName;
    LPWSTR   lpRemoteName;
    LPWSTR   lpComment ;
    LPWSTR   lpProvider;
}NETRESOURCEW, *LPNETRESOURCEW;




typedef NETRESOURCEA NETRESOURCE;
typedef LPNETRESOURCEA LPNETRESOURCE;

























DWORD __stdcall
WNetAddConnectionA(
     LPCSTR   lpRemoteName,
     LPCSTR   lpPassword,
     LPCSTR   lpLocalName
    );
DWORD __stdcall
WNetAddConnectionW(
     LPCWSTR   lpRemoteName,
     LPCWSTR   lpPassword,
     LPCWSTR   lpLocalName
    );






DWORD __stdcall
WNetAddConnection2A(
     LPNETRESOURCEA lpNetResource,
     LPCSTR       lpPassword,
     LPCSTR       lpUserName,
     DWORD          dwFlags
    );
DWORD __stdcall
WNetAddConnection2W(
     LPNETRESOURCEW lpNetResource,
     LPCWSTR       lpPassword,
     LPCWSTR       lpUserName,
     DWORD          dwFlags
    );






DWORD __stdcall
WNetAddConnection3A(
     HWND           hwndOwner,
     LPNETRESOURCEA lpNetResource,
     LPCSTR       lpPassword,
     LPCSTR       lpUserName,
     DWORD          dwFlags
    );
DWORD __stdcall
WNetAddConnection3W(
     HWND           hwndOwner,
     LPNETRESOURCEW lpNetResource,
     LPCWSTR       lpPassword,
     LPCWSTR       lpUserName,
     DWORD          dwFlags
    );






DWORD __stdcall
WNetCancelConnectionA(
     LPCSTR lpName,
     BOOL     fForce
    );
DWORD __stdcall
WNetCancelConnectionW(
     LPCWSTR lpName,
     BOOL     fForce
    );






DWORD __stdcall
WNetCancelConnection2A(
     LPCSTR lpName,
     DWORD    dwFlags,
     BOOL     fForce
    );
DWORD __stdcall
WNetCancelConnection2W(
     LPCWSTR lpName,
     DWORD    dwFlags,
     BOOL     fForce
    );






DWORD __stdcall
WNetGetConnectionA(
     LPCSTR lpLocalName,
     LPSTR  lpRemoteName,
     LPDWORD  lpnLength
    );
DWORD __stdcall
WNetGetConnectionW(
     LPCWSTR lpLocalName,
     LPWSTR  lpRemoteName,
     LPDWORD  lpnLength
    );








DWORD __stdcall
WNetUseConnectionA(
    HWND            hwndOwner,
    LPNETRESOURCEA  lpNetResource,
    LPCSTR        lpUserID,
    LPCSTR        lpPassword,
    DWORD           dwFlags,
    LPSTR         lpAccessName,
    LPDWORD         lpBufferSize,
    LPDWORD         lpResult
    );
DWORD __stdcall
WNetUseConnectionW(
    HWND            hwndOwner,
    LPNETRESOURCEW  lpNetResource,
    LPCWSTR        lpUserID,
    LPCWSTR        lpPassword,
    DWORD           dwFlags,
    LPWSTR         lpAccessName,
    LPDWORD         lpBufferSize,
    LPDWORD         lpResult
    );






DWORD __stdcall
WNetSetConnectionA(
    LPCSTR    lpName,
    DWORD       dwProperties,
    LPVOID      pvValues
    );
DWORD __stdcall
WNetSetConnectionW(
    LPCWSTR    lpName,
    DWORD       dwProperties,
    LPVOID      pvValues
    );












DWORD __stdcall
WNetConnectionDialog(
    HWND  hwnd,
    DWORD dwType
    );

DWORD __stdcall
WNetDisconnectDialog(
    HWND  hwnd,
    DWORD dwType
    );


typedef struct _CONNECTDLGSTRUCTA{
    DWORD cbStructure;       
    HWND hwndOwner;          
    LPNETRESOURCEA lpConnRes;
    DWORD dwFlags;           
    DWORD dwDevNum;          
} CONNECTDLGSTRUCTA,  *LPCONNECTDLGSTRUCTA;
typedef struct _CONNECTDLGSTRUCTW{
    DWORD cbStructure;       
    HWND hwndOwner;          
    LPNETRESOURCEW lpConnRes;
    DWORD dwFlags;           
    DWORD dwDevNum;          
} CONNECTDLGSTRUCTW,  *LPCONNECTDLGSTRUCTW;




typedef CONNECTDLGSTRUCTA CONNECTDLGSTRUCT;
typedef LPCONNECTDLGSTRUCTA LPCONNECTDLGSTRUCT;















DWORD __stdcall
WNetConnectionDialog1A(
    LPCONNECTDLGSTRUCTA lpConnDlgStruct
    );
DWORD __stdcall
WNetConnectionDialog1W(
    LPCONNECTDLGSTRUCTW lpConnDlgStruct
    );






typedef struct _DISCDLGSTRUCTA{
    DWORD           cbStructure;      
    HWND            hwndOwner;        
    LPSTR           lpLocalName;      
    LPSTR           lpRemoteName;     
    DWORD           dwFlags;          
} DISCDLGSTRUCTA,  *LPDISCDLGSTRUCTA;
typedef struct _DISCDLGSTRUCTW{
    DWORD           cbStructure;      
    HWND            hwndOwner;        
    LPWSTR          lpLocalName;      
    LPWSTR          lpRemoteName;     
    DWORD           dwFlags;          
} DISCDLGSTRUCTW,  *LPDISCDLGSTRUCTW;




typedef DISCDLGSTRUCTA DISCDLGSTRUCT;
typedef LPDISCDLGSTRUCTA LPDISCDLGSTRUCT;





DWORD __stdcall
WNetDisconnectDialog1A(
    LPDISCDLGSTRUCTA lpConnDlgStruct
    );
DWORD __stdcall
WNetDisconnectDialog1W(
    LPDISCDLGSTRUCTW lpConnDlgStruct
    );












DWORD __stdcall
WNetOpenEnumA(
     DWORD          dwScope,
     DWORD          dwType,
     DWORD          dwUsage,
     LPNETRESOURCEA lpNetResource,
     LPHANDLE       lphEnum
    );
DWORD __stdcall
WNetOpenEnumW(
     DWORD          dwScope,
     DWORD          dwType,
     DWORD          dwUsage,
     LPNETRESOURCEW lpNetResource,
     LPHANDLE       lphEnum
    );






DWORD __stdcall
WNetEnumResourceA(
     HANDLE  hEnum,
     LPDWORD lpcCount,
     LPVOID  lpBuffer,
     LPDWORD lpBufferSize
    );
DWORD __stdcall
WNetEnumResourceW(
     HANDLE  hEnum,
     LPDWORD lpcCount,
     LPVOID  lpBuffer,
     LPDWORD lpBufferSize
    );






DWORD __stdcall
WNetCloseEnum(
    HANDLE   hEnum
    );










typedef struct  _UNIVERSAL_NAME_INFOA {
    LPSTR    lpUniversalName;
}UNIVERSAL_NAME_INFOA, *LPUNIVERSAL_NAME_INFOA;
typedef struct  _UNIVERSAL_NAME_INFOW {
    LPWSTR   lpUniversalName;
}UNIVERSAL_NAME_INFOW, *LPUNIVERSAL_NAME_INFOW;




typedef UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFO;
typedef LPUNIVERSAL_NAME_INFOA LPUNIVERSAL_NAME_INFO;


typedef struct  _REMOTE_NAME_INFOA {
    LPSTR    lpUniversalName;
    LPSTR    lpConnectionName;
    LPSTR    lpRemainingPath;
}REMOTE_NAME_INFOA, *LPREMOTE_NAME_INFOA;
typedef struct  _REMOTE_NAME_INFOW {
    LPWSTR   lpUniversalName;
    LPWSTR   lpConnectionName;
    LPWSTR   lpRemainingPath;
}REMOTE_NAME_INFOW, *LPREMOTE_NAME_INFOW;




typedef REMOTE_NAME_INFOA REMOTE_NAME_INFO;
typedef LPREMOTE_NAME_INFOA LPREMOTE_NAME_INFO;


DWORD __stdcall
WNetGetUniversalNameA(
     LPCSTR lpLocalPath,
     DWORD    dwInfoLevel,
     LPVOID   lpBuffer,
     LPDWORD  lpBufferSize
     );
DWORD __stdcall
WNetGetUniversalNameW(
     LPCWSTR lpLocalPath,
     DWORD    dwInfoLevel,
     LPVOID   lpBuffer,
     LPDWORD  lpBufferSize
     );










DWORD __stdcall
WNetGetUserA(
     LPCSTR  lpName,
     LPSTR   lpUserName,
     LPDWORD   lpnLength
    );
DWORD __stdcall
WNetGetUserW(
     LPCWSTR  lpName,
     LPWSTR   lpUserName,
     LPDWORD   lpnLength
    );






















DWORD __stdcall
WNetGetProviderNameA(
    DWORD   dwNetType,
    LPSTR lpProviderName,
    LPDWORD lpBufferSize
    );
DWORD __stdcall
WNetGetProviderNameW(
    DWORD   dwNetType,
    LPWSTR lpProviderName,
    LPDWORD lpBufferSize
    );






typedef struct _NETINFOSTRUCT{
    DWORD cbStructure;
    DWORD dwProviderVersion;
    DWORD dwStatus;
    DWORD dwCharacteristics;
    DWORD dwHandle;
    WORD  wNetType;
    DWORD dwPrinters;
    DWORD dwDrives;
} NETINFOSTRUCT,  *LPNETINFOSTRUCT;





DWORD __stdcall
WNetGetNetworkInformationA(
    LPCSTR          lpProvider,
    LPNETINFOSTRUCT   lpNetInfoStruct
    );
DWORD __stdcall
WNetGetNetworkInformationW(
    LPCWSTR          lpProvider,
    LPNETINFOSTRUCT   lpNetInfoStruct
    );










typedef UINT ( __stdcall *PFNGETPROFILEPATHA) (
    LPCSTR    pszUsername,
    LPSTR     pszBuffer,
    UINT        cbBuffer
    );
typedef UINT ( __stdcall *PFNGETPROFILEPATHW) (
    LPCWSTR    pszUsername,
    LPWSTR     pszBuffer,
    UINT        cbBuffer
    );






typedef UINT ( __stdcall *PFNRECONCILEPROFILEA) (
    LPCSTR    pszCentralFile,
    LPCSTR    pszLocalFile,
    DWORD       dwFlags
    );
typedef UINT ( __stdcall *PFNRECONCILEPROFILEW) (
    LPCWSTR    pszCentralFile,
    LPCWSTR    pszLocalFile,
    DWORD       dwFlags
    );














typedef BOOL ( __stdcall *PFNPROCESSPOLICIESA) (
    HWND        hwnd,
    LPCSTR    pszPath,
    LPCSTR    pszUsername,
    LPCSTR    pszComputerName,
    DWORD       dwFlags
    );
typedef BOOL ( __stdcall *PFNPROCESSPOLICIESW) (
    HWND        hwnd,
    LPCWSTR    pszPath,
    LPCWSTR    pszUsername,
    LPCWSTR    pszComputerName,
    DWORD       dwFlags
    );














DWORD __stdcall
WNetGetLastErrorA(
     LPDWORD    lpError,
     LPSTR    lpErrorBuf,
     DWORD      nErrorBufSize,
     LPSTR    lpNameBuf,
     DWORD      nNameBufSize
    );
DWORD __stdcall
WNetGetLastErrorW(
     LPDWORD    lpError,
     LPWSTR    lpErrorBuf,
     DWORD      nErrorBufSize,
     LPWSTR    lpNameBuf,
     DWORD      nNameBufSize
    );








































































typedef struct _NETCONNECTINFOSTRUCT{
    DWORD cbStructure;
    DWORD dwFlags;
    DWORD dwSpeed;
    DWORD dwDelay;
    DWORD dwOptDataSize;
} NETCONNECTINFOSTRUCT,  *LPNETCONNECTINFOSTRUCT;






DWORD __stdcall
MultinetGetConnectionPerformanceA(
        LPNETRESOURCEA lpNetResource,
        LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
        );
DWORD __stdcall
MultinetGetConnectionPerformanceW(
        LPNETRESOURCEW lpNetResource,
        LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
        );



















































































































































































































typedef HANDLE      SC_HANDLE;
typedef SC_HANDLE   *LPSC_HANDLE;

typedef DWORD       SERVICE_STATUS_HANDLE;





typedef struct _SERVICE_STATUS {
    DWORD   dwServiceType;
    DWORD   dwCurrentState;
    DWORD   dwControlsAccepted;
    DWORD   dwWin32ExitCode;
    DWORD   dwServiceSpecificExitCode;
    DWORD   dwCheckPoint;
    DWORD   dwWaitHint;
} SERVICE_STATUS, *LPSERVICE_STATUS;







typedef struct _ENUM_SERVICE_STATUSA {
    LPSTR          lpServiceName;
    LPSTR          lpDisplayName;
    SERVICE_STATUS ServiceStatus;
} ENUM_SERVICE_STATUSA, *LPENUM_SERVICE_STATUSA;
typedef struct _ENUM_SERVICE_STATUSW {
    LPWSTR         lpServiceName;
    LPWSTR         lpDisplayName;
    SERVICE_STATUS ServiceStatus;
} ENUM_SERVICE_STATUSW, *LPENUM_SERVICE_STATUSW;




typedef ENUM_SERVICE_STATUSA ENUM_SERVICE_STATUS;
typedef LPENUM_SERVICE_STATUSA LPENUM_SERVICE_STATUS;







typedef LPVOID  SC_LOCK;

typedef struct _QUERY_SERVICE_LOCK_STATUSA {
    DWORD   fIsLocked;
    LPSTR   lpLockOwner;
    DWORD   dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSA, *LPQUERY_SERVICE_LOCK_STATUSA;
typedef struct _QUERY_SERVICE_LOCK_STATUSW {
    DWORD   fIsLocked;
    LPWSTR  lpLockOwner;
    DWORD   dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSW, *LPQUERY_SERVICE_LOCK_STATUSW;




typedef QUERY_SERVICE_LOCK_STATUSA QUERY_SERVICE_LOCK_STATUS;
typedef LPQUERY_SERVICE_LOCK_STATUSA LPQUERY_SERVICE_LOCK_STATUS;








typedef struct _QUERY_SERVICE_CONFIGA {
    DWORD   dwServiceType;
    DWORD   dwStartType;
    DWORD   dwErrorControl;
    LPSTR   lpBinaryPathName;
    LPSTR   lpLoadOrderGroup;
    DWORD   dwTagId;
    LPSTR   lpDependencies;
    LPSTR   lpServiceStartName;
    LPSTR   lpDisplayName;
} QUERY_SERVICE_CONFIGA, *LPQUERY_SERVICE_CONFIGA;
typedef struct _QUERY_SERVICE_CONFIGW {
    DWORD   dwServiceType;
    DWORD   dwStartType;
    DWORD   dwErrorControl;
    LPWSTR  lpBinaryPathName;
    LPWSTR  lpLoadOrderGroup;
    DWORD   dwTagId;
    LPWSTR  lpDependencies;
    LPWSTR  lpServiceStartName;
    LPWSTR  lpDisplayName;
} QUERY_SERVICE_CONFIGW, *LPQUERY_SERVICE_CONFIGW;




typedef QUERY_SERVICE_CONFIGA QUERY_SERVICE_CONFIG;
typedef LPQUERY_SERVICE_CONFIGA LPQUERY_SERVICE_CONFIG;








typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONW)(
    DWORD   dwNumServicesArgs,
    LPWSTR  *lpServiceArgVectors
    );

typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONA)(
    DWORD   dwNumServicesArgs,
    LPSTR   *lpServiceArgVectors
    );












typedef struct _SERVICE_TABLE_ENTRYA {
    LPSTR                       lpServiceName;
    LPSERVICE_MAIN_FUNCTIONA    lpServiceProc;
}SERVICE_TABLE_ENTRYA, *LPSERVICE_TABLE_ENTRYA;
typedef struct _SERVICE_TABLE_ENTRYW {
    LPWSTR                      lpServiceName;
    LPSERVICE_MAIN_FUNCTIONW    lpServiceProc;
}SERVICE_TABLE_ENTRYW, *LPSERVICE_TABLE_ENTRYW;




typedef SERVICE_TABLE_ENTRYA SERVICE_TABLE_ENTRY;
typedef LPSERVICE_TABLE_ENTRYA LPSERVICE_TABLE_ENTRY;






typedef void (__stdcall *LPHANDLER_FUNCTION)(
    DWORD    dwControl
    );







__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfigA(
    SC_HANDLE    hService,
    DWORD        dwServiceType,
    DWORD        dwStartType,
    DWORD        dwErrorControl,
    LPCSTR     lpBinaryPathName,
    LPCSTR     lpLoadOrderGroup,
    LPDWORD      lpdwTagId,
    LPCSTR     lpDependencies,
    LPCSTR     lpServiceStartName,
    LPCSTR     lpPassword,
    LPCSTR     lpDisplayName
    );
__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfigW(
    SC_HANDLE    hService,
    DWORD        dwServiceType,
    DWORD        dwStartType,
    DWORD        dwErrorControl,
    LPCWSTR     lpBinaryPathName,
    LPCWSTR     lpLoadOrderGroup,
    LPDWORD      lpdwTagId,
    LPCWSTR     lpDependencies,
    LPCWSTR     lpServiceStartName,
    LPCWSTR     lpPassword,
    LPCWSTR     lpDisplayName
    );






__declspec(dllimport)
BOOL
__stdcall
CloseServiceHandle(
    SC_HANDLE   hSCObject
    );

__declspec(dllimport)
BOOL
__stdcall
ControlService(
    SC_HANDLE           hService,
    DWORD               dwControl,
    LPSERVICE_STATUS    lpServiceStatus
    );

__declspec(dllimport)
SC_HANDLE
__stdcall
CreateServiceA(
    SC_HANDLE    hSCManager,
    LPCSTR     lpServiceName,
    LPCSTR     lpDisplayName,
    DWORD        dwDesiredAccess,
    DWORD        dwServiceType,
    DWORD        dwStartType,
    DWORD        dwErrorControl,
    LPCSTR     lpBinaryPathName,
    LPCSTR     lpLoadOrderGroup,
    LPDWORD      lpdwTagId,
    LPCSTR     lpDependencies,
    LPCSTR     lpServiceStartName,
    LPCSTR     lpPassword
    );
__declspec(dllimport)
SC_HANDLE
__stdcall
CreateServiceW(
    SC_HANDLE    hSCManager,
    LPCWSTR     lpServiceName,
    LPCWSTR     lpDisplayName,
    DWORD        dwDesiredAccess,
    DWORD        dwServiceType,
    DWORD        dwStartType,
    DWORD        dwErrorControl,
    LPCWSTR     lpBinaryPathName,
    LPCWSTR     lpLoadOrderGroup,
    LPDWORD      lpdwTagId,
    LPCWSTR     lpDependencies,
    LPCWSTR     lpServiceStartName,
    LPCWSTR     lpPassword
    );






__declspec(dllimport)
BOOL
__stdcall
DeleteService(
    SC_HANDLE   hService
    );

__declspec(dllimport)
BOOL
__stdcall
EnumDependentServicesA(
    SC_HANDLE               hService,
    DWORD                   dwServiceState,
    LPENUM_SERVICE_STATUSA  lpServices,
    DWORD                   cbBufSize,
    LPDWORD                 pcbBytesNeeded,
    LPDWORD                 lpServicesReturned
    );
__declspec(dllimport)
BOOL
__stdcall
EnumDependentServicesW(
    SC_HANDLE               hService,
    DWORD                   dwServiceState,
    LPENUM_SERVICE_STATUSW  lpServices,
    DWORD                   cbBufSize,
    LPDWORD                 pcbBytesNeeded,
    LPDWORD                 lpServicesReturned
    );






__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusA(
    SC_HANDLE               hSCManager,
    DWORD                   dwServiceType,
    DWORD                   dwServiceState,
    LPENUM_SERVICE_STATUSA  lpServices,
    DWORD                   cbBufSize,
    LPDWORD                 pcbBytesNeeded,
    LPDWORD                 lpServicesReturned,
    LPDWORD                 lpResumeHandle
    );
__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusW(
    SC_HANDLE               hSCManager,
    DWORD                   dwServiceType,
    DWORD                   dwServiceState,
    LPENUM_SERVICE_STATUSW  lpServices,
    DWORD                   cbBufSize,
    LPDWORD                 pcbBytesNeeded,
    LPDWORD                 lpServicesReturned,
    LPDWORD                 lpResumeHandle
    );






__declspec(dllimport)
BOOL
__stdcall
GetServiceKeyNameA(
    SC_HANDLE               hSCManager,
    LPCSTR                lpDisplayName,
    LPSTR                 lpServiceName,
    LPDWORD                 lpcchBuffer
    );
__declspec(dllimport)
BOOL
__stdcall
GetServiceKeyNameW(
    SC_HANDLE               hSCManager,
    LPCWSTR                lpDisplayName,
    LPWSTR                 lpServiceName,
    LPDWORD                 lpcchBuffer
    );






__declspec(dllimport)
BOOL
__stdcall
GetServiceDisplayNameA(
    SC_HANDLE               hSCManager,
    LPCSTR                lpServiceName,
    LPSTR                 lpDisplayName,
    LPDWORD                 lpcchBuffer
    );
__declspec(dllimport)
BOOL
__stdcall
GetServiceDisplayNameW(
    SC_HANDLE               hSCManager,
    LPCWSTR                lpServiceName,
    LPWSTR                 lpDisplayName,
    LPDWORD                 lpcchBuffer
    );






__declspec(dllimport)
SC_LOCK
__stdcall
LockServiceDatabase(
    SC_HANDLE   hSCManager
    );

__declspec(dllimport)
BOOL
__stdcall
NotifyBootConfigStatus(
    BOOL     BootAcceptable
    );

__declspec(dllimport)
SC_HANDLE
__stdcall
OpenSCManagerA(
    LPCSTR lpMachineName,
    LPCSTR lpDatabaseName,
    DWORD   dwDesiredAccess
    );
__declspec(dllimport)
SC_HANDLE
__stdcall
OpenSCManagerW(
    LPCWSTR lpMachineName,
    LPCWSTR lpDatabaseName,
    DWORD   dwDesiredAccess
    );






__declspec(dllimport)
SC_HANDLE
__stdcall
OpenServiceA(
    SC_HANDLE   hSCManager,
    LPCSTR    lpServiceName,
    DWORD       dwDesiredAccess
    );
__declspec(dllimport)
SC_HANDLE
__stdcall
OpenServiceW(
    SC_HANDLE   hSCManager,
    LPCWSTR    lpServiceName,
    DWORD       dwDesiredAccess
    );






__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfigA(
    SC_HANDLE               hService,
    LPQUERY_SERVICE_CONFIGA lpServiceConfig,
    DWORD                   cbBufSize,
    LPDWORD                 pcbBytesNeeded
    );
__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfigW(
    SC_HANDLE               hService,
    LPQUERY_SERVICE_CONFIGW lpServiceConfig,
    DWORD                   cbBufSize,
    LPDWORD                 pcbBytesNeeded
    );






__declspec(dllimport)
BOOL
__stdcall
QueryServiceLockStatusA(
    SC_HANDLE                       hSCManager,
    LPQUERY_SERVICE_LOCK_STATUSA    lpLockStatus,
    DWORD                           cbBufSize,
    LPDWORD                         pcbBytesNeeded
    );
__declspec(dllimport)
BOOL
__stdcall
QueryServiceLockStatusW(
    SC_HANDLE                       hSCManager,
    LPQUERY_SERVICE_LOCK_STATUSW    lpLockStatus,
    DWORD                           cbBufSize,
    LPDWORD                         pcbBytesNeeded
    );






__declspec(dllimport)
BOOL
__stdcall
QueryServiceObjectSecurity(
    SC_HANDLE               hService,
    SECURITY_INFORMATION    dwSecurityInformation,
    PSECURITY_DESCRIPTOR    lpSecurityDescriptor,
    DWORD                   cbBufSize,
    LPDWORD                 pcbBytesNeeded
    );

__declspec(dllimport)
BOOL
__stdcall
QueryServiceStatus(
    SC_HANDLE           hService,
    LPSERVICE_STATUS    lpServiceStatus
    );

__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerA(
    LPCSTR             lpServiceName,
    LPHANDLER_FUNCTION   lpHandlerProc
    );
__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerW(
    LPCWSTR             lpServiceName,
    LPHANDLER_FUNCTION   lpHandlerProc
    );






__declspec(dllimport)
BOOL
__stdcall
SetServiceObjectSecurity(
    SC_HANDLE               hService,
    SECURITY_INFORMATION    dwSecurityInformation,
    PSECURITY_DESCRIPTOR    lpSecurityDescriptor
    );

__declspec(dllimport)
BOOL
__stdcall
SetServiceStatus(
    SERVICE_STATUS_HANDLE   hServiceStatus,
    LPSERVICE_STATUS        lpServiceStatus
    );

__declspec(dllimport)
BOOL
__stdcall
StartServiceCtrlDispatcherA(
    LPSERVICE_TABLE_ENTRYA    lpServiceStartTable
    );
__declspec(dllimport)
BOOL
__stdcall
StartServiceCtrlDispatcherW(
    LPSERVICE_TABLE_ENTRYW    lpServiceStartTable
    );







__declspec(dllimport)
BOOL
__stdcall
StartServiceA(
    SC_HANDLE            hService,
    DWORD                dwNumServiceArgs,
    LPCSTR             *lpServiceArgVectors
    );
__declspec(dllimport)
BOOL
__stdcall
StartServiceW(
    SC_HANDLE            hService,
    DWORD                dwNumServiceArgs,
    LPCWSTR             *lpServiceArgVectors
    );






__declspec(dllimport)
BOOL
__stdcall
UnlockServiceDatabase(
    SC_LOCK     ScLock
    );
























typedef struct _MODEMDEVCAPS {
    DWORD   dwActualSize;
    DWORD   dwRequiredSize;
    DWORD   dwDevSpecificOffset;
    DWORD   dwDevSpecificSize;

    
    DWORD   dwModemProviderVersion;
    DWORD   dwModemManufacturerOffset;
    DWORD   dwModemManufacturerSize;
    DWORD   dwModemModelOffset;
    DWORD   dwModemModelSize;
    DWORD   dwModemVersionOffset;
    DWORD   dwModemVersionSize;

    
    DWORD   dwDialOptions;          
    DWORD   dwCallSetupFailTimer;   
    DWORD   dwInactivityTimeout;    
    DWORD   dwSpeakerVolume;        
    DWORD   dwSpeakerMode;          
    DWORD   dwModemOptions;         
    DWORD   dwMaxDTERate;           
    DWORD   dwMaxDCERate;           

    
    BYTE    abVariablePortion [1];
} MODEMDEVCAPS, *PMODEMDEVCAPS, *LPMODEMDEVCAPS;

typedef struct _MODEMSETTINGS {
    DWORD   dwActualSize;
    DWORD   dwRequiredSize;
    DWORD   dwDevSpecificOffset;
    DWORD   dwDevSpecificSize;

    
    DWORD   dwCallSetupFailTimer;       
    DWORD   dwInactivityTimeout;        
    DWORD   dwSpeakerVolume;            
    DWORD   dwSpeakerMode;              
    DWORD   dwPreferredModemOptions;    

    
    DWORD   dwNegotiatedModemOptions;   
    DWORD   dwNegotiatedDCERate;        

    
    BYTE    abVariablePortion [1];
} MODEMSETTINGS, *PMODEMSETTINGS, *LPMODEMSETTINGS;





























































typedef DWORD     HIMC;
typedef DWORD     HIMCC;

typedef HKL   *LPHKL;
typedef UINT  *LPUINT;


typedef struct tagCOMPOSITIONFORM {
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT  rcArea;
} COMPOSITIONFORM, *PCOMPOSITIONFORM,  *NPCOMPOSITIONFORM,  *LPCOMPOSITIONFORM;


typedef struct tagCANDIDATEFORM {
    DWORD dwIndex;
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT  rcArea;
} CANDIDATEFORM, *PCANDIDATEFORM,  *NPCANDIDATEFORM,  *LPCANDIDATEFORM;


typedef struct tagCANDIDATELIST {
    DWORD dwSize;
    DWORD dwStyle;
    DWORD dwCount;
    DWORD dwSelection;
    DWORD dwPageStart;
    DWORD dwPageSize;
    DWORD dwOffset[1];
} CANDIDATELIST, *PCANDIDATELIST,  *NPCANDIDATELIST,  *LPCANDIDATELIST;

typedef struct tagREGISTERWORDA {
    LPSTR   lpReading;
    LPSTR   lpWord;
} REGISTERWORDA, *PREGISTERWORDA,  *NPREGISTERWORDA,  *LPREGISTERWORDA;
typedef struct tagREGISTERWORDW {
    LPWSTR  lpReading;
    LPWSTR  lpWord;
} REGISTERWORDW, *PREGISTERWORDW,  *NPREGISTERWORDW,  *LPREGISTERWORDW;






typedef REGISTERWORDA REGISTERWORD;
typedef PREGISTERWORDA PREGISTERWORD;
typedef NPREGISTERWORDA NPREGISTERWORD;
typedef LPREGISTERWORDA LPREGISTERWORD;






typedef struct tagSTYLEBUFA {
    DWORD       dwStyle;
    CHAR        szDescription[32];
} STYLEBUFA, *PSTYLEBUFA,  *NPSTYLEBUFA,  *LPSTYLEBUFA;
typedef struct tagSTYLEBUFW {
    DWORD       dwStyle;
    WCHAR       szDescription[32];
} STYLEBUFW, *PSTYLEBUFW,  *NPSTYLEBUFW,  *LPSTYLEBUFW;






typedef STYLEBUFA STYLEBUF;
typedef PSTYLEBUFA PSTYLEBUF;
typedef NPSTYLEBUFA NPSTYLEBUF;
typedef LPSTYLEBUFA LPSTYLEBUF;





HKL  __stdcall ImmInstallIMEA(LPCSTR lpszIMEFileName, LPCSTR lpszLayoutText);
HKL  __stdcall ImmInstallIMEW(LPCWSTR lpszIMEFileName, LPCWSTR lpszLayoutText);






HWND __stdcall ImmGetDefaultIMEWnd(HWND);

UINT __stdcall ImmGetDescriptionA(HKL, LPSTR, UINT uBufLen);
UINT __stdcall ImmGetDescriptionW(HKL, LPWSTR, UINT uBufLen);






UINT __stdcall ImmGetIMEFileNameA(HKL, LPSTR, UINT uBufLen);
UINT __stdcall ImmGetIMEFileNameW(HKL, LPWSTR, UINT uBufLen);






DWORD __stdcall ImmGetProperty(HKL, DWORD);


BOOL __stdcall ImmIsIME(HKL);

BOOL __stdcall ImmSimulateHotKey(HWND, DWORD);

HIMC __stdcall ImmCreateContext(void);
BOOL __stdcall ImmDestroyContext(HIMC);
HIMC __stdcall ImmGetContext(HWND);
BOOL __stdcall ImmReleaseContext(HWND, HIMC);
HIMC __stdcall ImmAssociateContext(HWND, HIMC);

LONG  __stdcall ImmGetCompositionStringA(HIMC, DWORD, LPVOID, DWORD);
LONG  __stdcall ImmGetCompositionStringW(HIMC, DWORD, LPVOID, DWORD);






BOOL  __stdcall ImmSetCompositionStringA(HIMC, DWORD dwIndex, LPCVOID lpComp, DWORD, LPCVOID lpRead, DWORD);
BOOL  __stdcall ImmSetCompositionStringW(HIMC, DWORD dwIndex, LPCVOID lpComp, DWORD, LPCVOID lpRead, DWORD);






DWORD __stdcall ImmGetCandidateListCountA(HIMC, LPDWORD lpdwListCount);
DWORD __stdcall ImmGetCandidateListCountW(HIMC, LPDWORD lpdwListCount);






DWORD __stdcall ImmGetCandidateListA(HIMC, DWORD deIndex, LPCANDIDATELIST, DWORD dwBufLen);
DWORD __stdcall ImmGetCandidateListW(HIMC, DWORD deIndex, LPCANDIDATELIST, DWORD dwBufLen);






DWORD __stdcall ImmGetGuideLineA(HIMC, DWORD dwIndex, LPSTR, DWORD dwBufLen);
DWORD __stdcall ImmGetGuideLineW(HIMC, DWORD dwIndex, LPWSTR, DWORD dwBufLen);






BOOL __stdcall ImmGetConversionStatus(HIMC, LPDWORD, LPDWORD);
BOOL __stdcall ImmSetConversionStatus(HIMC, DWORD, DWORD);
BOOL __stdcall ImmGetOpenStatus(HIMC);
BOOL __stdcall ImmSetOpenStatus(HIMC, BOOL);



BOOL __stdcall ImmGetCompositionFontA(HIMC, LPLOGFONTA);
BOOL __stdcall ImmGetCompositionFontW(HIMC, LPLOGFONTW);






BOOL __stdcall ImmSetCompositionFontA(HIMC, LPLOGFONTA);
BOOL __stdcall ImmSetCompositionFontW(HIMC, LPLOGFONTW);








BOOL    __stdcall ImmConfigureIMEA(HKL, HWND, DWORD, LPVOID);
BOOL    __stdcall ImmConfigureIMEW(HKL, HWND, DWORD, LPVOID);






LRESULT __stdcall ImmEscapeA(HKL, HIMC, UINT, LPVOID);
LRESULT __stdcall ImmEscapeW(HKL, HIMC, UINT, LPVOID);






DWORD   __stdcall ImmGetConversionListA(HKL, HIMC, LPCSTR, LPCANDIDATELIST, DWORD dwBufLen, UINT uFlag);
DWORD   __stdcall ImmGetConversionListW(HKL, HIMC, LPCWSTR, LPCANDIDATELIST, DWORD dwBufLen, UINT uFlag);






BOOL    __stdcall ImmNotifyIME(HIMC, DWORD dwAction, DWORD dwIndex, DWORD dwValue);


BOOL __stdcall ImmGetStatusWindowPos(HIMC, LPPOINT);
BOOL __stdcall ImmSetStatusWindowPos(HIMC, LPPOINT);
BOOL __stdcall ImmGetCompositionWindow(HIMC, LPCOMPOSITIONFORM);
BOOL __stdcall ImmSetCompositionWindow(HIMC, LPCOMPOSITIONFORM);
BOOL __stdcall ImmGetCandidateWindow(HIMC, DWORD, LPCANDIDATEFORM);
BOOL __stdcall ImmSetCandidateWindow(HIMC, LPCANDIDATEFORM);

BOOL __stdcall ImmIsUIMessageA(HWND, UINT, WPARAM, LPARAM);
BOOL __stdcall ImmIsUIMessageW(HWND, UINT, WPARAM, LPARAM);






UINT __stdcall ImmGetVirtualKey(HWND);

typedef int (__stdcall *REGISTERWORDENUMPROCA)(LPCSTR, DWORD, LPCSTR, LPVOID);
typedef int (__stdcall *REGISTERWORDENUMPROCW)(LPCWSTR, DWORD, LPCWSTR, LPVOID);






BOOL __stdcall ImmRegisterWordA(HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister);
BOOL __stdcall ImmRegisterWordW(HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister);






BOOL __stdcall ImmUnregisterWordA(HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszUnregister);
BOOL __stdcall ImmUnregisterWordW(HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszUnregister);






UINT __stdcall ImmGetRegisterWordStyleA(HKL, UINT nItem, LPSTYLEBUFA);
UINT __stdcall ImmGetRegisterWordStyleW(HKL, UINT nItem, LPSTYLEBUFW);






UINT __stdcall ImmEnumRegisterWordA(HKL, REGISTERWORDENUMPROCA, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister, LPVOID);
UINT __stdcall ImmEnumRegisterWordW(HKL, REGISTERWORDENUMPROCW, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister, LPVOID);































































































































































































































































































































#pragma warning(default:4001)















PVOID GetEProcessData_X86(
    PEPROCESS pEProcess,
    UINT iData,
    PVOID pBuffer);

PVOID GetEProcessData_MIPS(
    PEPROCESS pEProcess,
    UINT iData,
    PVOID pBuffer);

PVOID GetEProcessData_ALPHA(
    PEPROCESS pEProcess,
    UINT iData,
    PVOID pBuffer);

PVOID GetEProcessData_PPC(
    PEPROCESS pEProcess,
    UINT iData,
    PVOID pBuffer);

typedef PVOID (*PGETEPROCESSDATAFUNC)(PEPROCESS, UINT, PVOID);



#pragma hdrstop


























































































































































































































































#pragma once














































































__declspec(dllimport) extern int * __cdecl _errno(void);









typedef int ptrdiff_t;









































































HANDLE __stdcall SetObjectOwner(HGDIOBJ, HANDLE);


































enum DCTYPE {
    DCTYPE_DIRECT,
    DCTYPE_MEMORY,
    DCTYPE_INFO};




typedef struct _EXTTEXTMETRIC {
    SHORT  etmSize;
    SHORT  etmPointSize;
    SHORT  etmOrientation;
    SHORT  etmMasterHeight;
    SHORT  etmMinScale;
    SHORT  etmMaxScale;
    SHORT  etmMasterUnits;
    SHORT  etmCapHeight;
    SHORT  etmXHeight;
    SHORT  etmLowerCaseAscent;
    SHORT  etmLowerCaseDescent;
    SHORT  etmSlant;
    SHORT  etmSuperScript;
    SHORT  etmSubScript;
    SHORT  etmSuperScriptSize;
    SHORT  etmSubScriptSize;
    SHORT  etmUnderlineOffset;
    SHORT  etmUnderlineWidth;
    SHORT  etmDoubleUpperUnderlineOffset;
    SHORT  etmDoubleLowerUnderlineOffset;
    SHORT  etmDoubleUpperUnderlineWidth;
    SHORT  etmDoubleLowerUnderlineWidth;
    SHORT  etmStrikeOutOffset;
    SHORT  etmStrikeOutWidth;
    WORD   etmNKernPairs;
    WORD   etmNKernTracks;
} EXTTEXTMETRIC;



#pragma pack(1)
typedef struct _KERNPAIR
{
    WORD  wBoth;
    SHORT sAmount;
} KERNPAIR, *LPKERNPAIR;
#pragma pack()

BOOL
GetETM(
    HDC hdc,
    EXTTEXTMETRIC *petm);


HFONT
__stdcall
GetHFONT(
    HDC);

HANDLE         GdiCreateLocalMetaFilePict(HANDLE hRemote);
HENHMETAFILE   GdiCreateLocalEnhMetaFile(HANDLE hRemote);
HANDLE         GdiConvertMetaFilePict(HANDLE hmfp);
HANDLE         GdiConvertEnhMetaFile(HENHMETAFILE hmf);
HDC            GdiConvertAndCheckDC(HDC hdc);
HBRUSH         GdiConvertBrush(HBRUSH hbrush);
HDC            GdiConvertDC(HDC hdc);
HRGN           GdiConvertRegion(HRGN hrgn);
BOOL           GdiValidateHandle(HANDLE hObj);
HANDLE         GdiFixUpHandle(HANDLE h);
int            GdiGetCharDimensions(HDC hdc,TEXTMETRICW *lptm,LPINT lpcy);
DWORD          GdiGetCodePage(HDC hdc);


int  __stdcall GdiDescribePixelFormat(HDC, int, UINT, LPPIXELFORMATDESCRIPTOR);
BOOL __stdcall GdiSetPixelFormat(HDC, int);
BOOL __stdcall GdiSwapBuffers(HDC);


BOOL __stdcall GdiAddGlsRecord(HDC hdc, DWORD cb, BYTE *pb, LPRECTL prclBounds);
BOOL __stdcall GdiAddGlsBounds(HDC hdc, LPRECTL prclBounds);
BOOL __stdcall GdiIsMetaPrintDC(HDC hdc);


BOOL __stdcall GlmfInitPlayback(HDC hdc, ENHMETAHEADER *pemh,
                               LPRECTL prclDest);
BOOL __stdcall GlmfBeginGlsBlock(HDC hdc);
BOOL __stdcall GlmfPlayGlsRecord(HDC hdc, DWORD cb, BYTE *pb,
                                LPRECTL prclBounds);
BOOL __stdcall GlmfEndGlsBlock(HDC hdc);
BOOL __stdcall GlmfEndPlayback(HDC hdc);
BOOL __stdcall GlmfCloseMetaFile(HDC hdc);

BOOL  __stdcall GdiPlayJournal(HDC,LPWSTR,DWORD,DWORD,int);

typedef int (__stdcall* EMFPLAYPROC)( HDC, INT, HANDLE );


BOOL __stdcall GdiPlayEMF
(
LPWSTR     pwszPrinterName,
LPDEVMODEW pDevmode,
LPWSTR     pwszDocName,
EMFPLAYPROC pfnPageQueryFn,
HANDLE     hPageQuery
);


ULONG cGetTTFFromFOT(WCHAR *,ULONG,WCHAR *,FLONG *,FLONG *, DWORD *);
BOOL bMakePathNameW (WCHAR *, WCHAR *, WCHAR **, FLONG *);
BOOL bInitSystemAndFontsDirectoriesW(WCHAR **, WCHAR **);
















ULONG
__stdcall SetFontEnumeration (
    ULONG   ulType);





















BOOL
__stdcall
GetFontResourceInfoW(
    LPWSTR  lpPathname,
    LPDWORD lpBytes,
    LPVOID  lpBuffer,
    DWORD   iType);


typedef struct  _CHWIDTHINFO
{
    LONG    lMaxNegA;
    LONG    lMaxNegC;
    LONG    lMinWidthD;
} CHWIDTHINFO,  *PCHWIDTHINFO;

BOOL
__stdcall
GetCharWidthInfo(
    HDC            hdc,
    PCHWIDTHINFO   pChWidthInfo
);



















typedef struct _TMDIFF
{
    ULONG       cjotma;     
    FLONG       fl;         

    BYTE        chFirst;
    BYTE        chLast;
    BYTE        chDefault;
    BYTE        chBreak;
} TMDIFF; 



typedef struct _TMW_INTERNAL
{
    TEXTMETRICW tmw;
    TMDIFF      tmd;
} TMW_INTERNAL;




typedef struct _NTMW_INTERNAL
{
    NEWTEXTMETRICEXW ntmw;
    TMDIFF           tmd;
} NTMW_INTERNAL;











int GdiAddFontResourceW( LPWSTR, DWORD );














































LPDEVMODEW
__stdcall
GdiConvertToDevmodeW(
    LPDEVMODEA pdma
    );






typedef struct _POLYPATBLT
{
    int     x;
    int     y;
    int     cx;
    int     cy;
    union {
        HBRUSH   hbr;
        COLORREF clr;
    } BrClr;
} POLYPATBLT,*PPOLYPATBLT;




__declspec(dllimport)
BOOL
__stdcall
PolyPatBlt(
    HDC,
    DWORD,
    PPOLYPATBLT,
    DWORD,
    DWORD
    );




typedef struct _UNIVERSAL_FONT_ID {
    ULONG   CheckSum;
    ULONG   Index;
} UNIVERSAL_FONT_ID, *PUNIVERSAL_FONT_ID;

__declspec(dllimport)
INT
__stdcall
GdiQueryFonts(
    PUNIVERSAL_FONT_ID,
    ULONG,
    PLARGE_INTEGER
    );


__declspec(dllimport)
BOOL
__stdcall
GdiConsoleTextOut(
    HDC hdc,
    POLYTEXTW *lpto,
    UINT nStrings,
    RECTL *prclBounds
    );
































struct HCONVLIST__ { int unused; }; typedef struct HCONVLIST__ *HCONVLIST;
struct HCONV__ { int unused; }; typedef struct HCONV__ *HCONV;
struct HSZ__ { int unused; }; typedef struct HSZ__ *HSZ;
struct HDDEDATA__ { int unused; }; typedef struct HDDEDATA__ *HDDEDATA;




typedef struct tagHSZPAIR {
    HSZ hszSvc;
    HSZ hszTopic;
} HSZPAIR;
typedef HSZPAIR  *PHSZPAIR;




typedef struct tagCONVCONTEXT {
    UINT        cb;             
    UINT        wFlags;         
    UINT        wCountryID;     
    int         iCodePage;      
    DWORD       dwLangID;       
    DWORD       dwSecurity;     
    SECURITY_QUALITY_OF_SERVICE qos;  
} CONVCONTEXT;
typedef CONVCONTEXT  *PCONVCONTEXT;




typedef struct tagCONVINFO {
    DWORD   cb;            
    DWORD   hUser;         
    HCONV   hConvPartner;  
    HSZ     hszSvcPartner; 
    HSZ     hszServiceReq; 
    HSZ     hszTopic;      
    HSZ     hszItem;       
    UINT    wFmt;          
    UINT    wType;         
    UINT    wStatus;       
    UINT    wConvst;       
    UINT    wLastError;    
    HCONVLIST hConvList;   
    CONVCONTEXT ConvCtxt;  
    HWND    hwnd;          
    HWND    hwndPartner;   
} CONVINFO;
typedef CONVINFO  *PCONVINFO;



































































































































typedef HDDEDATA __stdcall FNCALLBACK(UINT wType, UINT wFmt, HCONV hConv,
        HSZ hsz1, HSZ hsz2, HDDEDATA hData, DWORD dwData1, DWORD dwData2);
typedef HDDEDATA (__stdcall *PFNCALLBACK)(UINT wType, UINT wFmt, HCONV hConv,
        HSZ hsz1, HSZ hsz2, HDDEDATA hData, DWORD dwData1, DWORD dwData2);





UINT __stdcall DdeInitializeA(LPDWORD pidInst, PFNCALLBACK pfnCallback,
        DWORD afCmd, DWORD ulRes);
UINT __stdcall DdeInitializeW(LPDWORD pidInst, PFNCALLBACK pfnCallback,
        DWORD afCmd, DWORD ulRes);







































BOOL __stdcall DdeUninitialize(DWORD idInst);





HCONVLIST __stdcall DdeConnectList(DWORD idInst, HSZ hszService, HSZ hszTopic,
        HCONVLIST hConvList, PCONVCONTEXT pCC);
HCONV __stdcall DdeQueryNextServer(HCONVLIST hConvList, HCONV hConvPrev);
BOOL __stdcall DdeDisconnectList(HCONVLIST hConvList);





HCONV __stdcall DdeConnect(DWORD idInst, HSZ hszService, HSZ hszTopic,
        PCONVCONTEXT pCC);
BOOL __stdcall DdeDisconnect(HCONV hConv);
HCONV __stdcall DdeReconnect(HCONV hConv);
UINT __stdcall DdeQueryConvInfo(HCONV hConv, DWORD idTransaction, PCONVINFO pConvInfo);
BOOL __stdcall DdeSetUserHandle(HCONV hConv, DWORD id, DWORD hUser);
BOOL __stdcall DdeAbandonTransaction(DWORD idInst, HCONV hConv, DWORD idTransaction);






BOOL __stdcall DdePostAdvise(DWORD idInst, HSZ hszTopic, HSZ hszItem);
BOOL __stdcall DdeEnableCallback(DWORD idInst, HCONV hConv, UINT wCmd);
BOOL __stdcall DdeImpersonateClient(HCONV hConv);







HDDEDATA __stdcall DdeNameService(DWORD idInst, HSZ hsz1, HSZ hsz2, UINT afCmd);










HDDEDATA __stdcall DdeClientTransaction(LPBYTE pData, DWORD cbData,
        HCONV hConv, HSZ hszItem, UINT wFmt, UINT wType,
        DWORD dwTimeout, LPDWORD pdwResult);





HDDEDATA __stdcall DdeCreateDataHandle(DWORD idInst, LPBYTE pSrc, DWORD cb,
        DWORD cbOff, HSZ hszItem, UINT wFmt, UINT afCmd);
HDDEDATA __stdcall DdeAddData(HDDEDATA hData, LPBYTE pSrc, DWORD cb, DWORD cbOff);
DWORD __stdcall DdeGetData(HDDEDATA hData, LPBYTE pDst, DWORD cbMax, DWORD cbOff);
LPBYTE __stdcall DdeAccessData(HDDEDATA hData, LPDWORD pcbDataSize);
BOOL __stdcall DdeUnaccessData(HDDEDATA hData);
BOOL __stdcall DdeFreeDataHandle(HDDEDATA hData);




UINT __stdcall DdeGetLastError(DWORD idInst);


























HSZ  __stdcall DdeCreateStringHandleA(DWORD idInst, LPCSTR psz, int iCodePage);
HSZ  __stdcall DdeCreateStringHandleW(DWORD idInst, LPCWSTR psz, int iCodePage);





DWORD __stdcall DdeQueryStringA(DWORD idInst, HSZ hsz, LPSTR psz, DWORD cchMax, int iCodePage);
DWORD __stdcall DdeQueryStringW(DWORD idInst, HSZ hsz, LPWSTR psz, DWORD cchMax, int iCodePage);





BOOL __stdcall DdeFreeStringHandle(DWORD idInst, HSZ hsz);
BOOL __stdcall DdeKeepStringHandle(DWORD idInst, HSZ hsz);
int __stdcall DdeCmpStringHandles(HSZ hsz1, HSZ hsz2);







typedef struct tagDDEML_MSG_HOOK_DATA {    
    UINT uiLo;      
    UINT uiHi;
    DWORD cbData;   
    DWORD Data[8];  
} DDEML_MSG_HOOK_DATA, *PDDEML_MSG_HOOK_DATA;


typedef struct tagMONMSGSTRUCT {
    UINT    cb;
    HWND    hwndTo;
    DWORD   dwTime;
    HANDLE  hTask;
    UINT    wMsg;
    WPARAM  wParam;
    LPARAM  lParam;
    DDEML_MSG_HOOK_DATA dmhd;       
} MONMSGSTRUCT, *PMONMSGSTRUCT;

typedef struct tagMONCBSTRUCT {
    UINT   cb;
    DWORD  dwTime;
    HANDLE hTask;
    DWORD  dwRet;
    UINT   wType;
    UINT   wFmt;
    HCONV  hConv;
    HSZ    hsz1;
    HSZ    hsz2;
    HDDEDATA hData;
    DWORD  dwData1;
    DWORD  dwData2;
    CONVCONTEXT cc;                 
    DWORD  cbData;                  
    DWORD  Data[8];                 
} MONCBSTRUCT, *PMONCBSTRUCT;

typedef struct tagMONHSZSTRUCTA {
    UINT   cb;
    BOOL   fsAction;    
    DWORD  dwTime;
    HSZ    hsz;
    HANDLE hTask;
    CHAR    str[1];
} MONHSZSTRUCTA, *PMONHSZSTRUCTA;
typedef struct tagMONHSZSTRUCTW {
    UINT   cb;
    BOOL   fsAction;    
    DWORD  dwTime;
    HSZ    hsz;
    HANDLE hTask;
    WCHAR   str[1];
} MONHSZSTRUCTW, *PMONHSZSTRUCTW;




typedef MONHSZSTRUCTA MONHSZSTRUCT;
typedef PMONHSZSTRUCTA PMONHSZSTRUCT;







typedef struct tagMONERRSTRUCT {
    UINT    cb;
    UINT    wLastError;
    DWORD   dwTime;
    HANDLE  hTask;
} MONERRSTRUCT, *PMONERRSTRUCT;

typedef struct tagMONLINKSTRUCT {
    UINT    cb;
    DWORD   dwTime;
    HANDLE  hTask;
    BOOL    fEstablished;
    BOOL    fNoData;
    HSZ     hszSvc;
    HSZ     hszTopic;
    HSZ     hszItem;
    UINT    wFmt;
    BOOL    fServer;
    HCONV   hConvServer;
    HCONV   hConvClient;
} MONLINKSTRUCT, *PMONLINKSTRUCT;

typedef struct tagMONCONVSTRUCT {
    UINT    cb;
    BOOL    fConnect;
    DWORD   dwTime;
    HANDLE  hTask;
    HSZ     hszSvc;
    HSZ     hszTopic;
    HCONV   hConvClient;        
    HCONV   hConvServer;        
} MONCONVSTRUCT, *PMONCONVSTRUCT;

























































BOOL __stdcall DdeGetQualityOfService(HWND hwndClient, HWND hwndServer,
        PSECURITY_QUALITY_OF_SERVICE pqos);































































typedef struct
{
    HWND    hwnd;
    RECT    rc;
} SHELLHOOKINFO, *LPSHELLHOOKINFO;





HKL
__stdcall
LoadKeyboardLayoutEx(
    HKL hkl,
    LPCWSTR pwszKLID,
    UINT Flags);








BOOL IsHungAppWindow(HWND hwnd);

BOOL WowWaitForMsgAndEvent(HANDLE hevent);
 void __stdcall RegisterSystemThread(DWORD flags, DWORD reserved);














































































































































































































 BOOL    __stdcall DrawCaptionTempA(HWND, HDC, LPRECT, HFONT, HICON, LPSTR, UINT);
 BOOL    __stdcall DrawCaptionTempW(HWND, HDC, LPRECT, HFONT, HICON, LPWSTR, UINT);






















typedef struct tagMEASUREITEMSTRUCT_EX {
    UINT       CtlType;
    UINT       CtlID;
    UINT       itemID;
    UINT       itemWidth;
    UINT       itemHeight;
    DWORD      itemData;
    BOOL       bThunkClientData;
} MEASUREITEMSTRUCT_EX,  *PMEASUREITEMSTRUCT_EX,  *LPMEASUREITEMSTRUCT_EX;


















    

























































#pragma warning(disable:4103)

#pragma pack(push)

#pragma pack(2)









typedef struct {
    WORD wDlgVer;
    WORD wSignature;
    DWORD dwHelpID;
    DWORD dwExStyle;
    DWORD style;
    WORD cDlgItems;
    short x;
    short y;
    short cx;
    short cy;
} DLGTEMPLATE2;
typedef DLGTEMPLATE2 *LPDLGTEMPLATE2A;
typedef DLGTEMPLATE2 *LPDLGTEMPLATE2W;



typedef LPDLGTEMPLATE2A LPDLGTEMPLATE2;

typedef const DLGTEMPLATE2 *LPCDLGTEMPLATE2A;
typedef const DLGTEMPLATE2 *LPCDLGTEMPLATE2W;



typedef LPCDLGTEMPLATE2A LPCDLGTEMPLATE2;




typedef struct {
    DWORD dwHelpID;
    DWORD dwExStyle;
    DWORD style;
    short x;
    short y;
    short cx;
    short cy;
    DWORD dwID;
} DLGITEMTEMPLATE2;
typedef DLGITEMTEMPLATE2 *PDLGITEMTEMPLATE2A;
typedef DLGITEMTEMPLATE2 *PDLGITEMTEMPLATE2W;



typedef PDLGITEMTEMPLATE2A PDLGITEMTEMPLATE2;

typedef DLGITEMTEMPLATE2 *LPDLGITEMTEMPLATE2A;
typedef DLGITEMTEMPLATE2 *LPDLGITEMTEMPLATE2W;



typedef LPDLGITEMTEMPLATE2A LPDLGITEMTEMPLATE2;





























#pragma warning(disable:4103)

#pragma pack(pop)











































 int __stdcall DrawMenuBarTemp(HWND, HDC, LPRECT, HMENU, HFONT);
 BOOL __stdcall SetSystemMenu(HWND, HMENU);

















































































typedef struct _dropfilestruct {
   DWORD pFiles;                       
   POINT pt;                           
   BOOL fNC;                           
   BOOL fWide;                         
} DROPFILESTRUCT,  * LPDROPFILESTRUCT;


























 void __stdcall SwitchToThisWindow(HWND hwnd, BOOL fUnknown);


















































































typedef struct {
    WORD cbData;              
    WORD usCommand;           
    DWORD ulTopic;            
    DWORD ulReserved;         
    WORD offszHelpFile;       
    WORD offabData;           
} HLP, *LPHLP;





































 HANDLE __stdcall SetSysColorsTemp(COLORREF  *, HBRUSH  *, UINT wCnt);


BOOL
__stdcall
SetDeskWallpaper(
    LPCSTR lpString);

 HWND __stdcall CreateDialogIndirectParamAorW(
    HANDLE hmod,
    LPCDLGTEMPLATE lpDlgTemplate,
    HWND hwndOwner,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam,
    UINT fAnsi);

 int __stdcall DialogBoxIndirectParamAorW(
    HINSTANCE hmod,
    LPCDLGTEMPLATEW lpDlgTemplate,
    HWND hwndOwner,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam,
    UINT fAnsiFlags);

 void LoadLocalFonts(void);

 UINT UserRealizePalette(HDC hdc);

 HWND    __stdcall  GetShellWindow(void);
 BOOL    __stdcall  SetShellWindow(HWND);
 BOOL    __stdcall  SetShellWindowEx(HWND, HWND);
 HWND    __stdcall  GetProgmanWindow(void);
 BOOL    __stdcall  SetProgmanWindow(HWND);
 HWND    __stdcall  GetTaskmanWindow(void);
 BOOL    __stdcall  SetTaskmanWindow(HWND);
 BOOL    __stdcall  RegisterShellHookWindow(HWND);
 BOOL    __stdcall  DeregisterShellHookWindow(HWND);

 HWND __stdcall GetNextQueueWindow (HWND hWnd, INT nCmd);




































typedef struct {        
    DWORD dwHelpID;
    DWORD fType;
    DWORD fState;
    DWORD menuId;
    WORD  wResInfo;
    WCHAR mtString[1];
} MENUITEMTEMPLATE2, *PMENUITEMTEMPLATE2;


 UINT PrivateExtractIconExA(
    LPCSTR szFileName,
    int      nIconIndex,
    HICON   *phiconLarge,
    HICON   *phiconSmall,
    UINT     nIcons);
 UINT PrivateExtractIconExW(
    LPCWSTR szFileName,
    int      nIconIndex,
    HICON   *phiconLarge,
    HICON   *phiconSmall,
    UINT     nIcons);







 UINT PrivateExtractIconsA(
    LPCSTR szFileName,
    int      nIconIndex,
    int      cxIcon,
    int      cyIcon,
    HICON   *phicon,
    UINT    *piconid,
    UINT     nIcons,
    UINT     flags);
 UINT PrivateExtractIconsW(
    LPCWSTR szFileName,
    int      nIconIndex,
    int      cxIcon,
    int      cyIcon,
    HICON   *phicon,
    UINT    *piconid,
    UINT     nIcons,
    UINT     flags);






































































































































BOOL
__stdcall
EnumDisplaySettingsExA(
    LPCSTR lpszDeviceName,
    DWORD iModeNum,
    LPDEVMODEA lpDevMode,
    DWORD dwFlags);

BOOL
__stdcall
EnumDisplaySettingsExW(
    LPCWSTR lpszDeviceName,
    DWORD iModeNum,
    LPDEVMODEW lpDevMode,
    DWORD dwFlags);










void LoadRemoteFonts(void);






 void __stdcall RegisterNetworkCapabilities(DWORD dwBitsToSet, DWORD dwValues);
























BOOL DdeIsDataHandleReadOnly(
    HDDEDATA hData);

int DdeGetDataHandleFormat(
    HDDEDATA hData);

DWORD DdeGetCallbackInstance(void);




HWND
__stdcall
WOWFindWindow(
    LPCSTR lpClassName,
    LPCSTR lpWindowName);

int
InternalDoEndTaskDlg(
    TCHAR* pszTitle);

DWORD
InternalWaitCancel(
    HANDLE handle,
    DWORD dwMilliseconds);

HANDLE
InternalCreateCallbackThread(
    HANDLE hProcess,
    DWORD lpfn,
    DWORD dwData);


UINT
__stdcall
GetInternalWindowPos(
    HWND hWnd,
    LPRECT lpRect,
    LPPOINT lpPoint);


BOOL
__stdcall
SetInternalWindowPos(
    HWND hWnd,
    UINT cmdShow,
    LPRECT lpRect,
    LPPOINT lpPoint);


BOOL
__stdcall
CalcChildScroll(
    HWND hWnd,
    UINT sb);


BOOL
__stdcall
RegisterTasklist(
    HWND hWndTasklist);


BOOL
__stdcall
CascadeChildWindows(
    HWND hWndParent,
    UINT flags);


BOOL
__stdcall
TileChildWindows(
    HWND hWndParent,
    UINT flags);


int
__stdcall
InternalGetWindowText(
    HWND hWnd,
    LPWSTR lpString,
    int nMaxCount);

BOOL
BoostHardError(
    DWORD dwProcessId,
    BOOL fForce);





BOOL
__stdcall
RegisterServicesProcess(
    DWORD dwProcessId);





BOOL
__stdcall
RegisterLogonProcess(
    DWORD dwProcessId,
    BOOL fSecure);


UINT
__stdcall
LockWindowStation(
    HWINSTA hWindowStation);


BOOL
__stdcall
UnlockWindowStation(
    HWINSTA hWindowStation);


BOOL
__stdcall
SetWindowStationUser(
    HWINSTA hWindowStation,
    PLUID pLuidUser,
    PSID pSidUser,
    DWORD cbSidUser);


BOOL
__stdcall
SetDesktopBitmap(
    HDESK hdesk,
    HBITMAP hbmWallpaper,
    DWORD dwStyle);


BOOL
__stdcall
SetLogonNotifyWindow(
    HWINSTA hWindowStation,
    HWND hWndNotify);


UINT
__stdcall
GetIconId(
    HANDLE hRes,
    LPSTR lpszType);

int
CriticalNullCall(
    void);

int
NullCall(
    void);

void
UserNotifyConsoleApplication(
    DWORD dwProcessId);

HBRUSH
GetConsoleWindowBrush(
    PVOID pWnd);

void vFontSweep();
void vLoadLocalT1Fonts();
void vLoadRemoteT1Fonts();







BOOL
__stdcall
TranslateMessageEx(
    const MSG *lpMsg,
    UINT flags);



int
WCSToMBEx(
    WORD wCodePage,
    LPCWSTR pUnicodeString,
    int cbUnicodeChar,
    LPSTR *ppAnsiString,
    int nAnsiChar,
    BOOL bAllocateMem);

int
MBToWCSEx(
    WORD wCodePage,
    LPCSTR pAnsiString,
    int nAnsiChar,
    LPWSTR *ppUnicodeString,
    int cbUnicodeChar,
    BOOL bAllocateMem);


BOOL
__stdcall
EndTask(
    HWND hWnd,
    BOOL fShutDown,
    BOOL fForce);


BOOL
__stdcall
UpdatePerUserSystemParameters(
    BOOL bUserLoggedOn);

typedef void  (__stdcall *PFNW32ET)(void);

BOOL
RegisterUserHungAppHandlers(
    PFNW32ET pfnW32EndTask,
    HANDLE   hEventWowExec);

ATOM
RegisterClassWOWA(
    PVOID   lpWndClass,
    LPDWORD pdwWOWstuff);

LONG
GetClassWOWWords(
    HINSTANCE hInstance,
    LPCTSTR pString);

DWORD
CurrentTaskLock(
    DWORD hlck);

typedef struct _DISPLAY_DEVICEA {
    DWORD  cb;
    BYTE   DeviceName[32];
    BYTE   DeviceString[128];
    DWORD  StateFlags;
} DISPLAY_DEVICEA, *PDISPLAY_DEVICEA, *LPDISPLAY_DEVICEA;
typedef struct _DISPLAY_DEVICEW {
    DWORD  cb;
    WCHAR  DeviceName[32];
    WCHAR  DeviceString[128];
    DWORD  StateFlags;
} DISPLAY_DEVICEW, *PDISPLAY_DEVICEW, *LPDISPLAY_DEVICEW;





typedef DISPLAY_DEVICEA DISPLAY_DEVICE;
typedef PDISPLAY_DEVICEA PDISPLAY_DEVICE;
typedef LPDISPLAY_DEVICEA LPDISPLAY_DEVICE;









BOOL
__stdcall
EnumDisplayDevicesA(
    PVOID Unused,
    DWORD iDevNum,
    PDISPLAY_DEVICEA lpDisplayDevice);

BOOL
__stdcall
EnumDisplayDevicesW(
    PVOID Unused,
    DWORD iDevNum,
    PDISPLAY_DEVICEW lpDisplayDevice);








HDESK
__stdcall
GetInputDesktop(
    void);

































int
CsDrawTextA(
    HDC hDC,
    LPCSTR lpString,
    int nCount,
    LPRECT lpRect,
    UINT uFormat);
int
CsDrawTextW(
    HDC hDC,
    LPCWSTR lpString,
    int nCount,
    LPRECT lpRect,
    UINT uFormat);






LONG
CsTabbedTextOutA(
    HDC hDC,
    int X,
    int Y,
    LPCSTR lpString,
    int nCount,
    int nTabPositions,
    LPINT lpnTabStopPositions,
    int nTabOrigin);
LONG
CsTabbedTextOutW(
    HDC hDC,
    int X,
    int Y,
    LPCWSTR lpString,
    int nCount,
    int nTabPositions,
    LPINT lpnTabStopPositions,
    int nTabOrigin);






int
CsFrameRect(
    HDC hDC,
    const RECT *lprc,
    HBRUSH hbr);












HCURSOR
GetCursorInfo(
    HCURSOR hcur,
    LPWSTR id,
    int iFrame,
    LPDWORD pjifRate,
    LPINT pccur);







BOOL
__stdcall
SetCursorContents(HCURSOR hCursor, HCURSOR hCursorNew);























typedef struct _TAG {
    DWORD type;
    DWORD style;
    DWORD len;
} TAG, *PTAG;







































































typedef DWORD JIF, *PJIF;

typedef struct _ANIHEADER {     
    DWORD cbSizeof;
    DWORD cFrames;
    DWORD cSteps;
    DWORD cx, cy;
    DWORD cBitCount, cPlanes;
    JIF   jifRate;
    DWORD fl;
} ANIHEADER, *PANIHEADER;







































typedef enum _CONSOLECONTROL {
    ConsoleDesktopConsoleThread,     
    ConsoleClassAtom,                
    ConsolePermanentFont,            
    ConsoleSetVDMCursorBounds,       
    ConsoleNotifyConsoleApplication, 
    ConsolePublicPalette,            
    ConsoleWindowStationProcess      
} CONSOLECONTROL;

typedef struct _CONSOLEDESKTOPCONSOLETHREAD {
    HDESK hdesk;
    DWORD dwThreadId;
} CONSOLEDESKTOPCONSOLETHREAD, *PCONSOLEDESKTOPCONSOLETHREAD;

typedef struct _CONSOLEWINDOWSTATIONPROCESS {
    DWORD dwProcessId;
    HWINSTA hwinsta;
} CONSOLEWINDOWSTATIONPROCESS, *PCONSOLEWINDOWSTATIONPROCESS;


typedef enum _FULLSCREENCONTROL {
    FullscreenControlEnable,               
    FullscreenControlDisable,              
    FullscreenControlSetCursorPosition,    
    FullscreenControlSetCursorAttributes,  
    FullscreenControlRegisterVdm,          
    FullscreenControlSetPalette,           
    FullscreenControlSetColors,            
    FullscreenControlLoadFont,             
    FullscreenControlRestoreHardwareState, 
    FullscreenControlSaveHardwareState,    
    FullscreenControlCopyFrameBuffer,      
    FullscreenControlReadFromFrameBuffer,  
    FullscreenControlWriteToFrameBuffer,   
    FullscreenControlReverseMousePointer,  
    FullscreenControlSetMode               
} FULLSCREENCONTROL;



NTSTATUS
NtUserConsoleControl(
     CONSOLECONTROL Command,
      PVOID ConsoleInformation,
     ULONG ConsoleInformationLength
    );

NTSTATUS
NtUserFullscreenControl(
     FULLSCREENCONTROL FullscreenCommand,
     PVOID  FullscreenInuut,
     DWORD  FullscreenInputLength,
     PVOID  FullscreenOutput,
     PULONG FullscreenOutputLength
    );


HDESK
NtUserResolveDesktop(
     HANDLE hProcess,
     PUNICODE_STRING pstrDesktop,
     BOOL fInherit,
     HWINSTA *phwinsta
    );


BOOL
NtUserNotifyProcessCreate(
    DWORD dwProcessId,
    DWORD dwParentThreadId,
    DWORD dwData,
    DWORD dwFlags
    );

typedef enum _HARDERRORCONTROL {
    HardErrorSetup,
    HardErrorCleanup,
    HardErrorAttach,
    HardErrorAttachUser,
    HardErrorDetach,
    HardErrorAttachNoQueue,
    HardErrorDetachNoQueue
} HARDERRORCONTROL;


BOOL
NtUserHardErrorControl(
     HARDERRORCONTROL dwCmd,
     HDESK hdeskRestore 
    );

typedef enum _USERTHREADINFOCLASS {
    UserThreadShutdownInformation,
    UserThreadFlags,
    UserThreadTaskName,
    UserThreadWOWInformation,
    UserThreadHungStatus,
    UserThreadInitiateShutdown,
    UserThreadEndShutdown,
    UserThreadUseDesktop,
    UserThreadPolled,           
    UserThreadKeyboardState,    
    UserThreadCsrApiPort,
    UserThreadResyncKeyState,   
    UserThreadUseActiveDesktop
} USERTHREADINFOCLASS;



typedef struct _USERTHREAD_SHUTDOWN_INFORMATION {
    HWND hwndDesktop;
    NTSTATUS StatusShutdown;
    DWORD dwFlags;
} USERTHREAD_SHUTDOWN_INFORMATION, *PUSERTHREAD_SHUTDOWN_INFORMATION;

typedef struct _USERTHREAD_FLAGS {
    DWORD dwFlags;
    DWORD dwMask;
} USERTHREAD_FLAGS, *PUSERTHREAD_FLAGS;

typedef struct _USERTHREAD_WOW_INFORMATION {
    PVOID lpfnWowExitTask;
    DWORD hTaskWow;
} USERTHREAD_WOW_INFORMATION, *PUSERTHREAD_WOW_INFORMATION;


NTSTATUS
NtUserQueryInformationThread(
     HANDLE hThread,
     USERTHREADINFOCLASS ThreadInfoClass,
     PVOID ThreadInformation,
     ULONG ThreadInformationLength,
     PULONG ReturnLength 
    );


NTSTATUS
NtUserSetInformationThread(
     HANDLE hThread,
     USERTHREADINFOCLASS ThreadInfoClass,
     PVOID ThreadInformation,
     ULONG ThreadInformationLength
    );


NTSTATUS
NtUserSoundSentry(
    UINT uVideoMode
    );


NTSTATUS
NtUserTestForInteractiveUser(
    PLUID pluidCaller
    );


NTSTATUS
NtUserInitialize(DWORD, FARPROC);


NTSTATUS
NtUserProcessConnect(
    HANDLE hProcess,
    PVOID pConnectInfo,
    ULONG cbConnectInfo
    );


HPALETTE
NtUserSelectPalette(
    HDC hdc,
    HPALETTE hpalette,
    BOOL fForceBackground
    );

typedef enum _WINDOWINFOCLASS {
    WindowProcess,
    WindowThread,
    WindowActiveWindow,
    WindowFocusWindow,
    WindowIsHung,
    WindowClientBase,
    WindowIsForegroundThread,




} WINDOWINFOCLASS;


HANDLE
NtUserQueryWindow(
    HWND hwnd,
    WINDOWINFOCLASS WindowInformation
    );

typedef enum _USERTHREADSTATECLASS {
    UserThreadStateFocusWindow,
    UserThreadStateActiveWindow,
    UserThreadStateCaptureWindow,
    UserThreadStateDefaultImeWindow,
    UserThreadStateDefaultInputContext,
    UserThreadStateInputState,
    UserThreadStateCursor,
    UserThreadStateChangeBits,
    UserThreadStatePeekMessage,
    UserThreadStateExtraInfo,
    UserThreadStateInSendMessage,
    UserThreadStateMessageTime,
    UserThreadStateIsForeground
} USERTHREADSTATECLASS;

DWORD
NtUserGetThreadState(
     USERTHREADSTATECLASS ThreadState);

LONG
NtUserChangeDisplaySettings(
     PUNICODE_STRING pstrDeviceName,
     LPDEVMODEW lpDevMode,
     HWND hwnd,
     DWORD dwFlags,
     PVOID lParam);

NTSTATUS
NtUserEnumDisplaySettings(
     PUNICODE_STRING pstrDeviceName,
     DWORD           iModeNum,
     LPDEVMODEW     lpDevMode,
     DWORD           dwFlags);































__declspec(dllimport)
__stdcall
InvalidateNLSCache(void);




















































typedef struct {
        unsigned short bAppReturnCode:8,
                 reserved:6,
                 fBusy:1,
		 fAck:1;
} DDEACK;









typedef struct {
        unsigned short reserved:14,
                 fDeferUpd:1,
		 fAckReq:1;
	short     cfFormat;
} DDEADVISE;











typedef struct {
	unsigned short unused:12,
                 fResponse:1,
                 fRelease:1,
                 reserved:1,
                 fAckReq:1;
	short	 cfFormat;
	BYTE	 Value[1];
} DDEDATA;











typedef struct {
	unsigned short unused:13,  
                             
		 fRelease:1,
		 fReserved:2;
	short    cfFormat;
	BYTE	 Value[1];  
                            

} DDEPOKE;











typedef struct {
        unsigned short unused:13,
                 fRelease:1,
                 fDeferUpd:1,
		 fAckReq:1;
	short	 cfFormat;
} DDELN;

typedef struct {
	unsigned short unused:12,
                 fAck:1,
                 fRelease:1,
                 fReserved:1,
                 fAckReq:1;
	short	 cfFormat;
	BYTE	 rgb[1];
} DDEUP;






BOOL
__stdcall
DdeSetQualityOfService(
    HWND hwndClient,
    const SECURITY_QUALITY_OF_SERVICE *pqosNew,
    PSECURITY_QUALITY_OF_SERVICE pqosPrev);

BOOL
__stdcall
ImpersonateDdeClientWindow(
    HWND hWndClient,
    HWND hWndServer);




LONG __stdcall PackDDElParam(UINT msg, UINT uiLo, UINT uiHi);
BOOL __stdcall UnpackDDElParam(UINT msg, LONG lParam, PUINT puiLo, PUINT puiHi);
BOOL __stdcall FreeDDElParam(UINT msg, LONG lParam);
LONG __stdcall ReuseDDElParam(LONG lParam, UINT msgIn, UINT msgOut, UINT uiLo, UINT uiHi);



















typedef struct tagDDEPACK {
    UINT uiLo;
    UINT uiHi;
} DDEPACK, *PDDEPACK;

typedef struct tagDDE_DATA {    
    WORD wStatus;
    WORD wFmt;
    DWORD Data;     
} DDE_DATA, *PDDE_DATA;






typedef struct tagINTDDEINFO {
    DDEPACK     DdePack;            
    DWORD       flags;              
    HANDLE      hDirect;            
    PBYTE       pDirect;            
    int         cbDirect;           
    HANDLE      hIndirect;          
    PBYTE       pIndirect;          
    int         cbIndirect;         
                                    
                                    
} INTDDEINFO, *PINTDDEINFO;






















































typedef struct tagKE {
    BYTE   bScanCode;   
    USHORT usFlaggedVk; 
} KE, *PKE;

typedef BOOL (* KEPROC)(PKE pKe);









































































void    VSCFromSC(PKE pke);
BYTE    VKFromVSC(PKE pke, BYTE bPrefix, LPBYTE afKeyState);
BOOL    KEOEMProcs(PKE pke);
BOOL    KELocaleProcs(PKE pke);
void    _KeyEvent(USHORT usVk, WORD wScanCode, DWORD ExtraInfo);






















































































































































typedef struct {
    BYTE Vk;
    BYTE ModBits;
} VK_TO_BIT, *PVK_TO_BIT;

































typedef struct {
    PVK_TO_BIT pVkToBit;     
    WORD       wMaxModBits;  
    BYTE       ModNumber[];  
} MODIFIERS, *PMODIFIERS;

WORD GetModifierBits(PMODIFIERS pModifiers, LPBYTE afKeyState);
WORD GetModificationNumber(PMODIFIERS pModifiers, WORD wModBits);








extern PULONG *gapulCvt_VK;
extern ULONG *gapulCvt_VK_101[];
extern ULONG *gapulCvt_VK_84[];




extern MODIFIERS Modifiers_VK;
extern BYTE aVkNumpad[];







typedef struct _VSC_VK {
    BYTE Vsc;
    USHORT Vk;
} VSC_VK, *PVSC_VK;







typedef struct _VK_VSC {
    BYTE Vk;
    BYTE Vsc;
} VK_VSC, *PVK_VSC;



















































typedef struct _VK_TO_WCHARS1 { BYTE VirtualKey; BYTE Attributes; WCHAR wch[1]; } VK_TO_WCHARS1, *PVK_TO_WCHARS1; 
typedef struct _VK_TO_WCHARS2 { BYTE VirtualKey; BYTE Attributes; WCHAR wch[2]; } VK_TO_WCHARS2, *PVK_TO_WCHARS2; 
typedef struct _VK_TO_WCHARS3 { BYTE VirtualKey; BYTE Attributes; WCHAR wch[3]; } VK_TO_WCHARS3, *PVK_TO_WCHARS3; 
typedef struct _VK_TO_WCHARS4 { BYTE VirtualKey; BYTE Attributes; WCHAR wch[4]; } VK_TO_WCHARS4, *PVK_TO_WCHARS4; 
typedef struct _VK_TO_WCHARS5 { BYTE VirtualKey; BYTE Attributes; WCHAR wch[5]; } VK_TO_WCHARS5, *PVK_TO_WCHARS5; 
typedef struct _VK_TO_WCHARS6 { BYTE VirtualKey; BYTE Attributes; WCHAR wch[6]; } VK_TO_WCHARS6, *PVK_TO_WCHARS6; 

















typedef struct _VK_TO_WCHAR_TABLE {
    PVK_TO_WCHARS1 pVkToWchars;
    BYTE           nModifications;
    BYTE           cbSize;
} VK_TO_WCHAR_TABLE, *PVK_TO_WCHAR_TABLE;








typedef struct {
    DWORD  dwBoth;  
    WCHAR  wchComposed;
} DEADKEY, *PDEADKEY;










typedef struct {
    BYTE   vsc;
    LPWSTR pwsz;
} VSC_LPWSTR, *PVSC_LPWSTR;













typedef struct tagKbdLayer {
    


    PMODIFIERS pCharModifiers;

    


    VK_TO_WCHAR_TABLE *pVkToWcharTable;  

    


    PDEADKEY pDeadKey;

    


    VSC_LPWSTR *pKeyNames;
    VSC_LPWSTR *pKeyNamesExt;
    LPWSTR     *pKeyNamesDead;

    


    USHORT *pusVSCtoVK;
    BYTE    bMaxVSCtoVK;
    PVSC_VK pVSCtoVK_E0;  
    PVSC_VK pVSCtoVK_E1;  

    


    DWORD fLocaleFlags;
} KBDTABLES, *PKBDTABLES;




extern KEPROC aKEProcOEM[];



































































































































































































































        


























#pragma pack(1)
typedef struct _NE_MODULE_SEG {
    USHORT ns_sector;
    USHORT ns_cbseg;
    USHORT ns_flags;
    USHORT ns_minalloc;
    USHORT ns_handle;
} NEMODULESEG;
typedef struct _NE_MODULE_SEG  *PNEMODULESEG;
#pragma pack()



typedef HLOCAL  (__stdcall *PFNLALLOC)(UINT dwFlags, UINT dwBytes, HANDLE hInstance);
typedef HLOCAL  (__stdcall *PFNLREALLOC)(HLOCAL hMem, UINT dwBytes, UINT dwFlags, HANDLE hInstance, PVOID* ppv);
typedef LPVOID  (__stdcall *PFNLLOCK)(HLOCAL hMem, HANDLE hInstance);
typedef BOOL    (__stdcall *PFNLUNLOCK)(HLOCAL hMem, HANDLE hInstance);
typedef UINT    (__stdcall *PFNLSIZE)(HLOCAL hMem, HANDLE hInstance);
typedef HLOCAL  (__stdcall *PFNLFREE)(HLOCAL hMem, HANDLE hInstance);
typedef DWORD   (__stdcall *PFNINITDLGCB)(HWND hwndDlg, LONG lParam);
typedef WORD    (__stdcall *PFN16GALLOC)(UINT flags, DWORD cb);
typedef void    (__stdcall *PFN16GFREE)(WORD h16Mem);
typedef DWORD   (__stdcall *PFNGETMODFNAME)(HANDLE hModule, LPTSTR lpszPath, DWORD cchPath);
typedef void    (__stdcall *PFNEMPTYCB)(void);
typedef DWORD   (__stdcall *PFNGETEXPWINVER)(HANDLE hModule);
typedef HANDLE  (__stdcall *PFNFINDA)(HANDLE hModule, LPCSTR lpName,  LPCSTR lpType,  WORD wLang);
typedef HANDLE  (__stdcall *PFNFINDW)(HANDLE hModule, LPCWSTR lpName, LPCWSTR lpType, WORD wLang);
typedef HANDLE  (__stdcall *PFNLOAD)(HANDLE hModule, HANDLE hResInfo);
typedef BOOL    (__stdcall *PFNFREE)(HANDLE hResData, HANDLE hModule);
typedef LPSTR   (__stdcall *PFNLOCK)(HANDLE hResData, HANDLE hModule);
typedef BOOL    (__stdcall *PFNUNLOCK)(HANDLE hResData, HANDLE hModule);
typedef DWORD   (__stdcall *PFNSIZEOF)(HANDLE hModule, HANDLE hResInfo);
typedef DWORD   (__stdcall *PFNWOWWNDPROCEX)(HWND hwnd, UINT uMsg, UINT uParam, LONG lParam, DWORD dw, PVOID adwWOW);
typedef int     (__stdcall *PFNWOWEDITNEXTWORD)(LPSTR lpch, int ichCurrent, int cch, int code, DWORD dwProc16);
typedef void    (__stdcall *PFNWOWSETFAKEDIALOGCLASS)(HWND hwnd);
typedef void    (__stdcall *PFNWOWCBSTOREHANDLE)(WORD wFmt, WORD h16);


typedef HWND    (__stdcall *PFNCSCREATEWINDOWEX)(DWORD dwExStyle, LPCTSTR lpClassName,
        LPCTSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HANDLE hInstance, LPVOID lpParam, DWORD Flags, LPDWORD lpWOW);
typedef void    (__stdcall *PFNDIRECTEDYIELD)(DWORD ThreadId);
typedef void    (__stdcall *PFNFREEDDEDATA)(HANDLE hDDE, BOOL fIgnorefRelease, BOOL fFreeTruelyGlobalObjects);
typedef LONG    (__stdcall *PFNGETCLASSWOWWORDS)(HINSTANCE hInstance, LPCTSTR pString);
typedef BOOL    (__stdcall *PFNINITTASK)(UINT dwExpWinVer, LPCSTR lpszAppName, DWORD hTaskWow, DWORD dwHotkey, DWORD idTask, DWORD dwX, DWORD dwY, DWORD dwXSize, DWORD dwYSize, WORD wShowWindow);
typedef ATOM    (__stdcall *PFNREGISTERCLASSWOWA)(PVOID lpWndClass, LPDWORD pdwWOWstuff);
typedef BOOL    (__stdcall *PFNREGISTERUSERHUNGAPPHANDLERS)(PFNW32ET pfnW32EndTask, HANDLE hEventWowExec);
typedef HWND    (__stdcall *PFNSERVERCREATEDIALOG)(HANDLE hmod, LPDLGTEMPLATE lpDlgTemplate, DWORD cb, HWND hwndOwner , DLGPROC pfnWndProc, LONG dwInitParam, UINT fFlags);
typedef HCURSOR (__stdcall *PFNSERVERLOADCREATECURSORICON)(HANDLE hmod, LPTSTR lpModName, DWORD dwExpWinVer, LPCTSTR lpName, DWORD cb, PVOID pcur, LPTSTR lpType, BOOL fClient);
typedef HMENU   (__stdcall *PFNSERVERLOADCREATEMENU)(HANDLE hMod, LPTSTR lpName, const LPMENUTEMPLATE pmt, DWORD cb, BOOL fCallClient);
typedef BOOL    (__stdcall *PFNWOWCLEANUP)(HANDLE hInstance, DWORD hTaskWow, PNEMODULESEG SelList, DWORD nSel);
typedef HWND    (__stdcall *PFNWOWFINDWINDOW)(LPCSTR lpClassName, LPCSTR lpWindowName);
typedef int     (__stdcall *PFNWOWGETIDFROMDIRECTORY)(PBYTE presbits, UINT rt);
typedef HBITMAP (__stdcall *PFNWOWLOADBITMAPA)(HINSTANCE hmod, LPCSTR lpName, LPBYTE pResData, DWORD cbResData);
typedef BOOL    (__stdcall *PFNWOWWAITFORMSGANDEVENT)(HANDLE hevent);
typedef BOOL    (__stdcall *PFNYIELDTASK)(void);
typedef DWORD   (__stdcall *PFNGETFULLUSERHANDLE)(WORD wHandle);
typedef DWORD   (__stdcall *PFNGETMENUINDEX)(HMENU hMenu, HMENU hSubMenu);
typedef WORD    (__stdcall *PFNWOWGETDEFWINDOWPROCBITS)(PBYTE pDefWindowProcBits, WORD cbDefWindowProcBits);
typedef void    (__stdcall *PFNFILLWINDOW)(HWND hwndParent, HWND hwnd, HDC hdc, HANDLE hBrush);


typedef BOOL    (__stdcall *PFNWOWGLOBALFREEHOOK)(HGLOBAL hMem);


















typedef struct tagAPFNWOWHANDLERSIN
{
    
    PFNLALLOC                           pfnLocalAlloc;
    PFNLREALLOC                         pfnLocalReAlloc;
    PFNLLOCK                            pfnLocalLock;
    PFNLUNLOCK                          pfnLocalUnlock;
    PFNLSIZE                            pfnLocalSize;
    PFNLFREE                            pfnLocalFree;
    PFNGETEXPWINVER                     pfnGetExpWinVer;
    PFNINITDLGCB                        pfnInitDlgCb;
    PFN16GALLOC                         pfn16GlobalAlloc;
    PFN16GFREE                          pfn16GlobalFree;
    PFNEMPTYCB                          pfnEmptyCB;
    PFNFINDA                            pfnFindResourceEx;
    PFNLOAD                             pfnLoadResource;
    PFNFREE                             pfnFreeResource;
    PFNLOCK                             pfnLockResource;
    PFNUNLOCK                           pfnUnlockResource;
    PFNSIZEOF                           pfnSizeofResource;
    PFNWOWWNDPROCEX                     pfnWowWndProcEx;
    PFNWOWEDITNEXTWORD                  pfnWowEditNextWord;
    PFNWOWSETFAKEDIALOGCLASS            pfnWowSetFakeDialogClass;
    PFNWOWCBSTOREHANDLE                 pfnWowCBStoreHandle;
} PFNWOWHANDLERSIN, * APFNWOWHANDLERSIN;


typedef struct tagAPFNWOWHANDLERSOUT
{
    
    DWORD                               dwBldInfo;
    PFNCSCREATEWINDOWEX                 pfnCsCreateWindowEx;
    PFNDIRECTEDYIELD                    pfnDirectedYield;
    PFNFREEDDEDATA                      pfnFreeDDEData;
    PFNGETCLASSWOWWORDS                 pfnGetClassWOWWords;
    PFNINITTASK                         pfnInitTask;
    PFNREGISTERCLASSWOWA                pfnRegisterClassWOWA;
    PFNREGISTERUSERHUNGAPPHANDLERS      pfnRegisterUserHungAppHandlers;
    PFNSERVERCREATEDIALOG               pfnServerCreateDialog;
    PFNSERVERLOADCREATECURSORICON       pfnServerLoadCreateCursorIcon;
    PFNSERVERLOADCREATEMENU             pfnServerLoadCreateMenu;
    PFNWOWCLEANUP                       pfnWOWCleanup;
    PFNWOWFINDWINDOW                    pfnWOWFindWindow;
    PFNWOWGETIDFROMDIRECTORY            pfnWOWGetIdFromDirectory;
    PFNWOWLOADBITMAPA                   pfnWOWLoadBitmapA;
    PFNWOWWAITFORMSGANDEVENT            pfnWowWaitForMsgAndEvent;
    PFNYIELDTASK                        pfnYieldTask;
    PFNGETFULLUSERHANDLE                pfnGetFullUserHandle;
    PFNGETMENUINDEX                     pfnGetMenuIndex;
    PFNWOWGETDEFWINDOWPROCBITS          pfnWowGetDefWindowProcBits;
    PFNFILLWINDOW                       pfnFillWindow;
} PFNWOWHANDLERSOUT, * APFNWOWHANDLERSOUT;























typedef DWORD VPWNDPROC;


typedef struct _WW { 
    union {
        struct { 
            
            
            
            WORD      iClass;       
            WORD      flState;      
            VPWNDPROC vpfnWndProc;  
            VPWNDPROC vpfnDlgProc;  
            
            
            
            
            
            DWORD     dwUserSrvState; 
            DWORD     dwUserSrvState2;
            DWORD     dwExStyle;
            DWORD     dwStyle;        
            HANDLE    hInstance;      
        };

        struct { 
            


            DWORD         adwWOW[0x3];
            






            DWORD         state;        
            DWORD         state2;       
            DWORD         ExStyle;      
            DWORD         style;        

            HANDLE        hModule;      

        };
    };

} WW, *PWW, **PPWW;


DWORD UserRegisterWowHandlers(APFNWOWHANDLERSIN apfnWowIn, APFNWOWHANDLERSOUT apfnWowOut);
void __stdcall RegisterWowBaseHandlers(PFNWOWGLOBALFREEHOOK pfn);

BOOL
InitTask(
    UINT dwExpWinVer,
    LPCSTR lpszAppName,
    DWORD hTaskWow,
    DWORD dwHotkey,
    DWORD idTask,
    DWORD dwX,
    DWORD dwY,
    DWORD dwXSize,
    DWORD dwYSize,
    WORD wShowWindow);

BOOL YieldTask(void);


void DirectedYield(DWORD ThreadId);
DWORD UserGetInt16State(void);

















#pragma once




































































__declspec(dllimport) void *  __cdecl _memccpy(void *, const void *, int, unsigned int);
__declspec(dllimport) void *  __cdecl memchr(const void *, int, size_t);
__declspec(dllimport) int     __cdecl _memicmp(const void *, const void *, unsigned int);





        int     __cdecl memcmp(const void *, const void *, size_t);
        void *  __cdecl memcpy(void *, const void *, size_t);
        void *  __cdecl memset(void *, int, size_t);












__declspec(dllimport) void * __cdecl memccpy(void *, const void *, int, unsigned int);
__declspec(dllimport) int __cdecl memicmp(const void *, const void *, unsigned int);



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































void UserSetLastError(DWORD dwErrCode);
void SetLastNtError(NTSTATUS);




























BOOL _cdecl VRipOutput(DWORD idErr, DWORD flags, LPSTR pszFile, int iLine, LPSTR pszFmt, ...);
BOOL        RipOutput(DWORD idErr, DWORD flags, LPSTR pszFile, int iLine, LPSTR pszErr, PEXCEPTION_POINTERS pexi);







































































































#pragma warning(error:4101)   

















typedef struct _LOCKRECORD          *PLR;
typedef struct _TL                  *PTL;
typedef struct tagWINDOWSTATION     *PWINDOWSTATION;
typedef struct tagDESKTOP           *PDESKTOP;
typedef struct tagTDB               *PTDB;
typedef struct tagSVR_INSTANCE_INFO *PSVR_INSTANCE_INFO;
typedef struct _MOVESIZEDATA        *PMOVESIZEDATA;
typedef struct tagCURSOR            *PCURSOR;
typedef struct tagPOPUPMENU         *PPOPUPMENU;
typedef struct tagQMSG              *PQMSG;
typedef struct tagWND               *PWND;
typedef struct _ETHREAD             *PETHREAD;
typedef struct tagDESKTOPINFO       *PDESKTOPINFO;
typedef struct tagDISPLAYINFO       *PDISPLAYINFO;
typedef struct tagCLIENTTHREADINFO  *PCLIENTTHREADINFO;
typedef struct tagDCE               *PDCE;
typedef struct tagSPB               *PSPB;


















































































































































































typedef struct _CAPTUREBUF {
    DWORD cbCallback;
    DWORD cbCapture;
    DWORD cCapturedPointers;
    PBYTE pbFree;
    DWORD offPointers;
    PVOID pvVirtualAddress;
} CAPTUREBUF, *PCAPTUREBUF;




typedef struct _CALLBACKSTATUS {
    DWORD retval;
    DWORD cbOutput;
    PVOID pOutput;
} CALLBACKSTATUS, *PCALLBACKSTATUS;





typedef struct _LARGE_STRING {
    ULONG Length;
    ULONG MaximumLength : 31;
    ULONG bAnsi : 1;
    PVOID Buffer;
} LARGE_STRING, *PLARGE_STRING;

typedef struct _LARGE_ANSI_STRING {
    ULONG Length;
    ULONG MaximumLength : 31;
    ULONG bAnsi : 1;
    PSTR Buffer;
} LARGE_ANSI_STRING, *PLARGE_ANSI_STRING;

typedef struct _LARGE_UNICODE_STRING {
    ULONG Length;
    ULONG MaximumLength : 31;
    ULONG bAnsi : 1;
    PWSTR Buffer;
} LARGE_UNICODE_STRING, *PLARGE_UNICODE_STRING;




__inline BOOL IsEmptyString(PVOID p, ULONG bAnsi)
{
    return (BOOL)!(bAnsi ? *(LPSTR)p : *(LPWSTR)p);
}
__inline void NullTerminateString(PVOID p, ULONG bAnsi)
{
    if (bAnsi) *(LPSTR)p = (CHAR)0; else *(LPWSTR)p = (WCHAR)0;
}
__inline UINT StringLength(PVOID p, ULONG bAnsi)
{
    return (bAnsi ? strlen((LPSTR)p) : wcslen((LPWSTR)p));
}

typedef struct _CTLCOLOR {
    COLORREF crText;
    COLORREF crBack;
    int iBkMode;
} CTLCOLOR, *PCTLCOLOR;

























typedef struct _DRAWICONEXDATA {
    HBITMAP hbmMask;
    HBITMAP hbmColor;
    int cx;
    int cy;
} DRAWICONEXDATA;















typedef struct _CALLBACKWND {
    HWND hwnd;
    PWND pwnd;
} CALLBACKWND, *PCALLBACKWND;














typedef struct _CLIENTINFO {
    DWORD               CI_flags;               
    DWORD               cSpins;
    HANDLE              hEventQueueClient;      
    DWORD               dwExpWinVer;
    DWORD               dwCompatFlags;
    DWORD               dwTIFlags;
    PDESKTOPINFO        pDeskInfo;
    ULONG               ulClientDelta;
    struct tagHOOK      *phkCurrent;
    DWORD               fsHooks;
    CALLBACKWND         CallbackWnd;
    DWORD               dwHookCurrent;
    int                 cInDDEMLCallback;
    HANDLE              hDdemlCallbackInst;
    PCLIENTTHREADINFO   pClientThreadInfo;
    DWORD               dwHookData;
    DWORD               dwKeyCache;
    BYTE                afKeyState[(32 >> 2)];
    DWORD               dwAsyncKeyCache;
    BYTE                afAsyncKeyState[(16 >> 2)];
    BYTE                afAsyncKeyStateRecentDown[(16 >> 2)];
    WORD                CodePage;








} CLIENTINFO, *PCLIENTINFO;















































typedef struct tagDISPLAYRESOURCE {
    WORD cyThunb;
    WORD cxThumb;
    WORD xCompressIcon;
    WORD yCompressIcon;
    WORD xCompressCursor;
    WORD yCompressCursor;
    WORD yKanji;
    WORD cxBorder;
    WORD cyBorder;
} DISPLAYRESOURCE, *PDISPLAYRESOURCE;







typedef DWORD  ICH;
typedef ICH *LPICH;

typedef struct _PROPSET {
    HANDLE hData;
    ATOM atom;
} PROPSET, *PPROPSET;

































typedef struct tagEVENT_PACKET {
    DWORD EventType;    
    WORD  fSense;       
    WORD  cbEventData;  
    DWORD Data;         
} EVENT_PACKET, *PEVENT_PACKET;
























































































typedef struct {
    POINT point1;
    POINT point2;
    POINT point3;
    POINT point4;
    POINT point5;
} POINT5, *LPPOINT5;

typedef struct {
    DWORD dwRecipients;
    DWORD dwFlags;
} BROADCASTSYSTEMMSGPARAMS, *LPBROADCASTSYSTEMMSGPARAMS;















































































































typedef struct _PFNCLIENT {
    PROC pfnScrollBarWndProc;       
    PROC pfnTitleWndProc;
    PROC pfnMenuWndProc;
    PROC pfnDesktopWndProc;
    PROC pfnDefWindowProc;



    PROC pfnButtonWndProc;
    PROC pfnComboBoxWndProc;
    PROC pfnComboListBoxProc;
    PROC pfnDialogWndProc;
    PROC pfnEditWndProc;
    PROC pfnListBoxWndProc;
    PROC pfnMDIClientWndProc;
    PROC pfnStaticWndProc;






    PROC pfnHkINLPCWPSTRUCT;    
    PROC pfnHkINLPCWPRETSTRUCT; 
    PROC pfnDispatchHook;
    PROC pfnDispatchMessage;
    PROC pfnMB_DlgProc;
    PROC pfnMDIActivateDlgProc;
} PFNCLIENT, *PPFNCLIENT;




typedef struct tagWND *PWND;
typedef struct tagQ *PQ;
typedef struct tagTHREADINFO *PTHREADINFO;
typedef struct tagPROCESSINFO *PPROCESSINFO;

struct HQ__ { int unused; }; typedef struct HQ__ *HQ;

typedef LONG (__stdcall *WNDPROC_PWND)(PWND, UINT, DWORD, LONG);
typedef LONG (__stdcall *WNDPROC_PWNDEX)(PWND, UINT, DWORD, LONG, DWORD);
typedef BOOL (__stdcall *WNDENUMPROC_PWND)(PWND, LPARAM);
































typedef struct tagOEMBITMAPINFO
{
    int     x;
    int     y;
    int     cx;
    int     cy;
} OEMBITMAPINFO, *POEMBITMAPINFO;




























































































typedef struct tagOEMINFO {

    OEMBITMAPINFO bm[68];
    UINT          cyPixelsPerInch;    
    WORD          DispDrvExpWinVer;   
    BYTE          Planes;             
    BYTE          BitsPixel;          
    WORD          BitCount;           

    UINT          cxPixelsPerInch;    
    int           fMouse;             

}   OEMINFO, *POEMINFO;






























typedef struct tagSERVERINFO {      
    UINT RipFlags;                  

    DWORD cHandleEntries;           

    






    WNDPROC_PWNDEX mpFnidPfn[32]; 
    WNDPROC_PWND aStoCidPfn[(0x0000029E - 0x0000029A) + 1];

    
    WORD mpFnid_serverCBWndProc[(0x000002B4 - 0x0000029A) + 1];

    


    struct _PFNCLIENT apfnClientA;
    struct _PFNCLIENT apfnClientW;

    DWORD dwDebugErrorLevel;

    




    int aiSysMet[76];
    COLORREF argbSystem[(24+1)];
    POINT ptCursor;
    DWORD cbHandleTable;
    int nEvents;

    OEMINFO    oemInfo;
    int gclBorder;              

    UINT dtScroll;
    UINT dtLBSearch;
    UINT dtCaretBlink;
    BOOL fSnapTo;
    UINT ucWheelScrollLines;    

    


    BOOL fPaletteDisplay;

    


    ATOM atomSysClass[20];   

    DWORD dwDefaultHeapBase;            
    DWORD dwDefaultHeapSize;


    int  wMaxLeftOverlapChars;
    int  wMaxRightOverlapChars;

    RECT rcWork;

    UINT uiShellMsg;         
    


    int cxSysFontChar;
    int cySysFontChar;
    int cxMsgFontChar;
    int cyMsgFontChar;
    TEXTMETRIC tmSysFont;

    UINT wMaxBtnSize;   
    DWORD mpAllMBbtnStringsToSTR[9];  
    DWORD AllMBbtnStrings[9]; 
    WCHAR szOK[10];
    WCHAR szCANCEL[15];
    WCHAR szYES[10];
    WCHAR szNO[10];
    WCHAR szABORT[15];
    WCHAR szRETRY[15];
    WCHAR szIGNORE[15];
    WCHAR szCLOSE[15];
    WCHAR szHELP[15];

    


    ATOM atomIconSmProp;
    ATOM atomIconProp;
    HICON hIconSmWindows;
    HICON hIcoWindows;
    HFONT hCaptionFont;
    HFONT hMsgFont;

    int cntMBox;

    ATOM atomContextHelpIdProp;

    DWORD dwKeyCache;
    DWORD dwAsyncKeyCache;
} SERVERINFO, *PSERVERINFO;




typedef struct _WNDMSG {
    UINT maxMsgs;
    BYTE *abMsgs;
} WNDMSG, *PWNDMSG;

typedef struct tagSHAREDINFO {
    struct tagSERVERINFO  *psi;
    struct _HANDLEENTRY   *aheList;   

    



    LPWSTR pszDllList;

    WNDMSG awmControl[0x000002B4 - 0x0000029A + 1];

    WNDMSG DefWindowMsgs;
    WNDMSG DefWindowSpecMsgs;
} SHAREDINFO, *PSHAREDINFO;

typedef struct _USERCONNECT {
      ULONG ulVersion;
     ULONG ulCurrentVersion;
     SHAREDINFO siClient;
} USERCONNECT, *PUSERCONNECT;
























typedef struct tagGETCLIPBDATA {

    UINT   uFmtRet;          
    BOOL   fGlobalHandle;    
    HANDLE hLocale;          

} GETCLIPBDATA, *PGETCLIPBDATA;





typedef struct tagSETCLIPBDATA {

    BOOL fGlobalHandle;      
    BOOL fIncSerialNumber;   

} SETCLIPBDATA, *PSETCLIPBDATA;






typedef struct _HEAD {
    HANDLE h;
    DWORD cLockObj;
} HEAD, *PHEAD;

typedef struct _SHROBJHEAD {
    HEAD;
    PDESKTOP rpdesk;
    PBYTE pSelf;
} SHROBJHEAD, *PSHROBJHEAD;

typedef struct _THROBJHEAD {
    SHROBJHEAD;
    PTHREADINFO pti;
} THROBJHEAD, *PTHROBJHEAD;

typedef struct _PROCOBJHEAD {
    SHROBJHEAD;
    struct tagPROCESSINFO *ppi;
    DWORD hTaskWow;
} PROCOBJHEAD, *PPROCOBJHEAD;

















typedef struct _HANDLEENTRY {
    PHEAD   phead;                  
    PVOID   pOwner;                 
    BYTE    bType;                  
    BYTE    bFlags;                 
    WORD    wUniq;                  

    PLR     plr;                    

} HANDLEENTRY, *PHE;






















__inline HANDLE DebugPtoHq(HANDLE p)
{
    if (p == ((void *)0)) {
        do { if (!(0 && "PtoHq received NULL handle")) { do { if (VRipOutput(0, (0x10000000) | 0x00010000, "..\\..\\..\\inc\\user.h", 1200, "Assertion failed: " "0 && \"PtoHq received NULL handle\"")) { DbgBreakPoint(); } } while (0); } } while (0);
        return ((void *)0);
    }

    return ((PHEAD) p)->h;
}









































typedef struct _CALLPROCDATA {
    THROBJHEAD      head;
    struct _CALLPROCDATA *pcpdNext;
    DWORD           pfnClientPrevious;
    WORD            wType;
} CALLPROCDATA, *PCALLPROCDATA;




































typedef struct tagCOMMON_WNDCLASS
{
    UINT        style;
    WNDPROC_PWND lpfnWndProc;       
    int         cbclsExtra;
    int         cbwndExtra;
    HANDLE      hModule;
    struct tagCURSOR *spicn;
    struct tagCURSOR *spcur;
    HBRUSH      hbrBackground;
    LPWSTR      lpszMenuName;
    LPSTR       lpszAnsiClassName;
    struct tagCURSOR *spicnSm;
} COMMON_WNDCLASS;





typedef struct tagCLSMENUNAME
{
    LPSTR               pszClientAnsiMenuName;
    LPWSTR              pwszClientUnicodeMenuName;
    PUNICODE_STRING     pusMenuName;
} CLSMENUNAME, *PCLSMENUNAME;









typedef struct tagCLS {
    
    struct tagCLS *pclsNext;
    ATOM        atomClassName;
    WORD        fnid;               
                                    
    PVOID       hheapDesktop;       
    struct tagDESKTOP *rpdeskParent;
    struct tagDCE *pdce;            
    int         cWndReferenceCount; 

    DWORD       flags;              
    LPSTR       lpszClientAnsiMenuName;     
    LPWSTR      lpszClientUnicodeMenuName;  

    



    DWORD       adwWOW[2];
                                    
    DWORD       hTaskWow;           
    PCALLPROCDATA  spcpdFirst;      
    struct tagCLS *pclsBase;        
    struct tagCLS *pclsClone;       

    PROC        lpfnWorker;         

    COMMON_WNDCLASS;
    



} CLS, *PCLS, *LPCLS, **PPCLS;














typedef struct tagSBDATA {
    int    posMin;
    int    posMax;
    int    page;
    int    pos;
} SBDATA, *PSBDATA;





typedef struct tagSBINFO {
    int WSBflags;
    SBDATA Horz;
    SBDATA Vert;
} SBINFO, *PSBINFO;

typedef struct tagWND {          
    THROBJHEAD    head;

    struct tagWND *spwndNext;    
    struct tagWND *spwndParent;  
    struct tagWND *spwndChild;   
    struct tagWND *spwndOwner;   

    PVOID         pwo;          

    RECT          rcWindow;     
    RECT          rcClient;     

    WNDPROC_PWND lpfnWndProc;   

    PCLS          pcls;         
    int           cbwndExtra;   

    HRGN          hrgnUpdate;   

    struct tagWND *spwndLastActive; 
    struct tagPROP *ppropList;  
    PSBINFO        pSBInfo;   

    struct tagMENU *spmenuSys;  
    struct tagMENU *spmenu;     
    LARGE_UNICODE_STRING strName;

    


    BYTE          bFullScreen;  
    BYTE          cDC;          
    WORD          fnid;         
                                
    DWORD         dwExpWinVer;  

    DWORD         dwUserData;   
    HDC           hdcOwn;
    HRGN          hrgnClip;     
    int           iHungRedraw;  




    WW;         
                
                
                
} WND;






typedef struct tagPROP {        
    struct tagPROP *ppropNext;
    HANDLE hData;
    ATOM atomKey;
    UINT fs;
} PROP, *PPROP;





















typedef struct tagHOOK {   
    THROBJHEAD      head;
    struct tagHOOK  *sphkNext;
    int             iHook;              
    DWORD           offPfn;
    UINT            flags;              
    int             ihmod;
    PTHREADINFO     ptiHooked;






} HOOK, *PHOOK;








































typedef struct tagNAMELIST {
    DWORD cb;
    DWORD cNames;
    WCHAR awchNames[1];
} NAMELIST, *PNAMELIST;












typedef struct tagPHYSICAL_DEV_INFO {

    WCHAR     szNtDeviceName[16]; 
    PVOID     pDeviceHandle;      
    PVOID     pFileObject;        
    UCHAR     DevOwned;           
    ULONG     cOwnCount;          
    DWORD     stateFlags;         
    PDEVMODEW pCurrentDevmode;    
    ULONG     cbdevmodeInfo;      
    PDEVMODEW devmodeInfo;        

} PHYSICAL_DEV_INFO, *PPHYSICAL_DEV_INFO;








typedef struct tagDISPLAYINFO {

    HDC                hdcScreen;        
    HDC                hdcGray;          
    HDC                hdcBits;          
    HBITMAP            hbmGray;          
    RECT               rcScreen;         
    RECT               rcPrimaryScreen;  
    int                cxGray;           
    int                cyGray;           
    PDCE               pdceFirst;        
    PSPB               pspbFirst;        
    HANDLE             hDev;             
    LPVOID             pDevLock;         
    PPHYSICAL_DEV_INFO pDevInfo;         

    UINT               cxPixelsPerInch;  
    UINT               cyPixelsPerInch;  
    UINT               cPlanes;          
    UINT               cBitsPixel;       

} DISPLAYINFO, *PDISPLAYINFO;













typedef struct tagDESKTOPINFO {

    PVOID                 pvDesktopBase;          
    PVOID                 pvDesktopLimit;         
    struct tagWND         *spwnd;                 
    DWORD                 fsHooks;                
    struct tagHOOK        *asphkStart[(12 - (-1) + 1)]; 
    struct tagWND         *spwndShell;            
    DWORD                 idShellProcess;         
    struct tagWND         *spwndBkGnd;            
    struct tagWND         *spwndTaskman;          
    struct tagWND         *spwndProgman;          
    int                   nShellHookPwnd;         
    struct tagWND         **papwndShellHook;      

} DESKTOPINFO, *PDESKTOPINFO;















typedef struct tagCURSORDATA {
    DWORD   CURSORF_flags;
    LPWSTR  lpName;
    LPWSTR  lpModName;
    WORD    rt;
    WORD    dummy;
    DWORD   bpp;                
    DWORD   cx;                 
    DWORD   cy;                 
    SHORT   xHotspot;           
    SHORT   yHotspot;           
    HBITMAP hbmMask;            
    HBITMAP hbmColor;           

    int     cpcur;              
    int     cicur;              
    struct  tagCURSOR **aspcur; 
    DWORD   *aicur;             
    PJIF    ajifRate;           
    int     iicur;              
    DWORD   fl;                 
} CURSORDATA, *PCURSORDATA;


typedef struct tagCURSORFIND {

    HCURSOR hcur;
    DWORD   rt;
    DWORD   cx;
    DWORD   cy;
    DWORD   bpp;

} CURSORFIND, *PCURSORFIND;







































































































































































































































































































typedef struct tagITEM {
    UINT    fType;          
    UINT    fState;         
    UINT    wID;
    struct tagMENU *spSubMenu;  
    HANDLE  hbmpChecked;    
    HANDLE  hbmpUnchecked;   



    HANDLE  hTypeData;     
                            
                            
                            
    DWORD   cch;                
    DWORD   dwItemData;
    DWORD   xItem;
    DWORD   yItem;
    DWORD   cxItem;

    DWORD   cyItem;
    DWORD   dxTab;
    DWORD   ulX;                
    DWORD   ulWidth;            





} ITEM, *PITEM, *LPITEM;




typedef struct tagMENU {
    PROCOBJHEAD     head;
    DWORD           fFlags;         
    int             iItem;          

    int             iPopupMenuItem; 

    UINT            cAlloced;       
    UINT            cItems;         

    DWORD           cxMenu;
    DWORD           cyMenu;
    struct tagWND *spwndNotify;     
    PITEM           rgItems;        
    DWORD           dwContextHelpId;




} MENU, *PMENU;









enum {
        TYPE_NORMAL,
        TYPE_POPUP,
        TYPE_TCARD
};

typedef struct tagDLGENUMDATA {
    PWND    pwndDialog;
    PWND    pwndControl;
    POINT   ptCurHelp;
} DLGENUMDATA, *PDLGENUMDATA;

BOOL __stdcall EnumPwndDlgChildProc(PWND pwnd, LPARAM lParam);
BOOL FIsParentDude(PWND pwnd);













typedef struct tagSBCALC {
    SBDATA;               
    int    pxTop;
    int    pxBottom;
    int    pxLeft;
    int    pxRight;
    int    cpxThumb;
    int    pxUpArrow;
    int    pxDownArrow;
    int    pxStart;         
    int    pxThumbBottom;
    int    pxThumbTop;
    int    cpx;
    int    pxMin;
} SBCALC, *PSBCALC;

typedef struct tagSBTRACK {
    DWORD  fHitOld : 1;
    DWORD  fTrackVert : 1;
    DWORD  fCtlSB : 1;
    DWORD  fTrackRecalc: 1;
    PWND   spwndTrack;
    PWND   spwndSB;
    PWND   spwndSBNotify;
    RECT   rcTrack;
    void   (*xxxpfnSB)(PWND, UINT, DWORD, LONG, PSBCALC);
    UINT   cmdSB;
    UINT   hTimerSB;
    int    dpxThumb;        
    int    pxOld;           
    int    posOld;
    int    posNew;
    int    nBar;
    PSBCALC pSBCalc;
} SBTRACK, *PSBTRACK;































































typedef struct _DLG {
    WNDPROC lpfnDlg;
    DWORD   flags;          
    int     cxChar;
    int     cyChar;
    HWND    hwndFocusSave;
    UINT    fEnd      : 1;
    UINT    fDisabled : 1;
    int     result;         
    HANDLE  hData;          
    HFONT   hUserFont;      
    HWND    hwndSysModalSave;  
} DLG, *PDLG;

typedef struct _DIALOG {
    WND     wnd;
    long    resultWP;       
    PDLG    pdlg;
    long    unused;         
    BYTE    reserved[30 - sizeof(long) - sizeof(PDLG) - sizeof(long)];
} DIALOG, *PDIALOG;
















































typedef struct tagCLIENTTHREADINFO {
    UINT        CTIF_flags;
    WORD        fsChangeBits;           
    WORD        fsWakeBits;             
    WORD        fsWakeBitsJournal;      
    WORD        fsWakeMask;             
    LONG        timeLastRead;           
} CLIENTTHREADINFO, *PCLIENTTHREADINFO;













UINT    CalcWakeMask(UINT wMsgFilterMin, UINT wMsgFilterMax);

typedef struct tagCARET {
    struct tagWND *spwnd;
    UINT    fVisible : 1;
    UINT    fOn      : 1;
    int     iHideLevel;
    int     x;
    int     y;
    int     cy;
    int     cx;
    HBITMAP hBitmap;
    UINT    hTimer;
    DWORD   tid;
} CARET, *PCARET;

























































































                                                
                                                
                                                
                                                
                                                
                                                
                                                


                                                
                                                
                                                
                                                





















typedef struct tagSBWND {
    WND    wnd;
    BOOL   fVert;
    UINT   wDisableFlags;       
    SBCALC SBCalc;
} SBWND, *PSBWND, *LPSBWND;






typedef struct tagSNDMSGTIMEOUT {   
    UINT fuFlags;                       
    UINT uTimeout;                      
    UINT lSMTOReturn;                   
    UINT lSMTOResult;                   
} SNDMSGTIMEOUT, *PSNDMSGTIMEOUT;




typedef struct tagBUTN {
    PWND spwnd;
    UINT buttonState;   
    HANDLE hFont;
    HANDLE hImage;
} BUTN, *PBUTN;

typedef struct tagBUTNWND {
    WND wnd;
    PBUTN pbutn;
} BUTNWND, *PBUTNWND;













































typedef struct _MSGBOXDATA {            
    MSGBOXPARAMS;                       
    PWND     pwndOwner;                 
    WORD     wLanguageId;
    INT    * pidButton;                 
    LPWSTR * ppszButtonText;            
    UINT     cButtons;                  
    UINT     DefButton;
    UINT     CancelId;
} MSGBOXDATA, *PMSGBOXDATA, *LPMSGBOXDATA;

LPWSTR MB_GetString(UINT wBtn);
int    SoftModalMessageBox(LPMSGBOXDATA lpmb);

DWORD GetContextHelpId(PWND pwnd);

PITEM  MNLookUpItem(PMENU pMenu, UINT wCmd, BOOL fByPosition, PMENU *ppMenuItemIsOn);
BOOL _MNCanClose(PWND pwnd);
PMENU GetSysMenuHandle(PWND pwnd);
PWND    GetPrevPwnd(PWND pwndList, PWND pwndFind);
BOOL   _RegisterServicesProcess(DWORD dwProcessId);

BOOL _FChildVisible(PWND pwnd);




BOOL RtlWCSMessageWParamCharToMB(DWORD msg, PDWORD pWParam);
BOOL RtlMBMessageWParamCharToWCS(DWORD msg, PDWORD pWParam);

void RtlInitLargeAnsiString(PLARGE_ANSI_STRING plstr, LPCSTR psz,
        UINT cchLimit);
void RtlInitLargeUnicodeString(PLARGE_UNICODE_STRING plstr, LPCWSTR psz,
        UINT cchLimit);

DWORD RtlGetExpWinVer(HANDLE hmod);














DWORD __stdcall fnHkINLPRECT(DWORD nCode,
        DWORD wParam, LPRECT lParam,
        DWORD xParam, DWORD xpfnProc);
DWORD __stdcall fnHkINDWORD(DWORD nCode,
        DWORD wParam, LONG lParam,
        DWORD xParam, DWORD xpfnProc, LPDWORD lpFlags);
DWORD __stdcall fnHkINLPMSG(DWORD nCode,
        DWORD wParam, LPMSG lParam,
        DWORD xParam, DWORD xpfnProc, BOOL bAnsi, LPDWORD lpFlags);
DWORD __stdcall fnHkOPTINLPEVENTMSG(DWORD nCode,
        DWORD wParam, LPEVENTMSGMSG lParam,
        DWORD xParam, DWORD xpfnProc);
DWORD __stdcall fnHkINLPDEBUGHOOKSTRUCT(DWORD nCode,
        DWORD wParam, LPDEBUGHOOKINFO lParam,
        DWORD xParam, DWORD xpfnProc);
DWORD __stdcall fnHkINLPMOUSEHOOKSTRUCT(DWORD nCode,
        DWORD wParam, LPMOUSEHOOKSTRUCT lParam,
        DWORD xParam, DWORD xpfnProc, LPDWORD lpFlags);
DWORD __stdcall fnHkINLPCBTACTIVATESTRUCT(DWORD nCode,
        DWORD wParam, LPCBTACTIVATESTRUCT lParam,
        DWORD xParam, DWORD xpfnProc);
DWORD __stdcall fnHkINLPCBTCSTRUCT(UINT msg,
        DWORD wParam, LPCBT_CREATEWND pcbt,
        DWORD xpfnProc, BOOL bAnsi);
DWORD __stdcall fnHkINLPCBTMDICCSTRUCT(UINT msg,
        DWORD wParam, LPCBT_CREATEWND pcbt,
        DWORD xpfnProc, BOOL bAnsi);








extern HBRUSH ahbrSystem[];
extern HBRUSH   ghbrWhite;
extern HBRUSH   ghbrBlack;
extern HBRUSH   ghbrGray;


DWORD GetCPD(PVOID pWndOrCls, DWORD options, DWORD dwData);

BOOL TestWindowProcess(PWND pwnd);
DWORD GetAppCompatFlags(PTHREADINFO pti);
PWND _GetDesktopWindow(void);








PVOID _fastcall HMValidateHandle(HANDLE h, BYTE btype);
PVOID _fastcall HMValidateHandleNoRip(HANDLE h, BYTE btype);

DWORD   MapClientNeuterToClientPfn(PCLS pcls, DWORD dw, BOOL bAnsi);
DWORD   MapServerToClientPfn(DWORD dw, BOOL bAnsi);

BOOL IsSysFontAndDefaultMode(HDC hdc);
int GetCharDimensions(HDC hDC, TEXTMETRICW *lpTextMetrics, LPINT lpcy);
int GetWindowBorders(LONG lStyle, DWORD dwExStyle, BOOL fWindow, BOOL fClient);
PWND SizeBoxHwnd(PWND pwnd);
WORD  _GetWindowWord(PWND pwnd, int index);
DWORD _GetWindowLong(PWND pwnd, int index, BOOL bAnsi);
BOOL _GetClientRect(PWND pwnd, LPRECT prc);
void GetRealClientRect(PWND pwnd, LPRECT prc, UINT uFlags);
BOOL _GetWindowRect(PWND pwnd, LPRECT prc);
PWND _GetLastActivePopup(PWND pwnd);
PWND GetTopLevelTiled(PWND pwnd);
BOOL _IsChild(PWND pwndParent, PWND pwnd);
BOOL _AdjustWindowRectEx(LPRECT lprc, LONG style, BOOL fMenu, DWORD dwExStyle);
BOOL NeedsWindowEdge(DWORD dwStyle, DWORD dwExStyle, BOOL fNewApp);
BOOL _ClientToScreen(PWND pwnd, PPOINT ppt);
BOOL _ScreenToClient(PWND pwnd, PPOINT ppt);
int _MapWindowPoints(PWND pwndFrom, PWND pwndTo, LPPOINT lppt, DWORD cpt);
BOOL _IsWindowVisible(PWND pwnd);
BOOL _IsDescendant(PWND pwndParent, PWND pwndChild);
BOOL IsVisible(PWND pwnd);
PWND _GetWindow(PWND pwnd, UINT cmd);
PWND _GetParent(PWND pwnd);
int    FindNCHit(PWND pwnd, LONG lPt);
SHORT  _GetKeyState(int vk);
PHOOK  _PhkNext(PHOOK phk);

PPROP _FindProp(PWND pwnd, LPWSTR pszKey, BOOL fInternal);
HANDLE _GetProp(PWND pwnd, LPWSTR pszKey, BOOL fInternal);
BOOL _HasCaptionIcon(PWND pwnd);
PWND GetTopLevelWindow(PWND pwnd);

BOOL _SBGetParms(PWND pwnd, int code, PSBDATA pw, LPSCROLLINFO lpsi);
BOOL PSMGetTextExtent(HDC hdc, LPWSTR lpstr, int cch, PSIZE psize);

LONG   GetPrefixCount(LPCWSTR lpstr, int cb, LPWSTR lpstrCopy, int cbCopy);
PMENU _GetSubMenu(PMENU pMenu, int nPos);
DWORD _GetMenuDefaultItem(PMENU pMenu, BOOL fByPosition, UINT uFlags);
UINT _GetMenuState(PMENU pMenu, UINT wID, UINT dwFlags);

BOOL __stdcall CopyInflateRect(LPRECT prcDst, const RECT *prcSrc, int cx, int cy);
BOOL __stdcall CopyOffsetRect(LPRECT prcDst, const RECT *prcSrc, int cx, int cy);

DWORD FindCharPosition(LPWSTR lpString, WCHAR ch);
LPWSTR  TextAlloc(LPCWSTR lpsz);
UINT  TextCopy(PLARGE_UNICODE_STRING pstr, LPWSTR lpstr, UINT size);
DWORD wcsncpycch(LPWSTR pwsDest, LPCWSTR pwszSrc, DWORD cch);
DWORD strncpycch(LPSTR pszDest, LPCSTR pszSrc, DWORD cch);



BOOL DrawFrame(HDC hdc, LPRECT prect, int clFrame, int cmd);
void DrawPushButton(HDC hdc, LPRECT lprc, UINT state, UINT flags);
void ClientFrame(HDC hDC, const RECT *pRect, HBRUSH hBrush, DWORD patOp);

void PSMTextOut( HDC hdc, int xLeft, int yTop,
    LPWSTR lpsz, int cch);

HBITMAP OwnerLoadBitmap(
    HANDLE hInstLoad,
    LPWSTR lpName,
    HANDLE hOwner);

PCURSOR ClassSetSmallIcon(
    PCLS pcls,
    PCURSOR pcursor,
    BOOL fServerCreated);










void KernelBP(void);








typedef LONG (__stdcall *CFNSCSENDMESSAGE)(HWND, UINT, DWORD, LONG,
        DWORD, DWORD, BOOL);












__inline void DebugUserGlobalLock(HANDLE h, void ** p)
{
    

do { if (!("Global lock on bad handle" && !(h && (GlobalFlags(h) == 0x8000)))) { do { if (VRipOutput(0, (0x10000000) | 0x00010000, "..\\..\\..\\client\\usercli.h", 76, "Assertion failed: " "\"Global lock on bad handle\" && !(h && (GlobalFlags(h) == GMEM_INVALID_HANDLE))")) { DbgBreakPoint(); } } while (0); } } while (0);

    *p = GlobalLock(h);
}

__inline void DebugUserGlobalUnlock(HANDLE h)
{
    

do { if (!("GlobalUnlock on bad handle" && !(GlobalFlags(h) == 0x8000))) { do { if (VRipOutput(0, (0x10000000) | 0x00010000, "..\\..\\..\\client\\usercli.h", 85, "Assertion failed: " "\"GlobalUnlock on bad handle\" && !(GlobalFlags(h) == GMEM_INVALID_HANDLE)")) { DbgBreakPoint(); } } while (0); } } while (0);

    GlobalUnlock((HANDLE) h);
}

__inline HANDLE DebugUserGlobalFree(HANDLE h)
{
    

do { if (!("GlobalFree on bad handle" && !(GlobalFlags(h) == 0x8000))) { do { if (VRipOutput(0, (0x10000000) | 0x00010000, "..\\..\\..\\client\\usercli.h", 94, "Assertion failed: " "\"GlobalFree on bad handle\" && !(GlobalFlags(h) == GMEM_INVALID_HANDLE)")) { DbgBreakPoint(); } } while (0); } } while (0);

    return GlobalFree(h);
}

























































typedef int (__stdcall *GENERICPROC)();





































































































































typedef struct _IN_STRING {
    UNICODE_STRING strCapture;
    PUNICODE_STRING pstr;
    BOOL fAllocated;
} IN_STRING, *PIN_STRING;

typedef struct _LARGE_IN_STRING {
    LARGE_UNICODE_STRING strCapture;
    PLARGE_UNICODE_STRING pstr;
    BOOL fAllocated;
} LARGE_IN_STRING, *PLARGE_IN_STRING;





typedef struct _LOOKASIDE {
    PVOID LookasideBase;
    PVOID LookasideBounds;
    ZONE_HEADER LookasideZone;
    DWORD EntrySize;

    ULONG AllocHiWater;
    ULONG AllocCalls;
    ULONG AllocSlowCalls;
    ULONG DelCalls;
    ULONG DelSlowCalls;

} LOOKASIDE, *PLOOKASIDE;

NTSTATUS InitLookaside(PLOOKASIDE pla, DWORD cbEntry, DWORD cEntries);
PVOID AllocLookasideEntry(PLOOKASIDE pla);
void FreeLookasideEntry(PLOOKASIDE pla, PVOID pEntry);




































typedef LONG (__stdcall *TABTEXTCALLBACK)(HDC, int, int, LPCSTR, int, int,
        LPINT, int, BOOL, int, int);
typedef void (__stdcall  *LPFNTEXTOUT)(HDC, int, int, LPCSTR, int);
typedef LRESULT ( *EDITCHARSETPROC)(struct tagED *, UINT, ...);

typedef struct tagCHARSETBLOCK
{
    UINT            iCharset;   
    HANDLE          hlibLPK;    
    EDITCHARSETPROC lpfnEditCall;
    TABTEXTCALLBACK lpfnTabTextCall;
    FARPROC         lpfnDrawTextCall;
    LPFNTEXTOUT     lpfnPSMTextOutCall;
} CHARSETBLOCK, *PCHARSETBLOCK;

extern PCHARSETBLOCK gpCharset;
extern UINT gnCharset;










































































typedef struct tagCBox {
    struct tagWND *spwnd;      
    struct tagWND *spwndParent;
    RECT    editrc;            

    RECT    buttonrc;          

    int     cxCombo;            
    int     cyCombo;            
    int     cxDrop;             
    int     cyDrop;             

    struct tagWND *spwndEdit;  
    struct tagWND *spwndList;  

    UINT    CBoxStyle:2;         
    UINT    fFocus:1;          
    UINT    fNoRedraw:1;       
    UINT    fMouseDown:1;      

    UINT    fButtonPressed:1; 

    UINT    fLBoxVisible:1;    
    UINT    OwnerDraw:2;       


    UINT    fKeyboardSelInListBox:1; 






    UINT    fExtendedUI:1;     


    UINT    fCase:2;

    UINT    f3DCombo:1;         
    UINT    fNoEdit:1;         


    HANDLE  hFont;             
    LONG    styleSave;         




} CBOX, *PCBOX;

typedef struct tagCOMBOWND {
    WND wnd;
    PCBOX pcbox;
} COMBOWND, *PCOMBOWND;






















































































































typedef struct tagUNDO {
    UINT    undoType;          
    PBYTE   hDeletedText;      


    ICH     ichDeleted;        
    ICH     cchDeleted;        
    ICH     ichInsStart;       

    ICH     ichInsEnd;         
} UNDO, *PUNDO;









typedef struct tagED {
    HANDLE  hText;             
    ICH     cchAlloc;          

    ICH     cchTextMax;        

    ICH     cch;               

    ICH     cLines;            

    ICH     ichMinSel;         

    ICH     ichMaxSel;         
    ICH     ichCaret;          

    ICH     iCaretLine;        



    ICH     ichScreenStart;    



    ICH     ichLinesOnScreen;  
    UINT    xOffset;           


    UINT    charPasswordChar;  



    int     cPasswordCharWidth;

    HWND    hwnd;              
    PWND    pwnd;              
    RECT    rcFmt;             
    HWND    hwndParent;        

                               



    POINT   ptPrevMouse;       


    UINT    prevKeys;          


    UINT     fSingle       : 1; 
    UINT     fNoRedraw     : 1; 
    UINT     fMouseDown    : 1; 
    UINT     fFocus        : 1; 
    UINT     fDirty        : 1; 
    UINT     fDisabled     : 1; 
    UINT     fNonPropFont  : 1; 
    UINT     fBorder       : 1; 
    UINT     fAutoVScroll  : 1; 
    UINT     fAutoHScroll  : 1; 
    UINT     fNoHideSel    : 1; 
    UINT     fKanji        : 1;
    UINT     fFmtLines     : 1; 


    UINT     fWrap         : 1; 
    UINT     fCalcLines    : 1; 


    UINT     fEatNextChar  : 1; 




    UINT     fStripCRCRLF  : 1; 



    UINT     fInDialogBox  : 1; 



    UINT     fReadOnly     : 1; 


    UINT     fCaretHidden  : 1; 



    UINT     fTrueType     : 1; 
    UINT     fAnsi         : 1; 
    UINT     fWin31Compat  : 1; 
    UINT     f40Compat     : 1; 
    UINT     fFlatBorder   : 1; 
    UINT     fSawRButtonDown : 1;
    UINT     fInitialized  : 1; 

    UINT     fUnused5      : 1; 
    UINT     fUnused4      : 1; 
    UINT     fUnused3      : 1;
    UINT     fUnused2      : 1;
    UINT     fUnused1      : 1;

    WORD    cbChar;            
    LPICH   chLines;           

    UINT    format;            


    EDITWORDBREAKPROCA lpfnNextWord;  

                               
    int     maxPixelWidth;     

    UNDO;                      

    HANDLE  hFont;             


    int     aveCharWidth;      
    int     lineHeight;        
    int     charOverhang;      
    int     cxSysCharWidth;    
    int     cySysCharHeight;   
    HWND    listboxHwnd;       

    LPINT   pTabStops;         



    LPINT   charWidthBuffer;

    BYTE    charSet;           


    HKL     hkl;               

    UINT    wMaxNegA;          
    UINT    wMaxNegAcharPos;   
    UINT    wMaxNegC;          
    UINT    wMaxNegCcharPos;   
    UINT    wLeftMargin;       
    UINT    wRightMargin;      

    ICH     ichStartMinSel;
    ICH     ichStartMaxSel;

    EDITCHARSETPROC lpfnCharset; 
    DWORD   dwForeign;           



    HANDLE  hInstance;         
    UCHAR   seed;              
    BOOL    fEncoded;          
    int     iLockLevel;        
} ED, *PED, **PPED;

typedef struct tagEDITWND {
    WND wnd;
    PED ped;
} EDITWND, *PEDITWND;







typedef struct tagBLOCK {
    ICH StPos;
    ICH EndPos;
}  BLOCK, *LPBLOCK;




typedef  struct {
    LPSTR   lpString;
    ICH     ichString;
    ICH     nCount;
    int     XStartPos;
}  STRIPINFO;
typedef  STRIPINFO  *LPSTRIPINFO;



































typedef struct _SCROLLPOS {
    INT cItems;
    UINT iPage;
    INT iPos;
    UINT fMask;
    INT iReturn;
} SCROLLPOS, *PSCROLLPOS;

typedef struct tagLBIV {
    PWND    spwndParent;    
    PWND    spwnd;          
    INT     iTop;           
    INT     iSel;           
    INT     iSelBase;       
    INT     cItemFullMax;   



    INT     cMac;           
    INT     cMax;           

    PBYTE   rgpch;          
    LPWSTR  hStrings;       
    INT     cchStrings;     
    INT     ichAlloc;       

    INT     cxChar;         
    INT     cyChar;         
    INT     cxColumn;       
    INT     itemsPerColumn; 
    INT     numberOfColumns; 
    POINT   ptPrev;         


    UINT    OwnerDraw:2;      
    UINT     fRedraw:1;      
    UINT     fDeferUpdate:1; 
    UINT    wMultiple:2;      




    UINT     fSort:1;        
    UINT     fNotify:1;      
    UINT     fMouseDown:1;   
    UINT     fCaptured:1;    
    UINT     fCaret:1;       
    UINT     fDoubleClick:1; 
    UINT     fCaretOn:1;     
    UINT     fAddSelMode:1;  
    UINT     fHasStrings:1;  



    UINT     fHasData:1;    





    UINT     fNewItemState:1; 

    UINT     fUseTabStops:1; 


    UINT     fMultiColumn:1; 
    UINT     fNoIntegralHeight:1; 


    UINT     fWantKeyboardInput:1; 



    UINT     fDisableNoScroll:1;   





    UINT    fHorzBar:1; 

    UINT    fVertBar:1; 
    UINT    fFromInsert:1;  
    UINT    fNoSel:1;

    UINT    fHorzInitialized : 1;   
    UINT    fVertInitialized : 1;   

    UINT    fSized : 1;             
    UINT    fIgnoreSizeMsg : 1;     

    UINT    fInitialized : 1;

    INT     iLastSelection; 


    INT     iMouseDown;     



    INT     iLastMouseMove; 
    


    LPINT   iTabPixelPositions; 
    HANDLE  hFont;          
    int     xOrigin;        
    int     maxWidth;       

    PCBOX   pcbox;          
    HDC     hdc;            
    DWORD   dwLocaleId;     
    int     iTypeSearch;
    LPWSTR  pszTypeSearch;
    SCROLLPOS HPos;
    SCROLLPOS VPos;
} LBIV, *PLBIV;














































typedef struct tagLBItem {
    LONG offsz;
    DWORD itemData;
} LBItem, *lpLBItem;

typedef struct tagLBODItem {
    DWORD itemData;
} LBODItem, *lpLBODItem;

typedef struct tagLBWND {
    WND wnd;
    PLBIV pLBIV;
} LBWND, *PLBWND;








typedef struct tagSTAT {
    PWND spwnd;
    union {
        HANDLE hFont;
        BOOL   fDeleteIt;
    };
    HANDLE hImage;
    UINT cicur;
    UINT iicur;
} STAT, *PSTAT;

typedef struct tagSTATWND {
    WND wnd;
    PSTAT pstat;
} STATWND, *PSTATWND;


typedef struct tagCURSORRESOURCE {
    WORD xHotspot;
    WORD yHotspot;
    BITMAPINFOHEADER bih;
} CURSORRESOURCE, *PCURSORRESOURCE;







DWORD  Event(PEVENT_PACKET pep);
PVOID CsValidateInstance(HANDLE hInst);













typedef struct _RESCALLS {
    PFNFINDA    pfnFindResourceExA;
    PFNFINDW    pfnFindResourceExW;
    PFNLOAD     pfnLoadResource;
    PFNLOCK     pfnLockResource;
    PFNUNLOCK   pfnUnlockResource;
    PFNFREE     pfnFreeResource;
    PFNSIZEOF   pfnSizeofResource;
} RESCALLS;
typedef RESCALLS *PRESCALLS;

BOOL  __stdcall _FreeResource(HANDLE hResData, HINSTANCE hModule);
LPSTR __stdcall _LockResource(HANDLE hResData, HINSTANCE hModule);
BOOL  __stdcall _UnlockResource(HANDLE hResData, HINSTANCE hModule);
















typedef BITMAPINFO        *UPBITMAPINFO;
typedef BITMAPINFOHEADER  *UPBITMAPINFOHEADER;
typedef BITMAPCOREHEADER  *UPBITMAPCOREHEADER;



HANDLE LocalReallocSafe(HANDLE hMem, DWORD dwBytes, DWORD dwFlags, PPED pped);

HLOCAL __stdcall DispatchLocalAlloc(
    UINT uFlags,
    UINT uBytes,
    HANDLE hInstance);

HLOCAL __stdcall DispatchLocalReAlloc(
    HLOCAL hMem,
    UINT uBytes,
    UINT uFlags,
    HANDLE hInstance,
    PVOID* ppv);

LPVOID __stdcall DispatchLocalLock(
    HLOCAL hMem,
    HANDLE hInstance);

BOOL __stdcall DispatchLocalUnlock(
    HLOCAL hMem,
    HANDLE hInstance);

UINT __stdcall DispatchLocalSize(
    HLOCAL hMem,
    HANDLE hInstance);

HLOCAL __stdcall DispatchLocalFree(
    HLOCAL hMem,
    HANDLE hInstance);










LONG TabTextOut(HDC hdc, int x, int y, LPCWSTR lpstring, int nCount,
        int nTabPositions, LPINT lpTabPositions, int iTabOrigin, BOOL fDrawTheText);


int             RtlLoadStringOrError(HANDLE, UINT, LPTSTR, int, LPTSTR, PRESCALLS, WORD);
PCURSORRESOURCE RtlLoadCursorIconResource(HANDLE, LPHANDLE, LPCTSTR, LPTSTR, PRESCALLS, PDISPLAYINFO, PDWORD);
int             RtlGetIdFromDirectory(PBYTE, BOOL, int, int, DWORD, PDWORD);
BOOL            RtlCaptureAnsiString(PIN_STRING, LPCSTR, BOOL);
BOOL            RtlCaptureLargeAnsiString(PLARGE_IN_STRING, LPCSTR, UINT, BOOL);


PWND _fastcall ValidateHwnd(HWND hwnd);
PWND _fastcall ValidateHwndNoRip(HWND hwnd);

NTSTATUS MapDeviceName(LPCWSTR lpszDeviceName, PUNICODE_STRING pstrDeviceName, BOOL bAnsi);

PSTR ECLock(PED ped);
void ECUnlock(PED ped);
BOOL ECNcCreate(PED, PWND, LPCREATESTRUCT);
void ECInvalidateClient(PED ped, BOOL fErase);
BOOL ECCreate(PWND, PED, LONG);
void ECWord(PED, ICH, BOOL, ICH*, ICH*);
ICH  ECFindTab(LPSTR, ICH);
void ECNcDestroyHandler(PWND, PED);
BOOL ECSetText(PED, LPSTR);
void ECSetPasswordChar(PED, UINT);
ICH  ECCchInWidth(PED, HDC, LPSTR, ICH, int, BOOL);
void ECEmptyUndo(PUNDO);
void ECSaveUndo(PUNDO pundoFrom, PUNDO pundoTo, BOOL fClear);
BOOL ECInsertText(PED, LPSTR, ICH);
ICH  ECDeleteText(PED);
void ECResetTextInfo(PED ped);
void ECNotifyParent(PED, int);
void ECSetEditClip(PED, HDC, BOOL);
HDC  ECGetEditDC(PED, BOOL);
void ECReleaseEditDC(PED, HDC, BOOL);
ICH  ECGetText(PED, ICH, LPSTR, BOOL);
void ECSetFont(PED, HFONT, BOOL);
void ECSetMargin(PED, UINT, long, BOOL);
ICH  ECCopy(PED);
BOOL ECCalcChangeSelection(PED, ICH, ICH, LPBLOCK, LPBLOCK);
void ECFindXORblks(LPBLOCK, LPBLOCK, LPBLOCK, LPBLOCK);
BOOL ECIsCharNumeric(PED ped, DWORD keyPress);






UINT ECTabTheTextOut(HDC, int, int, int, int,
                     LPSTR, int, ICH, PED, int, BOOL, LPSTRIPINFO);
HBRUSH ECGetControlBrush(PED, HDC, LONG);
HBRUSH ECGetBrush(PED ped, HDC hdc);
int  ECGetCaretWidth(BOOL);
int  ECGetModKeys(int);
void ECSize( PED, LPRECT, BOOL);

ICH  MLInsertText(PED, LPSTR, ICH, BOOL);
ICH  MLDeleteText(PED);
BOOL MLEnsureCaretVisible(PED);
void MLDrawText(PED, HDC, ICH, ICH, BOOL);
void MLDrawLine(PED, HDC, int, ICH, int, BOOL);
void MLPaintABlock(PED, HDC, int, int);
int  GetBlkEndLine(int, int, BOOL  *, int, int);
void MLBuildchLines(PED, ICH, int, BOOL, PLONG, PLONG);
void MLShiftchLines(PED, ICH, int);
BOOL MLInsertchLine(PED, ICH, ICH, BOOL);
void MLSetCaretPosition(PED,HDC);
void MLIchToXYPos(PED, HDC, ICH, BOOL, LPPOINT);
int  MLIchToLine(PED, ICH);
void MLRepaintChangedSelection(PED, HDC, ICH, ICH);
void MLMouseMotion(PED, UINT, UINT, LPPOINT);
ICH  MLLine(PED, ICH);
void MLStripCrCrLf(PED);
int  MLCalcXOffset(PED, HDC, int);
BOOL MLUndo(PED);
LONG MLEditWndProc(HWND, PED, UINT, DWORD, LONG);
void MLChar(PED, DWORD, int);
void MLKeyDown(PED, UINT, int);
ICH  MLPasteText(PED);
void MLSetSelection(PED, BOOL, ICH, ICH);
LONG MLCreate(HWND, PED, LPCREATESTRUCT);
BOOL MLInsertCrCrLf(PED);
void MLSetHandle(PED, HANDLE);
LONG MLGetLine(PED, ICH, ICH, LPSTR);
ICH  MLLineIndex(PED, ICH);
void MLSize(PED, BOOL);
void MLChangeSelection(PED, HDC, ICH, ICH);
void MLSetRectHandler(PED, LPRECT);
BOOL MLExpandTabs(PED);
BOOL MLSetTabStops(PED, int, LPINT);
LONG MLScroll(PED, BOOL, int, int, BOOL);
int  MLThumbPosFromPed(PED, BOOL);
void MLUpdateiCaretLine(PED ped);
ICH  MLLineLength(PED, ICH);

void SLReplaceSel(PED, LPSTR);
BOOL SLUndo(PED);
void SLSetCaretPosition(PED, HDC);
int  SLIchToLeftXPos(PED, HDC, ICH);
void SLChangeSelection(PED, HDC, ICH, ICH);
void SLDrawText(PED, HDC, ICH);
void SLDrawLine(PED, HDC, int, int, ICH, int, BOOL);
int  SLGetBlkEnd(PED, ICH, ICH, BOOL  *);
BOOL SLScrollText(PED, HDC);
void SLSetSelection(PED,ICH, ICH);
ICH  SLInsertText(PED, LPSTR, ICH);
ICH  SLPasteText(PED);
void SLChar(PED, DWORD);
void SLKeyDown(PED, DWORD, int);
ICH  SLMouseToIch(PED, HDC, LPPOINT);
void SLMouseMotion(PED, UINT, UINT, LPPOINT);
LONG SLCreate(HWND, PED, LPCREATESTRUCT);
void SLPaint(PED, HDC);
void SLSetFocus(PED);
void SLKillFocus(PED, HWND);
LONG SLEditWndProc(HWND, PED, UINT, DWORD, LONG);
LONG EditWndProc(PWND, UINT, DWORD, LONG);



UINT HelpMenu(HWND hwnd, PPOINT ppt);























void InitClientDrawing();










BOOL IsMetaFile(HDC hdc);

void DrawDiagonal(HDC hdc, LPRECT lprc, HBRUSH hbrTL, HBRUSH hbrBR, UINT flags);
void FillTriangle(HDC hdc, LPRECT lprc, HBRUSH hbr, UINT flags);

BOOL   _ClientFreeLibrary(HANDLE hmod);
DWORD  _ClientGetListboxString(PWND pwnd, UINT msg, DWORD wParam, LPSTR lParam,
        DWORD xParam, PROC xpfn);
LPHLP  HFill(LPCSTR lpszHelp, DWORD ulCommand, DWORD ulData);



void RW_RegisterEdit(void);






































LONG __stdcall fnBITMAP( HWND hwnd, UINT msg, DWORD wParam, LONG lParam, DWORD xParam, DWORD xpfnWndProc, BOOL bAnsi);
LONG __stdcall fnCOPYGLOBALDATA( HWND hwnd, UINT msg, DWORD wParam, LONG lParam, DWORD xParam, DWORD xpfnWndProc, BOOL bAnsi);
LONG __stdcall fnFULLSCREEN( HWND hwnd, UINT msg, DWORD wParam, LONG lParam, DWORD xParam, DWORD xpfnWndProc, BOOL bAnsi);
LONG __stdcall fnHDCDWORD( HWND hwnd, UINT msg, DWORD wParam, LONG lParam, DWORD xParam, DWORD xpfnWndProc, BOOL bAnsi);
LONG __stdcall fnHFONTDWORD( HWND hwnd, UINT msg, DWORD wParam, LONG lParam, DWORD xParam, DWORD xpfnWndProc, BOOL bAnsi);
LONG __stdcall fnHFONTDWORDDWORD( HWND hwnd, UINT msg, DWORD wParam, LONG lParam, DWORD xParam, DWORD xpfnWndProc, BOOL bAnsi);
LONG __stdcall fnHRGNDWORD( HWND hwnd, UINT msg, DWORD wParam, LONG lParam, DWORD xParam, DWORD xpfnWndProc, BOOL bAnsi);
LONG __stdcall fnINCBOXSTRING( HWND hwnd, UINT msg, DWORD wParam, LONG lParam, DWORD xParam, DWORD xpfnWndProc, BOOL bAnsi);
LONG __stdcall fnINCNTOUTSTRING( HWND hwnd, UINT msg, DWORD wParam, LONG lParam, DWORD xParam, DWORD xpfnWndProc, BOOL bAnsi);
LONG __stdcall fnINCNTOUTSTRINGNULL( HWND hwnd, UINT msg, DWORD wParam, LONG lParam, DWORD xParam, DWORD xpfnWndProc, BOOL bAnsi);
LONG __stdcall fnINDEVICECHANGE( HWND hwnd, UINT msg, DWORD wParam, LONG lParam, DWORD xParam, DWORD xpfnWndProc, BOOL bAnsi);
LONG __stdcall fnINLBOXSTRING( HWND hwnd, UINT msg, DWORD wParam, LONG lParam, DWORD xParam, DWORD xpfnWndProc, BOOL bAnsi);
LONG __stdcall fnINLPCREATESTRUCT( HWND hwnd, UINT msg, DWORD wParam, LONG lParam, DWORD xParam, DWORD xpfnWndProc, BOOL bAnsi);
LONG __stdcall fnINLPDRAWITEMSTRUCT( HWND hwnd, UINT msg, DWORD wParam, LONG lParam, DWORD xParam, DWORD xpfnWndProc, BOOL bAnsi);
LONG __stdcall fnINLPDROPSTRUCT( HWND hwnd, UINT msg, DWORD wParam, LONG lParam, DWORD xParam, DWORD xpfnWndProc, BOOL bAnsi);
LONG __stdcall fnINLPMDICREATESTRUCT( HWND hwnd, UINT msg, DWORD wParam, LONG lParam, DWORD xParam, DWORD xpfnWndProc, BOOL bAnsi);
LONG __stdcall fnINPAINTCLIPBRD( HWND hwnd, UINT msg, DWORD wParam, LONG lParam, DWORD xParam, DWORD xpfnWndProc, BOOL bAnsi);
LONG __stdcall fnINPOSTEDSTRING( HWND hwnd, UINT msg, DWORD wParam, LONG lParam, DWORD xParam, DWORD xpfnWndProc, BOOL bAnsi);
LONG __stdcall fnINSIZECLIPBRD( HWND hwnd, UINT msg, DWORD wParam, LONG lParam, DWORD xParam, DWORD xpfnWndProc, BOOL bAnsi);
LONG __stdcall fnINSTRING( HWND hwnd, UINT msg, DWORD wParam, LONG lParam, DWORD xParam, DWORD xpfnWndProc, BOOL bAnsi);
LONG __stdcall fnINSTRINGNULL( HWND hwnd, UINT msg, DWORD wParam, LONG lParam, DWORD xParam, DWORD xpfnWndProc, BOOL bAnsi);
LONG __stdcall fnINWPARAMCHAR( HWND hwnd, UINT msg, DWORD wParam, LONG lParam, DWORD xParam, DWORD xpfnWndProc, BOOL bAnsi);



LONG __stdcall fnOPTOUTDWORDDWORD( HWND hwnd, UINT msg, DWORD wParam, LONG lParam, DWORD xParam, DWORD xpfnWndProc, BOOL bAnsi);
LONG __stdcall fnOUTCBOXSTRING( HWND hwnd, UINT msg, DWORD wParam, LONG lParam, DWORD xParam, DWORD xpfnWndProc, BOOL bAnsi);
LONG __stdcall fnOUTLBOXSTRING( HWND hwnd, UINT msg, DWORD wParam, LONG lParam, DWORD xParam, DWORD xpfnWndProc, BOOL bAnsi);
LONG __stdcall fnOUTSTRING( HWND hwnd, UINT msg, DWORD wParam, LONG lParam, DWORD xParam, DWORD xpfnWndProc, BOOL bAnsi);
LONG __stdcall fnPAINT( HWND hwnd, UINT msg, DWORD wParam, LONG lParam, DWORD xParam, DWORD xpfnWndProc, BOOL bAnsi);
LONG __stdcall fnSETLOCALE( HWND hwnd, UINT msg, DWORD wParam, LONG lParam, DWORD xParam, DWORD xpfnWndProc, BOOL bAnsi);
LONG __stdcall fnWMCTLCOLOR( HWND hwnd, UINT msg, DWORD wParam, LONG lParam, DWORD xParam, DWORD xpfnWndProc, BOOL bAnsi);
LONG __stdcall fnKERNELONLY( HWND hwnd, UINT msg, DWORD wParam, LONG lParam, DWORD xParam, DWORD xpfnWndProc, BOOL bAnsi);







DWORD fnHkINLPCWPSTRUCTW(PWND pwnd, UINT message, WPARAM wParam,
        LPARAM lParam, DWORD xParam);
DWORD fnHkINLPCWPSTRUCTA(PWND pwnd, UINT message, WPARAM wParam,
        LPARAM lParam, DWORD xParam);
DWORD fnHkINLPCWPRETSTRUCTW(PWND pwnd, UINT message, WPARAM wParam,
        LPARAM lParam, DWORD xParam);
DWORD fnHkINLPCWPRETSTRUCTA(PWND pwnd, UINT message, WPARAM wParam,
        LPARAM lParam, DWORD xParam);
DWORD fnHkINLPCBTCREATESTRUCT(UINT msg, DWORD wParam, LPCBT_CREATEWND pcbt,
        DWORD xpfnProc, BOOL bAnsi);
DWORD DispatchHookW(int dw, WPARAM wParam, LPARAM lParam, HOOKPROC pfn);
DWORD DispatchHookA(int dw, WPARAM wParam, LPARAM lParam, HOOKPROC pfn);
DWORD DispatchDlgProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam, WNDPROC pfn);




LONG __stdcall ButtonWndProcA(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
LONG __stdcall ButtonWndProcW(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
LONG __stdcall MenuWndProcA(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
LONG __stdcall MenuWndProcW(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
LONG __stdcall DesktopWndProcA(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
LONG __stdcall DesktopWndProcW(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
LONG __stdcall ScrollBarWndProcA(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
LONG __stdcall ScrollBarWndProcW(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
LONG __stdcall ListBoxWndProcA(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
LONG __stdcall ListBoxWndProcW(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
LONG __stdcall StaticWndProcA(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
LONG __stdcall StaticWndProcW(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
LONG __stdcall DialogWndProcA(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
LONG __stdcall DialogWndProcW(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
LONG __stdcall ComboBoxWndProcA(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
LONG __stdcall ComboBoxWndProcW(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
LONG __stdcall ComboListBoxWndProcA(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
LONG __stdcall ComboListBoxWndProcW(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
LONG __stdcall MDIClientWndProcA(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
LONG __stdcall MDIClientWndProcW(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
LONG __stdcall TitleWndProcA(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
LONG __stdcall TitleWndProcW(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
LONG __stdcall MB_DlgProcA(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
LONG __stdcall MB_DlgProcW(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
LONG __stdcall MDIActivateDlgProcA(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
LONG __stdcall MDIActivateDlgProcW(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
LONG __stdcall EditWndProcA(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
LONG __stdcall EditWndProcW(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);




LONG SendMessageWorker(PWND pwnd, UINT message, WPARAM wParam, LPARAM lParam, BOOL fAnsi);
LONG SendMessageTimeoutWorker(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam,
            UINT fuFlags, UINT uTimeout, LPDWORD lpdwResult, BOOL fAnsi);

void ClientEmptyClipboard(void);
void GetActiveKeyboardName(LPWSTR lpszName);
HANDLE OpenKeyboardLayoutFile(LPWSTR lpszKLName, UINT uFlags, PUINT poffTable, PUINT pKbdInputLocale);
void LoadPreloadKeyboardLayouts(void);
void SetWindowState(PWND pwnd, UINT flags);
void ClearWindowState(PWND pwnd, UINT flags);





LONG DispatchClientMessage(PWND pwnd, UINT message, WPARAM wParam,
        LPARAM lParam, DWORD pfn);
LONG DefWindowProcWorker(PWND pwnd, UINT message, WPARAM wParam,
        LPARAM lParam, DWORD fAnsi);
LONG ButtonWndProcWorker(PWND pwnd, UINT msg, WPARAM wParam,
        LPARAM lParam, DWORD fAnsi);
LONG ListBoxWndProcWorker(PWND pwnd, UINT msg, WPARAM wParam,
        LPARAM lParam, DWORD fAnsi);
LONG StaticWndProcWorker(PWND pwnd, UINT msg, WPARAM wParam,
        LPARAM lParam, DWORD fAnsi);
LONG ComboBoxWndProcWorker(PWND pwnd, UINT msg, WPARAM wParam,
        LPARAM lParam, DWORD fAnsi);
LONG ComboListBoxWndProcWorker(PWND pwnd, UINT msg, WPARAM wParam,
        LPARAM lParam, DWORD fAnsi);
LONG MDIClientWndProcWorker(PWND pwnd, UINT msg, WPARAM wParam,
        LPARAM lParam, DWORD fAnsi);
LONG EditWndProcWorker(PWND pwnd, UINT msg, WPARAM wParam,
        LPARAM lParam, DWORD fAnsi);
LONG DefDlgProcWorker(PWND pwnd, UINT msg, WPARAM wParam,
        LPARAM lParam, DWORD fAnsi);









LONG _SetWindowLong(
    HWND hWnd,
    int nIndex,
    LONG dwNewLong,
    BOOL bAnsi);

BOOL _GetMessage(
    LPMSG pmsg,
    HWND hwnd,
    UINT wMsgFilterMin,
    UINT wMsgFilterMax,
    BOOL bAnsi);

BOOL _PeekMessage(
    LPMSG pmsg,
    HWND hwnd,
    UINT wMsgFilterMin,
    UINT wMsgFilterMax,
    UINT wRemoveMsg,
    BOOL bAnsi);

LONG _DispatchMessage(
    const MSG *pmsg,
    BOOL bAnsi);

BOOL _PostMessage(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    BOOL bAnsi);

BOOL _SendNotifyMessage(
    HWND hWnd,
    UINT wMsg,
    DWORD wParam,
    LONG lParam,
    BOOL bAnsi);

BOOL _SendMessageCallback(
    HWND hWnd,
    UINT wMsg,
    DWORD wParam,
    LONG lParam,
    SENDASYNCPROC lpResultCallBack,
    DWORD dwData,
    BOOL bAnsi);

int _ToUnicodeEx(
    UINT wVirtKey,
    UINT wScanCode,
    PBYTE lpKeyState,
    LPWSTR pwszBuff,
    int cchBuff,
    UINT wFlags,
    HKL hkl);

BOOL _DefSetText(
    HWND hwnd,
    LPCWSTR pstr,
    BOOL bAnsi);

HCURSOR _GetCursorInfo(
    HCURSOR hcur,
    LPWSTR id,
    int iFrame,
    LPDWORD pjifRate,
    LPINT pccur);

HWND _CreateWindowEx(
    DWORD dwExStyle,
    LPCTSTR pClassName,
    LPCTSTR pWindowName,
    DWORD dwStyle,
    int x,
    int y,
    int nWidth,
    int nHeight,
    HWND hwndParent,
    HMENU hmenu,
    HANDLE hModule,
    LPVOID pParam,
    DWORD dwFlags,
    LPDWORD pWOW);

HKL _LoadKeyboardLayoutEx(
    HANDLE hFile,
    UINT offTable,
    HKL hkl,
    LPCWSTR pwszKL,
    UINT KbdInputLocale,
    UINT Flags);

DWORD _GetListboxString(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    DWORD cch,
    LPTSTR pString,
    DWORD xParam,
    DWORD xpfn,
    BOOL bAnsi);

HACCEL _CreateAcceleratorTable(
    LPACCEL lpAccel,
    INT cbElem,
    INT nElem);

BOOL _SetCursorIconData(
    HCURSOR hCursor,
    PCURSORDATA pcur,
    DWORD cbData);

HCURSOR FindExistingCursorIcon(
    LPWSTR      pszModName,
    LPCWSTR     pszResName,
    PCURSORFIND pcfSearch);

HANDLE CreateLocalMemHandle(
    HANDLE hMem);

HANDLE ConvertMemHandle(
    HANDLE hMem,
    UINT cbNULL);

BOOL FillWindow(
    HWND hwndBrush,
    HWND hwndPaint,
    HDC hdc,
    HBRUSH hbr);

HBRUSH GetControlBrush(
    HWND hwnd,
    HDC hdc,
    UINT msg);

HBRUSH GetControlColor(
    HWND hwndParent,
    HWND hwndCtl,
    HDC hdc,
    UINT msg);

HHOOK _SetWindowsHookEx(
    HANDLE hmod,
    LPTSTR pszLib,
    DWORD idThread,
    int nFilterType,
    PROC pfnFilterProc,
    BOOL bAnsi);




void InitClassOffsets(void);

DWORD _GetClassData(
    PCLS pcls,
    PWND pwnd,
    int index,
    BOOL bAnsi);

DWORD _GetClassLong(
    PWND pwnd,
    int index,
    BOOL bAnsi);




BOOL BitBltSysBmp(
    HDC hdc,
    int x,
    int y,
    UINT i);





DWORD BuildHwndList(
    HDESK hdesk,
    HWND hwndNext,
    BOOL fEnumChildren,
    DWORD idThread,
    HWND **phwndFirst);




ATOM RegisterClassExWOWA(
    PWNDCLASSEXA lpWndClass,
    LPDWORD pdwWOWstuff,
    PROC lpfnWorker,
    WORD fnid);

ATOM RegisterClassExWOWW(
    PWNDCLASSEXW lpWndClass,
    LPDWORD pdwWOWstuff,
    PROC lpfnWorker,
    WORD fnid);




int ServiceMessageBox(
    LPCWSTR pText,
    LPCWSTR pCaption,
    UINT wType,
    BOOL fAnsi);





PWND _NextControl(
    PWND pwndDlg,
    PWND pwnd,
    UINT uFlags);

PWND _PrevControl(
    PWND pwndDlg,
    PWND pwnd,
    UINT uFlags);

PWND _GetNextDlgGroupItem(
    PWND pwndDlg,
    PWND pwnd,
    BOOL fPrev);

PWND _GetNextDlgTabItem(
    PWND pwndDlg,
    PWND pwnd,
    BOOL fPrev);

PWND _GetChildControl(
    PWND pwndDlg,
    PWND pwndLevel);




BOOL FChildVisible(
    HWND hwnd);




BOOL PaintRect(
    HWND hwndBrush,
    HWND hwndPaint,
    HDC hdc,
    HBRUSH hbr,
    LPRECT lprc);




HDC _GetDCEx(
    HWND hwnd,
    HRGN hrgnClip,
    DWORD flags);



























int FindMnemChar(
    LPWSTR lpstr,
    WCHAR ch,
    BOOL fFirst,
    BOOL fPrefix);




BOOL WowGetModuleFileName(
    HMODULE hModule,
    LPWSTR pwsz,
    DWORD  cchMax);

HICON WowServerLoadCreateCursorIcon(
    HANDLE hmod,
    LPTSTR lpModName,
    DWORD dwExpWinVer,
    LPCTSTR lpName,
    DWORD cb,
    PVOID pcr,
    LPTSTR lpType,
    BOOL fClient);

HANDLE InternalCopyImage(
    HANDLE hImage,
    UINT IMAGE_flag,
    int cxNew,
    int cyNew,
    UINT LR_flags);

HMENU CreateMenuFromResource(
    LPBYTE);








typedef struct _FILEINFO {
    LPBYTE  pFileMap;
    LPBYTE  pFilePtr;
    LPBYTE  pFileEnd;
    LPCWSTR pszName;
} FILEINFO, *PFILEINFO;

HANDLE LoadCursorIconFromFileMap(
     PFILEINFO   pfi,
      LPWSTR *prt,
     DWORD       cxDesired,
     DWORD       cyDesired,
     DWORD       LR_flags,
     LPBOOL     pfAni);

DWORD GetIcoCurWidth(
    DWORD cxOrg,
    BOOL  fIcon,
    UINT  LR_flags,
    DWORD cxDesired);

DWORD GetIcoCurHeight(
    DWORD cyOrg,
    BOOL  fIcon,
    UINT  LR_flags,
    DWORD cyDesired);

DWORD GetIcoCurBpp(
    UINT LR_flags);

HICON LoadIcoCur(
    HINSTANCE hmod,
    LPCWSTR   lpName,
    LPWSTR    type,
    DWORD     cxDesired,
    DWORD     cyDesired,
    UINT      LR_flags);

HANDLE ObjectFromDIBResource(
    HINSTANCE hmodOwner,
    HINSTANCE hmod,
    LPCWSTR   lpName,
    LPWSTR    type,
    DWORD     cxDesired,
    DWORD     cyDesired,
    UINT      LR_flags);

HANDLE RtlLoadObjectFromDIBFile(
    LPCWSTR lpszName,
    DWORD   type,
    DWORD   cxDesired,
    DWORD   cyDesired,
    UINT    LR_flags);

HCURSOR LoadCursorOrIconFromFile(
    LPCWSTR pszFilename,
    BOOL    fIcon);

HBITMAP ConvertDIBBitmap(
    UPBITMAPINFOHEADER lpbih,
    DWORD              cxDesired,
    DWORD              cyDesired,
    UINT               flags,
    LPBITMAPINFOHEADER *lplpbih,
    LPSTR              *lplpBits);

HICON ConvertDIBIcon(
    LPBITMAPINFOHEADER lpbih,
    HINSTANCE          hmodOwner,
    HINSTANCE          hmod,
    LPCWSTR            lpName,
    BOOL               fIcon,
    DWORD              cxNew,
    DWORD              cyNew,
    UINT               LR_flags);

int SmartStretchDIBits(
    HDC          hdc,
    int          xD,
    int          yD,
    int          dxD,
    int          dyD,
    int          xS,
    int          yS,
    int          dxS,
    int          dyS,
    LPVOID       lpBits,
    LPBITMAPINFO lpbi,
    UINT         wUsage,
    DWORD        rop);






































LONG  xxxCBCommandHandler(PCBOX, DWORD, HWND);
long  xxxCBMessageItemHandler(PCBOX, UINT, LPVOID);
int   xxxCBDir(PCBOX, UINT, LPWSTR);
void  xxxCBPaint(PCBOX, HDC);
void  xxxCBCompleteEditWindow(PCBOX pcbox);
BOOL  xxxCBHideListBoxWindow(PCBOX pcbox, BOOL fNotifyParent, BOOL fSelEndOK);
void  xxxCBShowListBoxWindow(PCBOX pcbox, BOOL fTrack);
void xxxCBPosition(PCBOX pcbox);






long  CBNcCreateHandler(PCBOX, PWND, LPCREATESTRUCT);
long  xxxCBCreateHandler(PCBOX, PWND, LPCREATESTRUCT);
void xxxCBCalcControlRects(PCBOX pcbox, LPRECT lprcList);


void  xxxCBNcDestroyHandler(PWND, PCBOX);


void  xxxCBNotifyParent(PCBOX, SHORT);
void  xxxCBUpdateListBoxWindow(PCBOX, BOOL);



void  xxxCBInternalUpdateEditWindow(PCBOX, HDC);
void  xxxCBGetFocusHelper(PCBOX);
void  xxxCBKillFocusHelper(PCBOX);
void  xxxCBInvertStaticWindow(PCBOX,BOOL,HDC);
void  xxxCBSetFontHandler(PCBOX, HANDLE, BOOL);
void  xxxCBSizeHandler(PCBOX);
LONG  xxxCBSetEditItemHeight(PCBOX pcbox, int editHeight);






INT xxxFindString(PLBIV, LPWSTR, INT, INT, BOOL);

void  InitHStrings(PLBIV);

int   xxxLBInsertItem(PLBIV, LPWSTR, int, UINT);




BOOL  ISelFromPt(PLBIV, POINT, LPDWORD);
BOOL  IsSelected(PLBIV, INT, UINT);
void LBSetCItemFullMax(PLBIV plb);

void  xxxLBSelRange(PLBIV, INT, INT, BOOL);

INT xxxLBSetCurSel(PLBIV, INT);

INT LBoxGetSelItems(PLBIV, BOOL, INT, LPINT);

LONG  xxxLBSetSel(PLBIV, BOOL, INT);

void  xxxSetISelBase(PLBIV, INT);

void  SetSelected(PLBIV, INT, BOOL, UINT);





void xxxLBSetCaret(PLBIV plb, BOOL fSetCaret);
void  xxxCaretDestroy(PLBIV);




LONG  xxxLBCreate(PLBIV, PWND, LPCREATESTRUCT);
void  xxxDestroyLBox(PLBIV, PWND);
void  xxxLBoxDeleteItem(PLBIV, INT);

void  xxxLBoxDoDeleteItems(PLBIV);
void  xxxLBoxDrawItem(PLBIV, INT, UINT, UINT, LPRECT);





INT   LBCalcVarITopScrollAmt(PLBIV, INT, INT);

void  xxxLBoxCtlHScroll(PLBIV, INT, INT);

void  xxxLBoxCtlHScrollMultiColumn(PLBIV, INT, INT);

void  xxxLBoxCtlScroll(PLBIV, INT, INT);

void  xxxLBShowHideScrollBars(PLBIV);




INT xxxLBoxCtlDelete(PLBIV, INT);

void  xxxLBoxCtlCharInput(PLBIV, UINT, BOOL);
void  xxxLBoxCtlKeyInput(PLBIV, UINT, UINT);
void  xxxLBPaint(PLBIV, HDC, LPRECT);

BOOL xxxLBInvalidateRect(PLBIV plb, LPRECT lprc, BOOL fErase);



void  xxxAlterHilite(PLBIV, INT, INT, BOOL, INT, BOOL);

INT CItemInWindow(PLBIV, BOOL);

void  xxxCheckRedraw(PLBIV, BOOL, INT);

LPWSTR GetLpszItem(PLBIV, INT);

void  xxxInsureVisible(PLBIV, INT, BOOL);

void  xxxInvertLBItem(PLBIV, INT, BOOL);

void  xxxLBBlockHilite(PLBIV, INT, BOOL);

int   LBGetSetItemHeightHandler(PLBIV plb, UINT message, int item, UINT height);
void  LBDropObjectHandler(PLBIV, PDROPSTRUCT);
LONG  LBGetItemData(PLBIV, INT);

INT LBGetText(PLBIV, BOOL, BOOL, INT, LPWSTR);

void  xxxLBSetFont(PLBIV, HANDLE, BOOL);
int LBSetItemData(PLBIV, INT, LONG);

BOOL  LBSetTabStops(PLBIV, INT, LPINT);

void  xxxLBSize(PLBIV, INT, INT);
INT LastFullVisible(PLBIV);

INT xxxLbDir(PLBIV, UINT, LPWSTR);

INT xxxLbInsertFile(PLBIV, LPWSTR);

void  xxxNewITop(PLBIV, INT);

void  xxxNotifyOwner(PLBIV, INT);

void  xxxResetWorld(PLBIV, INT, INT, BOOL);

void  xxxTrackMouse(PLBIV, UINT, POINT);
BOOL  xxxDlgDirListHelper(PWND, LPWSTR, LPBYTE, int, int, UINT, BOOL);
BOOL  xxxDlgDirSelectHelper(PWND pwndDlg, LPWSTR pFileName, int cbFileName,
        PWND pwndListBox);
BOOL xxxLBResetContent(PLBIV plb);
void xxxLBSetRedraw(PLBIV plb, BOOL fRedraw);
int xxxSetLBScrollParms(PLBIV plb, int nCtl);
void xxxLBButtonUp(PLBIV plb, UINT uFlags);




INT CItemInWindowVarOwnerDraw(PLBIV, BOOL);

INT LBPage(PLBIV, INT, BOOL);





void  LBCalcItemRowsAndColumns(PLBIV);




BOOL  LBGetItemRect(PLBIV, INT, LPRECT);

void  LBSetVariableHeightItemHeight(PLBIV, INT, INT);

INT   LBGetVariableHeightItemHeight(PLBIV, INT);




INT  xxxLBSetCount(PLBIV, INT);

UINT LBCalcAllocNeeded(PLBIV, INT);








HWND   InternalCreateDialog(HANDLE hmod,
        LPDLGTEMPLATE lpDlgTemplate, DWORD cb,
        HWND hwndOwner , DLGPROC pfnWndProc, LONG dwInitParam,
        UINT fFlags);
int    InternalDialogBox(HANDLE hmod,
        LPDLGTEMPLATE lpDlgTemplate, DWORD cb,
        HWND hwndOwner , DLGPROC pfnWndProc, LONG dwInitParam,
        UINT fFlags);
PWND _FindDlgItem(PWND pwndParent, DWORD id);
PWND _GetDlgItem(PWND, int);
long _GetDialogBaseUnits(void);
PWND GetParentDialog(PWND pwndDialog);
LONG xxxDefDlgProc(PWND, UINT, DWORD, LONG);
void xxxRemoveDefaultButton(PWND pwndDlg, PWND pwndStart);
void xxxCheckDefPushButton(PWND pwndDlg, HWND hwndOldFocus, HWND hwndNewFocus);
PWND xxxGotoNextMnem(PWND pwndDlg, PWND pwndStart, WCHAR ch);
void DlgSetFocus(HWND hwnd);
void RepositionRect(LPRECT lprc, DWORD dwStyle, DWORD dwExStyle);
BOOL ValidateDialogPwnd(PWND pwnd);

DWORD  WOWDlgInit(HWND hwndDlg, LONG lParam);
HANDLE GetEditDS(void);
void   ReleaseEditDS(HANDLE h);




























































typedef struct tagMDI {
    UINT    cKids;
    HWND    hwndMaxedChild;
    HWND    hwndActiveChild;
    HMENU   hmenuWindow;
    UINT    idFirstChild;
    UINT    wScroll;
    LPWSTR  pTitle;
    UINT    iChildTileLevel;
} MDI, *PMDI;

typedef struct tagMDIWND {
    WND     wnd;
    UINT    dwReserved;         
    PMDI    pmdi;
} MDIWND, *PMDIWND;

typedef struct tagSHORTCREATE {
    int         cy;
    int         cx;
    int         y;
    int         x;
    LONG        style;
    HMENU       hMenu;
} SHORTCREATE, *PSHORTCREATE;

BOOL CreateMDIChild(PSHORTCREATE pcs, LPMDICREATESTRUCT pmcs, DWORD dwExpWinVerAndFlags, HMENU *phSysMenu, PWND pwndParent);
BOOL MDICompleteChildCreation(HWND hwndChild, HMENU hSysMenu, BOOL fVisible, BOOL fDisabled);



























PWND  FindPwndChild(PWND pwndMDI, UINT wChildID);
int   MakeMenuItem(LPWSTR lpOut, PWND pwnd);
void  ModifyMenuItem(PWND pwnd);
BOOL  MDIAddSysMenu(HMENU hmenuFrame, HWND hwndChild);
BOOL  MDIRemoveSysMenu(HMENU hMenuFrame, HWND hwndChild, BOOL fRedraw);
void  ShiftMenuIDs(PWND pwnd, PWND pwndVictim);
LONG  MDIActivateDlgProc(HWND, UINT, UINT, LONG);
HMENU MDISetMenu(PWND,BOOL,HMENU,HMENU);




















typedef    ATOM    LATOM;
typedef    ATOM    GATOM;


















extern RTL_CRITICAL_SECTION gcsDDEML;




























typedef struct tagCHANDLEENTRY {
   HANDLE handle;
   DWORD dwData;
} CHANDLEENTRY, *PCHANDLEENTRY;

typedef BOOL (*PFNHANDLEAPPLY)(HANDLE);



































typedef struct tagXACT_INFO *PXACT_INFO;

typedef BOOL (* FNRESPONSE)(PXACT_INFO, UINT, LONG);

typedef struct tagXACT_INFO {
    struct tagXACT_INFO *next;
    struct tagCONV_INFO *pcoi;
    DWORD               hUser;
    HANDLE              hXact;
    FNRESPONSE          pfnResponse;
    GATOM               gaItem;
    WORD                wFmt;
    WORD                wType;                
    WORD                wStatus;              
    WORD                flags;                
    WORD                state;                
    HANDLE              hDDESent;             
    HANDLE              hDDEResult;
} XACT_INFO;









typedef struct tagLINK_COUNT *PLINK_COUNT;
typedef struct tagADVISE_LINK {
    struct tagLINK_COUNT *pLinkCount;
    LATOM   laItem;
    WORD    wFmt;
    WORD    wType;          
    WORD    state;          
} ADVISE_LINK, *PADVISE_LINK;






typedef struct tagDDE_MESSAGE_QUEUE {
    struct tagDDE_MESSAGE_QUEUE    *next;
    struct tagCONV_INFO            *pcoi;
    UINT                            msg;
    LONG                            lParam;
} DDE_MESSAGE_QUEUE, *PDDE_MESSAGE_QUEUE;



typedef struct tagSERVER_LOOKUP {
    LATOM           laService;
    LATOM           laTopic;
    HWND            hwndServer;
} SERVER_LOOKUP, *PSERVER_LOOKUP;

typedef struct tagLINK_COUNT {
    struct tagLINK_COUNT *next;
    LATOM laTopic;
    GATOM gaItem;
    LATOM laItem;
    WORD  wFmt;
    short Total;
    short Count;
} LINK_COUNT;

typedef struct tagCL_INSTANCE_INFO {
    struct tagCL_INSTANCE_INFO *next;
    HANDLE                      hInstServer;
    HANDLE                      hInstClient;
    DWORD                       MonitorFlags;
    HWND                        hwndMother;
    HWND                        hwndEvent;
    HWND                        hwndTimeout;
    DWORD                       afCmd;
    PFNCALLBACK                 pfnCallback;
    DWORD                       LastError;
    DWORD                       tid;
    LATOM                      *plaNameService;
    WORD                        cNameServiceAlloc;
    PSERVER_LOOKUP              aServerLookup;
    short                       cServerLookupAlloc;
    WORD                        ConvStartupState;
    WORD                        flags;              
    short                       cInDDEMLCallback;
    PLINK_COUNT                 pLinkCount;
} CL_INSTANCE_INFO, *PCL_INSTANCE_INFO;






typedef struct tagCONV_INFO {
    struct tagCONV_INFO    *next;
    PCL_INSTANCE_INFO       pcii;
    DWORD                   hUser;
    HCONV                   hConv;
    LATOM                   laService;
    LATOM                   laTopic;
    HWND                    hwndPartner;
    HWND                    hwndConv;
    WORD                    state;                 
    LATOM                   laServiceRequested;
    PXACT_INFO              pxiIn;
    PXACT_INFO              pxiOut;
    PDDE_MESSAGE_QUEUE      dmqIn;
    PDDE_MESSAGE_QUEUE      dmqOut;
    PADVISE_LINK            aLinks;
    int                     cLinks;
    int                     cLocks;
} CONV_INFO, *PCONV_INFO;

typedef struct tagCL_CONV_INFO {
    CONV_INFO               ci;
    HWND                    hwndReconnect;
    HCONVLIST               hConvList;
} CL_CONV_INFO, *PCL_CONV_INFO;

typedef struct tagSVR_CONV_INFO {
    CONV_INFO               ci;
} SVR_CONV_INFO, *PSVR_CONV_INFO;

typedef struct tagCONVLIST {
    int                     chwnd;      
    HWND                    ahwnd[1];   
} CONVLIST, *PCONVLIST;

extern CONVCONTEXT DefConvContext;  

typedef struct tagENABLE_ENUM_STRUCT{
    BOOL                   *pfRet;
    WORD                    wCmd;
    WORD                    wCmd2;
} ENABLE_ENUM_STRUCT, *PENABLE_ENUM_STRUCT;



typedef struct tagDDEMLDATA {
    HANDLE  hDDE;                
    DWORD   flags;               
} DDEMLDATA, *PDDEMLDATA;



extern PHANDLE aInstance;
extern DWORD gWM_REGISTERCALLBACK;





HANDLE CreateHandle(DWORD dwData, DWORD type, DWORD  inst);
DWORD DestroyHandle(HANDLE h);
DWORD GetHandleData(HANDLE h);
void SetHandleData(HANDLE h, DWORD dwData);
DWORD ValidateCHandle(HANDLE h, DWORD ExpectedType, DWORD ExpectedInstance);
PCL_INSTANCE_INFO PciiFromHandle(HANDLE h);
HANDLE FindIstanceHandleFromHandle(HANDLE h);
void ApplyFunctionToObjects(DWORD ExpectedType, DWORD ExpectedInstance,
    PFNHANDLEAPPLY pfn);
void BestSetLastDDEMLError(DWORD error);



void RW_RegisterDDEMLMother(void);
void RW_RegisterDDEMLClient(void);
void RW_RegisterDDEMLServer(void);



UINT InternalDdeInitialize(LPDWORD pidInst, PFNCALLBACK pfnCallback, DWORD afCmd,
    BOOL fUnicode);








DWORD AddInstance(HANDLE hInst);
HANDLE DestroyInstance(int idInst);
PCL_INSTANCE_INFO ValidateInstance(HANDLE hInst);
BOOL CsClearSecurityForAck(HANDLE hInst, HWND hwndServer, HWND hwndClient);
void SetLastDDEMLError(PCL_INSTANCE_INFO pcii, DWORD error);



HSZ InternalDdeCreateStringHandle(DWORD idInst, PVOID psz, int iCodePage);


DWORD InternalDdeQueryString(DWORD idInst, HSZ hsz, PVOID psz, DWORD cchMax,
    INT iCodePage);






DWORD ValidateHSZ(HSZ hsz);
LATOM MakeInstSpecificAtom(LATOM la, HWND hwnd);
HWND ParseInstSpecificAtom(LATOM la, LATOM *plaNormal);
GATOM LocalToGlobalAtom(LATOM la);
LATOM GlobalToLocalAtom(GATOM ga);
GATOM IncGlobalAtomCount(GATOM la);
LATOM IncLocalAtomCount(LATOM la);






BOOL ValidateConnectParameters(HANDLE hInst, PCL_INSTANCE_INFO *ppcii,
    HSZ *phszService, HSZ hszTopic, LATOM *plaNormalSvcName,
    PCONVCONTEXT *ppCC, HWND *phwndTarget, HCONVLIST hConvList);
PCL_CONV_INFO ConnectConv(PCL_INSTANCE_INFO pcii, LATOM laService,
    LATOM laTopic, HWND hwndTarget, HWND hwndSkip,
    PCONVCONTEXT pCC, HCONVLIST hConvList, DWORD clst);
void SetCommonStateFlags(HWND hwndUs, HWND hwndThem, PWORD pwFlags);



void ShutdownConversation(PCONV_INFO pcoi, BOOL fMakeCallback);
void FreeConversationResources(PCONV_INFO pcoi);
BOOL WaitForZombieTerminate(HANDLE hData);



void GetConvContext(HWND hwnd, LONG *pl);
void SetConvContext(HWND hwnd, LONG *pl);




BOOL
UpdateLinkIfChanged(
    PADVISE_LINK paLink,
    PXACT_INFO pxi,
    PCONV_INFO pcoi,
    PADVISE_LINK paLinkLast,
    PBOOL pfSwapped,
    DWORD cLinksToGo);


void LinkTransaction(PXACT_INFO pxi);
void UnlinkTransaction(PXACT_INFO pxi);
BOOL ValidateTransaction(HCONV hConv, HANDLE hXact, PCONV_INFO *ppcoi,
    PXACT_INFO *ppxi);





HDDEDATA InternalCreateDataHandle(PCL_INSTANCE_INFO pcii, LPBYTE pSrc, DWORD cb,
    DWORD cbOff, DWORD flags, WORD wStatus, WORD wFmt);





BOOL ApplyFreeDataHandle(HANDLE hData);
BOOL InternalFreeDataHandle(HDDEDATA hData, BOOL fIgnorefRelease);
void FreeDDEData(HANDLE hDDE, BOOL fIgnorefRelease, BOOL fFreeTruelyGlobalObjects);
HANDLE CopyDDEData(HANDLE hDDE, BOOL fExec);



HDDEDATA DoCallback(PCL_INSTANCE_INFO pcii, WORD wType, WORD wFmt, HCONV hConv,
    HSZ hsz1, HSZ hsz2, HDDEDATA hData, DWORD dw1, DWORD dw2);
DWORD _ClientEventCallback(PCL_INSTANCE_INFO pcii, PEVENT_PACKET pep);

BOOL SetEnableState(PCONV_INFO pcoi, UINT wCmd);
DWORD _ClientGetDDEHookData(UINT message, LONG lParam,
        PDDEML_MSG_HOOK_DATA pdmhd);
DWORD _ClientGetDDEFlags(HANDLE hClient, DWORD flags);
BOOL EnableEnumProc(HWND hwnd, PENABLE_ENUM_STRUCT pees);



LONG DDEMLMotherWndProc(HWND, UINT, WPARAM, LPARAM);
LONG DDEMLClientWndProc(HWND, UINT, WPARAM, LPARAM);
LONG DDEMLServerWndProc(HWND, UINT, WPARAM, LPARAM);
PCONV_INFO ProcessTerminateMsg(PCONV_INFO pcoi, HWND hwndFrom);
void ProcessAsyncDDEMsg(PCONV_INFO pcoi, UINT msg, HWND hwndFrom, LONG lParam);
BOOL CheckForQueuedMessages(PCONV_INFO pcoi);
void DumpDDEMessage(BOOL fFreeData, UINT msg, LONG lParam);
BOOL ProcessSyncDDEMessage(PCONV_INFO pcoi, UINT msg, LONG lParam);



BOOL ClStartAdvise(PXACT_INFO pxi);
BOOL SvSpontAdvise(PSVR_CONV_INFO psi, LONG lParam);
BOOL ClRespAdviseAck(PXACT_INFO pxi, UINT msg, LONG lParam);
BOOL SvStartAdviseUpdate(PXACT_INFO pxi, DWORD cLinksToGo);
BOOL ClSpontAdviseData(PCL_CONV_INFO pci, LONG lParam);
BOOL SvRespAdviseDataAck(PXACT_INFO pxi, UINT msg, LONG lParam);
BOOL ClStartUnadvise(PXACT_INFO pxi);
BOOL SvSpontUnadvise(PSVR_CONV_INFO psi, LONG lParam);
BOOL ClRespUnadviseAck(PXACT_INFO pxi, UINT msg, LONG lParam);
BOOL ClStartExecute(PXACT_INFO pxi);
BOOL ClRespExecuteAck(PXACT_INFO pxi, UINT msg, LONG lParam);
BOOL ClStartPoke(PXACT_INFO pxi);
BOOL SvSpontPoke(PSVR_CONV_INFO psi, LONG lParam);
BOOL ClRespPokeAck(PXACT_INFO pxi, UINT msg, LONG lParam);
BOOL ClStartRequest(PXACT_INFO pxi);
BOOL SvSpontRequest(PSVR_CONV_INFO psi, LONG lParam);
BOOL ClRespRequestData(PXACT_INFO pxi, UINT msg, LONG lParam);
BOOL SpontaneousClientMessage(PCL_CONV_INFO pci, UINT msg, LONG lParam);
BOOL SpontaneousServerMessage(PSVR_CONV_INFO psi, UINT msg, LONG lParam);
HANDLE AllocAndSetDDEData(LPBYTE pSrc, DWORD cb, WORD wStatus, WORD wFmt);
DWORD PackAndPostMessage(HWND hwndTo, UINT msgIn, UINT msgOut, HWND hwndFrom,
    LONG lParam, UINT uiLo, UINT uiHi);
BOOL ExtractDDEDataInfo(HANDLE hDDE, LPWORD pwStatus, LPWORD pwFmt);
BOOL TransactionComplete(PXACT_INFO pxi, HDDEDATA hData);
HANDLE UnpackAndFreeDDEMLDataHandle(HDDEDATA hData, BOOL fExec);



BOOL AddLink(PCONV_INFO pcoi, GATOM gaItem, WORD wFmt, WORD wType);
void DeleteLinkCount(PCL_INSTANCE_INFO pcii, PLINK_COUNT pLinkCountDelete);



void MonitorStringHandle(PCL_INSTANCE_INFO pcii, HSZ hsz, DWORD fsAction);
void MonitorLink(PCL_INSTANCE_INFO pcii, BOOL fEstablished, BOOL fNoData,
        LATOM laSvc, LATOM laTopic, GATOM gaItem, WORD wFmt, BOOL fServer,
        HCONV hConvServer, HCONV hConvClient);
void MonitorConv(PCONV_INFO pcoi, BOOL fConnect);



void RegisterService(BOOL fRegister, GATOM gaApp, HWND hwndListen);
LRESULT ProcessRegistrationMessage(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);




















extern INT gbCheckHandleLevel;


int gcWheelDelta;

extern WCHAR awchSlashStar[];
extern CHAR achSlashStar[];

extern PSERVERINFO gpsi;
extern SHAREDINFO gSharedInfo;

extern HMODULE hmodUser;            
extern HMODULE hModApp;             

extern BOOL gfServerProcess;        
extern BOOL gfSystemInitialized;    
extern ACCESS_MASK gamWinSta;       

extern RESCALLS rescalls;
extern PRESCALLS prescalls;

extern PVOID pUserHeap;

extern const CFNSCSENDMESSAGE gapfnScSendMessage[];
extern const BOOLEAN gabThunkMessage[];

extern WCHAR szUSER32[];
extern WCHAR szNull[];
extern WCHAR szOneChar[];
extern WCHAR szSLASHSTARDOTSTAR[];
extern LPWSTR pTimeTagArray[];

extern RECT rcScreen;

extern BYTE mpTypeCcmd[];
extern BYTE mpTypeIich[];
extern unsigned int SEBbuttons[];
extern BYTE rgReturn[];

extern WCHAR szERROR[];

extern ATOM atomBwlProp;
extern ATOM atomMsgBoxCallback;

extern CRITICAL_SECTION gcsLookaside;
extern CRITICAL_SECTION gcsHdc;
extern CRITICAL_SECTION gcsClipboard;

extern HDC    ghdcBits2;
extern HDC    ghdcGray;
extern HFONT  ghFontSys;
extern HBRUSH ghbrWindowText;
extern int    gcxGray;
extern int    gcyGray;
extern PCHAR  gpOemToAnsi;
extern PCHAR  gpAnsiToOem;


extern LPWSTR atomSysClass[20];   







































extern PFNLALLOC            pfnLocalAlloc;
extern PFNLREALLOC          pfnLocalReAlloc;
extern PFNLLOCK             pfnLocalLock;
extern PFNLUNLOCK           pfnLocalUnlock;
extern PFNLSIZE             pfnLocalSize;
extern PFNLFREE             pfnLocalFree;
extern PFNGETEXPWINVER      pfnGetExpWinVer;
extern PFNINITDLGCB         pfnInitDlgCallback;
extern PFN16GALLOC          pfn16GlobalAlloc;
extern PFN16GFREE           pfn16GlobalFree;
extern PFNGETMODFNAME       pfnGetModFileName;
extern PFNEMPTYCB           pfnWowEmptyClipBoard;
extern PFNWOWWNDPROCEX      pfnWowWndProcEx;
extern PFNWOWEDITNEXTWORD   pfnWowEditNextWord;
extern PFNWOWSETFAKEDIALOGCLASS   pfnWowSetFakeDialogClass;
extern PFNWOWCBSTOREHANDLE  pfnWowCBStoreHandle;







































































































BOOL
NtUserHardErrorControl(
     HARDERRORCONTROL dwCmd,
     HDESK hdeskRestore );

void
NtUserSetDebugErrorLevel(
     DWORD dwErrorLevel);

BOOL
NtUserGetObjectInformation(
     HANDLE hObject,
     int nIndex,
     PVOID pvInfo,
     DWORD nLength,
     LPDWORD pnLengthNeeded);

BOOL
NtUserSetObjectInformation(
     HANDLE hObject,
     int nIndex,
     PVOID pvInfo,
     DWORD nLength);

NTSTATUS
NtUserConsoleControl(
     CONSOLECONTROL ConsoleCommand,
     PVOID ConsoleInformation,
     DWORD ConsoleInformationLength);

NTSTATUS
NtUserFullscreenControl(
     FULLSCREENCONTROL FullscreenCommand,
     PVOID  FullscreenInuut,
     DWORD  FullscreenInputLength,
     PVOID  FullscreenOutput,
     PULONG FullscreenOutputLength);

HWINSTA
NtUserCreateWindowStation(
     POBJECT_ATTRIBUTES pObja,
     DWORD dwReserved,
     ACCESS_MASK amRequest,
     HANDLE hKbdLayoutFile,
     DWORD offTable,
     PUNICODE_STRING pstrKLID,
     UINT uKbdInputLocale);

HWINSTA
NtUserOpenWindowStation(
     POBJECT_ATTRIBUTES pObja,
     ACCESS_MASK amRequest);

BOOL
NtUserCloseWindowStation(
     HWINSTA hwinsta);

BOOL
NtUserSetProcessWindowStation(
     HWINSTA hwinsta);

HWINSTA
NtUserGetProcessWindowStation(
    void);

HDESK
NtUserCreateDesktop(
     POBJECT_ATTRIBUTES pObja,
     PUNICODE_STRING pstrDevice,
     LPDEVMODEW pDevmode,
     DWORD dwFlags,
     ACCESS_MASK amRequest);

HDESK
NtUserOpenDesktop(
     POBJECT_ATTRIBUTES pObja,
     DWORD dwFlags,
     ACCESS_MASK amRequest);

HDESK
NtUserOpenInputDesktop(
     DWORD dwFlags,
     BOOL fInherit,
     DWORD amRequest);

HDESK
NtUserResolveDesktop(
     HANDLE hProcess,
     PUNICODE_STRING pstrDesktop,
     BOOL fInherit,
     HWINSTA *phwinsta);

BOOL
NtUserCloseDesktop(
     HDESK hdesk);

BOOL
NtUserSetThreadDesktop(
     HDESK hdesk);

HDESK
NtUserGetThreadDesktop(
     DWORD dwThreadId,
     HDESK hdeskConsole);

BOOL
NtUserSwitchDesktop(
     HDESK hdesk);

NTSTATUS
NtUserInitializeClientPfnArrays(
     PPFNCLIENT ppfnClientA ,
     PPFNCLIENT ppfnClientW ,
     HANDLE hModUser);

BOOL
NtUserWaitForMsgAndEvent(
     HANDLE hevent);

HWND
NtUserWOWFindWindow(
     PUNICODE_STRING lpClassName ,
     PUNICODE_STRING lpWindowName );

DWORD
NtUserDragObject(
     HWND hwndParent,
     HWND hwndFrom,
     UINT wFmt,
     DWORD dwData,
     HCURSOR hcur);

BOOL
NtUserGetIconInfo(
      HICON hicon,
     PICONINFO piconinfo,
      PUNICODE_STRING pstrInstanceName,
      PUNICODE_STRING pstrResName,
      LPDWORD pbpp,
      BOOL fInternal);

BOOL
NtUserGetIconSize(
     HICON hIcon,
     UINT istepIfAniCur,
     int *pcx,
     int *pcy);

BOOL
NtUserDrawIconEx(
     HDC hdc,
     int x,
     int y,
     HICON hicon,
     int cx,
     int cy,
     UINT istepIfAniCur,
     HBRUSH hbrush,
     UINT diFlags,
     BOOL fMeta,
     DRAWICONEXDATA *pdid);

HANDLE
NtUserDeferWindowPos(
     HDWP hWinPosInfo,
     HWND hwnd,
     HWND hwndInsertAfter,
     int x,
     int y,
     int cx,
     int cy,
     UINT wFlags);

BOOL
NtUserEndDeferWindowPosEx(
     HDWP hWinPosInfo,
     BOOL fAsync);

BOOL
NtUserGetMessage(
     LPMSG pmsg,
     HWND hwnd,
     UINT wMsgFilterMin,
     UINT wMsgFilterMax,
     HKL *pHKL);

BOOL
NtUserMoveWindow(
     HWND hwnd,
     int x,
     int y,
     int cx,
     int cy,
     BOOL fRepaint);

BOOL
NtUserDeleteObject(
     HANDLE hobj,
     UINT utype);

int
NtUserTranslateAccelerator(
     HWND hwnd,
     HACCEL hAccTable,
     LPMSG lpMsg);

LONG
NtUserSetClassLong(
     HWND hwnd,
     int nIndex,
     LONG dwNewLong,
     BOOL bAnsi);

BOOL
NtUserSetKeyboardState(
     LPBYTE lpKeyState);

BOOL
NtUserSetWindowPos(
     HWND hwnd,
     HWND hwndInsertAfter,
     int x,
     int y,
     int cx,
     int cy,
     UINT dwFlags);

BOOL
NtUserSetShellWindowEx(
     HWND hwnd,
     HWND hwndBkGnd);

BOOL
NtUserSystemParametersInfo(
     UINT wFlag,
     DWORD wParam,
     LPVOID lpData,
     UINT flags,
     BOOL bAnsi);

BOOL
NtUserUpdatePerUserSystemParameters(
     BOOL bUserLoggedOn);

DWORD
NtUserDdeInitialize(
     LPDWORD phInst,
     HWND *phwnd,
     LPDWORD pMonFlags,
     DWORD afCmd,
     PVOID pcii);

DWORD
NtUserUpdateInstance(
     HANDLE hInst,
     LPDWORD pMonFlags,
     DWORD afCmd);

DWORD
NtUserEvent(
     PEVENT_PACKET pep);

BOOL
NtUserFillWindow(
     HWND hwndBrush,
     HWND hwndPaint,
     HDC hdc,
     HBRUSH hbr);

HANDLE
NtUserGetInputEvent(
     DWORD dwWakeMask);

PCLS
NtUserGetWOWClass(
     HINSTANCE hInstance,
     PUNICODE_STRING pString);

UINT
NtUserGetInternalWindowPos(
     HWND hwnd,
     LPRECT lpRect ,
     LPPOINT lpPoint );

NTSTATUS
NtUserInitTask(
     UINT dwExpWinVer,
     PUNICODE_STRING pstrAppName,
     DWORD hTaskWow,
     DWORD dwHotkey,
     DWORD idTask,
     DWORD dwX,
     DWORD dwY,
     DWORD dwXSize,
     DWORD dwYSize,
     WORD wShowWindow);

BOOL
NtUserPostThreadMessage(
     DWORD id,
     UINT msg,
     DWORD wParam,
     LONG lParam);

BOOL
NtUserRegisterTasklist(
     HWND hwndTasklist);

BOOL
NtUserSetClipboardData(
     UINT wFmt,
     HANDLE hMem,
     PSETCLIPBDATA scd);

HANDLE
NtUserConvertMemHandle(
     LPBYTE lpData,
     UINT cbNULL);

NTSTATUS
NtUserCreateLocalMemHandle(
     HANDLE hMem,
     LPBYTE lpData ,
     UINT cbData,
     PUINT lpcbNeeded );

HHOOK
NtUserSetWindowsHookEx(
     HANDLE hmod,
     PUNICODE_STRING pstrLib ,
     DWORD idThread,
     int nFilterType,
     PROC pfnFilterProc,
     BOOL bAnsi);

BOOL
NtUserSetInternalWindowPos(
     HWND hwnd,
     UINT cmdShow,
     LPRECT lpRect,
     LPPOINT lpPoint);

BOOL
NtUserChangeClipboardChain(
     HWND hwndRemove,
     HWND hwndNewNext);

DWORD
NtUserCheckMenuItem(
     HMENU hmenu,
     UINT wIDCheckItem,
     UINT wCheck);

HWND
NtUserChildWindowFromPointEx(
     HWND hwndParent,
     POINT point,
     UINT flags);

BOOL
NtUserClipCursor(
     const RECT *lpRect );

HACCEL
NtUserCreateAcceleratorTable(
     LPACCEL lpAccel,
     INT cbElem);

BOOL
NtUserDeleteMenu(
     HMENU hmenu,
     UINT nPosition,
     UINT dwFlags);

BOOL
NtUserDestroyAcceleratorTable(
     HACCEL hAccel);

BOOL
NtUserDestroyCursor(
     HCURSOR hcurs,
     DWORD cmd);

HANDLE
NtUserGetClipboardData(
     UINT fmt,
     PGETCLIPBDATA pgcd);

BOOL
NtUserDestroyMenu(
     HMENU hmenu);

BOOL
NtUserDestroyWindow(
     HWND hwnd);

LONG
NtUserDispatchMessage(
     const MSG *pmsg);

BOOL
NtUserEnableMenuItem(
     HMENU hMenu,
     UINT wIDEnableItem,
     UINT wEnable);

BOOL
NtUserAttachThreadInput(
     DWORD idAttach,
     DWORD idAttachTo,
     BOOL fAttach);

BOOL
NtUserGetWindowPlacement(
     HWND hwnd,
     PWINDOWPLACEMENT pwp);

BOOL
NtUserSetWindowPlacement(
     HWND hwnd,
     const WINDOWPLACEMENT *lpwndpl);

BOOL
NtUserLockWindowUpdate(
     HWND hwnd);

BOOL
NtUserGetClipCursor(
     LPRECT lpRect);

BOOL
NtUserEnableScrollBar(
     HWND hwnd,
     UINT wSBflags,
     UINT wArrows);

BOOL
NtUserDdeSetQualityOfService(
     HWND hwndClient,
     const SECURITY_QUALITY_OF_SERVICE *pqosNew,
     PSECURITY_QUALITY_OF_SERVICE pqosPrev );

BOOL
NtUserDdeGetQualityOfService(
     HWND hwndClient,
     HWND hwndServer,
     PSECURITY_QUALITY_OF_SERVICE pqos);

DWORD
NtUserGetMenuIndex(
     HMENU hMenu,
     HMENU hSubMenu);

DWORD
NtUserCallNoParam(
     DWORD xpfnProc);

DWORD
NtUserBreak(
    void);

DWORD
NtUserCallNoParamTranslate(
     DWORD xpfnProc);

DWORD
NtUserCallOneParam(
     DWORD dwParam,
     DWORD xpfnProc);

DWORD
NtUserCallOneParamTranslate(
     DWORD dwParam,
     DWORD xpfnProc);

DWORD
NtUserCallHwnd(
     HWND hwnd,
     DWORD xpfnProc);

DWORD
NtUserCallHwndLock(
     HWND hwnd,
     DWORD xpfnProc);

DWORD
NtUserCallHwndOpt(
     HWND hwnd,
     DWORD xpfnProc);

DWORD
NtUserCallTwoParam(
    DWORD dwParam1,
    DWORD dwParam2,
     DWORD xpfnProc);

DWORD
NtUserCallHwndParam(
     HWND hwnd,
     DWORD dwParam,
     DWORD xpfnProc);

DWORD
NtUserCallHwndParamLock(
     HWND hwnd,
     DWORD dwParam,
     DWORD xpfnProc);

BOOL
NtUserThunkedMenuItemInfo(
     HMENU hMenu,
     UINT nPosition,
     BOOL fByPosition,
     BOOL fInsert,
     LPMENUITEMINFOW lpmii ,
     PUNICODE_STRING pstrItem ,
     BOOL fAnsi);









BOOL
NtUserCheckMenuRadioItem(
     HMENU hMenu,
     UINT wIDFirst,
     UINT wIDLast,
     UINT wIDCheck,
     UINT flags);

BOOL
NtUserInitBrushes(
     HBRUSH *pahbrSystem,
     HBRUSH *phbrGray);

BOOL
NtUserDrawAnimatedRects(
     HWND hwnd,
     int idAni,
     const RECT * lprcFrom,
     const RECT * lprcTo);

HANDLE
NtUserLoadIcoCur(
    HANDLE hIcon,
    DWORD cxNew,
    DWORD cyNew,
    DWORD LR_flags);

BOOL
NtUserSetCursorInfoText(
     PUNICODE_STRING pstr ,
     BOOL fLatent);

BOOL
NtUserSetCursorInfoBitmap(
     HBITMAP hbitmap,
     BOOL fLatent);

BOOL
NtUserDrawCaption(
     HWND hwnd,
     HDC hdc,
     const RECT *lprc,
     UINT flags);

BOOL
NtUserPaintDesktop(
     HDC hdc);

SHORT
NtUserGetAsyncKeyState(
     int vKey);

HBRUSH
NtUserGetControlBrush(
     HWND hwnd,
     HDC hdc,
     UINT msg);

HBRUSH
NtUserGetControlColor(
     HWND hwndParent,
     HWND hwndCtl,
     HDC hdc,
     UINT msg);

HMENU
NtUserEndMenu(
    void);

int
NtUserCountClipboardFormats(
    void);

UINT
NtUserGetCaretBlinkTime(
    void);

HWND
NtUserGetClipboardOwner(
    void);

HWND
NtUserGetClipboardViewer(
    void);

UINT
NtUserGetDoubleClickTime(
    void);

HWND
NtUserGetForegroundWindow(
    void);

HWND
NtUserGetOpenClipboardWindow(
    void);

int
NtUserGetPriorityClipboardFormat(
     UINT *paFormatPriorityList,
     int cFormats);

HMENU
NtUserGetSystemMenu(
     HWND hwnd,
     BOOL bRevert);

BOOL
NtUserGetUpdateRect(
     HWND hwnd,
     LPRECT prect ,
     BOOL bErase);

BOOL
NtUserHideCaret(
     HWND hwnd);

BOOL
NtUserHiliteMenuItem(
     HWND hwnd,
     HMENU hMenu,
     UINT uIDHiliteItem,
     UINT uHilite);

BOOL
NtUserInvalidateRect(
     HWND hwnd,
     const RECT *prect ,
     BOOL bErase);

BOOL
NtUserIsClipboardFormatAvailable(
     UINT nFormat);

BOOL
NtUserKillTimer(
     HWND hwnd,
     UINT nIDEvent);

HWND
NtUserMinMaximize(
     HWND hwnd,
     UINT nCmdShow,
     BOOL fKeepHidden);

BOOL
NtUserOpenClipboard(
     HWND hwnd,
     PBOOL pfEmptyClient);

BOOL
NtUserPeekMessage(
     LPMSG pmsg,
     HWND hwnd,
     UINT wMsgFilterMin,
     UINT wMsgFilterMax,
     UINT wRemoveMsg,
     HKL *pHKL);

BOOL
NtUserPostMessage(
     HWND hwnd,
     UINT msg,
     DWORD wParam,
     LONG lParam);

BOOL
NtUserSendNotifyMessage(
     HWND hwnd,
     UINT Msg,
     WPARAM wParam,
     LPARAM lParam );

BOOL
NtUserSendMessageCallback(
     HWND hwnd,
     UINT wMsg,
     DWORD wParam,
     LONG lParam,
     SENDASYNCPROC lpResultCallBack,
     DWORD dwData);

BOOL
NtUserRegisterHotKey(
     HWND hwnd,
     int id,
     UINT fsModifiers,
     UINT vk);

BOOL
NtUserRemoveMenu(
     HMENU hmenu,
     UINT nPosition,
     UINT dwFlags);

BOOL
NtUserScrollWindowEx(
     HWND hwnd,
     int XAmount,
     int YAmount,
     const RECT *pRect ,
     const RECT *pClipRect ,
     HRGN hrgnUpdate,
     LPRECT prcUpdate ,
     UINT flags);

HWND
NtUserSetActiveWindow(
     HWND hwnd);

HWND
NtUserSetCapture(
     HWND hwnd);

WORD
NtUserSetClassWord(
     HWND hwnd,
     int nIndex,
     WORD wNewWord);

HWND
NtUserSetClipboardViewer(
     HWND hwndNewViewer);

HCURSOR
NtUserSetCursor(
     HCURSOR hCursor);

HWND
NtUserSetFocus(
     HWND hwnd);

BOOL
NtUserSetMenu(
     HWND  hwnd,
     HMENU hmenu,
     BOOL  fRedraw);

BOOL
NtUserSetMenuContextHelpId(
     HMENU hMenu,
     DWORD dwContextHelpId);

HWND
NtUserSetParent(
     HWND hwndChild,
     HWND hwndNewParent);

int
NtUserSetScrollInfo(
     HWND hwnd,
     int nBar,
     LPCSCROLLINFO pInfo,
     BOOL fRedraw);

BOOL
NtUserSetSysColors(
     int cElements,
     const INT * lpaElements,
     const COLORREF * lpaRgbValues,
     UINT  uOptions);

UINT
NtUserSetTimer(
     HWND hwnd,
     UINT nIDEvent,
     UINT wElapse,
     TIMERPROC pTimerFunc);

LONG
NtUserSetWindowLong(
     HWND hwnd,
     int nIndex,
     LONG dwNewLong,
     BOOL bAnsi);

WORD
NtUserSetWindowWord(
     HWND hwnd,
     int nIndex,
     WORD wNewWord);

HHOOK
NtUserSetWindowsHookAW(
     int nFilterType,
     HOOKPROC pfnFilterProc,
     BOOL bAnsi);

BOOL
NtUserShowCaret(
     HWND hwnd);

BOOL
NtUserShowScrollBar(
     HWND hwnd,
     int iBar,
     BOOL fShow);

BOOL
NtUserShowWindowAsync(
     HWND hwnd,
     int nCmdShow);

BOOL
NtUserShowWindow(
     HWND hwnd,
     int nCmdShow);

BOOL
NtUserTrackPopupMenuEx(
     HMENU hMenu,
     UINT uFlags,
     int x,
     int y,
     HWND hwnd,
     LPTPMPARAMS pparamst );

BOOL
NtUserTranslateMessage(
     const MSG *lpMsg,
     UINT flags);

BOOL
NtUserUnhookWindowsHookEx(
     HHOOK hhk);

BOOL
NtUserUnregisterHotKey(
     HWND hwnd,
     int id);

BOOL
NtUserValidateRect(
     HWND hwnd,
     const RECT *lpRect );

DWORD
NtUserWaitForInputIdle(
     DWORD idProcess,
     DWORD dwMilliseconds,
     BOOL fSharedWow);

HWND
NtUserWindowFromPoint(
     POINT Point);

HDC
NtUserBeginPaint(
     HWND hwnd,
     LPPAINTSTRUCT lpPaint);

BOOL
NtUserCreateCaret(
     HWND hwnd,
     HBITMAP hBitmap,
     int nWidth,
     int nHeight);

BOOL
NtUserEndPaint(
     HWND hwnd,
     const PAINTSTRUCT *lpPaint);

int
NtUserExcludeUpdateRgn(
     HDC hDC,
     HWND hwnd);

HDC
NtUserGetDC(
     HWND hwnd);

HDC
NtUserGetDCEx(
     HWND hwnd,
     HRGN hrgnClip,
     DWORD flags);

HDC
NtUserGetWindowDC(
     HWND hwnd);

int
NtUserGetUpdateRgn(
     HWND hwnd,
     HRGN hRgn,
     BOOL bErase);

BOOL
NtUserRedrawWindow(
     HWND hwnd,
     const RECT *lprcUpdate ,
     HRGN hrgnUpdate,
     UINT flags);

BOOL
NtUserInvalidateRgn(
     HWND hwnd,
     HRGN hRgn,
     BOOL bErase);

int
NtUserSetWindowRgn(
     HWND hwnd,
     HRGN hRgn,
     BOOL bRedraw);

BOOL
NtUserScrollDC(
     HDC hDC,
     int dx,
     int dy,
     const RECT *lprcScroll ,
     const RECT *lprcClip ,
     HRGN hrgnUpdate,
     LPRECT lprcUpdate );

int
NtUserInternalGetWindowText(
     HWND hwnd,
     LPWSTR lpString,
     int nMaxCount);

int
NtUserToUnicodeEx(
     UINT wVirtKey,
     UINT wScanCode,
     PBYTE lpKeyState,
     LPWSTR lpszBuff,
     int cchBuff,
     UINT wFlags,
     HKL hKeyboardLayout);

BOOL
NtUserYieldTask(
    void);

BOOL
NtUserWaitMessage(
    void);

UINT
NtUserLockWindowStation(
     HWINSTA hWindowStation);

BOOL
NtUserUnlockWindowStation(
     HWINSTA hWindowStation);

UINT
NtUserSetWindowStationUser(
     HWINSTA hWindowStation,
     PLUID pLuidUser,
     PSID pSidUser ,
     DWORD cbSidUser);

BOOL
NtUserSetLogonNotifyWindow(
     HWINSTA hWindowStation,
     HWND hwndNotify);

BOOL
NtUserSetSystemCursor(
     HCURSOR hcur,
     DWORD id);

HCURSOR
NtUserGetCursorInfo(
     HCURSOR hcur,
     int iFrame,
     LPDWORD pjifRate,
     LPINT pccur);

BOOL
NtUserSetCursorContents(
     HCURSOR hCursor,
     HCURSOR hCursorNew);

HCURSOR
NtUserFindExistingCursorIcon(
     PUNICODE_STRING pstrModName,
     PUNICODE_STRING pstrResName,
     PCURSORFIND     pcfSearch);

BOOL
NtUserSetCursorIconData(
     HCURSOR         hCursor,
     PUNICODE_STRING pstrModName,
     PUNICODE_STRING pstrResName,
     PCURSORDATA     pData,
     DWORD           cbData);

BOOL
NtUserWOWCleanup(
     HANDLE hInstance,
     DWORD hTaskWow,
     PNEMODULESEG SelList,
     DWORD nSel);

BOOL
NtUserGetMenuItemRect(
     HWND hwnd,
     HMENU hMenu,
     UINT uItem,
     LPRECT lprcItem);

int
NtUserMenuItemFromPoint(
     HWND hwnd,
     HMENU hMenu,
     POINT ptScreen);

BOOL
NtUserGetCaretPos(
     LPPOINT lpPoint);

BOOL
NtUserDefSetText(
     HWND hwnd,
     PLARGE_STRING Text );

NTSTATUS
NtUserQueryInformationThread(
     HANDLE hThread,
     USERTHREADINFOCLASS ThreadInfoClass,
     PVOID ThreadInformation,
     ULONG ThreadInformationLength,
      PULONG ReturnLength );

NTSTATUS
NtUserSetInformationThread(
     HANDLE hThread,
     USERTHREADINFOCLASS ThreadInfoClass,
     PVOID ThreadInformation,
     ULONG ThreadInformationLength);

BOOL
NtUserNotifyProcessCreate(
     DWORD dwProcessId,
     DWORD dwParentThreadId,
     DWORD dwData,
     DWORD dwFlags);

NTSTATUS
NtUserSoundSentry(
     UINT uVideoMode);

NTSTATUS
NtUserTestForInteractiveUser(
     PLUID pluidCaller);

BOOL
NtUserSetConsoleReserveKeys(
     HWND hwnd,
     DWORD fsReserveKeys);

DWORD
NtUserGetUserStartupInfoFlags(
    void);

void
NtUserSetUserStartupInfoFlags(
     DWORD dwFlags);

BOOL
NtUserSetWindowFNID(
     HWND hwnd,
     WORD fnid);

void
NtUserAlterWindowStyle(
     HWND hwnd,
     DWORD mask,
     DWORD flags);

void
NtUserSetThreadState(
     DWORD dwFlags,
     DWORD dwMask);

DWORD
NtUserGetThreadState(
     USERTHREADSTATECLASS ThreadState);

DWORD
NtUserGetListboxString(
     HWND hwnd,
     UINT msg,
     DWORD wParam,
     PLARGE_STRING pString,
     DWORD xParam,
     DWORD xpfn,
     PBOOL pbNotString);

HWND
NtUserCreateWindowEx(
     DWORD dwExStyle,
     PLARGE_STRING pstrClassName,
     PLARGE_STRING pstrWindowName ,
     DWORD dwStyle,
     int x,
     int y,
     int nWidth,
     int nHeight,
     HWND hwndParent,
     HMENU hmenu,
     HANDLE hModule,
     LPVOID pParam,
     DWORD dwFlags,
     LPDWORD pWOW );

NTSTATUS
NtUserBuildHwndList(
     HDESK hdesk,
     HWND hwndNext,
     BOOL fEnumChildren,
     DWORD idThread,
     UINT cHwndMax,
     HWND *phwndFirst,
     PUINT pcHwndNeeded);

NTSTATUS
NtUserBuildPropList(
     HWND hwnd,
     UINT cPropMax,
     PPROPSET pPropSet,
     PUINT pcPropNeeded);

NTSTATUS
NtUserBuildNameList(
     HWINSTA hwinsta,
     UINT cbNameList,
     PNAMELIST pNameList,
     PUINT pcbNeeded);

HKL
NtUserActivateKeyboardLayout(
     HKL hkl,
     UINT Flags);

HKL
NtUserLoadKeyboardLayoutEx(
     HANDLE hFile,
     DWORD offTable,
     HKL hkl,
     PUNICODE_STRING pstrKLID,
     UINT KbdInputLocale,
     UINT Flags);

BOOL
NtUserUnloadKeyboardLayout(
     HKL hkl);

BOOL
NtUserSetSystemMenu(
     HWND hwnd,
     HMENU hmenu);

BOOL
NtUserDragDetect(
     HWND hwnd,
     POINT pt);

UINT
NtUserSetSystemTimer(
     HWND hwnd,
     UINT nIDEvent,
     DWORD dwElapse,
     WNDPROC pTimerFunc);

BOOL
NtUserQuerySendMessage(
     PMSG pmsg);

void
NtUserkeybd_event(
     BYTE bVk,
     BYTE bScan,
     DWORD dwFlags,
     DWORD dwExtraInfo);

void
NtUsermouse_event(
     DWORD dwFlags,
     DWORD dx,
     DWORD dy,
     DWORD cButtons,
     DWORD dwExtraInfo);

BOOL
NtUserImpersonateDdeClientWindow(
     HWND hwndClient,
     HWND hwndServer);

DWORD
NtUserGetCPD(
     HWND hwnd,
     DWORD options,
     DWORD dwData);

int
NtUserCopyAcceleratorTable(
     HACCEL hAccelSrc,
      LPACCEL lpAccelDst ,
     int cAccelEntries);

HWND
NtUserFindWindowEx(
     HWND hwndParent,
     HWND hwndChild,
     PUNICODE_STRING pstrClassName ,
     PUNICODE_STRING pstrWindowName );

BOOL
NtUserGetClassInfo(
     HINSTANCE hInstance ,
     PUNICODE_STRING pstrClassName,
     LPWNDCLASSEXW lpWndClass,
     LPWSTR *ppszMenuName,
     BOOL bAnsi);

int
NtUserGetClassName(
     HWND hwnd,
     PUNICODE_STRING pstrClassName);

int
NtUserGetClipboardFormatName(
     UINT format,
     LPWSTR lpszFormatName,
     UINT chMax);

int
NtUserGetKeyNameText(
     LONG lParam,
     LPWSTR lpszKeyName,
     UINT chMax);

BOOL
NtUserGetKeyboardLayoutName(
     PUNICODE_STRING pstrKLID);

UINT
NtUserGetKeyboardLayoutList(
     UINT nItems,
     HKL *lpBuff);

NTSTATUS
NtUserGetStats(
      HANDLE hProcess,
      int iPidType,
     PVOID pResults,
      UINT cjResultSize);

UINT
NtUserMapVirtualKeyEx(
     UINT uCode,
     UINT uMapType,
     DWORD dwHKLorPKL,
     BOOL bHKL);

ATOM
NtUserRegisterClassExWOW(
     WNDCLASSEX *lpWndClass,
     PUNICODE_STRING pstrClassName,
     PCLSMENUNAME pcmn,
     PROC lpfnWorker,
     WORD fnid,
     DWORD dwFlags,
     LPDWORD pdwWOWstuff );

UINT
NtUserRegisterClipboardFormat(
     PUNICODE_STRING pstrFormat);

UINT
NtUserRegisterWindowMessage(
     PUNICODE_STRING pstrMessage);

HANDLE
NtUserRemoveProp(
     HWND hwnd,
     DWORD dwProp);

BOOL
NtUserSetProp(
     HWND hwnd,
     DWORD dwProp,
     HANDLE hData);

BOOL
NtUserUnregisterClass(
     PUNICODE_STRING pstrClassName,
     HINSTANCE hInstance,
     PCLSMENUNAME pcmn);

SHORT
NtUserVkKeyScanEx(
     WCHAR ch,
     DWORD dwHKLorPKL,
     BOOL bHKL);

NTSTATUS
NtUserEnumDisplayDevices(
     PVOID Unused,
     DWORD iDevNum,
     LPDISPLAY_DEVICEW lpDisplayDevice);

NTSTATUS
NtUserEnumDisplaySettings(
     PUNICODE_STRING pstrDeviceName,
     DWORD           iModeNum,
     LPDEVMODEW     lpDevMode,
     DWORD           dwFlags);

LONG
NtUserChangeDisplaySettings(
     PUNICODE_STRING pstrDeviceName,
     LPDEVMODEW lpDevMode,
     HWND hwnd,
     DWORD dwFlags,
     PVOID lParam);

BOOL
NtUserCallMsgFilter(
     LPMSG lpMsg,
     int nCode);

int
NtUserDrawMenuBarTemp(
     HWND hwnd,
     HDC hdc,
     LPRECT lprc,
     HMENU hMenu,
     HFONT hFont);

BOOL
NtUserECQueryInputLangChange(
     HWND hwnd,
     WPARAM wParam,
     HKL hkl,
     UINT iCharset);

BOOL
NtUserDrawCaptionTemp(
     HWND hwnd,
     HDC hdc,
     LPRECT lprc,
     HFONT hFont,
     HICON hicon,
     PUNICODE_STRING pstrText,
     UINT flags);

SHORT
NtUserGetKeyState(
     int vk);

BOOL
NtUserGetKeyboardState(
     PBYTE pb);

HANDLE
NtUserQueryWindow(
     HWND hwnd,
     WINDOWINFOCLASS WindowInfo);

BOOL
NtUserSBGetParms(
     HWND hwnd,
     int code,
     PSBDATA pw,
     LPSCROLLINFO lpsi);

void
NtUserPlayEventSound(
     PUNICODE_STRING pstrEvent);

BOOL
NtUserBitBltSysBmp(
     HDC hdc,
     int xDest,
     int yDest,
     int cxDest,
     int cyDest,
     int xSrc,
     int ySrc,
     DWORD dwRop);

LONG
NtUserfnINLPCREATESTRUCT(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnINLPMDICREATESTRUCT(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    PUNICODE_STRING pstrClass,
    PUNICODE_STRING pstrTitle,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnOUTDWORDDWORD(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnOPTOUTLPDWORDOPTOUTLPDWORD(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnINOUTNEXTMENU(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnDWORDOPTINLPMSG(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnCOPYGLOBALDATA(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnCOPYDATA(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnSENTDDEMSG(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnDDEINIT(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnDWORD(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnINPAINTCLIPBRD(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnINSIZECLIPBRD(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnFULLSCREEN(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnINOUTDRAG(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnGETTEXTLENGTHS(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnINLPDROPSTRUCT(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnINOUTLPSCROLLINFO(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnINOUTLPPOINT5(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnINSTRING(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnINSTRINGNULL(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnINOUTNCCALCSIZE(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnINOUTSTYLECHANGE(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnINOUTLPRECT(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnOUTLPSCROLLINFO(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnOUTLPRECT(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnINLPCOMPAREITEMSTRUCT(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnINLPDELETEITEMSTRUCT(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnINLPHLPSTRUCT(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnINLPHELPINFOSTRUCT(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnINLPDRAWITEMSTRUCT(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnINOUTLPMEASUREITEMSTRUCT(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnOUTSTRING(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnOUTDWORDINDWORD(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnINCNTOUTSTRING(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnINCNTOUTSTRINGNULL(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnPOUTLPINT(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnPOPTINLPUINT(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnINOUTLPWINDOWPOS(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

LONG
NtUserfnINLPWINDOWPOS(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

DWORD
NtUserfnHkINLPCBTCREATESTRUCT(
     UINT msg,
     DWORD wParam,
     LPCBT_CREATEWND pcbt,
     PLARGE_UNICODE_STRING pstrName ,
     PUNICODE_STRING pstrClass,
     DWORD xpfnProc);

DWORD
NtUserfnHkINLPRECT(
     DWORD nCode,
     DWORD wParam,
     LPRECT lParam,
     DWORD xParam,
     DWORD xpfnProc);

DWORD
NtUserfnHkINDWORD(
     DWORD nCode,
     DWORD wParam,
     LONG lParam,
     DWORD xParam,
     DWORD xpfnProc);

DWORD
NtUserfnHkINLPMSG(
     DWORD nCode,
     DWORD wParam,
     LPMSG lParam,
     DWORD xParam,
     DWORD xpfnProc);

DWORD
NtUserfnHkINLPDEBUGHOOKSTRUCT(
     DWORD nCode,
     DWORD wParam,
     LPDEBUGHOOKINFO lParam,
     DWORD xParam,
     DWORD xpfnProc);

DWORD
NtUserfnHkOPTINLPEVENTMSG(
     DWORD nCode,
     DWORD wParam,
      LPEVENTMSGMSG lParam ,
     DWORD xParam,
     DWORD xpfnProc);

DWORD
NtUserfnHkINLPMOUSEHOOKSTRUCT(
     DWORD nCode,
     DWORD wParam,
     LPMOUSEHOOKSTRUCT lParam,
     DWORD xParam,
     DWORD xpfnProc);

DWORD
NtUserfnHkINLPCBTACTIVATESTRUCT(
     DWORD nCode,
     DWORD wParam,
     LPCBTACTIVATESTRUCT lParam,
     DWORD xParam,
     DWORD xpfnProc);

LONG
NtUserfnINDEVICECHANGE(
    HWND hwnd,
    UINT msg,
    DWORD wParam,
    LONG lParam,
    DWORD xParam,
    DWORD xpfnProc,
    BOOL bAnsi);

NTSTATUS
NtUserGetMediaChangeEvents(
     ULONG cMaxEvents,
     HANDLE phEvent[] ,
     PULONG pcEventsNeeded);




























































































































































































































































































































































































typedef struct _CONSOLE_GRAPHICS_BUFFER_INFO {
    DWORD dwBitMapInfoLength;
    LPBITMAPINFO lpBitMapInfo;
    DWORD dwUsage;
    HANDLE hMutex;
    PVOID lpBitMap;
} CONSOLE_GRAPHICS_BUFFER_INFO, *PCONSOLE_GRAPHICS_BUFFER_INFO;





BOOL
__stdcall
InvalidateConsoleDIBits(
    HANDLE hConsoleOutput,
    PSMALL_RECT lpRect
    );



void
__stdcall
SetLastConsoleEventActive( void );









BOOL
__stdcall
VDMConsoleOperation(
    DWORD iFunction,
    LPVOID lpData
    );

typedef struct _CONSOLE_FONT_INFO {
    DWORD  nFont;
    COORD  dwFontSize;
} CONSOLE_FONT_INFO, *PCONSOLE_FONT_INFO;


BOOL
__stdcall
SetConsoleFont(
    HANDLE hConsoleOutput,
    DWORD nFont
    );

BOOL
__stdcall
SetConsoleIcon(
    HICON hIcon
    );

BOOL
__stdcall
GetCurrentConsoleFont(
    HANDLE hConsoleOutput,
    BOOL bMaximumWindow,
    PCONSOLE_FONT_INFO lpConsoleCurrentFont
    );

COORD
__stdcall
GetConsoleFontSize(
    HANDLE hConsoleOutput,
    DWORD nFont
    );

DWORD
__stdcall
GetConsoleFontInfo(
    HANDLE hConsoleOutput,
    BOOL bMaximumWindow,
    DWORD nLength,
    PCONSOLE_FONT_INFO lpConsoleFontInfo
    );

DWORD
__stdcall
GetNumberOfConsoleFonts(
    void
    );

BOOL
__stdcall
SetConsoleCursor(
    HANDLE hConsoleOutput,
    HCURSOR hCursor
    );

int
__stdcall
ShowConsoleCursor(
    HANDLE hConsoleOutput,
    BOOL bShow
    );

HMENU
ConsoleMenuControl(
    HANDLE hConsoleOutput,
    UINT dwCommandIdLow,
    UINT dwCommandIdHigh
    );

BOOL
SetConsolePalette(
    HANDLE hConsoleOutput,
    HPALETTE hPalette,
    UINT dwUsage
    );




BOOL
SetConsoleDisplayMode(
    HANDLE hConsoleOutput,
    DWORD dwFlags,
    PCOORD lpNewScreenBufferDimensions
    );





BOOL
RegisterConsoleVDM(
     DWORD dwRegisterFlags,
     HANDLE hStartHardwareEvent,
     HANDLE hEndHardwareEvent,
     LPWSTR lpStateSectionName,
     DWORD dwStateSectionNameLength,
     LPDWORD lpStateLength,
     PVOID *lpState,
     LPWSTR lpVDMBufferSectionName,
     DWORD dwVDMBufferSectionNameLength,
    COORD VDMBufferSize ,
     PVOID *lpVDMBuffer
    );

BOOL
GetConsoleHardwareState(
    HANDLE hConsoleOutput,
    PCOORD lpResolution,
    PCOORD lpFontSize
    );

BOOL
SetConsoleHardwareState(
    HANDLE hConsoleOutput,
    COORD dwResolution,
    COORD dwFontSize
    );




BOOL
GetConsoleDisplayMode(
    LPDWORD lpModeFlags
    );







BOOL
AddConsoleAliasA(
     LPSTR Source,
     LPSTR Target,
     LPSTR ExeName
    );
BOOL
AddConsoleAliasW(
     LPWSTR Source,
     LPWSTR Target,
     LPWSTR ExeName
    );






DWORD
GetConsoleAliasA(
     LPSTR Source,
     LPSTR TargetBuffer,
     DWORD TargetBufferLength,
     LPSTR ExeName
    );
DWORD
GetConsoleAliasW(
     LPWSTR Source,
     LPWSTR TargetBuffer,
     DWORD TargetBufferLength,
     LPWSTR ExeName
    );






DWORD
GetConsoleAliasesLengthA(
     LPSTR ExeName
    );
DWORD
GetConsoleAliasesLengthW(
     LPWSTR ExeName
    );






DWORD
GetConsoleAliasExesLengthA( void );
DWORD
GetConsoleAliasExesLengthW( void );






DWORD
GetConsoleAliasesA(
     LPSTR AliasBuffer,
     DWORD AliasBufferLength,
     LPSTR ExeName
    );
DWORD
GetConsoleAliasesW(
     LPWSTR AliasBuffer,
     DWORD AliasBufferLength,
     LPWSTR ExeName
    );






DWORD
GetConsoleAliasExesA(
     LPSTR ExeNameBuffer,
     DWORD ExeNameBufferLength
    );
DWORD
GetConsoleAliasExesW(
     LPWSTR ExeNameBuffer,
     DWORD ExeNameBufferLength
    );






void
ExpungeConsoleCommandHistoryA(
     LPSTR ExeName
    );
void
ExpungeConsoleCommandHistoryW(
     LPWSTR ExeName
    );






BOOL
SetConsoleNumberOfCommandsA(
     DWORD Number,
     LPSTR ExeName
    );
BOOL
SetConsoleNumberOfCommandsW(
     DWORD Number,
     LPWSTR ExeName
    );






DWORD
GetConsoleCommandHistoryLengthA(
     LPSTR ExeName
    );
DWORD
GetConsoleCommandHistoryLengthW(
     LPWSTR ExeName
    );






DWORD
GetConsoleCommandHistoryA(
     LPSTR Commands,
     DWORD CommandBufferLength,
     LPSTR ExeName
    );
DWORD
GetConsoleCommandHistoryW(
     LPWSTR Commands,
     DWORD CommandBufferLength,
     LPWSTR ExeName
    );








BOOL
SetConsoleCommandHistoryMode(
     DWORD Flags
    );










typedef struct _APPKEY {
    WORD Modifier;
    WORD ScanCode;
} APPKEY, *LPAPPKEY;





BOOL
SetConsoleKeyShortcuts(
    BOOL bSet,
    BYTE bReserveKeys,
    LPAPPKEY lpAppKeys,
    DWORD dwNumAppKeys
    );

BOOL
SetConsoleMenuClose(
    BOOL bEnable
    );

DWORD
GetConsoleInputExeNameA(
     DWORD nBufferLength,
     LPSTR lpBuffer
    );
DWORD
GetConsoleInputExeNameW(
     DWORD nBufferLength,
     LPWSTR lpBuffer
    );






BOOL
SetConsoleInputExeNameA(
     LPSTR lpExeName
    );
BOOL
SetConsoleInputExeNameW(
     LPWSTR lpExeName
    );






typedef struct _CONSOLE_READCONSOLE_CONTROL {
     ULONG nLength;           
     ULONG nInitialChars;
     ULONG dwCtrlWakeupMask;
     ULONG dwControlKeyState;
} CONSOLE_READCONSOLE_CONTROL, *PCONSOLE_READCONSOLE_CONTROL;






BOOL
ConsoleSubst(
     DWORD dwDriveNumber,
     DWORD dwFlag,
      LPWSTR lpPhysicalDriveBuffer,
     DWORD dwPhysicalDriveBufferLength
    );






BOOL
__stdcall
ReadConsoleInputExA(
    HANDLE hConsoleInput,
    PINPUT_RECORD lpBuffer,
    DWORD nLength,
    LPDWORD lpNumberOfEventsRead,
    USHORT wFlags
    );
BOOL
__stdcall
ReadConsoleInputExW(
    HANDLE hConsoleInput,
    PINPUT_RECORD lpBuffer,
    DWORD nLength,
    LPDWORD lpNumberOfEventsRead,
    USHORT wFlags
    );






BOOL
__stdcall
WriteConsoleInputVDMA(
    HANDLE hConsoleInput,
    PINPUT_RECORD lpBuffer,
    DWORD nLength,
    LPDWORD lpNumberOfEventsWritten
    );
BOOL
__stdcall
WriteConsoleInputVDMW(
    HANDLE hConsoleInput,
    PINPUT_RECORD lpBuffer,
    DWORD nLength,
    LPDWORD lpNumberOfEventsWritten
    );












































                                                    
                                                    


                                                    
                                                    
                                                    
                                                    
                                                    











PIMAGE_NT_HEADERS
__declspec(dllimport) __stdcall
CheckSumMappedFile (
    LPVOID BaseAddress,
    DWORD FileLength,
    LPDWORD HeaderSum,
    LPDWORD CheckSum
    );

DWORD
__declspec(dllimport) __stdcall
MapFileAndCheckSumA (
    LPSTR Filename,
    LPDWORD HeaderSum,
    LPDWORD CheckSum
    );

DWORD
__declspec(dllimport) __stdcall
MapFileAndCheckSumW (
    PWSTR Filename,
    LPDWORD HeaderSum,
    LPDWORD CheckSum
    );








BOOL
__declspec(dllimport) __stdcall
TouchFileTimes (
    HANDLE FileHandle,
    LPSYSTEMTIME lpSystemTime
    );

BOOL
__declspec(dllimport) __stdcall
SplitSymbols (
    LPSTR ImageName,
    LPSTR SymbolsPath,
    LPSTR SymbolFilePath,
    DWORD Flags                 
    );

HANDLE
__declspec(dllimport) __stdcall
FindDebugInfoFile (
    LPSTR FileName,
    LPSTR SymbolPath,
    LPSTR DebugFilePath
    );

HANDLE
__declspec(dllimport) __stdcall
FindExecutableImage(
    LPSTR FileName,
    LPSTR SymbolPath,
    LPSTR ImageFilePath
    );

BOOL
__declspec(dllimport) __stdcall
UpdateDebugInfoFile(
    LPSTR ImageFileName,
    LPSTR SymbolPath,
    LPSTR DebugFilePath,
    PIMAGE_NT_HEADERS NtHeaders
    );

BOOL
__declspec(dllimport) __stdcall
UpdateDebugInfoFileEx(
    LPSTR ImageFileName,
    LPSTR SymbolPath,
    LPSTR DebugFilePath,
    PIMAGE_NT_HEADERS NtHeaders,
    DWORD OldChecksum
    );

BOOL
__declspec(dllimport) __stdcall
BindImage(
     LPSTR ImageName,
     LPSTR DllPath,
     LPSTR SymbolPath
    );

typedef enum _IMAGEHLP_STATUS_REASON {
    BindOutOfMemory,
    BindRvaToVaFailed,
    BindNoRoomInImage,
    BindImportModuleFailed,
    BindImportProcedureFailed,
    BindImportModule,
    BindImportProcedure,
    BindForwarder,
    BindForwarderNOT,
    BindImageModified,
    BindExpandFileHeaders,
    BindImageComplete,
    BindMismatchedSymbols,
    BindSymbolsNotUpdated
} IMAGEHLP_STATUS_REASON;

typedef
BOOL
(__stdcall *PIMAGEHLP_STATUS_ROUTINE)(
    IMAGEHLP_STATUS_REASON Reason,
    LPSTR ImageName,
    LPSTR DllName,
    ULONG Va,
    ULONG Parameter
    );


BOOL
__declspec(dllimport) __stdcall
BindImageEx(
     DWORD Flags,
     LPSTR ImageName,
     LPSTR DllPath,
     LPSTR SymbolPath,
     PIMAGEHLP_STATUS_ROUTINE StatusRoutine
    );





BOOL
__declspec(dllimport) __stdcall
ReBaseImage(
         LPSTR CurrentImageName,
         LPSTR SymbolPath,
         BOOL  fReBase,          
         BOOL  fRebaseSysfileOk, 
         BOOL  fGoingDown,       
         ULONG CheckImageSize,   
        ULONG *OldImageSize,    
        ULONG *OldImageBase,    
        ULONG *NewImageSize,    
      ULONG *NewImageBase,    
                                   
         ULONG TimeStamp         
    );




typedef struct _LOADED_IMAGE {
    LPSTR                 ModuleName;
    HANDLE                hFile;
    PUCHAR                MappedAddress;
    PIMAGE_NT_HEADERS     FileHeader;
    PIMAGE_SECTION_HEADER LastRvaSection;
    ULONG                 NumberOfSections;
    PIMAGE_SECTION_HEADER Sections;
    ULONG                 Characteristics;
    BOOLEAN               fSystemImage;
    BOOLEAN               fDOSImage;
    LIST_ENTRY            Links;
    ULONG                 SizeOfImage;
} LOADED_IMAGE, *PLOADED_IMAGE;


PLOADED_IMAGE
__declspec(dllimport) __stdcall
ImageLoad(
    LPSTR DllName,
    LPSTR DllPath
    );

BOOL
__declspec(dllimport) __stdcall
ImageUnload(
    PLOADED_IMAGE LoadedImage
    );

PIMAGE_NT_HEADERS
__declspec(dllimport) __stdcall
ImageNtHeader (
     PVOID Base
    );

PVOID
__declspec(dllimport) __stdcall
ImageDirectoryEntryToData (
     PVOID Base,
     BOOLEAN MappedAsImage,
     USHORT DirectoryEntry,
     PULONG Size
    );

PIMAGE_SECTION_HEADER
__declspec(dllimport) __stdcall
ImageRvaToSection(
     PIMAGE_NT_HEADERS NtHeaders,
     PVOID Base,
     ULONG Rva
    );

PVOID
__declspec(dllimport) __stdcall
ImageRvaToVa(
     PIMAGE_NT_HEADERS NtHeaders,
     PVOID Base,
     ULONG Rva,
      PIMAGE_SECTION_HEADER *LastRvaSection
    );

BOOL
__declspec(dllimport) __stdcall
MapAndLoad(
    LPSTR ImageName,
    LPSTR DllPath,
    PLOADED_IMAGE LoadedImage,
    BOOL DotDll,
    BOOL ReadOnly
    );

BOOL
__declspec(dllimport) __stdcall
GetImageConfigInformation(
    PLOADED_IMAGE LoadedImage,
    PIMAGE_LOAD_CONFIG_DIRECTORY ImageConfigInformation
    );

DWORD
__declspec(dllimport) __stdcall
GetImageUnusedHeaderBytes(
    PLOADED_IMAGE LoadedImage,
    LPDWORD SizeUnusedHeaderBytes
    );

BOOL
__declspec(dllimport) __stdcall
SetImageConfigInformation(
    PLOADED_IMAGE LoadedImage,
    PIMAGE_LOAD_CONFIG_DIRECTORY ImageConfigInformation
    );

BOOL
__declspec(dllimport) __stdcall
UnMapAndLoad(
   PLOADED_IMAGE LoadedImage
   );

typedef struct _IMAGE_DEBUG_INFORMATION {
    LIST_ENTRY List;
    DWORD Size;
    PVOID MappedBase;
    USHORT Machine;
    USHORT Characteristics;
    DWORD CheckSum;
    DWORD ImageBase;
    DWORD SizeOfImage;

    DWORD NumberOfSections;
    PIMAGE_SECTION_HEADER Sections;

    DWORD ExportedNamesSize;
    LPSTR ExportedNames;

    DWORD NumberOfFunctionTableEntries;
    PIMAGE_FUNCTION_ENTRY FunctionTableEntries;
    DWORD LowestFunctionStartingAddress;
    DWORD HighestFunctionEndingAddress;

    DWORD NumberOfFpoTableEntries;
    PFPO_DATA FpoTableEntries;

    DWORD SizeOfCoffSymbols;
    PIMAGE_COFF_SYMBOLS_HEADER CoffSymbols;

    DWORD SizeOfCodeViewSymbols;
    PVOID CodeViewSymbols;

    LPSTR ImageFilePath;
    LPSTR ImageFileName;
    LPSTR DebugFilePath;

    DWORD TimeDateStamp;

    BOOL  RomImage;
    PIMAGE_DEBUG_DIRECTORY DebugDirectory;
    DWORD NumberOfDebugDirectories;

    DWORD Reserved[ 3 ];

} IMAGE_DEBUG_INFORMATION, *PIMAGE_DEBUG_INFORMATION;


PIMAGE_DEBUG_INFORMATION
__declspec(dllimport) __stdcall
MapDebugInformation (
    HANDLE FileHandle,
    LPSTR FileName,
    LPSTR SymbolPath,
    DWORD ImageBase
    );

BOOL
__declspec(dllimport) __stdcall
UnmapDebugInformation(
    PIMAGE_DEBUG_INFORMATION DebugInfo
    );

HANDLE
__declspec(dllimport) __stdcall
FindExecutableImage(
    LPSTR FileName,
    LPSTR SymbolPath,
    LPSTR ImageFilePath
    );

BOOL
__declspec(dllimport) __stdcall
SearchTreeForFile(
    LPSTR RootPath,
    LPSTR InputPathName,
    LPSTR OutputPathBuffer
    );

BOOL
__declspec(dllimport) __stdcall
MakeSureDirectoryPathExists(
    LPCSTR DirPath
    );




















                                                                                                   



DWORD
__declspec(dllimport) __stdcall
__stdcall
UnDecorateSymbolName(
    LPCSTR   DecoratedName,         
    LPSTR    UnDecoratedName,       
    DWORD    UndecoratedLength,     
    DWORD    Flags                  
    );





typedef enum {
    AddrMode1616,
    AddrMode1632,
    AddrModeReal,
    AddrModeFlat
} ADDRESS_MODE;

typedef struct _tagADDRESS {
    DWORD         Offset;
    WORD          Segment;
    ADDRESS_MODE  Mode;
} ADDRESS, *LPADDRESS;








typedef struct _KDHELP {

    
    
    
    
    DWORD   Thread;

    
    
    
    
    DWORD   ThCallbackStack;

    
    
    
    
    DWORD   NextCallback;

    
    DWORD   FramePointer;

    
    
    
    DWORD   KiCallUserMode;

    
    
    
    DWORD   KeUserCallbackDispatcher;

} KDHELP, *PKDHELP;


typedef struct _tagSTACKFRAME {
    ADDRESS     AddrPC;               
    ADDRESS     AddrReturn;           
    ADDRESS     AddrFrame;            
    ADDRESS     AddrStack;            
    LPVOID      FuncTableEntry;       
    DWORD       Params[4];            
    BOOL        Far;                  
    BOOL        Virtual;              
    DWORD       Reserved[3];          
    KDHELP      KdHelp;
} STACKFRAME, *LPSTACKFRAME;

typedef
BOOL
(__stdcall *PREAD_PROCESS_MEMORY_ROUTINE)(
    HANDLE  hProcess,
    LPCVOID lpBaseAddress,
    LPVOID  lpBuffer,
    DWORD   nSize,
    LPDWORD lpNumberOfBytesRead
    );

typedef
LPVOID
(__stdcall *PFUNCTION_TABLE_ACCESS_ROUTINE)(
    HANDLE  hProcess,
    DWORD   AddrBase
    );

typedef
DWORD
(__stdcall *PGET_MODULE_BASE_ROUTINE)(
    HANDLE  hProcess,
    DWORD   ReturnAddress
    );


typedef
DWORD
(__stdcall *PTRANSLATE_ADDRESS_ROUTINE)(
    HANDLE    hProcess,
    HANDLE    hThread,
    LPADDRESS lpaddr
    );

BOOL
__declspec(dllimport) __stdcall
StackWalk(
    DWORD                             MachineType,
    HANDLE                            hProcess,
    HANDLE                            hThread,
    LPSTACKFRAME                      StackFrame,
    LPVOID                            ContextRecord,
    PREAD_PROCESS_MEMORY_ROUTINE      ReadMemoryRoutine,
    PFUNCTION_TABLE_ACCESS_ROUTINE    FunctionTableAccessRoutine,
    PGET_MODULE_BASE_ROUTINE          GetModuleBaseRoutine,
    PTRANSLATE_ADDRESS_ROUTINE        TranslateAddress
    );



typedef struct API_VERSION {
    USHORT  MajorVersion;
    USHORT  MinorVersion;
    USHORT  Revision;
    USHORT  Reserved;
} API_VERSION, *LPAPI_VERSION;

LPAPI_VERSION
__declspec(dllimport) __stdcall
ImagehlpApiVersion(
    void
    );

LPAPI_VERSION
__declspec(dllimport) __stdcall
ImagehlpApiVersionEx(
    LPAPI_VERSION AppVersion
    );

DWORD
__declspec(dllimport) __stdcall
GetTimestampForLoadedLibrary(
    HMODULE Module
    );

BOOL
__declspec(dllimport) __stdcall
RemovePrivateCvSymbolic(
    PCHAR   DebugData,
    PCHAR * NewDebugData,
    ULONG * NewDebugSize
    );

void
__declspec(dllimport) __stdcall
RemoveRelocations(
    PCHAR ImageName
    );




typedef BOOL
(__stdcall *PSYM_ENUMMODULES_CALLBACK)(
    LPSTR ModuleName,
    ULONG BaseOfDll,
    PVOID UserContext
    );

typedef BOOL
(__stdcall *PSYM_ENUMSYMBOLS_CALLBACK)(
    LPSTR SymbolName,
    ULONG SymbolAddress,
    ULONG SymbolSize,
    PVOID UserContext
    );

typedef BOOL
(__stdcall *PENUMLOADED_MODULES_CALLBACK)(
    LPSTR ModuleName,
    ULONG ModuleBase,
    ULONG ModuleSize,
    PVOID UserContext
    );

typedef BOOL
(__stdcall *PSYMBOL_REGISTERED_CALLBACK)(
    HANDLE  hProcess,
    ULONG   ActionCode,
    PVOID   CallbackData,
    PVOID   UserContext
    );










typedef enum {
    SymNone,
    SymCoff,
    SymCv,
    SymPdb,
    SymExport,
    SymDeferred,
    SymSym                  
} SYM_TYPE;




typedef struct _IMAGEHLP_SYMBOL {
    DWORD                       SizeOfStruct;           
    DWORD                       Address;                
    DWORD                       Size;                   
    DWORD                       Flags;                  
    DWORD                       MaxNameLength;          
    CHAR                        Name[1];                
} IMAGEHLP_SYMBOL, *PIMAGEHLP_SYMBOL;




typedef struct _IMAGEHLP_MODULE {
    DWORD                       SizeOfStruct;           
    DWORD                       BaseOfImage;            
    DWORD                       ImageSize;              
    DWORD                       TimeDateStamp;          
    DWORD                       CheckSum;               
    DWORD                       NumSyms;                
    SYM_TYPE                    SymType;                
    CHAR                        ModuleName[32];         
    CHAR                        ImageName[256];         
    CHAR                        LoadedImageName[256];   
} IMAGEHLP_MODULE, *PIMAGEHLP_MODULE;











typedef struct _IMAGEHLP_DEFERRED_SYMBOL_LOAD {
    DWORD                       SizeOfStruct;           
    DWORD                       BaseOfImage;            
    DWORD                       CheckSum;               
    DWORD                       TimeDateStamp;          
    CHAR                        FileName[260];     
} IMAGEHLP_DEFERRED_SYMBOL_LOAD, *PIMAGEHLP_DEFERRED_SYMBOL_LOAD;

typedef struct _IMAGEHLP_DUPLICATE_SYMBOL {
    DWORD                       SizeOfStruct;           
    DWORD                       NumberOfDups;           
    PIMAGEHLP_SYMBOL            Symbol;                 
    ULONG                       SelectedSymbol;         
} IMAGEHLP_DUPLICATE_SYMBOL, *PIMAGEHLP_DUPLICATE_SYMBOL;












DWORD
__declspec(dllimport) __stdcall
SymSetOptions(
     DWORD   SymOptions
    );

DWORD
__declspec(dllimport) __stdcall
SymGetOptions(
    void
    );

BOOL
__declspec(dllimport) __stdcall
SymCleanup(
     HANDLE hProcess
    );

BOOL
__declspec(dllimport) __stdcall
SymEnumerateModules(
     HANDLE                       hProcess,
     PSYM_ENUMMODULES_CALLBACK    EnumModulesCallback,
     PVOID                        UserContext
    );

BOOL
__declspec(dllimport) __stdcall
SymEnumerateSymbols(
     HANDLE                       hProcess,
     DWORD                        BaseOfDll,
     PSYM_ENUMSYMBOLS_CALLBACK    EnumSymbolsCallback,
     PVOID                        UserContext
    );

BOOL
__declspec(dllimport) __stdcall
EnumerateLoadedModules(
     HANDLE                           hProcess,
     PENUMLOADED_MODULES_CALLBACK     EnumLoadedModulesCallback,
     PVOID                            UserContext
    );

LPVOID
__declspec(dllimport) __stdcall
SymFunctionTableAccess(
    HANDLE  hProcess,
    DWORD   AddrBase
    );

BOOL
__declspec(dllimport) __stdcall
SymGetModuleInfo(
      HANDLE              hProcess,
      DWORD               dwAddr,
     PIMAGEHLP_MODULE    ModuleInfo
    );

DWORD
__declspec(dllimport) __stdcall
SymGetModuleBase(
      HANDLE              hProcess,
      DWORD               dwAddr
    );

BOOL
__declspec(dllimport) __stdcall
SymGetSymFromAddr(
      HANDLE              hProcess,
      DWORD               dwAddr,
     PDWORD              pdwDisplacement,
     PIMAGEHLP_SYMBOL    Symbol
    );

BOOL
__declspec(dllimport) __stdcall
SymGetSymFromName(
      HANDLE              hProcess,
      LPSTR               Name,
     PIMAGEHLP_SYMBOL    Symbol
    );

BOOL
__declspec(dllimport) __stdcall
SymGetSymNext(
         HANDLE              hProcess,
      PIMAGEHLP_SYMBOL    Symbol
    );

BOOL
__declspec(dllimport) __stdcall
SymGetSymPrev(
         HANDLE              hProcess,
      PIMAGEHLP_SYMBOL    Symbol
    );

BOOL
__declspec(dllimport) __stdcall
SymInitialize(
     HANDLE   hProcess,
     LPSTR    UserSearchPath,
     BOOL     fInvadeProcess
    );

BOOL
__declspec(dllimport) __stdcall
SymGetSearchPath(
      HANDLE          hProcess,
     LPSTR           SearchPathA,
      DWORD           SearchPathLength
    );

BOOL
__declspec(dllimport) __stdcall
SymSetSearchPath(
     HANDLE           hProcess,
     LPSTR            SearchPathA
    );

BOOL
__declspec(dllimport) __stdcall
SymLoadModule(
      HANDLE          hProcess,
      HANDLE          hFile,
      PSTR            ImageName,
      PSTR            ModuleName,
      DWORD           BaseOfDll,
      DWORD           SizeOfDll
    );

BOOL
__declspec(dllimport) __stdcall
SymUnloadModule(
      HANDLE          hProcess,
      DWORD           BaseOfDll
    );

BOOL
__declspec(dllimport) __stdcall
SymUnDName(
      PIMAGEHLP_SYMBOL sym,               
     LPSTR            UnDecName,         
      DWORD            UnDecNameLength    
    );

BOOL
__declspec(dllimport) __stdcall
SymRegisterCallback(
     HANDLE                       hProcess,
     PSYMBOL_REGISTERED_CALLBACK  CallbackFunction,
     PVOID                        UserContext
    );









typedef PVOID DIGEST_HANDLE;

typedef BOOL (__stdcall *DIGEST_FUNCTION) (DIGEST_HANDLE refdata, PBYTE pData, DWORD dwLength);

BOOL
__declspec(dllimport) __stdcall
ImageGetDigestStream(
          HANDLE  FileHandle,
          DWORD   DigestLevel,
          DIGEST_FUNCTION DigestFunction,
          DIGEST_HANDLE   DigestHandle
    );

BOOL
__declspec(dllimport) __stdcall
ImageAddCertificate(
          HANDLE  FileHandle,
          LPWIN_CERTIFICATE   Certificate,
         PDWORD  Index
    );

BOOL
__declspec(dllimport) __stdcall
ImageRemoveCertificate(
          HANDLE   FileHandle,
          DWORD    Index
    );

BOOL
__declspec(dllimport) __stdcall
ImageEnumerateCertificates(
          HANDLE  FileHandle,
          WORD    TypeFilter,
         PDWORD  CertificateCount,
       PDWORD  Indices ,
       DWORD   IndexCount  
    );

BOOL
__declspec(dllimport) __stdcall
ImageGetCertificateData(
          HANDLE  FileHandle,
          DWORD   CertificateIndex,
         LPWIN_CERTIFICATE Certificate,
       PDWORD  RequiredLength
    );

BOOL
__declspec(dllimport) __stdcall
ImageGetCertificateHeader(
          HANDLE  FileHandle,
          DWORD   CertificateIndex,
       LPWIN_CERTIFICATE Certificateheader
    );































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































typedef
void
(*PNTSD_OUTPUT_ROUTINE)(
    char *,
    ...
    );

typedef
DWORD
(*PNTSD_GET_EXPRESSION)(
    char *
    );

typedef
void
(*PNTSD_GET_SYMBOL)(
    LPVOID offset,
    PUCHAR pchBuffer,
    LPDWORD pDisplacement
    );

typedef
DWORD
(*PNTSD_DISASM)(
    LPDWORD lpOffset,
    LPSTR lpBuffer,
    BOOL fShowEfeectiveAddress
    );

typedef
BOOL
(*PNTSD_CHECK_CONTROL_C)(
    void
    );

typedef struct _NTSD_EXTENSION_APIS {
    DWORD nSize;
    PNTSD_OUTPUT_ROUTINE lpOutputRoutine;
    PNTSD_GET_EXPRESSION lpGetExpressionRoutine;
    PNTSD_GET_SYMBOL lpGetSymbolRoutine;
    PNTSD_DISASM lpDisasmRoutine;
    PNTSD_CHECK_CONTROL_C lpCheckControlCRoutine;
} NTSD_EXTENSION_APIS, *PNTSD_EXTENSION_APIS;

typedef
void
(*PNTSD_EXTENSION_ROUTINE)(
    HANDLE hCurrentProcess,
    HANDLE hCurrentThread,
    DWORD dwCurrentPc,
    PNTSD_EXTENSION_APIS lpExtensionApis,
    LPSTR lpArgumentString
    );





















































typedef
void
(__stdcall*PWINDBG_OUTPUT_ROUTINE)(
    PCSTR lpFormat,
    ...
    );

typedef
ULONG
(__stdcall*PWINDBG_GET_EXPRESSION)(
    PCSTR lpExpression
    );

typedef
void
(__stdcall*PWINDBG_GET_SYMBOL)(
    PVOID   offset,
    PUCHAR  pchBuffer,
    PULONG  pDisplacement
    );

typedef
ULONG
(__stdcall*PWINDBG_DISASM)(
    PULONG lpOffset,
    PCSTR  lpBuffer,
    ULONG  fShowEffectiveAddress
    );

typedef
ULONG
(__stdcall*PWINDBG_CHECK_CONTROL_C)(
    void
    );

typedef
ULONG
(__stdcall*PWINDBG_READ_PROCESS_MEMORY_ROUTINE)(
    ULONG  offset,
    PVOID  lpBuffer,
    ULONG  cb,
    PULONG lpcbBytesRead
    );

typedef
ULONG
(__stdcall*PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE)(
    ULONG   offset,
    LPCVOID lpBuffer,
    ULONG   cb,
    PULONG  lpcbBytesWritten
    );

typedef
ULONG
(__stdcall*PWINDBG_GET_THREAD_CONTEXT_ROUTINE)(
    ULONG       Processor,
    PCONTEXT    lpContext,
    ULONG       cbSizeOfContext
    );

typedef
ULONG
(__stdcall*PWINDBG_SET_THREAD_CONTEXT_ROUTINE)(
    ULONG       Processor,
    PCONTEXT    lpContext,
    ULONG       cbSizeOfContext
    );

typedef
ULONG
(__stdcall*PWINDBG_IOCTL_ROUTINE)(
    USHORT   IoctlType,
    PVOID    lpvData,
    ULONG    cbSize
    );

typedef
ULONG
(__stdcall*PWINDBG_OLDKD_READ_PHYSICAL_MEMORY)(
    LARGE_INTEGER    address,
    PVOID            buffer,
    ULONG            count,
    PULONG           bytesread
    );

typedef
ULONG
(__stdcall*PWINDBG_OLDKD_WRITE_PHYSICAL_MEMORY)(
    LARGE_INTEGER    address,
    PVOID            buffer,
    ULONG            length,
    PULONG           byteswritten
    );


typedef struct _tagEXTSTACKTRACE {
    ULONG       FramePointer;
    ULONG       ProgramCounter;
    ULONG       ReturnAddress;
    ULONG       Args[4];
} EXTSTACKTRACE, *PEXTSTACKTRACE;


typedef
ULONG
(*PWINDBG_STACKTRACE_ROUTINE)(
    ULONG             FramePointer,
    ULONG             StackPointer,
    ULONG             ProgramCounter,
    PEXTSTACKTRACE    StackFrames,
    ULONG             Frames
    );

typedef struct _WINDBG_EXTENSION_APIS {
    ULONG                                  nSize;
    PWINDBG_OUTPUT_ROUTINE                 lpOutputRoutine;
    PWINDBG_GET_EXPRESSION                 lpGetExpressionRoutine;
    PWINDBG_GET_SYMBOL                     lpGetSymbolRoutine;
    PWINDBG_DISASM                         lpDisasmRoutine;
    PWINDBG_CHECK_CONTROL_C                lpCheckControlCRoutine;
    PWINDBG_READ_PROCESS_MEMORY_ROUTINE    lpReadProcessMemoryRoutine;
    PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE   lpWriteProcessMemoryRoutine;
    PWINDBG_GET_THREAD_CONTEXT_ROUTINE     lpGetThreadContextRoutine;
    PWINDBG_SET_THREAD_CONTEXT_ROUTINE     lpSetThreadContextRoutine;
    PWINDBG_IOCTL_ROUTINE                  lpIoctlRoutine;
    PWINDBG_STACKTRACE_ROUTINE             lpStackTraceRoutine;
} WINDBG_EXTENSION_APIS, *PWINDBG_EXTENSION_APIS;

typedef struct _WINDBG_OLD_EXTENSION_APIS {
    ULONG                                  nSize;
    PWINDBG_OUTPUT_ROUTINE                 lpOutputRoutine;
    PWINDBG_GET_EXPRESSION                 lpGetExpressionRoutine;
    PWINDBG_GET_SYMBOL                     lpGetSymbolRoutine;
    PWINDBG_DISASM                         lpDisasmRoutine;
    PWINDBG_CHECK_CONTROL_C                lpCheckControlCRoutine;
} WINDBG_OLD_EXTENSION_APIS, *PWINDBG_OLD_EXTENSION_APIS;

typedef struct _WINDBG_OLDKD_EXTENSION_APIS {
    ULONG                                  nSize;
    PWINDBG_OUTPUT_ROUTINE                 lpOutputRoutine;
    PWINDBG_GET_EXPRESSION                 lpGetExpressionRoutine;
    PWINDBG_GET_SYMBOL                     lpGetSymbolRoutine;
    PWINDBG_DISASM                         lpDisasmRoutine;
    PWINDBG_CHECK_CONTROL_C                lpCheckControlCRoutine;
    PWINDBG_READ_PROCESS_MEMORY_ROUTINE    lpReadVirtualMemRoutine;
    PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE   lpWriteVirtualMemRoutine;
    PWINDBG_OLDKD_READ_PHYSICAL_MEMORY     lpReadPhysicalMemRoutine;
    PWINDBG_OLDKD_WRITE_PHYSICAL_MEMORY    lpWritePhysicalMemRoutine;
} WINDBG_OLDKD_EXTENSION_APIS, *PWINDBG_OLDKD_EXTENSION_APIS;

typedef
void
(__stdcall*PWINDBG_OLD_EXTENSION_ROUTINE)(
    HANDLE                  hCurrentProcess,
    HANDLE                  hCurrentThread,
    ULONG                   dwCurrentPc,
    PWINDBG_EXTENSION_APIS  lpExtensionApis,
    PCSTR                   lpArgumentString
    );

typedef
void
(__stdcall*PWINDBG_EXTENSION_ROUTINE)(
    HANDLE                  hCurrentProcess,
    HANDLE                  hCurrentThread,
    ULONG                   dwCurrentPc,
    ULONG                   dwProcessor,
    PCSTR                   lpArgumentString
    );

typedef
void
(__stdcall*PWINDBG_OLDKD_EXTENSION_ROUTINE)(
    ULONG                        dwCurrentPc,
    PWINDBG_OLDKD_EXTENSION_APIS lpExtensionApis,
    PCSTR                        lpArgumentString
    );

typedef
void
(__stdcall*PWINDBG_EXTENSION_DLL_INIT)(
    PWINDBG_EXTENSION_APIS lpExtensionApis,
    USHORT                 MajorVersion,
    USHORT                 MinorVersion
    );

typedef
ULONG
(__stdcall*PWINDBG_CHECK_VERSION)(
    void
    );



typedef struct EXT_API_VERSION {
    USHORT  MajorVersion;
    USHORT  MinorVersion;
    USHORT  Revision;
    USHORT  Reserved;
} EXT_API_VERSION, *LPEXT_API_VERSION;

typedef
LPEXT_API_VERSION
(__stdcall*PWINDBG_EXTENSION_API_VERSION)(
    void
    );















typedef struct _tagPROCESSORINFO {
    USHORT      Processor;                
    USHORT      NumberProcessors;         
} PROCESSORINFO, *PPROCESSORINFO;

typedef struct _tagREADCONTROLSPACE {
    USHORT      Processor;
    ULONG       Address;
    ULONG       BufLen;
    UCHAR       Buf[1];
} READCONTROLSPACE, *PREADCONTROLSPACE;

typedef struct _tagIOSPACE {
    ULONG       Address;
    ULONG       Length;                   
    ULONG       Data;
} IOSPACE, *PIOSPACE;

typedef struct _tagIOSPACE_EX {
    ULONG       Address;
    ULONG       Length;                   
    ULONG       Data;
    ULONG       InterfaceType;
    ULONG       BusNumber;
    ULONG       AddressSpace;
} IOSPACE_EX, *PIOSPACE_EX;

typedef struct _tagPHYSICAL {
    LARGE_INTEGER          Address;
    ULONG                  BufLen;
    UCHAR                  Buf[1];
} PHYSICAL, *PPHYSICAL;

typedef struct _tagREAD_WRITE_MSR {
    ULONG       Msr;
    LONGLONG    Value;
} READ_WRITE_MSR, *PREAD_WRITE_MSR;






























































































































































































































